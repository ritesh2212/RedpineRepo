LLVM module before optimizations:
; ModuleID = 'libjit.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"struct.(anonymous namespace)::value_index" = type { i64, float }
%"struct.(anonymous namespace)::value_index.1" = type { i64, i8 }
%"struct.std::chrono::duration" = type { i64 }
%"struct.std::chrono::time_point" = type { %"struct.std::chrono::duration" }
%"struct.(anonymous namespace)::Box" = type { float, float, float, float }
%class.anon = type { i8 }
%"struct.(anonymous namespace)::OutBox" = type { float, i64, i64, i64 }
%"struct.(anonymous namespace)::ClassBox" = type { float, i64 }
%"struct.__gnu_cxx::__ops::_Iter_comp_iter" = type { %class.anon }

$_ZSt3powff = comdat any

$_ZSt3logf = comdat any

$_ZSt3expf = comdat any

$_Z18libjit_scale_i32i8iiiii = comdat any

$_Z11libjit_clipi = comdat any

$_ZSt5isnanf = comdat any

$_Z16libjit_getXYZWQRPKmmmmmmm = comdat any

$_ZNSt14numeric_limitsIfE3maxEv = comdat any

$_ZSt3minIfERKT_S2_S2_ = comdat any

$_ZNSt14numeric_limitsIiE3maxEv = comdat any

$_ZSt3minIiERKT_S2_S2_ = comdat any

$_ZNSt14numeric_limitsIlE3maxEv = comdat any

$_ZSt3minIlERKT_S2_S2_ = comdat any

$_Z12libjit_getXYPKmmm = comdat any

$_Z14libjit_getXYZWPKmmmmm = comdat any

$_ZSt5floorf = comdat any

$_ZSt4ceilf = comdat any

$_Z15libjit_getXYZWQPKmmmmmm = comdat any

$_Z13libjit_getXYZPKmmmm = comdat any

$_ZNKSt6chrono10time_pointINS_3_V212steady_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEE16time_since_epochEv = comdat any

$_ZNSt6chrono13duration_castINS_8durationIlSt5ratioILl1ELl1000000EEEElS2_ILl1ELl1000000000EEEENSt9enable_ifIXsr13__is_durationIT_EE5valueES7_E4typeERKNS1_IT0_T1_EE = comdat any

$_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000EEE5countEv = comdat any

$_ZNSt6chrono20__duration_cast_implINS_8durationIlSt5ratioILl1ELl1000000EEEES2_ILl1ELl1000EElLb1ELb0EE6__castIlS2_ILl1ELl1000000000EEEES4_RKNS1_IT_T0_EE = comdat any

$_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv = comdat any

$_ZNSt6chrono8durationIlSt5ratioILl1ELl1000000EEEC2IlvEERKT_ = comdat any

$_ZSt5roundf = comdat any

$_ZSt4__lgl = comdat any

$_Z11LoaduFloat8PKf = comdat any

$_Z10AdduFloat8PfDv8_f = comdat any

$_Z12StoreuFloat8PfDv8_f = comdat any

@libjit_sizeTVar = dso_local global i64 0, align 8
@libjit_dimTVar = dso_local global i64 0, align 8
@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.1 = private unnamed_addr constant [52 x i8] c"Dumping this type of payload is not supported: %zu\0A\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [29 x i8] c"[ Scalar containing: %.3f ]\0A\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"shape: ( \00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"%zu \00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.9 = private unnamed_addr constant [17 x i8] c"[ Zero tensor ]\0A\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"max: %.3f  min: %.3f\0A\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"%.3f\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"...\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"destBinToVerify <= destBin + 2\00", align 1
@.str.4 = private unnamed_addr constant [53 x i8] c"/home/ritesh/glow/lib/Backends/CPU/libjit/libjit.cpp\00", align 1
@__PRETTY_FUNCTION__.libjit_quantization_profile = private unnamed_addr constant [76 x i8] c"void libjit_quantization_profile(float *, dim_t, float *, float *, dim_t *)\00", align 1
@.str.19 = private unnamed_addr constant [121 x i8] c"scoresTensorDims[scoresBoxDim] == boxTensorDims[boxesBoxDim] && \22Mismatch between number of scores and number of boxes.\22\00", align 1
@__PRETTY_FUNCTION__._ZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S2_PKfPKmmS4_S6_mS6_mjjffb = private unnamed_addr constant [227 x i8] c"void (anonymous namespace)::libjit_nms_generic(T *, T *, const float *, const size_t *, size_t, const float *, const size_t *, size_t, const size_t *, size_t, unsigned int, unsigned int, float, float, bool) [T = unsigned long]\00", align 1
@.str.21 = private unnamed_addr constant [115 x i8] c"scoresTensorDims[scoresBatchDim] == boxTensorDims[boxesBatchDim] && \22Scores and Box Batch Dimensions don't match.\22\00", align 1
@__PRETTY_FUNCTION__._ZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S2_PKfPKmmS4_S6_mS6_mjjffb = private unnamed_addr constant [217 x i8] c"void (anonymous namespace)::libjit_nms_generic(T *, T *, const float *, const size_t *, size_t, const float *, const size_t *, size_t, const size_t *, size_t, unsigned int, unsigned int, float, float, bool) [T = int]\00", align 1
@0 = internal constant [4 x i64] [i64 1, i64 28, i64 28, i64 6]
@1 = internal constant [4 x i64] [i64 1, i64 28, i64 28, i64 1]
@2 = internal constant [4 x i64] [i64 6, i64 5, i64 5, i64 1]
@3 = internal constant [1 x i64] [i64 6]
@4 = internal constant [2 x i64] [i64 5, i64 5]
@5 = internal constant [2 x i64] [i64 1, i64 1]
@6 = internal constant [4 x i64] [i64 2, i64 2, i64 2, i64 2]
@7 = internal constant [4 x i64] [i64 1, i64 14, i64 14, i64 6]
@8 = internal constant [2 x i64] [i64 2, i64 2]
@9 = internal constant [4 x i64] zeroinitializer
@10 = internal constant [4 x i64] [i64 1, i64 10, i64 10, i64 16]
@11 = internal constant [4 x i64] [i64 16, i64 5, i64 5, i64 6]
@12 = internal constant [1 x i64] [i64 16]
@13 = internal constant [4 x i64] [i64 1, i64 5, i64 5, i64 16]
@14 = internal constant [2 x i64] [i64 1, i64 120]
@15 = internal constant [2 x i64] [i64 1, i64 400]
@16 = internal constant [2 x i64] [i64 400, i64 120]
@17 = internal constant [2 x i64] [i64 1, i64 84]
@18 = internal constant [2 x i64] [i64 120, i64 84]
@19 = internal constant [2 x i64] [i64 1, i64 10]
@20 = internal constant [2 x i64] [i64 84, i64 10]
@offsetsArray = internal constant [20 x i64] [i64 0, i64 64, i64 128, i64 640, i64 1024, i64 1088, i64 1728, i64 11328, i64 51648, i64 55040, i64 0, i64 3136, i64 0, i64 0, i64 18816, i64 0, i64 6400, i64 6400, i64 0, i64 512]

; Function Attrs: noinline nounwind optnone uwtable
define dso_local float @libjit_elementmax_kernel_f(i64, float*, float*, float*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  store i64 %0, i64* %5, align 8
  store float* %1, float** %6, align 8
  store float* %2, float** %7, align 8
  store float* %3, float** %8, align 8
  %9 = load float*, float** %6, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds float, float* %9, i64 %10
  %12 = load float, float* %11, align 4
  %13 = load float*, float** %7, align 8
  %14 = load i64, i64* %5, align 8
  %15 = getelementptr inbounds float, float* %13, i64 %14
  %16 = load float, float* %15, align 4
  %17 = fcmp reassoc nsz arcp ogt float %12, %16
  br i1 %17, label %18, label %23

; <label>:18:                                     ; preds = %4
  %19 = load float*, float** %6, align 8
  %20 = load i64, i64* %5, align 8
  %21 = getelementptr inbounds float, float* %19, i64 %20
  %22 = load float, float* %21, align 4
  br label %28

; <label>:23:                                     ; preds = %4
  %24 = load float*, float** %7, align 8
  %25 = load i64, i64* %5, align 8
  %26 = getelementptr inbounds float, float* %24, i64 %25
  %27 = load float, float* %26, align 4
  br label %28

; <label>:28:                                     ; preds = %23, %18
  %29 = phi float [ %22, %18 ], [ %27, %23 ]
  ret float %29
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local float @libjit_elementmin_kernel_f(i64, float*, float*, float*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  store i64 %0, i64* %5, align 8
  store float* %1, float** %6, align 8
  store float* %2, float** %7, align 8
  store float* %3, float** %8, align 8
  %9 = load float*, float** %6, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds float, float* %9, i64 %10
  %12 = load float, float* %11, align 4
  %13 = load float*, float** %7, align 8
  %14 = load i64, i64* %5, align 8
  %15 = getelementptr inbounds float, float* %13, i64 %14
  %16 = load float, float* %15, align 4
  %17 = fcmp reassoc nsz arcp olt float %12, %16
  br i1 %17, label %18, label %23

; <label>:18:                                     ; preds = %4
  %19 = load float*, float** %6, align 8
  %20 = load i64, i64* %5, align 8
  %21 = getelementptr inbounds float, float* %19, i64 %20
  %22 = load float, float* %21, align 4
  br label %28

; <label>:23:                                     ; preds = %4
  %24 = load float*, float** %7, align 8
  %25 = load i64, i64* %5, align 8
  %26 = getelementptr inbounds float, float* %24, i64 %25
  %27 = load float, float* %26, align 4
  br label %28

; <label>:28:                                     ; preds = %23, %18
  %29 = phi float [ %22, %18 ], [ %27, %23 ]
  ret float %29
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local float @libjit_copy_kernel_f(i64, float*, float*, float*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  store i64 %0, i64* %5, align 8
  store float* %1, float** %6, align 8
  store float* %2, float** %7, align 8
  store float* %3, float** %8, align 8
  %9 = load float*, float** %6, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds float, float* %9, i64 %10
  %12 = load float, float* %11, align 4
  ret float %12
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @libjit_copy_kernel_u(i64, i64*, i64*, i64*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  store i64 %0, i64* %5, align 8
  store i64* %1, i64** %6, align 8
  store i64* %2, i64** %7, align 8
  store i64* %3, i64** %8, align 8
  %9 = load i64*, i64** %6, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds i64, i64* %9, i64 %10
  %12 = load i64, i64* %11, align 8
  ret i64 %12
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i8 @libjit_copy_kernel_i8(i64, i8*, i8*, i8*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  store i64 %0, i64* %5, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  store i8* %3, i8** %8, align 8
  %9 = load i8*, i8** %6, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds i8, i8* %9, i64 %10
  %12 = load i8, i8* %11, align 1
  ret i8 %12
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @libjit_copy_kernel_i32(i64, i32*, i32*, i32*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i64 %0, i64* %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds i32, i32* %9, i64 %10
  %12 = load i32, i32* %11, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i8 @libjit_copy_kernel_b(i64, i8*, i8*, i8*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  store i64 %0, i64* %5, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  store i8* %3, i8** %8, align 8
  %9 = load i8*, i8** %6, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds i8, i8* %9, i64 %10
  %12 = load i8, i8* %11, align 1
  ret i8 %12
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local float @libjit_element_add_kernel_f(i64, float*, float*, float*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  store i64 %0, i64* %5, align 8
  store float* %1, float** %6, align 8
  store float* %2, float** %7, align 8
  store float* %3, float** %8, align 8
  %9 = load float*, float** %6, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds float, float* %9, i64 %10
  %12 = load float, float* %11, align 4
  %13 = load float*, float** %7, align 8
  %14 = load i64, i64* %5, align 8
  %15 = getelementptr inbounds float, float* %13, i64 %14
  %16 = load float, float* %15, align 4
  %17 = fadd reassoc nsz arcp contract float %12, %16
  ret float %17
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local float @libjit_element_sub_kernel_f(i64, float*, float*, float*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  store i64 %0, i64* %5, align 8
  store float* %1, float** %6, align 8
  store float* %2, float** %7, align 8
  store float* %3, float** %8, align 8
  %9 = load float*, float** %6, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds float, float* %9, i64 %10
  %12 = load float, float* %11, align 4
  %13 = load float*, float** %7, align 8
  %14 = load i64, i64* %5, align 8
  %15 = getelementptr inbounds float, float* %13, i64 %14
  %16 = load float, float* %15, align 4
  %17 = fsub reassoc nsz arcp contract float %12, %16
  ret float %17
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local float @libjit_element_div_kernel_f(i64, float*, float*, float*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  store i64 %0, i64* %5, align 8
  store float* %1, float** %6, align 8
  store float* %2, float** %7, align 8
  store float* %3, float** %8, align 8
  %9 = load float*, float** %6, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds float, float* %9, i64 %10
  %12 = load float, float* %11, align 4
  %13 = load float*, float** %7, align 8
  %14 = load i64, i64* %5, align 8
  %15 = getelementptr inbounds float, float* %13, i64 %14
  %16 = load float, float* %15, align 4
  %17 = fdiv reassoc nsz arcp float %12, %16
  ret float %17
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @libjit_element_div_kernel_u(i64, i64*, i64*, i64*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  store i64 %0, i64* %5, align 8
  store i64* %1, i64** %6, align 8
  store i64* %2, i64** %7, align 8
  store i64* %3, i64** %8, align 8
  %9 = load i64*, i64** %6, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds i64, i64* %9, i64 %10
  %12 = load i64, i64* %11, align 8
  %13 = load i64*, i64** %7, align 8
  %14 = load i64, i64* %5, align 8
  %15 = getelementptr inbounds i64, i64* %13, i64 %14
  %16 = load i64, i64* %15, align 8
  %17 = sdiv i64 %12, %16
  ret i64 %17
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local float @libjit_element_mul_kernel_f(i64, float*, float*, float*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  store i64 %0, i64* %5, align 8
  store float* %1, float** %6, align 8
  store float* %2, float** %7, align 8
  store float* %3, float** %8, align 8
  %9 = load float*, float** %6, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds float, float* %9, i64 %10
  %12 = load float, float* %11, align 4
  %13 = load float*, float** %7, align 8
  %14 = load i64, i64* %5, align 8
  %15 = getelementptr inbounds float, float* %13, i64 %14
  %16 = load float, float* %15, align 4
  %17 = fmul reassoc nsz arcp contract float %12, %16
  ret float %17
}

; Function Attrs: noinline optnone uwtable
define dso_local float @libjit_element_pow_kernel_f(i64, float*, float*, float*) #2 {
  %5 = alloca i64, align 8
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  store i64 %0, i64* %5, align 8
  store float* %1, float** %6, align 8
  store float* %2, float** %7, align 8
  store float* %3, float** %8, align 8
  %9 = load float*, float** %6, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds float, float* %9, i64 %10
  %12 = load float, float* %11, align 4
  %13 = load float*, float** %7, align 8
  %14 = load i64, i64* %5, align 8
  %15 = getelementptr inbounds float, float* %13, i64 %14
  %16 = load float, float* %15, align 4
  %17 = call reassoc nsz arcp float @_ZSt3powff(float %12, float %16)
  ret float %17
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZSt3powff(float, float) #0 comdat {
  %3 = alloca float, align 4
  %4 = alloca float, align 4
  store float %0, float* %3, align 4
  store float %1, float* %4, align 4
  %5 = load float, float* %3, align 4
  %6 = load float, float* %4, align 4
  %7 = call reassoc nsz arcp float @llvm.pow.f32(float %5, float %6)
  ret float %7
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.pow.f32(float, float) #1

; Function Attrs: noinline optnone uwtable
define dso_local float @libjit_element_log_kernel_f(i64, float*, float*, float*) #2 {
  %5 = alloca i64, align 8
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  store i64 %0, i64* %5, align 8
  store float* %1, float** %6, align 8
  store float* %2, float** %7, align 8
  store float* %3, float** %8, align 8
  %9 = load float*, float** %6, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds float, float* %9, i64 %10
  %12 = load float, float* %11, align 4
  %13 = call reassoc nsz arcp float @_ZSt3logf(float %12)
  ret float %13
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZSt3logf(float) #0 comdat {
  %2 = alloca float, align 4
  store float %0, float* %2, align 4
  %3 = load float, float* %2, align 4
  %4 = call reassoc nsz arcp float @llvm.log.f32(float %3)
  ret float %4
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.log.f32(float) #1

; Function Attrs: noinline optnone uwtable
define dso_local float @libjit_element_exp_kernel_f(i64, float*, float*, float*) #2 {
  %5 = alloca i64, align 8
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  store i64 %0, i64* %5, align 8
  store float* %1, float** %6, align 8
  store float* %2, float** %7, align 8
  store float* %3, float** %8, align 8
  %9 = load float*, float** %6, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds float, float* %9, i64 %10
  %12 = load float, float* %11, align 4
  %13 = call reassoc nsz arcp float @_ZSt3expf(float %12)
  ret float %13
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZSt3expf(float) #0 comdat {
  %2 = alloca float, align 4
  store float %0, float* %2, align 4
  %3 = load float, float* %2, align 4
  %4 = call reassoc nsz arcp float @llvm.exp.f32(float %3)
  ret float %4
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.exp.f32(float) #1

; Function Attrs: noinline optnone uwtable
define dso_local signext i8 @libjit_element_add_kernel_i8(i64, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32) #2 {
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  store i64 %0, i64* %13, align 8
  store i8* %1, i8** %14, align 8
  store i8* %2, i8** %15, align 8
  store i32 %3, i32* %16, align 4
  store i32 %4, i32* %17, align 4
  store i32 %5, i32* %18, align 4
  store i32 %6, i32* %19, align 4
  store i32 %7, i32* %20, align 4
  store i32 %8, i32* %21, align 4
  store i32 %9, i32* %22, align 4
  store i32 %10, i32* %23, align 4
  store i32 %11, i32* %24, align 4
  %27 = load i8*, i8** %14, align 8
  %28 = load i64, i64* %13, align 8
  %29 = getelementptr inbounds i8, i8* %27, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = sext i8 %30 to i32
  %32 = load i32, i32* %17, align 4
  %33 = sub nsw i32 %31, %32
  %34 = load i32, i32* %19, align 4
  %35 = load i32, i32* %20, align 4
  %36 = load i32, i32* %21, align 4
  %37 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %33, i32 %34, i32 %35, i32 %36, i32 0)
  store i32 %37, i32* %25, align 4
  %38 = load i8*, i8** %15, align 8
  %39 = load i64, i64* %13, align 8
  %40 = getelementptr inbounds i8, i8* %38, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = sext i8 %41 to i32
  %43 = load i32, i32* %18, align 4
  %44 = sub nsw i32 %42, %43
  %45 = load i32, i32* %22, align 4
  %46 = load i32, i32* %23, align 4
  %47 = load i32, i32* %24, align 4
  %48 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %44, i32 %45, i32 %46, i32 %47, i32 0)
  store i32 %48, i32* %26, align 4
  %49 = load i32, i32* %25, align 4
  %50 = load i32, i32* %26, align 4
  %51 = add nsw i32 %49, %50
  %52 = load i32, i32* %16, align 4
  %53 = add nsw i32 %51, %52
  %54 = call signext i8 @_Z11libjit_clipi(i32 %53)
  ret i8 %54
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local i32 @_Z18libjit_scale_i32i8iiiii(i32, i32, i32, i32, i32) #0 comdat {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i32 %4, i32* %10, align 4
  %12 = load i32, i32* %8, align 4
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %18

; <label>:14:                                     ; preds = %5
  %15 = load i32, i32* %8, align 4
  %16 = sub nsw i32 %15, 1
  %17 = shl i32 1, %16
  br label %19

; <label>:18:                                     ; preds = %5
  br label %19

; <label>:19:                                     ; preds = %18, %14
  %20 = phi i32 [ %17, %14 ], [ 0, %18 ]
  store i32 %20, i32* %11, align 4
  %21 = load i32, i32* %6, align 4
  %22 = load i32, i32* %7, align 4
  %23 = ashr i32 %21, %22
  %24 = load i32, i32* %9, align 4
  %25 = mul nsw i32 %23, %24
  %26 = load i32, i32* %11, align 4
  %27 = add nsw i32 %25, %26
  %28 = load i32, i32* %8, align 4
  %29 = ashr i32 %27, %28
  %30 = load i32, i32* %10, align 4
  %31 = add nsw i32 %29, %30
  ret i32 %31
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local signext i8 @_Z11libjit_clipi(i32) #0 comdat {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = icmp sgt i32 %3, -128
  br i1 %4, label %5, label %7

; <label>:5:                                      ; preds = %1
  %6 = load i32, i32* %2, align 4
  br label %8

; <label>:7:                                      ; preds = %1
  br label %8

; <label>:8:                                      ; preds = %7, %5
  %9 = phi i32 [ %6, %5 ], [ -128, %7 ]
  %10 = icmp slt i32 %9, 127
  br i1 %10, label %11, label %19

; <label>:11:                                     ; preds = %8
  %12 = load i32, i32* %2, align 4
  %13 = icmp sgt i32 %12, -128
  br i1 %13, label %14, label %16

; <label>:14:                                     ; preds = %11
  %15 = load i32, i32* %2, align 4
  br label %17

; <label>:16:                                     ; preds = %11
  br label %17

; <label>:17:                                     ; preds = %16, %14
  %18 = phi i32 [ %15, %14 ], [ -128, %16 ]
  br label %20

; <label>:19:                                     ; preds = %8
  br label %20

; <label>:20:                                     ; preds = %19, %17
  %21 = phi i32 [ %18, %17 ], [ 127, %19 ]
  %22 = trunc i32 %21 to i8
  ret i8 %22
}

; Function Attrs: noinline optnone uwtable
define dso_local signext i8 @libjit_element_sub_kernel_i8(i64, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32) #2 {
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  store i64 %0, i64* %13, align 8
  store i8* %1, i8** %14, align 8
  store i8* %2, i8** %15, align 8
  store i32 %3, i32* %16, align 4
  store i32 %4, i32* %17, align 4
  store i32 %5, i32* %18, align 4
  store i32 %6, i32* %19, align 4
  store i32 %7, i32* %20, align 4
  store i32 %8, i32* %21, align 4
  store i32 %9, i32* %22, align 4
  store i32 %10, i32* %23, align 4
  store i32 %11, i32* %24, align 4
  %27 = load i8*, i8** %14, align 8
  %28 = load i64, i64* %13, align 8
  %29 = getelementptr inbounds i8, i8* %27, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = sext i8 %30 to i32
  %32 = load i32, i32* %17, align 4
  %33 = sub nsw i32 %31, %32
  %34 = load i32, i32* %19, align 4
  %35 = load i32, i32* %20, align 4
  %36 = load i32, i32* %21, align 4
  %37 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %33, i32 %34, i32 %35, i32 %36, i32 0)
  store i32 %37, i32* %25, align 4
  %38 = load i8*, i8** %15, align 8
  %39 = load i64, i64* %13, align 8
  %40 = getelementptr inbounds i8, i8* %38, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = sext i8 %41 to i32
  %43 = load i32, i32* %18, align 4
  %44 = sub nsw i32 %42, %43
  %45 = load i32, i32* %22, align 4
  %46 = load i32, i32* %23, align 4
  %47 = load i32, i32* %24, align 4
  %48 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %44, i32 %45, i32 %46, i32 %47, i32 0)
  store i32 %48, i32* %26, align 4
  %49 = load i32, i32* %25, align 4
  %50 = load i32, i32* %26, align 4
  %51 = sub nsw i32 %49, %50
  %52 = load i32, i32* %16, align 4
  %53 = add nsw i32 %51, %52
  %54 = call signext i8 @_Z11libjit_clipi(i32 %53)
  ret i8 %54
}

; Function Attrs: noinline optnone uwtable
define dso_local signext i8 @libjit_elementmax_kernel_i8(i64, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32) #2 {
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  store i64 %0, i64* %13, align 8
  store i8* %1, i8** %14, align 8
  store i8* %2, i8** %15, align 8
  store i32 %3, i32* %16, align 4
  store i32 %4, i32* %17, align 4
  store i32 %5, i32* %18, align 4
  store i32 %6, i32* %19, align 4
  store i32 %7, i32* %20, align 4
  store i32 %8, i32* %21, align 4
  store i32 %9, i32* %22, align 4
  store i32 %10, i32* %23, align 4
  store i32 %11, i32* %24, align 4
  %27 = load i8*, i8** %14, align 8
  %28 = load i64, i64* %13, align 8
  %29 = getelementptr inbounds i8, i8* %27, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = sext i8 %30 to i32
  %32 = load i32, i32* %17, align 4
  %33 = sub nsw i32 %31, %32
  %34 = load i32, i32* %19, align 4
  %35 = load i32, i32* %20, align 4
  %36 = load i32, i32* %21, align 4
  %37 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %33, i32 %34, i32 %35, i32 %36, i32 0)
  store i32 %37, i32* %25, align 4
  %38 = load i8*, i8** %15, align 8
  %39 = load i64, i64* %13, align 8
  %40 = getelementptr inbounds i8, i8* %38, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = sext i8 %41 to i32
  %43 = load i32, i32* %18, align 4
  %44 = sub nsw i32 %42, %43
  %45 = load i32, i32* %22, align 4
  %46 = load i32, i32* %23, align 4
  %47 = load i32, i32* %24, align 4
  %48 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %44, i32 %45, i32 %46, i32 %47, i32 0)
  store i32 %48, i32* %26, align 4
  %49 = load i32, i32* %25, align 4
  %50 = load i32, i32* %26, align 4
  %51 = icmp sgt i32 %49, %50
  br i1 %51, label %52, label %54

; <label>:52:                                     ; preds = %12
  %53 = load i32, i32* %25, align 4
  br label %56

; <label>:54:                                     ; preds = %12
  %55 = load i32, i32* %26, align 4
  br label %56

; <label>:56:                                     ; preds = %54, %52
  %57 = phi i32 [ %53, %52 ], [ %55, %54 ]
  %58 = load i32, i32* %16, align 4
  %59 = add nsw i32 %57, %58
  %60 = call signext i8 @_Z11libjit_clipi(i32 %59)
  ret i8 %60
}

; Function Attrs: noinline optnone uwtable
define dso_local signext i8 @libjit_elementmin_kernel_i8(i64, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32) #2 {
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  store i64 %0, i64* %13, align 8
  store i8* %1, i8** %14, align 8
  store i8* %2, i8** %15, align 8
  store i32 %3, i32* %16, align 4
  store i32 %4, i32* %17, align 4
  store i32 %5, i32* %18, align 4
  store i32 %6, i32* %19, align 4
  store i32 %7, i32* %20, align 4
  store i32 %8, i32* %21, align 4
  store i32 %9, i32* %22, align 4
  store i32 %10, i32* %23, align 4
  store i32 %11, i32* %24, align 4
  %27 = load i8*, i8** %14, align 8
  %28 = load i64, i64* %13, align 8
  %29 = getelementptr inbounds i8, i8* %27, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = sext i8 %30 to i32
  %32 = load i32, i32* %17, align 4
  %33 = sub nsw i32 %31, %32
  %34 = load i32, i32* %19, align 4
  %35 = load i32, i32* %20, align 4
  %36 = load i32, i32* %21, align 4
  %37 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %33, i32 %34, i32 %35, i32 %36, i32 0)
  store i32 %37, i32* %25, align 4
  %38 = load i8*, i8** %15, align 8
  %39 = load i64, i64* %13, align 8
  %40 = getelementptr inbounds i8, i8* %38, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = sext i8 %41 to i32
  %43 = load i32, i32* %18, align 4
  %44 = sub nsw i32 %42, %43
  %45 = load i32, i32* %22, align 4
  %46 = load i32, i32* %23, align 4
  %47 = load i32, i32* %24, align 4
  %48 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %44, i32 %45, i32 %46, i32 %47, i32 0)
  store i32 %48, i32* %26, align 4
  %49 = load i32, i32* %25, align 4
  %50 = load i32, i32* %26, align 4
  %51 = icmp slt i32 %49, %50
  br i1 %51, label %52, label %54

; <label>:52:                                     ; preds = %12
  %53 = load i32, i32* %25, align 4
  br label %56

; <label>:54:                                     ; preds = %12
  %55 = load i32, i32* %26, align 4
  br label %56

; <label>:56:                                     ; preds = %54, %52
  %57 = phi i32 [ %53, %52 ], [ %55, %54 ]
  %58 = load i32, i32* %16, align 4
  %59 = add nsw i32 %57, %58
  %60 = call signext i8 @_Z11libjit_clipi(i32 %59)
  ret i8 %60
}

; Function Attrs: noinline optnone uwtable
define dso_local signext i8 @libjit_element_mul_kernel_i8(i64, i8*, i8*, i32, i32, i32, i32, i32, i32) #2 {
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  store i64 %0, i64* %10, align 8
  store i8* %1, i8** %11, align 8
  store i8* %2, i8** %12, align 8
  store i32 %3, i32* %13, align 4
  store i32 %4, i32* %14, align 4
  store i32 %5, i32* %15, align 4
  store i32 %6, i32* %16, align 4
  store i32 %7, i32* %17, align 4
  store i32 %8, i32* %18, align 4
  %21 = load i8*, i8** %11, align 8
  %22 = load i64, i64* %10, align 8
  %23 = getelementptr inbounds i8, i8* %21, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = sext i8 %24 to i32
  %26 = load i32, i32* %14, align 4
  %27 = sub nsw i32 %25, %26
  store i32 %27, i32* %19, align 4
  %28 = load i8*, i8** %12, align 8
  %29 = load i64, i64* %10, align 8
  %30 = getelementptr inbounds i8, i8* %28, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = sext i8 %31 to i32
  %33 = load i32, i32* %15, align 4
  %34 = sub nsw i32 %32, %33
  store i32 %34, i32* %20, align 4
  %35 = load i32, i32* %19, align 4
  %36 = load i32, i32* %20, align 4
  %37 = mul nsw i32 %35, %36
  %38 = load i32, i32* %16, align 4
  %39 = load i32, i32* %17, align 4
  %40 = load i32, i32* %18, align 4
  %41 = load i32, i32* %13, align 4
  %42 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %37, i32 %38, i32 %39, i32 %40, i32 %41)
  %43 = call signext i8 @_Z11libjit_clipi(i32 %42)
  ret i8 %43
}

; Function Attrs: noinline optnone uwtable
define dso_local signext i8 @libjit_element_div_kernel_i8(i64, i8*, i8*, i32, i32, i32, i32, i32, i32) #2 {
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  store i64 %0, i64* %10, align 8
  store i8* %1, i8** %11, align 8
  store i8* %2, i8** %12, align 8
  store i32 %3, i32* %13, align 4
  store i32 %4, i32* %14, align 4
  store i32 %5, i32* %15, align 4
  store i32 %6, i32* %16, align 4
  store i32 %7, i32* %17, align 4
  store i32 %8, i32* %18, align 4
  %21 = load i8*, i8** %11, align 8
  %22 = load i64, i64* %10, align 8
  %23 = getelementptr inbounds i8, i8* %21, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = sext i8 %24 to i32
  %26 = load i32, i32* %14, align 4
  %27 = sub nsw i32 %25, %26
  store i32 %27, i32* %19, align 4
  %28 = load i8*, i8** %12, align 8
  %29 = load i64, i64* %10, align 8
  %30 = getelementptr inbounds i8, i8* %28, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = sext i8 %31 to i32
  %33 = load i32, i32* %15, align 4
  %34 = sub nsw i32 %32, %33
  store i32 %34, i32* %20, align 4
  %35 = load i32, i32* %19, align 4
  %36 = load i32, i32* %20, align 4
  %37 = sdiv i32 %35, %36
  %38 = load i32, i32* %16, align 4
  %39 = load i32, i32* %17, align 4
  %40 = load i32, i32* %18, align 4
  %41 = load i32, i32* %13, align 4
  %42 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %37, i32 %38, i32 %39, i32 %40, i32 %41)
  %43 = call signext i8 @_Z11libjit_clipi(i32 %42)
  ret i8 %43
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @libjit_element_modulo_kernel_sign_follow_u(i64, i64, i64*) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  store i64* %2, i64** %6, align 8
  %8 = load i64*, i64** %6, align 8
  %9 = load i64, i64* %4, align 8
  %10 = getelementptr inbounds i64, i64* %8, i64 %9
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* %5, align 8
  %13 = srem i64 %11, %12
  store i64 %13, i64* %7, align 8
  %14 = load i64, i64* %7, align 8
  %15 = icmp ne i64 %14, 0
  br i1 %15, label %16, label %28

; <label>:16:                                     ; preds = %3
  %17 = load i64, i64* %7, align 8
  %18 = icmp sgt i64 %17, 0
  %19 = zext i1 %18 to i32
  %20 = load i64, i64* %5, align 8
  %21 = icmp sgt i64 %20, 0
  %22 = zext i1 %21 to i32
  %23 = icmp ne i32 %19, %22
  br i1 %23, label %24, label %28

; <label>:24:                                     ; preds = %16
  %25 = load i64, i64* %5, align 8
  %26 = load i64, i64* %7, align 8
  %27 = add nsw i64 %26, %25
  store i64 %27, i64* %7, align 8
  br label %28

; <label>:28:                                     ; preds = %24, %16, %3
  %29 = load i64, i64* %7, align 8
  ret i64 %29
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @libjit_element_modulo_kernel_no_sign_follow_u(i64, i64, i64*) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64*, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  store i64* %2, i64** %6, align 8
  %7 = load i64*, i64** %6, align 8
  %8 = load i64, i64* %4, align 8
  %9 = getelementptr inbounds i64, i64* %7, i64 %8
  %10 = load i64, i64* %9, align 8
  %11 = load i64, i64* %5, align 8
  %12 = srem i64 %10, %11
  ret i64 %12
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @libjit_element_modulo_kernel_sign_follow_i32(i64, i64, i32*) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  store i32* %2, i32** %6, align 8
  %8 = load i32*, i32** %6, align 8
  %9 = load i64, i64* %4, align 8
  %10 = getelementptr inbounds i32, i32* %8, i64 %9
  %11 = load i32, i32* %10, align 4
  %12 = sext i32 %11 to i64
  %13 = load i64, i64* %5, align 8
  %14 = srem i64 %12, %13
  %15 = trunc i64 %14 to i32
  store i32 %15, i32* %7, align 4
  %16 = load i32, i32* %7, align 4
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %18, label %32

; <label>:18:                                     ; preds = %3
  %19 = load i32, i32* %7, align 4
  %20 = icmp sgt i32 %19, 0
  %21 = zext i1 %20 to i32
  %22 = load i64, i64* %5, align 8
  %23 = icmp sgt i64 %22, 0
  %24 = zext i1 %23 to i32
  %25 = icmp ne i32 %21, %24
  br i1 %25, label %26, label %32

; <label>:26:                                     ; preds = %18
  %27 = load i64, i64* %5, align 8
  %28 = load i32, i32* %7, align 4
  %29 = sext i32 %28 to i64
  %30 = add nsw i64 %29, %27
  %31 = trunc i64 %30 to i32
  store i32 %31, i32* %7, align 4
  br label %32

; <label>:32:                                     ; preds = %26, %18, %3
  %33 = load i32, i32* %7, align 4
  ret i32 %33
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @libjit_element_modulo_kernel_no_sign_follow_i32(i64, i64, i32*) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32*, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  store i32* %2, i32** %6, align 8
  %7 = load i32*, i32** %6, align 8
  %8 = load i64, i64* %4, align 8
  %9 = getelementptr inbounds i32, i32* %7, i64 %8
  %10 = load i32, i32* %9, align 4
  %11 = sext i32 %10 to i64
  %12 = load i64, i64* %5, align 8
  %13 = srem i64 %11, %12
  %14 = trunc i64 %13 to i32
  ret i32 %14
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i8 @libjit_element_cmp_eq_kernel_u(i64, i64*, i64*) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  store i64 %0, i64* %4, align 8
  store i64* %1, i64** %5, align 8
  store i64* %2, i64** %6, align 8
  %7 = load i64*, i64** %5, align 8
  %8 = load i64, i64* %4, align 8
  %9 = getelementptr inbounds i64, i64* %7, i64 %8
  %10 = load i64, i64* %9, align 8
  %11 = load i64*, i64** %6, align 8
  %12 = load i64, i64* %4, align 8
  %13 = getelementptr inbounds i64, i64* %11, i64 %12
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %10, %14
  %16 = zext i1 %15 to i64
  %17 = select i1 %15, i32 1, i32 0
  %18 = trunc i32 %17 to i8
  ret i8 %18
}

; Function Attrs: noinline optnone uwtable
define dso_local signext i8 @libjit_element_is_nan_kernel_f(i64, float*) #2 {
  %3 = alloca i64, align 8
  %4 = alloca float*, align 8
  store i64 %0, i64* %3, align 8
  store float* %1, float** %4, align 8
  %5 = load float*, float** %4, align 8
  %6 = load i64, i64* %3, align 8
  %7 = getelementptr inbounds float, float* %5, i64 %6
  %8 = load float, float* %7, align 4
  %9 = call zeroext i1 @_ZSt5isnanf(float %8)
  %10 = zext i1 %9 to i64
  %11 = select i1 %9, i32 1, i32 0
  %12 = trunc i32 %11 to i8
  ret i8 %12
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local zeroext i1 @_ZSt5isnanf(float) #0 comdat {
  %2 = alloca float, align 4
  store float %0, float* %2, align 4
  %3 = load float, float* %2, align 4
  %4 = fcmp reassoc nsz arcp uno float %3, %3
  ret i1 %4
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i8 @libjit_element_cmp_lte_kernel_f(i64, float*, float*) #0 {
  %4 = alloca i64, align 8
  %5 = alloca float*, align 8
  %6 = alloca float*, align 8
  store i64 %0, i64* %4, align 8
  store float* %1, float** %5, align 8
  store float* %2, float** %6, align 8
  %7 = load float*, float** %5, align 8
  %8 = load i64, i64* %4, align 8
  %9 = getelementptr inbounds float, float* %7, i64 %8
  %10 = load float, float* %9, align 4
  %11 = load float*, float** %6, align 8
  %12 = load i64, i64* %4, align 8
  %13 = getelementptr inbounds float, float* %11, i64 %12
  %14 = load float, float* %13, align 4
  %15 = fcmp reassoc nsz arcp ole float %10, %14
  %16 = zext i1 %15 to i64
  %17 = select i1 %15, i32 1, i32 0
  %18 = trunc i32 %17 to i8
  ret i8 %18
}

; Function Attrs: noinline optnone uwtable
define dso_local signext i8 @libjit_element_cmp_lte_kernel_i8(i64, i8*, i8*, i32, i32, i32, i32, i32) #2 {
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store i64 %0, i64* %9, align 8
  store i8* %1, i8** %10, align 8
  store i8* %2, i8** %11, align 8
  store i32 %3, i32* %12, align 4
  store i32 %4, i32* %13, align 4
  store i32 %5, i32* %14, align 4
  store i32 %6, i32* %15, align 4
  store i32 %7, i32* %16, align 4
  %19 = load i8*, i8** %10, align 8
  %20 = load i64, i64* %9, align 8
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = sext i8 %22 to i32
  %24 = load i32, i32* %12, align 4
  %25 = sub nsw i32 %23, %24
  store i32 %25, i32* %17, align 4
  %26 = load i8*, i8** %11, align 8
  %27 = load i64, i64* %9, align 8
  %28 = getelementptr inbounds i8, i8* %26, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = sext i8 %29 to i32
  %31 = load i32, i32* %13, align 4
  %32 = sub nsw i32 %30, %31
  store i32 %32, i32* %18, align 4
  %33 = load i32, i32* %17, align 4
  %34 = load i32, i32* %14, align 4
  %35 = load i32, i32* %15, align 4
  %36 = load i32, i32* %16, align 4
  %37 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %33, i32 %34, i32 %35, i32 %36, i32 0)
  %38 = load i32, i32* %18, align 4
  %39 = icmp sle i32 %37, %38
  %40 = zext i1 %39 to i64
  %41 = select i1 %39, i32 1, i32 0
  %42 = trunc i32 %41 to i8
  ret i8 %42
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i8 @libjit_element_cmp_lt_kernel_f(i64, float*, float*) #0 {
  %4 = alloca i64, align 8
  %5 = alloca float*, align 8
  %6 = alloca float*, align 8
  store i64 %0, i64* %4, align 8
  store float* %1, float** %5, align 8
  store float* %2, float** %6, align 8
  %7 = load float*, float** %5, align 8
  %8 = load i64, i64* %4, align 8
  %9 = getelementptr inbounds float, float* %7, i64 %8
  %10 = load float, float* %9, align 4
  %11 = load float*, float** %6, align 8
  %12 = load i64, i64* %4, align 8
  %13 = getelementptr inbounds float, float* %11, i64 %12
  %14 = load float, float* %13, align 4
  %15 = fcmp reassoc nsz arcp olt float %10, %14
  %16 = zext i1 %15 to i64
  %17 = select i1 %15, i32 1, i32 0
  %18 = trunc i32 %17 to i8
  ret i8 %18
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i8 @libjit_element_cmp_lt_kernel_i32(i64, i32*, i32*) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  store i64 %0, i64* %4, align 8
  store i32* %1, i32** %5, align 8
  store i32* %2, i32** %6, align 8
  %7 = load i32*, i32** %5, align 8
  %8 = load i64, i64* %4, align 8
  %9 = getelementptr inbounds i32, i32* %7, i64 %8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %6, align 8
  %12 = load i64, i64* %4, align 8
  %13 = getelementptr inbounds i32, i32* %11, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %10, %14
  %16 = zext i1 %15 to i64
  %17 = select i1 %15, i32 1, i32 0
  %18 = trunc i32 %17 to i8
  ret i8 %18
}

; Function Attrs: noinline optnone uwtable
define dso_local signext i8 @libjit_element_cmp_lt_kernel_i8(i64, i8*, i8*, i32, i32, i32, i32, i32) #2 {
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store i64 %0, i64* %9, align 8
  store i8* %1, i8** %10, align 8
  store i8* %2, i8** %11, align 8
  store i32 %3, i32* %12, align 4
  store i32 %4, i32* %13, align 4
  store i32 %5, i32* %14, align 4
  store i32 %6, i32* %15, align 4
  store i32 %7, i32* %16, align 4
  %19 = load i8*, i8** %10, align 8
  %20 = load i64, i64* %9, align 8
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = sext i8 %22 to i32
  %24 = load i32, i32* %12, align 4
  %25 = sub nsw i32 %23, %24
  store i32 %25, i32* %17, align 4
  %26 = load i8*, i8** %11, align 8
  %27 = load i64, i64* %9, align 8
  %28 = getelementptr inbounds i8, i8* %26, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = sext i8 %29 to i32
  %31 = load i32, i32* %13, align 4
  %32 = sub nsw i32 %30, %31
  store i32 %32, i32* %18, align 4
  %33 = load i32, i32* %17, align 4
  %34 = load i32, i32* %14, align 4
  %35 = load i32, i32* %15, align 4
  %36 = load i32, i32* %16, align 4
  %37 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %33, i32 %34, i32 %35, i32 %36, i32 0)
  %38 = load i32, i32* %18, align 4
  %39 = icmp slt i32 %37, %38
  %40 = zext i1 %39 to i64
  %41 = select i1 %39, i32 1, i32 0
  %42 = trunc i32 %41 to i8
  ret i8 %42
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local float @libjit_tanh_kernel_f(i64, float*, float*, float*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  store i64 %0, i64* %5, align 8
  store float* %1, float** %6, align 8
  store float* %2, float** %7, align 8
  store float* %3, float** %8, align 8
  %9 = load float*, float** %6, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds float, float* %9, i64 %10
  %12 = load float, float* %11, align 4
  %13 = fmul reassoc nsz arcp contract float %12, 2.000000e+00
  %14 = call reassoc nsz arcp float @llvm.exp.f32(float %13)
  %15 = fadd reassoc nsz arcp contract float %14, 1.000000e+00
  %16 = fdiv reassoc nsz arcp float 2.000000e+00, %15
  %17 = fsub reassoc nsz arcp contract float 1.000000e+00, %16
  ret float %17
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i8 @libjit_intlookuptable_kernel_i8(i64, i8*, i8*) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  store i64 %0, i64* %4, align 8
  store i8* %1, i8** %5, align 8
  store i8* %2, i8** %6, align 8
  %7 = load i8*, i8** %6, align 8
  %8 = load i8*, i8** %5, align 8
  %9 = load i64, i64* %4, align 8
  %10 = getelementptr inbounds i8, i8* %8, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = sext i8 %11 to i32
  %13 = add nsw i32 %12, 128
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %7, i64 %14
  %16 = load i8, i8* %15, align 1
  ret i8 %16
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local float @libjit_elementselect_kernel_f(i64, i8*, float*, float*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  store i64 %0, i64* %5, align 8
  store i8* %1, i8** %6, align 8
  store float* %2, float** %7, align 8
  store float* %3, float** %8, align 8
  %9 = load i8*, i8** %6, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds i8, i8* %9, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = sext i8 %12 to i32
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %20

; <label>:15:                                     ; preds = %4
  %16 = load float*, float** %7, align 8
  %17 = load i64, i64* %5, align 8
  %18 = getelementptr inbounds float, float* %16, i64 %17
  %19 = load float, float* %18, align 4
  br label %25

; <label>:20:                                     ; preds = %4
  %21 = load float*, float** %8, align 8
  %22 = load i64, i64* %5, align 8
  %23 = getelementptr inbounds float, float* %21, i64 %22
  %24 = load float, float* %23, align 4
  br label %25

; <label>:25:                                     ; preds = %20, %15
  %26 = phi float [ %19, %15 ], [ %24, %20 ]
  ret float %26
}

; Function Attrs: noinline optnone uwtable
define dso_local signext i8 @libjit_elementselect_kernel_i8(i64, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32) #2 {
  %14 = alloca i64, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  store i64 %0, i64* %14, align 8
  store i8* %1, i8** %15, align 8
  store i8* %2, i8** %16, align 8
  store i8* %3, i8** %17, align 8
  store i32 %4, i32* %18, align 4
  store i32 %5, i32* %19, align 4
  store i32 %6, i32* %20, align 4
  store i32 %7, i32* %21, align 4
  store i32 %8, i32* %22, align 4
  store i32 %9, i32* %23, align 4
  store i32 %10, i32* %24, align 4
  store i32 %11, i32* %25, align 4
  store i32 %12, i32* %26, align 4
  %27 = load i8*, i8** %15, align 8
  %28 = load i64, i64* %14, align 8
  %29 = getelementptr inbounds i8, i8* %27, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = sext i8 %30 to i32
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %47

; <label>:33:                                     ; preds = %13
  %34 = load i8*, i8** %16, align 8
  %35 = load i64, i64* %14, align 8
  %36 = getelementptr inbounds i8, i8* %34, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = sext i8 %37 to i32
  %39 = load i32, i32* %19, align 4
  %40 = sub nsw i32 %38, %39
  %41 = load i32, i32* %21, align 4
  %42 = load i32, i32* %22, align 4
  %43 = load i32, i32* %23, align 4
  %44 = load i32, i32* %18, align 4
  %45 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %40, i32 %41, i32 %42, i32 %43, i32 %44)
  %46 = call signext i8 @_Z11libjit_clipi(i32 %45)
  br label %61

; <label>:47:                                     ; preds = %13
  %48 = load i8*, i8** %17, align 8
  %49 = load i64, i64* %14, align 8
  %50 = getelementptr inbounds i8, i8* %48, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = sext i8 %51 to i32
  %53 = load i32, i32* %20, align 4
  %54 = sub nsw i32 %52, %53
  %55 = load i32, i32* %24, align 4
  %56 = load i32, i32* %25, align 4
  %57 = load i32, i32* %26, align 4
  %58 = load i32, i32* %18, align 4
  %59 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %54, i32 %55, i32 %56, i32 %57, i32 %58)
  %60 = call signext i8 @_Z11libjit_clipi(i32 %59)
  br label %61

; <label>:61:                                     ; preds = %47, %33
  %62 = phi i8 [ %46, %33 ], [ %60, %47 ]
  ret i8 %62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local float @libjit_sigmoid_kernel_f(i64, float*, float*, float*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  %9 = alloca float, align 4
  store i64 %0, i64* %5, align 8
  store float* %1, float** %6, align 8
  store float* %2, float** %7, align 8
  store float* %3, float** %8, align 8
  %10 = load float*, float** %6, align 8
  %11 = load i64, i64* %5, align 8
  %12 = getelementptr inbounds float, float* %10, i64 %11
  %13 = load float, float* %12, align 4
  %14 = fsub reassoc nsz arcp float -0.000000e+00, %13
  %15 = call reassoc nsz arcp float @llvm.exp.f32(float %14)
  store float %15, float* %9, align 4
  %16 = load float, float* %9, align 4
  %17 = fadd reassoc nsz arcp contract float %16, 1.000000e+00
  %18 = fdiv reassoc nsz arcp float 1.000000e+00, %17
  ret float %18
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local float @libjit_element_maxsplat_kernel_f(i64, float, float*, float*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca float, align 4
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  store i64 %0, i64* %5, align 8
  store float %1, float* %6, align 4
  store float* %2, float** %7, align 8
  store float* %3, float** %8, align 8
  %9 = load float*, float** %7, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds float, float* %9, i64 %10
  %12 = load float, float* %11, align 4
  %13 = load float, float* %6, align 4
  %14 = fcmp reassoc nsz arcp ogt float %12, %13
  br i1 %14, label %15, label %20

; <label>:15:                                     ; preds = %4
  %16 = load float*, float** %7, align 8
  %17 = load i64, i64* %5, align 8
  %18 = getelementptr inbounds float, float* %16, i64 %17
  %19 = load float, float* %18, align 4
  br label %22

; <label>:20:                                     ; preds = %4
  %21 = load float, float* %6, align 4
  br label %22

; <label>:22:                                     ; preds = %20, %15
  %23 = phi float [ %19, %15 ], [ %21, %20 ]
  ret float %23
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i8 @libjit_element_maxsplat_kernel_i8(i64, i8 signext, i8*, i8*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  store i64 %0, i64* %5, align 8
  store i8 %1, i8* %6, align 1
  store i8* %2, i8** %7, align 8
  store i8* %3, i8** %8, align 8
  %9 = load i8*, i8** %7, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds i8, i8* %9, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = sext i8 %12 to i32
  %14 = load i8, i8* %6, align 1
  %15 = sext i8 %14 to i32
  %16 = icmp sgt i32 %13, %15
  br i1 %16, label %17, label %22

; <label>:17:                                     ; preds = %4
  %18 = load i8*, i8** %7, align 8
  %19 = load i64, i64* %5, align 8
  %20 = getelementptr inbounds i8, i8* %18, i64 %19
  %21 = load i8, i8* %20, align 1
  br label %24

; <label>:22:                                     ; preds = %4
  %23 = load i8, i8* %6, align 1
  br label %24

; <label>:24:                                     ; preds = %22, %17
  %25 = phi i8 [ %21, %17 ], [ %23, %22 ]
  ret i8 %25
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local float @libjit_splat_kernel_f(i64, float, float*, float*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca float, align 4
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  store i64 %0, i64* %5, align 8
  store float %1, float* %6, align 4
  store float* %2, float** %7, align 8
  store float* %3, float** %8, align 8
  %9 = load float, float* %6, align 4
  ret float %9
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @libjit_splat_kernel_u(i64, i64, i64*, i64*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  store i64 %0, i64* %5, align 8
  store i64 %1, i64* %6, align 8
  store i64* %2, i64** %7, align 8
  store i64* %3, i64** %8, align 8
  %9 = load i64, i64* %6, align 8
  ret i64 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i8 @libjit_splat_kernel_i8(i64, i8 signext, i8*, i8*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  store i64 %0, i64* %5, align 8
  store i8 %1, i8* %6, align 1
  store i8* %2, i8** %7, align 8
  store i8* %3, i8** %8, align 8
  %9 = load i8, i8* %6, align 1
  ret i8 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @libjit_splat_kernel_i32(i64, i32, i32*, i32*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i64 %0, i64* %5, align 8
  store i32 %1, i32* %6, align 4
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32, i32* %6, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i8 @libjit_splat_kernel_b(i64, i8 signext, i8*, i8*) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  store i64 %0, i64* %5, align 8
  store i8 %1, i8* %6, align 1
  store i8* %2, i8** %7, align 8
  store i8* %3, i8** %8, align 8
  %9 = load i8, i8* %6, align 1
  ret i8 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @libjit_batchedadd_f(float*, float*, float*, i64, i64) #0 {
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  store float* %0, float** %6, align 8
  store float* %1, float** %7, align 8
  store float* %2, float** %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  store i64 0, i64* %11, align 8
  br label %14

; <label>:14:                                     ; preds = %47, %5
  %15 = load i64, i64* %11, align 8
  %16 = load i64, i64* %9, align 8
  %17 = icmp ult i64 %15, %16
  br i1 %17, label %18, label %50

; <label>:18:                                     ; preds = %14
  %19 = load i64, i64* %11, align 8
  %20 = load i64, i64* %10, align 8
  %21 = mul i64 %19, %20
  store i64 %21, i64* %12, align 8
  store i64 0, i64* %13, align 8
  br label %22

; <label>:22:                                     ; preds = %43, %18
  %23 = load i64, i64* %13, align 8
  %24 = load i64, i64* %10, align 8
  %25 = icmp ult i64 %23, %24
  br i1 %25, label %26, label %46

; <label>:26:                                     ; preds = %22
  %27 = load float*, float** %7, align 8
  %28 = load i64, i64* %12, align 8
  %29 = load i64, i64* %13, align 8
  %30 = add i64 %28, %29
  %31 = getelementptr inbounds float, float* %27, i64 %30
  %32 = load float, float* %31, align 4
  %33 = load float*, float** %8, align 8
  %34 = load i64, i64* %13, align 8
  %35 = getelementptr inbounds float, float* %33, i64 %34
  %36 = load float, float* %35, align 4
  %37 = fadd reassoc nsz arcp contract float %32, %36
  %38 = load float*, float** %6, align 8
  %39 = load i64, i64* %12, align 8
  %40 = load i64, i64* %13, align 8
  %41 = add i64 %39, %40
  %42 = getelementptr inbounds float, float* %38, i64 %41
  store float %37, float* %42, align 4
  br label %43

; <label>:43:                                     ; preds = %26
  %44 = load i64, i64* %13, align 8
  %45 = add i64 %44, 1
  store i64 %45, i64* %13, align 8
  br label %22

; <label>:46:                                     ; preds = %22
  br label %47

; <label>:47:                                     ; preds = %46
  %48 = load i64, i64* %11, align 8
  %49 = add i64 %48, 1
  store i64 %49, i64* %11, align 8
  br label %14

; <label>:50:                                     ; preds = %14
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_batchedadd_i8(i8*, i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32) #2 {
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  store i8* %0, i8** %15, align 8
  store i8* %1, i8** %16, align 8
  store i8* %2, i8** %17, align 8
  store i64 %3, i64* %18, align 8
  store i64 %4, i64* %19, align 8
  store i32 %5, i32* %20, align 4
  store i32 %6, i32* %21, align 4
  store i32 %7, i32* %22, align 4
  store i32 %8, i32* %23, align 4
  store i32 %9, i32* %24, align 4
  store i32 %10, i32* %25, align 4
  store i32 %11, i32* %26, align 4
  store i32 %12, i32* %27, align 4
  store i32 %13, i32* %28, align 4
  %29 = load i8*, i8** %15, align 8
  %30 = load i8*, i8** %16, align 8
  %31 = load i8*, i8** %17, align 8
  %32 = load i64, i64* %18, align 8
  %33 = load i64, i64* %19, align 8
  %34 = load i32, i32* %20, align 4
  %35 = load i32, i32* %21, align 4
  %36 = load i32, i32* %22, align 4
  %37 = load i32, i32* %23, align 4
  %38 = load i32, i32* %24, align 4
  %39 = load i32, i32* %25, align 4
  %40 = load i32, i32* %26, align 4
  %41 = load i32, i32* %27, align 4
  %42 = load i32, i32* %28, align 4
  call void @_ZN12_GLOBAL__N_127libjit_batchedadd_quantizedIaEEvPaPKaPKT_mmiiiiiiiii(i8* %29, i8* %30, i8* %31, i64 %32, i64 %33, i32 %34, i32 %35, i32 %36, i32 %37, i32 %38, i32 %39, i32 %40, i32 %41, i32 %42)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_127libjit_batchedadd_quantizedIaEEvPaPKaPKT_mmiiiiiiiii(i8*, i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32) #0 {
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  store i8* %0, i8** %15, align 8
  store i8* %1, i8** %16, align 8
  store i8* %2, i8** %17, align 8
  store i64 %3, i64* %18, align 8
  store i64 %4, i64* %19, align 8
  store i32 %5, i32* %20, align 4
  store i32 %6, i32* %21, align 4
  store i32 %7, i32* %22, align 4
  store i32 %8, i32* %23, align 4
  store i32 %9, i32* %24, align 4
  store i32 %10, i32* %25, align 4
  store i32 %11, i32* %26, align 4
  store i32 %12, i32* %27, align 4
  store i32 %13, i32* %28, align 4
  store i64 0, i64* %29, align 8
  br label %36

; <label>:36:                                     ; preds = %90, %14
  %37 = load i64, i64* %29, align 8
  %38 = load i64, i64* %18, align 8
  %39 = icmp ult i64 %37, %38
  br i1 %39, label %40, label %93

; <label>:40:                                     ; preds = %36
  %41 = load i64, i64* %29, align 8
  %42 = load i64, i64* %19, align 8
  %43 = mul i64 %41, %42
  store i64 %43, i64* %30, align 8
  store i64 0, i64* %31, align 8
  br label %44

; <label>:44:                                     ; preds = %86, %40
  %45 = load i64, i64* %31, align 8
  %46 = load i64, i64* %19, align 8
  %47 = icmp ult i64 %45, %46
  br i1 %47, label %48, label %89

; <label>:48:                                     ; preds = %44
  %49 = load i8*, i8** %16, align 8
  %50 = load i64, i64* %30, align 8
  %51 = load i64, i64* %31, align 8
  %52 = add i64 %50, %51
  %53 = getelementptr inbounds i8, i8* %49, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = sext i8 %54 to i32
  %56 = load i32, i32* %21, align 4
  %57 = sub nsw i32 %55, %56
  store i32 %57, i32* %32, align 4
  %58 = load i8*, i8** %17, align 8
  %59 = load i64, i64* %31, align 8
  %60 = getelementptr inbounds i8, i8* %58, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = sext i8 %61 to i32
  %63 = load i32, i32* %22, align 4
  %64 = sub nsw i32 %62, %63
  store i32 %64, i32* %33, align 4
  %65 = load i32, i32* %32, align 4
  %66 = load i32, i32* %23, align 4
  %67 = load i32, i32* %24, align 4
  %68 = load i32, i32* %25, align 4
  %69 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %65, i32 %66, i32 %67, i32 %68, i32 0)
  store i32 %69, i32* %34, align 4
  %70 = load i32, i32* %33, align 4
  %71 = load i32, i32* %26, align 4
  %72 = load i32, i32* %27, align 4
  %73 = load i32, i32* %28, align 4
  %74 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %70, i32 %71, i32 %72, i32 %73, i32 0)
  store i32 %74, i32* %35, align 4
  %75 = load i32, i32* %34, align 4
  %76 = load i32, i32* %35, align 4
  %77 = add nsw i32 %75, %76
  %78 = load i32, i32* %20, align 4
  %79 = add nsw i32 %77, %78
  %80 = call signext i8 @_Z11libjit_clipi(i32 %79)
  %81 = load i8*, i8** %15, align 8
  %82 = load i64, i64* %30, align 8
  %83 = load i64, i64* %31, align 8
  %84 = add i64 %82, %83
  %85 = getelementptr inbounds i8, i8* %81, i64 %84
  store i8 %80, i8* %85, align 1
  br label %86

; <label>:86:                                     ; preds = %48
  %87 = load i64, i64* %31, align 8
  %88 = add i64 %87, 1
  store i64 %88, i64* %31, align 8
  br label %44

; <label>:89:                                     ; preds = %44
  br label %90

; <label>:90:                                     ; preds = %89
  %91 = load i64, i64* %29, align 8
  %92 = add i64 %91, 1
  store i64 %92, i64* %29, align 8
  br label %36

; <label>:93:                                     ; preds = %36
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_batchedadd_i32_i8(i8*, i8*, i32*, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32) #2 {
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i32*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  store i8* %0, i8** %15, align 8
  store i8* %1, i8** %16, align 8
  store i32* %2, i32** %17, align 8
  store i64 %3, i64* %18, align 8
  store i64 %4, i64* %19, align 8
  store i32 %5, i32* %20, align 4
  store i32 %6, i32* %21, align 4
  store i32 %7, i32* %22, align 4
  store i32 %8, i32* %23, align 4
  store i32 %9, i32* %24, align 4
  store i32 %10, i32* %25, align 4
  store i32 %11, i32* %26, align 4
  store i32 %12, i32* %27, align 4
  store i32 %13, i32* %28, align 4
  %29 = load i8*, i8** %15, align 8
  %30 = load i8*, i8** %16, align 8
  %31 = load i32*, i32** %17, align 8
  %32 = load i64, i64* %18, align 8
  %33 = load i64, i64* %19, align 8
  %34 = load i32, i32* %20, align 4
  %35 = load i32, i32* %21, align 4
  %36 = load i32, i32* %22, align 4
  %37 = load i32, i32* %23, align 4
  %38 = load i32, i32* %24, align 4
  %39 = load i32, i32* %25, align 4
  %40 = load i32, i32* %26, align 4
  %41 = load i32, i32* %27, align 4
  %42 = load i32, i32* %28, align 4
  call void @_ZN12_GLOBAL__N_127libjit_batchedadd_quantizedIiEEvPaPKaPKT_mmiiiiiiiii(i8* %29, i8* %30, i32* %31, i64 %32, i64 %33, i32 %34, i32 %35, i32 %36, i32 %37, i32 %38, i32 %39, i32 %40, i32 %41, i32 %42)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_127libjit_batchedadd_quantizedIiEEvPaPKaPKT_mmiiiiiiiii(i8*, i8*, i32*, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32) #0 {
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i32*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  store i8* %0, i8** %15, align 8
  store i8* %1, i8** %16, align 8
  store i32* %2, i32** %17, align 8
  store i64 %3, i64* %18, align 8
  store i64 %4, i64* %19, align 8
  store i32 %5, i32* %20, align 4
  store i32 %6, i32* %21, align 4
  store i32 %7, i32* %22, align 4
  store i32 %8, i32* %23, align 4
  store i32 %9, i32* %24, align 4
  store i32 %10, i32* %25, align 4
  store i32 %11, i32* %26, align 4
  store i32 %12, i32* %27, align 4
  store i32 %13, i32* %28, align 4
  store i64 0, i64* %29, align 8
  br label %36

; <label>:36:                                     ; preds = %89, %14
  %37 = load i64, i64* %29, align 8
  %38 = load i64, i64* %18, align 8
  %39 = icmp ult i64 %37, %38
  br i1 %39, label %40, label %92

; <label>:40:                                     ; preds = %36
  %41 = load i64, i64* %29, align 8
  %42 = load i64, i64* %19, align 8
  %43 = mul i64 %41, %42
  store i64 %43, i64* %30, align 8
  store i64 0, i64* %31, align 8
  br label %44

; <label>:44:                                     ; preds = %85, %40
  %45 = load i64, i64* %31, align 8
  %46 = load i64, i64* %19, align 8
  %47 = icmp ult i64 %45, %46
  br i1 %47, label %48, label %88

; <label>:48:                                     ; preds = %44
  %49 = load i8*, i8** %16, align 8
  %50 = load i64, i64* %30, align 8
  %51 = load i64, i64* %31, align 8
  %52 = add i64 %50, %51
  %53 = getelementptr inbounds i8, i8* %49, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = sext i8 %54 to i32
  %56 = load i32, i32* %21, align 4
  %57 = sub nsw i32 %55, %56
  store i32 %57, i32* %32, align 4
  %58 = load i32*, i32** %17, align 8
  %59 = load i64, i64* %31, align 8
  %60 = getelementptr inbounds i32, i32* %58, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = load i32, i32* %22, align 4
  %63 = sub nsw i32 %61, %62
  store i32 %63, i32* %33, align 4
  %64 = load i32, i32* %32, align 4
  %65 = load i32, i32* %23, align 4
  %66 = load i32, i32* %24, align 4
  %67 = load i32, i32* %25, align 4
  %68 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %64, i32 %65, i32 %66, i32 %67, i32 0)
  store i32 %68, i32* %34, align 4
  %69 = load i32, i32* %33, align 4
  %70 = load i32, i32* %26, align 4
  %71 = load i32, i32* %27, align 4
  %72 = load i32, i32* %28, align 4
  %73 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %69, i32 %70, i32 %71, i32 %72, i32 0)
  store i32 %73, i32* %35, align 4
  %74 = load i32, i32* %34, align 4
  %75 = load i32, i32* %35, align 4
  %76 = add nsw i32 %74, %75
  %77 = load i32, i32* %20, align 4
  %78 = add nsw i32 %76, %77
  %79 = call signext i8 @_Z11libjit_clipi(i32 %78)
  %80 = load i8*, i8** %15, align 8
  %81 = load i64, i64* %30, align 8
  %82 = load i64, i64* %31, align 8
  %83 = add i64 %81, %82
  %84 = getelementptr inbounds i8, i8* %80, i64 %83
  store i8 %79, i8* %84, align 1
  br label %85

; <label>:85:                                     ; preds = %48
  %86 = load i64, i64* %31, align 8
  %87 = add i64 %86, 1
  store i64 %87, i64* %31, align 8
  br label %44

; <label>:88:                                     ; preds = %44
  br label %89

; <label>:89:                                     ; preds = %88
  %90 = load i64, i64* %29, align 8
  %91 = add i64 %90, 1
  store i64 %91, i64* %29, align 8
  br label %36

; <label>:92:                                     ; preds = %36
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_batchedreduceadd_f(float*, float*, i64, i64*, i64*, i64) #2 {
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca [6 x i64], align 16
  store float* %0, float** %7, align 8
  store float* %1, float** %8, align 8
  store i64 %2, i64* %9, align 8
  store i64* %3, i64** %10, align 8
  store i64* %4, i64** %11, align 8
  store i64 %5, i64* %12, align 8
  store i64 0, i64* %13, align 8
  br label %21

; <label>:21:                                     ; preds = %29, %6
  %22 = load i64, i64* %13, align 8
  %23 = load i64, i64* %9, align 8
  %24 = icmp ult i64 %22, %23
  br i1 %24, label %25, label %32

; <label>:25:                                     ; preds = %21
  %26 = load float*, float** %7, align 8
  %27 = load i64, i64* %13, align 8
  %28 = getelementptr inbounds float, float* %26, i64 %27
  store float 0.000000e+00, float* %28, align 4
  br label %29

; <label>:29:                                     ; preds = %25
  %30 = load i64, i64* %13, align 8
  %31 = add i64 %30, 1
  store i64 %31, i64* %13, align 8
  br label %21

; <label>:32:                                     ; preds = %21
  store i64 0, i64* %14, align 8
  br label %33

; <label>:33:                                     ; preds = %138, %32
  %34 = load i64, i64* %14, align 8
  %35 = load i64*, i64** %11, align 8
  %36 = getelementptr inbounds i64, i64* %35, i64 0
  %37 = load i64, i64* %36, align 8
  %38 = icmp ult i64 %34, %37
  br i1 %38, label %39, label %141

; <label>:39:                                     ; preds = %33
  store i64 0, i64* %15, align 8
  br label %40

; <label>:40:                                     ; preds = %134, %39
  %41 = load i64, i64* %15, align 8
  %42 = load i64*, i64** %11, align 8
  %43 = getelementptr inbounds i64, i64* %42, i64 1
  %44 = load i64, i64* %43, align 8
  %45 = icmp ult i64 %41, %44
  br i1 %45, label %46, label %137

; <label>:46:                                     ; preds = %40
  store i64 0, i64* %16, align 8
  br label %47

; <label>:47:                                     ; preds = %130, %46
  %48 = load i64, i64* %16, align 8
  %49 = load i64*, i64** %11, align 8
  %50 = getelementptr inbounds i64, i64* %49, i64 2
  %51 = load i64, i64* %50, align 8
  %52 = icmp ult i64 %48, %51
  br i1 %52, label %53, label %133

; <label>:53:                                     ; preds = %47
  store i64 0, i64* %17, align 8
  br label %54

; <label>:54:                                     ; preds = %126, %53
  %55 = load i64, i64* %17, align 8
  %56 = load i64*, i64** %11, align 8
  %57 = getelementptr inbounds i64, i64* %56, i64 3
  %58 = load i64, i64* %57, align 8
  %59 = icmp ult i64 %55, %58
  br i1 %59, label %60, label %129

; <label>:60:                                     ; preds = %54
  store i64 0, i64* %18, align 8
  br label %61

; <label>:61:                                     ; preds = %122, %60
  %62 = load i64, i64* %18, align 8
  %63 = load i64*, i64** %11, align 8
  %64 = getelementptr inbounds i64, i64* %63, i64 4
  %65 = load i64, i64* %64, align 8
  %66 = icmp ult i64 %62, %65
  br i1 %66, label %67, label %125

; <label>:67:                                     ; preds = %61
  store i64 0, i64* %19, align 8
  br label %68

; <label>:68:                                     ; preds = %118, %67
  %69 = load i64, i64* %19, align 8
  %70 = load i64*, i64** %11, align 8
  %71 = getelementptr inbounds i64, i64* %70, i64 5
  %72 = load i64, i64* %71, align 8
  %73 = icmp ult i64 %69, %72
  br i1 %73, label %74, label %121

; <label>:74:                                     ; preds = %68
  %75 = getelementptr inbounds [6 x i64], [6 x i64]* %20, i64 0, i64 0
  %76 = load i64, i64* %14, align 8
  store i64 %76, i64* %75, align 8
  %77 = getelementptr inbounds i64, i64* %75, i64 1
  %78 = load i64, i64* %15, align 8
  store i64 %78, i64* %77, align 8
  %79 = getelementptr inbounds i64, i64* %77, i64 1
  %80 = load i64, i64* %16, align 8
  store i64 %80, i64* %79, align 8
  %81 = getelementptr inbounds i64, i64* %79, i64 1
  %82 = load i64, i64* %17, align 8
  store i64 %82, i64* %81, align 8
  %83 = getelementptr inbounds i64, i64* %81, i64 1
  %84 = load i64, i64* %18, align 8
  store i64 %84, i64* %83, align 8
  %85 = getelementptr inbounds i64, i64* %83, i64 1
  %86 = load i64, i64* %19, align 8
  store i64 %86, i64* %85, align 8
  %87 = load i64, i64* %12, align 8
  %88 = getelementptr inbounds [6 x i64], [6 x i64]* %20, i64 0, i64 %87
  store i64 0, i64* %88, align 8
  %89 = load float*, float** %8, align 8
  %90 = load i64*, i64** %11, align 8
  %91 = load i64, i64* %14, align 8
  %92 = load i64, i64* %15, align 8
  %93 = load i64, i64* %16, align 8
  %94 = load i64, i64* %17, align 8
  %95 = load i64, i64* %18, align 8
  %96 = load i64, i64* %19, align 8
  %97 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %90, i64 %91, i64 %92, i64 %93, i64 %94, i64 %95, i64 %96)
  %98 = getelementptr inbounds float, float* %89, i64 %97
  %99 = load float, float* %98, align 4
  %100 = load float*, float** %7, align 8
  %101 = load i64*, i64** %10, align 8
  %102 = getelementptr inbounds [6 x i64], [6 x i64]* %20, i64 0, i64 0
  %103 = load i64, i64* %102, align 16
  %104 = getelementptr inbounds [6 x i64], [6 x i64]* %20, i64 0, i64 1
  %105 = load i64, i64* %104, align 8
  %106 = getelementptr inbounds [6 x i64], [6 x i64]* %20, i64 0, i64 2
  %107 = load i64, i64* %106, align 16
  %108 = getelementptr inbounds [6 x i64], [6 x i64]* %20, i64 0, i64 3
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds [6 x i64], [6 x i64]* %20, i64 0, i64 4
  %111 = load i64, i64* %110, align 16
  %112 = getelementptr inbounds [6 x i64], [6 x i64]* %20, i64 0, i64 5
  %113 = load i64, i64* %112, align 8
  %114 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %101, i64 %103, i64 %105, i64 %107, i64 %109, i64 %111, i64 %113)
  %115 = getelementptr inbounds float, float* %100, i64 %114
  %116 = load float, float* %115, align 4
  %117 = fadd reassoc nsz arcp contract float %116, %99
  store float %117, float* %115, align 4
  br label %118

; <label>:118:                                    ; preds = %74
  %119 = load i64, i64* %19, align 8
  %120 = add i64 %119, 1
  store i64 %120, i64* %19, align 8
  br label %68

; <label>:121:                                    ; preds = %68
  br label %122

; <label>:122:                                    ; preds = %121
  %123 = load i64, i64* %18, align 8
  %124 = add i64 %123, 1
  store i64 %124, i64* %18, align 8
  br label %61

; <label>:125:                                    ; preds = %61
  br label %126

; <label>:126:                                    ; preds = %125
  %127 = load i64, i64* %17, align 8
  %128 = add i64 %127, 1
  store i64 %128, i64* %17, align 8
  br label %54

; <label>:129:                                    ; preds = %54
  br label %130

; <label>:130:                                    ; preds = %129
  %131 = load i64, i64* %16, align 8
  %132 = add i64 %131, 1
  store i64 %132, i64* %16, align 8
  br label %47

; <label>:133:                                    ; preds = %47
  br label %134

; <label>:134:                                    ; preds = %133
  %135 = load i64, i64* %15, align 8
  %136 = add i64 %135, 1
  store i64 %136, i64* %15, align 8
  br label %40

; <label>:137:                                    ; preds = %40
  br label %138

; <label>:138:                                    ; preds = %137
  %139 = load i64, i64* %14, align 8
  %140 = add i64 %139, 1
  store i64 %140, i64* %14, align 8
  br label %33

; <label>:141:                                    ; preds = %33
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64*, i64, i64, i64, i64, i64, i64) #0 comdat {
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store i64* %0, i64** %8, align 8
  store i64 %1, i64* %9, align 8
  store i64 %2, i64* %10, align 8
  store i64 %3, i64* %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  %15 = load i64, i64* %9, align 8
  %16 = load i64*, i64** %8, align 8
  %17 = getelementptr inbounds i64, i64* %16, i64 1
  %18 = load i64, i64* %17, align 8
  %19 = mul i64 %15, %18
  %20 = load i64*, i64** %8, align 8
  %21 = getelementptr inbounds i64, i64* %20, i64 2
  %22 = load i64, i64* %21, align 8
  %23 = mul i64 %19, %22
  %24 = load i64*, i64** %8, align 8
  %25 = getelementptr inbounds i64, i64* %24, i64 3
  %26 = load i64, i64* %25, align 8
  %27 = mul i64 %23, %26
  %28 = load i64*, i64** %8, align 8
  %29 = getelementptr inbounds i64, i64* %28, i64 4
  %30 = load i64, i64* %29, align 8
  %31 = mul i64 %27, %30
  %32 = load i64*, i64** %8, align 8
  %33 = getelementptr inbounds i64, i64* %32, i64 5
  %34 = load i64, i64* %33, align 8
  %35 = mul i64 %31, %34
  %36 = load i64, i64* %10, align 8
  %37 = load i64*, i64** %8, align 8
  %38 = getelementptr inbounds i64, i64* %37, i64 2
  %39 = load i64, i64* %38, align 8
  %40 = mul i64 %36, %39
  %41 = load i64*, i64** %8, align 8
  %42 = getelementptr inbounds i64, i64* %41, i64 3
  %43 = load i64, i64* %42, align 8
  %44 = mul i64 %40, %43
  %45 = load i64*, i64** %8, align 8
  %46 = getelementptr inbounds i64, i64* %45, i64 4
  %47 = load i64, i64* %46, align 8
  %48 = mul i64 %44, %47
  %49 = load i64*, i64** %8, align 8
  %50 = getelementptr inbounds i64, i64* %49, i64 5
  %51 = load i64, i64* %50, align 8
  %52 = mul i64 %48, %51
  %53 = add i64 %35, %52
  %54 = load i64, i64* %11, align 8
  %55 = load i64*, i64** %8, align 8
  %56 = getelementptr inbounds i64, i64* %55, i64 3
  %57 = load i64, i64* %56, align 8
  %58 = mul i64 %54, %57
  %59 = load i64*, i64** %8, align 8
  %60 = getelementptr inbounds i64, i64* %59, i64 4
  %61 = load i64, i64* %60, align 8
  %62 = mul i64 %58, %61
  %63 = load i64*, i64** %8, align 8
  %64 = getelementptr inbounds i64, i64* %63, i64 5
  %65 = load i64, i64* %64, align 8
  %66 = mul i64 %62, %65
  %67 = add i64 %53, %66
  %68 = load i64, i64* %12, align 8
  %69 = load i64*, i64** %8, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 4
  %71 = load i64, i64* %70, align 8
  %72 = mul i64 %68, %71
  %73 = load i64*, i64** %8, align 8
  %74 = getelementptr inbounds i64, i64* %73, i64 5
  %75 = load i64, i64* %74, align 8
  %76 = mul i64 %72, %75
  %77 = add i64 %67, %76
  %78 = load i64, i64* %13, align 8
  %79 = load i64*, i64** %8, align 8
  %80 = getelementptr inbounds i64, i64* %79, i64 5
  %81 = load i64, i64* %80, align 8
  %82 = mul i64 %78, %81
  %83 = add i64 %77, %82
  %84 = load i64, i64* %14, align 8
  %85 = add i64 %83, %84
  ret i64 %85
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_reducemin_f(float*, float*, i64, i64*, i64*) #2 {
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  store float* %0, float** %6, align 8
  store float* %1, float** %7, align 8
  store i64 %2, i64* %8, align 8
  store i64* %3, i64** %9, align 8
  store i64* %4, i64** %10, align 8
  %11 = load float*, float** %6, align 8
  %12 = load float*, float** %7, align 8
  %13 = load i64, i64* %8, align 8
  %14 = load i64*, i64** %9, align 8
  %15 = load i64*, i64** %10, align 8
  %16 = call reassoc nsz arcp float @_ZNSt14numeric_limitsIfE3maxEv() #5
  call void @_ZN12_GLOBAL__N_116libjit_reduceminIfEEvPT_PKS1_mPKmS6_S1_(float* %11, float* %12, i64 %13, i64* %14, i64* %15, float %16)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNSt14numeric_limitsIfE3maxEv() #0 comdat align 2 {
  ret float 0x47EFFFFFE0000000
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_116libjit_reduceminIfEEvPT_PKS1_mPKmS6_S1_(float*, float*, i64, i64*, i64*, float) #2 {
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca float, align 4
  %13 = alloca i64, align 8
  %14 = alloca [6 x i32], align 16
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca float, align 4
  %29 = alloca float, align 4
  store float* %0, float** %7, align 8
  store float* %1, float** %8, align 8
  store i64 %2, i64* %9, align 8
  store i64* %3, i64** %10, align 8
  store i64* %4, i64** %11, align 8
  store float %5, float* %12, align 4
  store i64 0, i64* %13, align 8
  br label %30

; <label>:30:                                     ; preds = %39, %6
  %31 = load i64, i64* %13, align 8
  %32 = load i64, i64* %9, align 8
  %33 = icmp ult i64 %31, %32
  br i1 %33, label %34, label %42

; <label>:34:                                     ; preds = %30
  %35 = load float, float* %12, align 4
  %36 = load float*, float** %7, align 8
  %37 = load i64, i64* %13, align 8
  %38 = getelementptr inbounds float, float* %36, i64 %37
  store float %35, float* %38, align 4
  br label %39

; <label>:39:                                     ; preds = %34
  %40 = load i64, i64* %13, align 8
  %41 = add i64 %40, 1
  store i64 %41, i64* %13, align 8
  br label %30

; <label>:42:                                     ; preds = %30
  store i64 0, i64* %15, align 8
  br label %43

; <label>:43:                                     ; preds = %55, %42
  %44 = load i64, i64* %15, align 8
  %45 = icmp ult i64 %44, 6
  br i1 %45, label %46, label %58

; <label>:46:                                     ; preds = %43
  %47 = load i64*, i64** %10, align 8
  %48 = load i64, i64* %15, align 8
  %49 = getelementptr inbounds i64, i64* %47, i64 %48
  %50 = load i64, i64* %49, align 8
  %51 = icmp ugt i64 %50, 1
  %52 = zext i1 %51 to i32
  %53 = load i64, i64* %15, align 8
  %54 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 %53
  store i32 %52, i32* %54, align 4
  br label %55

; <label>:55:                                     ; preds = %46
  %56 = load i64, i64* %15, align 8
  %57 = add i64 %56, 1
  store i64 %57, i64* %15, align 8
  br label %43

; <label>:58:                                     ; preds = %43
  store i64 0, i64* %16, align 8
  store i64 0, i64* %17, align 8
  br label %59

; <label>:59:                                     ; preds = %180, %58
  %60 = load i64, i64* %16, align 8
  %61 = load i64*, i64** %11, align 8
  %62 = getelementptr inbounds i64, i64* %61, i64 0
  %63 = load i64, i64* %62, align 8
  %64 = icmp ult i64 %60, %63
  br i1 %64, label %65, label %188

; <label>:65:                                     ; preds = %59
  store i64 0, i64* %18, align 8
  store i64 0, i64* %19, align 8
  br label %66

; <label>:66:                                     ; preds = %171, %65
  %67 = load i64, i64* %18, align 8
  %68 = load i64*, i64** %11, align 8
  %69 = getelementptr inbounds i64, i64* %68, i64 1
  %70 = load i64, i64* %69, align 8
  %71 = icmp ult i64 %67, %70
  br i1 %71, label %72, label %179

; <label>:72:                                     ; preds = %66
  store i64 0, i64* %20, align 8
  store i64 0, i64* %21, align 8
  br label %73

; <label>:73:                                     ; preds = %162, %72
  %74 = load i64, i64* %20, align 8
  %75 = load i64*, i64** %11, align 8
  %76 = getelementptr inbounds i64, i64* %75, i64 2
  %77 = load i64, i64* %76, align 8
  %78 = icmp ult i64 %74, %77
  br i1 %78, label %79, label %170

; <label>:79:                                     ; preds = %73
  store i64 0, i64* %22, align 8
  store i64 0, i64* %23, align 8
  br label %80

; <label>:80:                                     ; preds = %153, %79
  %81 = load i64, i64* %22, align 8
  %82 = load i64*, i64** %11, align 8
  %83 = getelementptr inbounds i64, i64* %82, i64 3
  %84 = load i64, i64* %83, align 8
  %85 = icmp ult i64 %81, %84
  br i1 %85, label %86, label %161

; <label>:86:                                     ; preds = %80
  store i64 0, i64* %24, align 8
  store i64 0, i64* %25, align 8
  br label %87

; <label>:87:                                     ; preds = %144, %86
  %88 = load i64, i64* %24, align 8
  %89 = load i64*, i64** %11, align 8
  %90 = getelementptr inbounds i64, i64* %89, i64 4
  %91 = load i64, i64* %90, align 8
  %92 = icmp ult i64 %88, %91
  br i1 %92, label %93, label %152

; <label>:93:                                     ; preds = %87
  store i64 0, i64* %26, align 8
  store i64 0, i64* %27, align 8
  br label %94

; <label>:94:                                     ; preds = %135, %93
  %95 = load i64, i64* %26, align 8
  %96 = load i64*, i64** %11, align 8
  %97 = getelementptr inbounds i64, i64* %96, i64 5
  %98 = load i64, i64* %97, align 8
  %99 = icmp ult i64 %95, %98
  br i1 %99, label %100, label %143

; <label>:100:                                    ; preds = %94
  %101 = load float*, float** %7, align 8
  %102 = load i64*, i64** %10, align 8
  %103 = load i64, i64* %17, align 8
  %104 = load i64, i64* %19, align 8
  %105 = load i64, i64* %21, align 8
  %106 = load i64, i64* %23, align 8
  %107 = load i64, i64* %25, align 8
  %108 = load i64, i64* %27, align 8
  %109 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %102, i64 %103, i64 %104, i64 %105, i64 %106, i64 %107, i64 %108)
  %110 = getelementptr inbounds float, float* %101, i64 %109
  %111 = load float, float* %110, align 4
  store float %111, float* %28, align 4
  %112 = load float*, float** %8, align 8
  %113 = load i64*, i64** %11, align 8
  %114 = load i64, i64* %16, align 8
  %115 = load i64, i64* %18, align 8
  %116 = load i64, i64* %20, align 8
  %117 = load i64, i64* %22, align 8
  %118 = load i64, i64* %24, align 8
  %119 = load i64, i64* %26, align 8
  %120 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %113, i64 %114, i64 %115, i64 %116, i64 %117, i64 %118, i64 %119)
  %121 = getelementptr inbounds float, float* %112, i64 %120
  %122 = load float, float* %121, align 4
  store float %122, float* %29, align 4
  %123 = call dereferenceable(4) float* @_ZSt3minIfERKT_S2_S2_(float* dereferenceable(4) %28, float* dereferenceable(4) %29)
  %124 = load float, float* %123, align 4
  %125 = load float*, float** %7, align 8
  %126 = load i64*, i64** %10, align 8
  %127 = load i64, i64* %17, align 8
  %128 = load i64, i64* %19, align 8
  %129 = load i64, i64* %21, align 8
  %130 = load i64, i64* %23, align 8
  %131 = load i64, i64* %25, align 8
  %132 = load i64, i64* %27, align 8
  %133 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %126, i64 %127, i64 %128, i64 %129, i64 %130, i64 %131, i64 %132)
  %134 = getelementptr inbounds float, float* %125, i64 %133
  store float %124, float* %134, align 4
  br label %135

; <label>:135:                                    ; preds = %100
  %136 = load i64, i64* %26, align 8
  %137 = add i64 %136, 1
  store i64 %137, i64* %26, align 8
  %138 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 5
  %139 = load i32, i32* %138, align 4
  %140 = zext i32 %139 to i64
  %141 = load i64, i64* %27, align 8
  %142 = add i64 %141, %140
  store i64 %142, i64* %27, align 8
  br label %94

; <label>:143:                                    ; preds = %94
  br label %144

; <label>:144:                                    ; preds = %143
  %145 = load i64, i64* %24, align 8
  %146 = add i64 %145, 1
  store i64 %146, i64* %24, align 8
  %147 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 4
  %148 = load i32, i32* %147, align 16
  %149 = zext i32 %148 to i64
  %150 = load i64, i64* %25, align 8
  %151 = add i64 %150, %149
  store i64 %151, i64* %25, align 8
  br label %87

; <label>:152:                                    ; preds = %87
  br label %153

; <label>:153:                                    ; preds = %152
  %154 = load i64, i64* %22, align 8
  %155 = add i64 %154, 1
  store i64 %155, i64* %22, align 8
  %156 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 3
  %157 = load i32, i32* %156, align 4
  %158 = zext i32 %157 to i64
  %159 = load i64, i64* %23, align 8
  %160 = add i64 %159, %158
  store i64 %160, i64* %23, align 8
  br label %80

; <label>:161:                                    ; preds = %80
  br label %162

; <label>:162:                                    ; preds = %161
  %163 = load i64, i64* %20, align 8
  %164 = add i64 %163, 1
  store i64 %164, i64* %20, align 8
  %165 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 2
  %166 = load i32, i32* %165, align 8
  %167 = zext i32 %166 to i64
  %168 = load i64, i64* %21, align 8
  %169 = add i64 %168, %167
  store i64 %169, i64* %21, align 8
  br label %73

; <label>:170:                                    ; preds = %73
  br label %171

; <label>:171:                                    ; preds = %170
  %172 = load i64, i64* %18, align 8
  %173 = add i64 %172, 1
  store i64 %173, i64* %18, align 8
  %174 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 1
  %175 = load i32, i32* %174, align 4
  %176 = zext i32 %175 to i64
  %177 = load i64, i64* %19, align 8
  %178 = add i64 %177, %176
  store i64 %178, i64* %19, align 8
  br label %66

; <label>:179:                                    ; preds = %66
  br label %180

; <label>:180:                                    ; preds = %179
  %181 = load i64, i64* %16, align 8
  %182 = add i64 %181, 1
  store i64 %182, i64* %16, align 8
  %183 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 0
  %184 = load i32, i32* %183, align 16
  %185 = zext i32 %184 to i64
  %186 = load i64, i64* %17, align 8
  %187 = add i64 %186, %185
  store i64 %187, i64* %17, align 8
  br label %59

; <label>:188:                                    ; preds = %59
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local dereferenceable(4) float* @_ZSt3minIfERKT_S2_S2_(float* dereferenceable(4), float* dereferenceable(4)) #0 comdat {
  %3 = alloca float*, align 8
  %4 = alloca float*, align 8
  %5 = alloca float*, align 8
  store float* %0, float** %4, align 8
  store float* %1, float** %5, align 8
  %6 = load float*, float** %5, align 8
  %7 = load float, float* %6, align 4
  %8 = load float*, float** %4, align 8
  %9 = load float, float* %8, align 4
  %10 = fcmp reassoc nsz arcp olt float %7, %9
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %2
  %12 = load float*, float** %5, align 8
  store float* %12, float** %3, align 8
  br label %15

; <label>:13:                                     ; preds = %2
  %14 = load float*, float** %4, align 8
  store float* %14, float** %3, align 8
  br label %15

; <label>:15:                                     ; preds = %13, %11
  %16 = load float*, float** %3, align 8
  ret float* %16
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_reducemin_i32(i32*, i32*, i64, i64*, i64*) #2 {
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  store i32* %0, i32** %6, align 8
  store i32* %1, i32** %7, align 8
  store i64 %2, i64* %8, align 8
  store i64* %3, i64** %9, align 8
  store i64* %4, i64** %10, align 8
  %11 = load i32*, i32** %6, align 8
  %12 = load i32*, i32** %7, align 8
  %13 = load i64, i64* %8, align 8
  %14 = load i64*, i64** %9, align 8
  %15 = load i64*, i64** %10, align 8
  %16 = call i32 @_ZNSt14numeric_limitsIiE3maxEv() #5
  call void @_ZN12_GLOBAL__N_116libjit_reduceminIiEEvPT_PKS1_mPKmS6_S1_(i32* %11, i32* %12, i64 %13, i64* %14, i64* %15, i32 %16)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local i32 @_ZNSt14numeric_limitsIiE3maxEv() #0 comdat align 2 {
  ret i32 2147483647
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_116libjit_reduceminIiEEvPT_PKS1_mPKmS6_S1_(i32*, i32*, i64, i64*, i64*, i32) #2 {
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca [6 x i32], align 16
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  store i32* %0, i32** %7, align 8
  store i32* %1, i32** %8, align 8
  store i64 %2, i64* %9, align 8
  store i64* %3, i64** %10, align 8
  store i64* %4, i64** %11, align 8
  store i32 %5, i32* %12, align 4
  store i64 0, i64* %13, align 8
  br label %30

; <label>:30:                                     ; preds = %39, %6
  %31 = load i64, i64* %13, align 8
  %32 = load i64, i64* %9, align 8
  %33 = icmp ult i64 %31, %32
  br i1 %33, label %34, label %42

; <label>:34:                                     ; preds = %30
  %35 = load i32, i32* %12, align 4
  %36 = load i32*, i32** %7, align 8
  %37 = load i64, i64* %13, align 8
  %38 = getelementptr inbounds i32, i32* %36, i64 %37
  store i32 %35, i32* %38, align 4
  br label %39

; <label>:39:                                     ; preds = %34
  %40 = load i64, i64* %13, align 8
  %41 = add i64 %40, 1
  store i64 %41, i64* %13, align 8
  br label %30

; <label>:42:                                     ; preds = %30
  store i64 0, i64* %15, align 8
  br label %43

; <label>:43:                                     ; preds = %55, %42
  %44 = load i64, i64* %15, align 8
  %45 = icmp ult i64 %44, 6
  br i1 %45, label %46, label %58

; <label>:46:                                     ; preds = %43
  %47 = load i64*, i64** %10, align 8
  %48 = load i64, i64* %15, align 8
  %49 = getelementptr inbounds i64, i64* %47, i64 %48
  %50 = load i64, i64* %49, align 8
  %51 = icmp ugt i64 %50, 1
  %52 = zext i1 %51 to i32
  %53 = load i64, i64* %15, align 8
  %54 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 %53
  store i32 %52, i32* %54, align 4
  br label %55

; <label>:55:                                     ; preds = %46
  %56 = load i64, i64* %15, align 8
  %57 = add i64 %56, 1
  store i64 %57, i64* %15, align 8
  br label %43

; <label>:58:                                     ; preds = %43
  store i64 0, i64* %16, align 8
  store i64 0, i64* %17, align 8
  br label %59

; <label>:59:                                     ; preds = %180, %58
  %60 = load i64, i64* %16, align 8
  %61 = load i64*, i64** %11, align 8
  %62 = getelementptr inbounds i64, i64* %61, i64 0
  %63 = load i64, i64* %62, align 8
  %64 = icmp ult i64 %60, %63
  br i1 %64, label %65, label %188

; <label>:65:                                     ; preds = %59
  store i64 0, i64* %18, align 8
  store i64 0, i64* %19, align 8
  br label %66

; <label>:66:                                     ; preds = %171, %65
  %67 = load i64, i64* %18, align 8
  %68 = load i64*, i64** %11, align 8
  %69 = getelementptr inbounds i64, i64* %68, i64 1
  %70 = load i64, i64* %69, align 8
  %71 = icmp ult i64 %67, %70
  br i1 %71, label %72, label %179

; <label>:72:                                     ; preds = %66
  store i64 0, i64* %20, align 8
  store i64 0, i64* %21, align 8
  br label %73

; <label>:73:                                     ; preds = %162, %72
  %74 = load i64, i64* %20, align 8
  %75 = load i64*, i64** %11, align 8
  %76 = getelementptr inbounds i64, i64* %75, i64 2
  %77 = load i64, i64* %76, align 8
  %78 = icmp ult i64 %74, %77
  br i1 %78, label %79, label %170

; <label>:79:                                     ; preds = %73
  store i64 0, i64* %22, align 8
  store i64 0, i64* %23, align 8
  br label %80

; <label>:80:                                     ; preds = %153, %79
  %81 = load i64, i64* %22, align 8
  %82 = load i64*, i64** %11, align 8
  %83 = getelementptr inbounds i64, i64* %82, i64 3
  %84 = load i64, i64* %83, align 8
  %85 = icmp ult i64 %81, %84
  br i1 %85, label %86, label %161

; <label>:86:                                     ; preds = %80
  store i64 0, i64* %24, align 8
  store i64 0, i64* %25, align 8
  br label %87

; <label>:87:                                     ; preds = %144, %86
  %88 = load i64, i64* %24, align 8
  %89 = load i64*, i64** %11, align 8
  %90 = getelementptr inbounds i64, i64* %89, i64 4
  %91 = load i64, i64* %90, align 8
  %92 = icmp ult i64 %88, %91
  br i1 %92, label %93, label %152

; <label>:93:                                     ; preds = %87
  store i64 0, i64* %26, align 8
  store i64 0, i64* %27, align 8
  br label %94

; <label>:94:                                     ; preds = %135, %93
  %95 = load i64, i64* %26, align 8
  %96 = load i64*, i64** %11, align 8
  %97 = getelementptr inbounds i64, i64* %96, i64 5
  %98 = load i64, i64* %97, align 8
  %99 = icmp ult i64 %95, %98
  br i1 %99, label %100, label %143

; <label>:100:                                    ; preds = %94
  %101 = load i32*, i32** %7, align 8
  %102 = load i64*, i64** %10, align 8
  %103 = load i64, i64* %17, align 8
  %104 = load i64, i64* %19, align 8
  %105 = load i64, i64* %21, align 8
  %106 = load i64, i64* %23, align 8
  %107 = load i64, i64* %25, align 8
  %108 = load i64, i64* %27, align 8
  %109 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %102, i64 %103, i64 %104, i64 %105, i64 %106, i64 %107, i64 %108)
  %110 = getelementptr inbounds i32, i32* %101, i64 %109
  %111 = load i32, i32* %110, align 4
  store i32 %111, i32* %28, align 4
  %112 = load i32*, i32** %8, align 8
  %113 = load i64*, i64** %11, align 8
  %114 = load i64, i64* %16, align 8
  %115 = load i64, i64* %18, align 8
  %116 = load i64, i64* %20, align 8
  %117 = load i64, i64* %22, align 8
  %118 = load i64, i64* %24, align 8
  %119 = load i64, i64* %26, align 8
  %120 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %113, i64 %114, i64 %115, i64 %116, i64 %117, i64 %118, i64 %119)
  %121 = getelementptr inbounds i32, i32* %112, i64 %120
  %122 = load i32, i32* %121, align 4
  store i32 %122, i32* %29, align 4
  %123 = call dereferenceable(4) i32* @_ZSt3minIiERKT_S2_S2_(i32* dereferenceable(4) %28, i32* dereferenceable(4) %29)
  %124 = load i32, i32* %123, align 4
  %125 = load i32*, i32** %7, align 8
  %126 = load i64*, i64** %10, align 8
  %127 = load i64, i64* %17, align 8
  %128 = load i64, i64* %19, align 8
  %129 = load i64, i64* %21, align 8
  %130 = load i64, i64* %23, align 8
  %131 = load i64, i64* %25, align 8
  %132 = load i64, i64* %27, align 8
  %133 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %126, i64 %127, i64 %128, i64 %129, i64 %130, i64 %131, i64 %132)
  %134 = getelementptr inbounds i32, i32* %125, i64 %133
  store i32 %124, i32* %134, align 4
  br label %135

; <label>:135:                                    ; preds = %100
  %136 = load i64, i64* %26, align 8
  %137 = add i64 %136, 1
  store i64 %137, i64* %26, align 8
  %138 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 5
  %139 = load i32, i32* %138, align 4
  %140 = zext i32 %139 to i64
  %141 = load i64, i64* %27, align 8
  %142 = add i64 %141, %140
  store i64 %142, i64* %27, align 8
  br label %94

; <label>:143:                                    ; preds = %94
  br label %144

; <label>:144:                                    ; preds = %143
  %145 = load i64, i64* %24, align 8
  %146 = add i64 %145, 1
  store i64 %146, i64* %24, align 8
  %147 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 4
  %148 = load i32, i32* %147, align 16
  %149 = zext i32 %148 to i64
  %150 = load i64, i64* %25, align 8
  %151 = add i64 %150, %149
  store i64 %151, i64* %25, align 8
  br label %87

; <label>:152:                                    ; preds = %87
  br label %153

; <label>:153:                                    ; preds = %152
  %154 = load i64, i64* %22, align 8
  %155 = add i64 %154, 1
  store i64 %155, i64* %22, align 8
  %156 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 3
  %157 = load i32, i32* %156, align 4
  %158 = zext i32 %157 to i64
  %159 = load i64, i64* %23, align 8
  %160 = add i64 %159, %158
  store i64 %160, i64* %23, align 8
  br label %80

; <label>:161:                                    ; preds = %80
  br label %162

; <label>:162:                                    ; preds = %161
  %163 = load i64, i64* %20, align 8
  %164 = add i64 %163, 1
  store i64 %164, i64* %20, align 8
  %165 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 2
  %166 = load i32, i32* %165, align 8
  %167 = zext i32 %166 to i64
  %168 = load i64, i64* %21, align 8
  %169 = add i64 %168, %167
  store i64 %169, i64* %21, align 8
  br label %73

; <label>:170:                                    ; preds = %73
  br label %171

; <label>:171:                                    ; preds = %170
  %172 = load i64, i64* %18, align 8
  %173 = add i64 %172, 1
  store i64 %173, i64* %18, align 8
  %174 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 1
  %175 = load i32, i32* %174, align 4
  %176 = zext i32 %175 to i64
  %177 = load i64, i64* %19, align 8
  %178 = add i64 %177, %176
  store i64 %178, i64* %19, align 8
  br label %66

; <label>:179:                                    ; preds = %66
  br label %180

; <label>:180:                                    ; preds = %179
  %181 = load i64, i64* %16, align 8
  %182 = add i64 %181, 1
  store i64 %182, i64* %16, align 8
  %183 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 0
  %184 = load i32, i32* %183, align 16
  %185 = zext i32 %184 to i64
  %186 = load i64, i64* %17, align 8
  %187 = add i64 %186, %185
  store i64 %187, i64* %17, align 8
  br label %59

; <label>:188:                                    ; preds = %59
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local dereferenceable(4) i32* @_ZSt3minIiERKT_S2_S2_(i32* dereferenceable(4), i32* dereferenceable(4)) #0 comdat {
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32*, align 8
  store i32* %0, i32** %4, align 8
  store i32* %1, i32** %5, align 8
  %6 = load i32*, i32** %5, align 8
  %7 = load i32, i32* %6, align 4
  %8 = load i32*, i32** %4, align 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %7, %9
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %2
  %12 = load i32*, i32** %5, align 8
  store i32* %12, i32** %3, align 8
  br label %15

; <label>:13:                                     ; preds = %2
  %14 = load i32*, i32** %4, align 8
  store i32* %14, i32** %3, align 8
  br label %15

; <label>:15:                                     ; preds = %13, %11
  %16 = load i32*, i32** %3, align 8
  ret i32* %16
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_reducemin_u(i64*, i64*, i64, i64*, i64*) #2 {
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  store i64* %0, i64** %6, align 8
  store i64* %1, i64** %7, align 8
  store i64 %2, i64* %8, align 8
  store i64* %3, i64** %9, align 8
  store i64* %4, i64** %10, align 8
  %11 = load i64*, i64** %6, align 8
  %12 = load i64*, i64** %7, align 8
  %13 = load i64, i64* %8, align 8
  %14 = load i64*, i64** %9, align 8
  %15 = load i64*, i64** %10, align 8
  %16 = call i64 @_ZNSt14numeric_limitsIlE3maxEv() #5
  call void @_ZN12_GLOBAL__N_116libjit_reduceminIlEEvPT_PKS1_mPKmS6_S1_(i64* %11, i64* %12, i64 %13, i64* %14, i64* %15, i64 %16)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local i64 @_ZNSt14numeric_limitsIlE3maxEv() #0 comdat align 2 {
  ret i64 9223372036854775807
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_116libjit_reduceminIlEEvPT_PKS1_mPKmS6_S1_(i64*, i64*, i64, i64*, i64*, i64) #2 {
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca [6 x i32], align 16
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  store i64* %0, i64** %7, align 8
  store i64* %1, i64** %8, align 8
  store i64 %2, i64* %9, align 8
  store i64* %3, i64** %10, align 8
  store i64* %4, i64** %11, align 8
  store i64 %5, i64* %12, align 8
  store i64 0, i64* %13, align 8
  br label %30

; <label>:30:                                     ; preds = %39, %6
  %31 = load i64, i64* %13, align 8
  %32 = load i64, i64* %9, align 8
  %33 = icmp ult i64 %31, %32
  br i1 %33, label %34, label %42

; <label>:34:                                     ; preds = %30
  %35 = load i64, i64* %12, align 8
  %36 = load i64*, i64** %7, align 8
  %37 = load i64, i64* %13, align 8
  %38 = getelementptr inbounds i64, i64* %36, i64 %37
  store i64 %35, i64* %38, align 8
  br label %39

; <label>:39:                                     ; preds = %34
  %40 = load i64, i64* %13, align 8
  %41 = add i64 %40, 1
  store i64 %41, i64* %13, align 8
  br label %30

; <label>:42:                                     ; preds = %30
  store i64 0, i64* %15, align 8
  br label %43

; <label>:43:                                     ; preds = %55, %42
  %44 = load i64, i64* %15, align 8
  %45 = icmp ult i64 %44, 6
  br i1 %45, label %46, label %58

; <label>:46:                                     ; preds = %43
  %47 = load i64*, i64** %10, align 8
  %48 = load i64, i64* %15, align 8
  %49 = getelementptr inbounds i64, i64* %47, i64 %48
  %50 = load i64, i64* %49, align 8
  %51 = icmp ugt i64 %50, 1
  %52 = zext i1 %51 to i32
  %53 = load i64, i64* %15, align 8
  %54 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 %53
  store i32 %52, i32* %54, align 4
  br label %55

; <label>:55:                                     ; preds = %46
  %56 = load i64, i64* %15, align 8
  %57 = add i64 %56, 1
  store i64 %57, i64* %15, align 8
  br label %43

; <label>:58:                                     ; preds = %43
  store i64 0, i64* %16, align 8
  store i64 0, i64* %17, align 8
  br label %59

; <label>:59:                                     ; preds = %180, %58
  %60 = load i64, i64* %16, align 8
  %61 = load i64*, i64** %11, align 8
  %62 = getelementptr inbounds i64, i64* %61, i64 0
  %63 = load i64, i64* %62, align 8
  %64 = icmp ult i64 %60, %63
  br i1 %64, label %65, label %188

; <label>:65:                                     ; preds = %59
  store i64 0, i64* %18, align 8
  store i64 0, i64* %19, align 8
  br label %66

; <label>:66:                                     ; preds = %171, %65
  %67 = load i64, i64* %18, align 8
  %68 = load i64*, i64** %11, align 8
  %69 = getelementptr inbounds i64, i64* %68, i64 1
  %70 = load i64, i64* %69, align 8
  %71 = icmp ult i64 %67, %70
  br i1 %71, label %72, label %179

; <label>:72:                                     ; preds = %66
  store i64 0, i64* %20, align 8
  store i64 0, i64* %21, align 8
  br label %73

; <label>:73:                                     ; preds = %162, %72
  %74 = load i64, i64* %20, align 8
  %75 = load i64*, i64** %11, align 8
  %76 = getelementptr inbounds i64, i64* %75, i64 2
  %77 = load i64, i64* %76, align 8
  %78 = icmp ult i64 %74, %77
  br i1 %78, label %79, label %170

; <label>:79:                                     ; preds = %73
  store i64 0, i64* %22, align 8
  store i64 0, i64* %23, align 8
  br label %80

; <label>:80:                                     ; preds = %153, %79
  %81 = load i64, i64* %22, align 8
  %82 = load i64*, i64** %11, align 8
  %83 = getelementptr inbounds i64, i64* %82, i64 3
  %84 = load i64, i64* %83, align 8
  %85 = icmp ult i64 %81, %84
  br i1 %85, label %86, label %161

; <label>:86:                                     ; preds = %80
  store i64 0, i64* %24, align 8
  store i64 0, i64* %25, align 8
  br label %87

; <label>:87:                                     ; preds = %144, %86
  %88 = load i64, i64* %24, align 8
  %89 = load i64*, i64** %11, align 8
  %90 = getelementptr inbounds i64, i64* %89, i64 4
  %91 = load i64, i64* %90, align 8
  %92 = icmp ult i64 %88, %91
  br i1 %92, label %93, label %152

; <label>:93:                                     ; preds = %87
  store i64 0, i64* %26, align 8
  store i64 0, i64* %27, align 8
  br label %94

; <label>:94:                                     ; preds = %135, %93
  %95 = load i64, i64* %26, align 8
  %96 = load i64*, i64** %11, align 8
  %97 = getelementptr inbounds i64, i64* %96, i64 5
  %98 = load i64, i64* %97, align 8
  %99 = icmp ult i64 %95, %98
  br i1 %99, label %100, label %143

; <label>:100:                                    ; preds = %94
  %101 = load i64*, i64** %7, align 8
  %102 = load i64*, i64** %10, align 8
  %103 = load i64, i64* %17, align 8
  %104 = load i64, i64* %19, align 8
  %105 = load i64, i64* %21, align 8
  %106 = load i64, i64* %23, align 8
  %107 = load i64, i64* %25, align 8
  %108 = load i64, i64* %27, align 8
  %109 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %102, i64 %103, i64 %104, i64 %105, i64 %106, i64 %107, i64 %108)
  %110 = getelementptr inbounds i64, i64* %101, i64 %109
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %28, align 8
  %112 = load i64*, i64** %8, align 8
  %113 = load i64*, i64** %11, align 8
  %114 = load i64, i64* %16, align 8
  %115 = load i64, i64* %18, align 8
  %116 = load i64, i64* %20, align 8
  %117 = load i64, i64* %22, align 8
  %118 = load i64, i64* %24, align 8
  %119 = load i64, i64* %26, align 8
  %120 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %113, i64 %114, i64 %115, i64 %116, i64 %117, i64 %118, i64 %119)
  %121 = getelementptr inbounds i64, i64* %112, i64 %120
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %29, align 8
  %123 = call dereferenceable(8) i64* @_ZSt3minIlERKT_S2_S2_(i64* dereferenceable(8) %28, i64* dereferenceable(8) %29)
  %124 = load i64, i64* %123, align 8
  %125 = load i64*, i64** %7, align 8
  %126 = load i64*, i64** %10, align 8
  %127 = load i64, i64* %17, align 8
  %128 = load i64, i64* %19, align 8
  %129 = load i64, i64* %21, align 8
  %130 = load i64, i64* %23, align 8
  %131 = load i64, i64* %25, align 8
  %132 = load i64, i64* %27, align 8
  %133 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %126, i64 %127, i64 %128, i64 %129, i64 %130, i64 %131, i64 %132)
  %134 = getelementptr inbounds i64, i64* %125, i64 %133
  store i64 %124, i64* %134, align 8
  br label %135

; <label>:135:                                    ; preds = %100
  %136 = load i64, i64* %26, align 8
  %137 = add i64 %136, 1
  store i64 %137, i64* %26, align 8
  %138 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 5
  %139 = load i32, i32* %138, align 4
  %140 = zext i32 %139 to i64
  %141 = load i64, i64* %27, align 8
  %142 = add i64 %141, %140
  store i64 %142, i64* %27, align 8
  br label %94

; <label>:143:                                    ; preds = %94
  br label %144

; <label>:144:                                    ; preds = %143
  %145 = load i64, i64* %24, align 8
  %146 = add i64 %145, 1
  store i64 %146, i64* %24, align 8
  %147 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 4
  %148 = load i32, i32* %147, align 16
  %149 = zext i32 %148 to i64
  %150 = load i64, i64* %25, align 8
  %151 = add i64 %150, %149
  store i64 %151, i64* %25, align 8
  br label %87

; <label>:152:                                    ; preds = %87
  br label %153

; <label>:153:                                    ; preds = %152
  %154 = load i64, i64* %22, align 8
  %155 = add i64 %154, 1
  store i64 %155, i64* %22, align 8
  %156 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 3
  %157 = load i32, i32* %156, align 4
  %158 = zext i32 %157 to i64
  %159 = load i64, i64* %23, align 8
  %160 = add i64 %159, %158
  store i64 %160, i64* %23, align 8
  br label %80

; <label>:161:                                    ; preds = %80
  br label %162

; <label>:162:                                    ; preds = %161
  %163 = load i64, i64* %20, align 8
  %164 = add i64 %163, 1
  store i64 %164, i64* %20, align 8
  %165 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 2
  %166 = load i32, i32* %165, align 8
  %167 = zext i32 %166 to i64
  %168 = load i64, i64* %21, align 8
  %169 = add i64 %168, %167
  store i64 %169, i64* %21, align 8
  br label %73

; <label>:170:                                    ; preds = %73
  br label %171

; <label>:171:                                    ; preds = %170
  %172 = load i64, i64* %18, align 8
  %173 = add i64 %172, 1
  store i64 %173, i64* %18, align 8
  %174 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 1
  %175 = load i32, i32* %174, align 4
  %176 = zext i32 %175 to i64
  %177 = load i64, i64* %19, align 8
  %178 = add i64 %177, %176
  store i64 %178, i64* %19, align 8
  br label %66

; <label>:179:                                    ; preds = %66
  br label %180

; <label>:180:                                    ; preds = %179
  %181 = load i64, i64* %16, align 8
  %182 = add i64 %181, 1
  store i64 %182, i64* %16, align 8
  %183 = getelementptr inbounds [6 x i32], [6 x i32]* %14, i64 0, i64 0
  %184 = load i32, i32* %183, align 16
  %185 = zext i32 %184 to i64
  %186 = load i64, i64* %17, align 8
  %187 = add i64 %186, %185
  store i64 %187, i64* %17, align 8
  br label %59

; <label>:188:                                    ; preds = %59
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local dereferenceable(8) i64* @_ZSt3minIlERKT_S2_S2_(i64* dereferenceable(8), i64* dereferenceable(8)) #0 comdat {
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  store i64* %0, i64** %4, align 8
  store i64* %1, i64** %5, align 8
  %6 = load i64*, i64** %5, align 8
  %7 = load i64, i64* %6, align 8
  %8 = load i64*, i64** %4, align 8
  %9 = load i64, i64* %8, align 8
  %10 = icmp slt i64 %7, %9
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %2
  %12 = load i64*, i64** %5, align 8
  store i64* %12, i64** %3, align 8
  br label %15

; <label>:13:                                     ; preds = %2
  %14 = load i64*, i64** %4, align 8
  store i64* %14, i64** %3, align 8
  br label %15

; <label>:15:                                     ; preds = %13, %11
  %16 = load i64*, i64** %3, align 8
  ret i64* %16
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_batchedreduceadd_i8(i8*, i8*, i64*, i64*, i32, i32, i32, i32, i32, i64) #2 {
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i32, align 4
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i32, align 4
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca i32, align 4
  %36 = alloca i64, align 8
  %37 = alloca i64, align 8
  %38 = alloca i32, align 4
  %39 = alloca i64, align 8
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  %43 = alloca i64, align 8
  %44 = alloca i32, align 4
  %45 = alloca i64, align 8
  %46 = alloca i64, align 8
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  %51 = alloca i64, align 8
  %52 = alloca i64, align 8
  %53 = alloca i32, align 4
  %54 = alloca i64, align 8
  %55 = alloca i64, align 8
  %56 = alloca i32, align 4
  %57 = alloca i64, align 8
  %58 = alloca i64, align 8
  %59 = alloca i64, align 8
  %60 = alloca i64, align 8
  %61 = alloca i64, align 8
  %62 = alloca i32, align 4
  %63 = alloca i64, align 8
  %64 = alloca i64, align 8
  %65 = alloca i32, align 4
  %66 = alloca i64, align 8
  %67 = alloca i64, align 8
  %68 = alloca i64, align 8
  %69 = alloca i64, align 8
  %70 = alloca i64, align 8
  %71 = alloca i32, align 4
  %72 = alloca i64, align 8
  %73 = alloca i64, align 8
  %74 = alloca i32, align 4
  store i8* %0, i8** %11, align 8
  store i8* %1, i8** %12, align 8
  store i64* %2, i64** %13, align 8
  store i64* %3, i64** %14, align 8
  store i32 %4, i32* %15, align 4
  store i32 %5, i32* %16, align 4
  store i32 %6, i32* %17, align 4
  store i32 %7, i32* %18, align 4
  store i32 %8, i32* %19, align 4
  store i64 %9, i64* %20, align 8
  %75 = load i64, i64* %20, align 8
  switch i64 %75, label %682 [
    i64 0, label %76
    i64 1, label %177
    i64 2, label %278
    i64 3, label %379
    i64 4, label %480
    i64 5, label %581
  ]

; <label>:76:                                     ; preds = %10
  store i64 0, i64* %21, align 8
  br label %77

; <label>:77:                                     ; preds = %173, %76
  %78 = load i64, i64* %21, align 8
  %79 = load i64*, i64** %14, align 8
  %80 = getelementptr inbounds i64, i64* %79, i64 1
  %81 = load i64, i64* %80, align 8
  %82 = icmp ult i64 %78, %81
  br i1 %82, label %83, label %176

; <label>:83:                                     ; preds = %77
  store i64 0, i64* %22, align 8
  br label %84

; <label>:84:                                     ; preds = %169, %83
  %85 = load i64, i64* %22, align 8
  %86 = load i64*, i64** %14, align 8
  %87 = getelementptr inbounds i64, i64* %86, i64 2
  %88 = load i64, i64* %87, align 8
  %89 = icmp ult i64 %85, %88
  br i1 %89, label %90, label %172

; <label>:90:                                     ; preds = %84
  store i64 0, i64* %23, align 8
  br label %91

; <label>:91:                                     ; preds = %165, %90
  %92 = load i64, i64* %23, align 8
  %93 = load i64*, i64** %14, align 8
  %94 = getelementptr inbounds i64, i64* %93, i64 3
  %95 = load i64, i64* %94, align 8
  %96 = icmp ult i64 %92, %95
  br i1 %96, label %97, label %168

; <label>:97:                                     ; preds = %91
  store i64 0, i64* %24, align 8
  br label %98

; <label>:98:                                     ; preds = %161, %97
  %99 = load i64, i64* %24, align 8
  %100 = load i64*, i64** %14, align 8
  %101 = getelementptr inbounds i64, i64* %100, i64 4
  %102 = load i64, i64* %101, align 8
  %103 = icmp ult i64 %99, %102
  br i1 %103, label %104, label %164

; <label>:104:                                    ; preds = %98
  store i64 0, i64* %25, align 8
  br label %105

; <label>:105:                                    ; preds = %157, %104
  %106 = load i64, i64* %25, align 8
  %107 = load i64*, i64** %14, align 8
  %108 = getelementptr inbounds i64, i64* %107, i64 5
  %109 = load i64, i64* %108, align 8
  %110 = icmp ult i64 %106, %109
  br i1 %110, label %111, label %160

; <label>:111:                                    ; preds = %105
  store i32 0, i32* %26, align 4
  store i64 0, i64* %27, align 8
  br label %112

; <label>:112:                                    ; preds = %135, %111
  %113 = load i64, i64* %27, align 8
  %114 = load i64*, i64** %14, align 8
  %115 = getelementptr inbounds i64, i64* %114, i64 0
  %116 = load i64, i64* %115, align 8
  %117 = icmp ult i64 %113, %116
  br i1 %117, label %118, label %138

; <label>:118:                                    ; preds = %112
  %119 = load i8*, i8** %12, align 8
  %120 = load i64*, i64** %14, align 8
  %121 = load i64, i64* %27, align 8
  %122 = load i64, i64* %21, align 8
  %123 = load i64, i64* %22, align 8
  %124 = load i64, i64* %23, align 8
  %125 = load i64, i64* %24, align 8
  %126 = load i64, i64* %25, align 8
  %127 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %120, i64 %121, i64 %122, i64 %123, i64 %124, i64 %125, i64 %126)
  %128 = getelementptr inbounds i8, i8* %119, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = sext i8 %129 to i32
  %131 = load i32, i32* %16, align 4
  %132 = sub nsw i32 %130, %131
  %133 = load i32, i32* %26, align 4
  %134 = add nsw i32 %133, %132
  store i32 %134, i32* %26, align 4
  br label %135

; <label>:135:                                    ; preds = %118
  %136 = load i64, i64* %27, align 8
  %137 = add i64 %136, 1
  store i64 %137, i64* %27, align 8
  br label %112

; <label>:138:                                    ; preds = %112
  store i64 0, i64* %28, align 8
  %139 = load i32, i32* %26, align 4
  %140 = load i32, i32* %17, align 4
  %141 = load i32, i32* %18, align 4
  %142 = load i32, i32* %19, align 4
  %143 = load i32, i32* %15, align 4
  %144 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %139, i32 %140, i32 %141, i32 %142, i32 %143)
  store i32 %144, i32* %29, align 4
  %145 = load i32, i32* %29, align 4
  %146 = call signext i8 @_Z11libjit_clipi(i32 %145)
  %147 = load i8*, i8** %11, align 8
  %148 = load i64*, i64** %13, align 8
  %149 = load i64, i64* %28, align 8
  %150 = load i64, i64* %21, align 8
  %151 = load i64, i64* %22, align 8
  %152 = load i64, i64* %23, align 8
  %153 = load i64, i64* %24, align 8
  %154 = load i64, i64* %25, align 8
  %155 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %148, i64 %149, i64 %150, i64 %151, i64 %152, i64 %153, i64 %154)
  %156 = getelementptr inbounds i8, i8* %147, i64 %155
  store i8 %146, i8* %156, align 1
  br label %157

; <label>:157:                                    ; preds = %138
  %158 = load i64, i64* %25, align 8
  %159 = add i64 %158, 1
  store i64 %159, i64* %25, align 8
  br label %105

; <label>:160:                                    ; preds = %105
  br label %161

; <label>:161:                                    ; preds = %160
  %162 = load i64, i64* %24, align 8
  %163 = add i64 %162, 1
  store i64 %163, i64* %24, align 8
  br label %98

; <label>:164:                                    ; preds = %98
  br label %165

; <label>:165:                                    ; preds = %164
  %166 = load i64, i64* %23, align 8
  %167 = add i64 %166, 1
  store i64 %167, i64* %23, align 8
  br label %91

; <label>:168:                                    ; preds = %91
  br label %169

; <label>:169:                                    ; preds = %168
  %170 = load i64, i64* %22, align 8
  %171 = add i64 %170, 1
  store i64 %171, i64* %22, align 8
  br label %84

; <label>:172:                                    ; preds = %84
  br label %173

; <label>:173:                                    ; preds = %172
  %174 = load i64, i64* %21, align 8
  %175 = add i64 %174, 1
  store i64 %175, i64* %21, align 8
  br label %77

; <label>:176:                                    ; preds = %77
  br label %682

; <label>:177:                                    ; preds = %10
  store i64 0, i64* %30, align 8
  br label %178

; <label>:178:                                    ; preds = %274, %177
  %179 = load i64, i64* %30, align 8
  %180 = load i64*, i64** %14, align 8
  %181 = getelementptr inbounds i64, i64* %180, i64 0
  %182 = load i64, i64* %181, align 8
  %183 = icmp ult i64 %179, %182
  br i1 %183, label %184, label %277

; <label>:184:                                    ; preds = %178
  store i64 0, i64* %31, align 8
  br label %185

; <label>:185:                                    ; preds = %270, %184
  %186 = load i64, i64* %31, align 8
  %187 = load i64*, i64** %14, align 8
  %188 = getelementptr inbounds i64, i64* %187, i64 2
  %189 = load i64, i64* %188, align 8
  %190 = icmp ult i64 %186, %189
  br i1 %190, label %191, label %273

; <label>:191:                                    ; preds = %185
  store i64 0, i64* %32, align 8
  br label %192

; <label>:192:                                    ; preds = %266, %191
  %193 = load i64, i64* %32, align 8
  %194 = load i64*, i64** %14, align 8
  %195 = getelementptr inbounds i64, i64* %194, i64 3
  %196 = load i64, i64* %195, align 8
  %197 = icmp ult i64 %193, %196
  br i1 %197, label %198, label %269

; <label>:198:                                    ; preds = %192
  store i64 0, i64* %33, align 8
  br label %199

; <label>:199:                                    ; preds = %262, %198
  %200 = load i64, i64* %33, align 8
  %201 = load i64*, i64** %14, align 8
  %202 = getelementptr inbounds i64, i64* %201, i64 4
  %203 = load i64, i64* %202, align 8
  %204 = icmp ult i64 %200, %203
  br i1 %204, label %205, label %265

; <label>:205:                                    ; preds = %199
  store i64 0, i64* %34, align 8
  br label %206

; <label>:206:                                    ; preds = %258, %205
  %207 = load i64, i64* %34, align 8
  %208 = load i64*, i64** %14, align 8
  %209 = getelementptr inbounds i64, i64* %208, i64 5
  %210 = load i64, i64* %209, align 8
  %211 = icmp ult i64 %207, %210
  br i1 %211, label %212, label %261

; <label>:212:                                    ; preds = %206
  store i32 0, i32* %35, align 4
  store i64 0, i64* %36, align 8
  br label %213

; <label>:213:                                    ; preds = %236, %212
  %214 = load i64, i64* %36, align 8
  %215 = load i64*, i64** %14, align 8
  %216 = getelementptr inbounds i64, i64* %215, i64 1
  %217 = load i64, i64* %216, align 8
  %218 = icmp ult i64 %214, %217
  br i1 %218, label %219, label %239

; <label>:219:                                    ; preds = %213
  %220 = load i8*, i8** %12, align 8
  %221 = load i64*, i64** %14, align 8
  %222 = load i64, i64* %30, align 8
  %223 = load i64, i64* %36, align 8
  %224 = load i64, i64* %31, align 8
  %225 = load i64, i64* %32, align 8
  %226 = load i64, i64* %33, align 8
  %227 = load i64, i64* %34, align 8
  %228 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %221, i64 %222, i64 %223, i64 %224, i64 %225, i64 %226, i64 %227)
  %229 = getelementptr inbounds i8, i8* %220, i64 %228
  %230 = load i8, i8* %229, align 1
  %231 = sext i8 %230 to i32
  %232 = load i32, i32* %16, align 4
  %233 = sub nsw i32 %231, %232
  %234 = load i32, i32* %35, align 4
  %235 = add nsw i32 %234, %233
  store i32 %235, i32* %35, align 4
  br label %236

; <label>:236:                                    ; preds = %219
  %237 = load i64, i64* %36, align 8
  %238 = add i64 %237, 1
  store i64 %238, i64* %36, align 8
  br label %213

; <label>:239:                                    ; preds = %213
  store i64 0, i64* %37, align 8
  %240 = load i32, i32* %35, align 4
  %241 = load i32, i32* %17, align 4
  %242 = load i32, i32* %18, align 4
  %243 = load i32, i32* %19, align 4
  %244 = load i32, i32* %15, align 4
  %245 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %240, i32 %241, i32 %242, i32 %243, i32 %244)
  store i32 %245, i32* %38, align 4
  %246 = load i32, i32* %38, align 4
  %247 = call signext i8 @_Z11libjit_clipi(i32 %246)
  %248 = load i8*, i8** %11, align 8
  %249 = load i64*, i64** %13, align 8
  %250 = load i64, i64* %30, align 8
  %251 = load i64, i64* %37, align 8
  %252 = load i64, i64* %31, align 8
  %253 = load i64, i64* %32, align 8
  %254 = load i64, i64* %33, align 8
  %255 = load i64, i64* %34, align 8
  %256 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %249, i64 %250, i64 %251, i64 %252, i64 %253, i64 %254, i64 %255)
  %257 = getelementptr inbounds i8, i8* %248, i64 %256
  store i8 %247, i8* %257, align 1
  br label %258

; <label>:258:                                    ; preds = %239
  %259 = load i64, i64* %34, align 8
  %260 = add i64 %259, 1
  store i64 %260, i64* %34, align 8
  br label %206

; <label>:261:                                    ; preds = %206
  br label %262

; <label>:262:                                    ; preds = %261
  %263 = load i64, i64* %33, align 8
  %264 = add i64 %263, 1
  store i64 %264, i64* %33, align 8
  br label %199

; <label>:265:                                    ; preds = %199
  br label %266

; <label>:266:                                    ; preds = %265
  %267 = load i64, i64* %32, align 8
  %268 = add i64 %267, 1
  store i64 %268, i64* %32, align 8
  br label %192

; <label>:269:                                    ; preds = %192
  br label %270

; <label>:270:                                    ; preds = %269
  %271 = load i64, i64* %31, align 8
  %272 = add i64 %271, 1
  store i64 %272, i64* %31, align 8
  br label %185

; <label>:273:                                    ; preds = %185
  br label %274

; <label>:274:                                    ; preds = %273
  %275 = load i64, i64* %30, align 8
  %276 = add i64 %275, 1
  store i64 %276, i64* %30, align 8
  br label %178

; <label>:277:                                    ; preds = %178
  br label %682

; <label>:278:                                    ; preds = %10
  store i64 0, i64* %39, align 8
  br label %279

; <label>:279:                                    ; preds = %375, %278
  %280 = load i64, i64* %39, align 8
  %281 = load i64*, i64** %14, align 8
  %282 = getelementptr inbounds i64, i64* %281, i64 0
  %283 = load i64, i64* %282, align 8
  %284 = icmp ult i64 %280, %283
  br i1 %284, label %285, label %378

; <label>:285:                                    ; preds = %279
  store i64 0, i64* %40, align 8
  br label %286

; <label>:286:                                    ; preds = %371, %285
  %287 = load i64, i64* %40, align 8
  %288 = load i64*, i64** %14, align 8
  %289 = getelementptr inbounds i64, i64* %288, i64 1
  %290 = load i64, i64* %289, align 8
  %291 = icmp ult i64 %287, %290
  br i1 %291, label %292, label %374

; <label>:292:                                    ; preds = %286
  store i64 0, i64* %41, align 8
  br label %293

; <label>:293:                                    ; preds = %367, %292
  %294 = load i64, i64* %41, align 8
  %295 = load i64*, i64** %14, align 8
  %296 = getelementptr inbounds i64, i64* %295, i64 3
  %297 = load i64, i64* %296, align 8
  %298 = icmp ult i64 %294, %297
  br i1 %298, label %299, label %370

; <label>:299:                                    ; preds = %293
  store i64 0, i64* %42, align 8
  br label %300

; <label>:300:                                    ; preds = %363, %299
  %301 = load i64, i64* %42, align 8
  %302 = load i64*, i64** %14, align 8
  %303 = getelementptr inbounds i64, i64* %302, i64 4
  %304 = load i64, i64* %303, align 8
  %305 = icmp ult i64 %301, %304
  br i1 %305, label %306, label %366

; <label>:306:                                    ; preds = %300
  store i64 0, i64* %43, align 8
  br label %307

; <label>:307:                                    ; preds = %359, %306
  %308 = load i64, i64* %43, align 8
  %309 = load i64*, i64** %14, align 8
  %310 = getelementptr inbounds i64, i64* %309, i64 5
  %311 = load i64, i64* %310, align 8
  %312 = icmp ult i64 %308, %311
  br i1 %312, label %313, label %362

; <label>:313:                                    ; preds = %307
  store i32 0, i32* %44, align 4
  store i64 0, i64* %45, align 8
  br label %314

; <label>:314:                                    ; preds = %337, %313
  %315 = load i64, i64* %45, align 8
  %316 = load i64*, i64** %14, align 8
  %317 = getelementptr inbounds i64, i64* %316, i64 2
  %318 = load i64, i64* %317, align 8
  %319 = icmp ult i64 %315, %318
  br i1 %319, label %320, label %340

; <label>:320:                                    ; preds = %314
  %321 = load i8*, i8** %12, align 8
  %322 = load i64*, i64** %14, align 8
  %323 = load i64, i64* %39, align 8
  %324 = load i64, i64* %40, align 8
  %325 = load i64, i64* %45, align 8
  %326 = load i64, i64* %41, align 8
  %327 = load i64, i64* %42, align 8
  %328 = load i64, i64* %43, align 8
  %329 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %322, i64 %323, i64 %324, i64 %325, i64 %326, i64 %327, i64 %328)
  %330 = getelementptr inbounds i8, i8* %321, i64 %329
  %331 = load i8, i8* %330, align 1
  %332 = sext i8 %331 to i32
  %333 = load i32, i32* %16, align 4
  %334 = sub nsw i32 %332, %333
  %335 = load i32, i32* %44, align 4
  %336 = add nsw i32 %335, %334
  store i32 %336, i32* %44, align 4
  br label %337

; <label>:337:                                    ; preds = %320
  %338 = load i64, i64* %45, align 8
  %339 = add i64 %338, 1
  store i64 %339, i64* %45, align 8
  br label %314

; <label>:340:                                    ; preds = %314
  store i64 0, i64* %46, align 8
  %341 = load i32, i32* %44, align 4
  %342 = load i32, i32* %17, align 4
  %343 = load i32, i32* %18, align 4
  %344 = load i32, i32* %19, align 4
  %345 = load i32, i32* %15, align 4
  %346 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %341, i32 %342, i32 %343, i32 %344, i32 %345)
  store i32 %346, i32* %47, align 4
  %347 = load i32, i32* %47, align 4
  %348 = call signext i8 @_Z11libjit_clipi(i32 %347)
  %349 = load i8*, i8** %11, align 8
  %350 = load i64*, i64** %13, align 8
  %351 = load i64, i64* %39, align 8
  %352 = load i64, i64* %40, align 8
  %353 = load i64, i64* %46, align 8
  %354 = load i64, i64* %41, align 8
  %355 = load i64, i64* %42, align 8
  %356 = load i64, i64* %43, align 8
  %357 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %350, i64 %351, i64 %352, i64 %353, i64 %354, i64 %355, i64 %356)
  %358 = getelementptr inbounds i8, i8* %349, i64 %357
  store i8 %348, i8* %358, align 1
  br label %359

; <label>:359:                                    ; preds = %340
  %360 = load i64, i64* %43, align 8
  %361 = add i64 %360, 1
  store i64 %361, i64* %43, align 8
  br label %307

; <label>:362:                                    ; preds = %307
  br label %363

; <label>:363:                                    ; preds = %362
  %364 = load i64, i64* %42, align 8
  %365 = add i64 %364, 1
  store i64 %365, i64* %42, align 8
  br label %300

; <label>:366:                                    ; preds = %300
  br label %367

; <label>:367:                                    ; preds = %366
  %368 = load i64, i64* %41, align 8
  %369 = add i64 %368, 1
  store i64 %369, i64* %41, align 8
  br label %293

; <label>:370:                                    ; preds = %293
  br label %371

; <label>:371:                                    ; preds = %370
  %372 = load i64, i64* %40, align 8
  %373 = add i64 %372, 1
  store i64 %373, i64* %40, align 8
  br label %286

; <label>:374:                                    ; preds = %286
  br label %375

; <label>:375:                                    ; preds = %374
  %376 = load i64, i64* %39, align 8
  %377 = add i64 %376, 1
  store i64 %377, i64* %39, align 8
  br label %279

; <label>:378:                                    ; preds = %279
  br label %682

; <label>:379:                                    ; preds = %10
  store i64 0, i64* %48, align 8
  br label %380

; <label>:380:                                    ; preds = %476, %379
  %381 = load i64, i64* %48, align 8
  %382 = load i64*, i64** %14, align 8
  %383 = getelementptr inbounds i64, i64* %382, i64 0
  %384 = load i64, i64* %383, align 8
  %385 = icmp ult i64 %381, %384
  br i1 %385, label %386, label %479

; <label>:386:                                    ; preds = %380
  store i64 0, i64* %49, align 8
  br label %387

; <label>:387:                                    ; preds = %472, %386
  %388 = load i64, i64* %49, align 8
  %389 = load i64*, i64** %14, align 8
  %390 = getelementptr inbounds i64, i64* %389, i64 1
  %391 = load i64, i64* %390, align 8
  %392 = icmp ult i64 %388, %391
  br i1 %392, label %393, label %475

; <label>:393:                                    ; preds = %387
  store i64 0, i64* %50, align 8
  br label %394

; <label>:394:                                    ; preds = %468, %393
  %395 = load i64, i64* %50, align 8
  %396 = load i64*, i64** %14, align 8
  %397 = getelementptr inbounds i64, i64* %396, i64 2
  %398 = load i64, i64* %397, align 8
  %399 = icmp ult i64 %395, %398
  br i1 %399, label %400, label %471

; <label>:400:                                    ; preds = %394
  store i64 0, i64* %51, align 8
  br label %401

; <label>:401:                                    ; preds = %464, %400
  %402 = load i64, i64* %51, align 8
  %403 = load i64*, i64** %14, align 8
  %404 = getelementptr inbounds i64, i64* %403, i64 4
  %405 = load i64, i64* %404, align 8
  %406 = icmp ult i64 %402, %405
  br i1 %406, label %407, label %467

; <label>:407:                                    ; preds = %401
  store i64 0, i64* %52, align 8
  br label %408

; <label>:408:                                    ; preds = %460, %407
  %409 = load i64, i64* %52, align 8
  %410 = load i64*, i64** %14, align 8
  %411 = getelementptr inbounds i64, i64* %410, i64 5
  %412 = load i64, i64* %411, align 8
  %413 = icmp ult i64 %409, %412
  br i1 %413, label %414, label %463

; <label>:414:                                    ; preds = %408
  store i32 0, i32* %53, align 4
  store i64 0, i64* %54, align 8
  br label %415

; <label>:415:                                    ; preds = %438, %414
  %416 = load i64, i64* %54, align 8
  %417 = load i64*, i64** %14, align 8
  %418 = getelementptr inbounds i64, i64* %417, i64 3
  %419 = load i64, i64* %418, align 8
  %420 = icmp ult i64 %416, %419
  br i1 %420, label %421, label %441

; <label>:421:                                    ; preds = %415
  %422 = load i8*, i8** %12, align 8
  %423 = load i64*, i64** %14, align 8
  %424 = load i64, i64* %48, align 8
  %425 = load i64, i64* %49, align 8
  %426 = load i64, i64* %50, align 8
  %427 = load i64, i64* %54, align 8
  %428 = load i64, i64* %51, align 8
  %429 = load i64, i64* %52, align 8
  %430 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %423, i64 %424, i64 %425, i64 %426, i64 %427, i64 %428, i64 %429)
  %431 = getelementptr inbounds i8, i8* %422, i64 %430
  %432 = load i8, i8* %431, align 1
  %433 = sext i8 %432 to i32
  %434 = load i32, i32* %16, align 4
  %435 = sub nsw i32 %433, %434
  %436 = load i32, i32* %53, align 4
  %437 = add nsw i32 %436, %435
  store i32 %437, i32* %53, align 4
  br label %438

; <label>:438:                                    ; preds = %421
  %439 = load i64, i64* %54, align 8
  %440 = add i64 %439, 1
  store i64 %440, i64* %54, align 8
  br label %415

; <label>:441:                                    ; preds = %415
  store i64 0, i64* %55, align 8
  %442 = load i32, i32* %53, align 4
  %443 = load i32, i32* %17, align 4
  %444 = load i32, i32* %18, align 4
  %445 = load i32, i32* %19, align 4
  %446 = load i32, i32* %15, align 4
  %447 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %442, i32 %443, i32 %444, i32 %445, i32 %446)
  store i32 %447, i32* %56, align 4
  %448 = load i32, i32* %56, align 4
  %449 = call signext i8 @_Z11libjit_clipi(i32 %448)
  %450 = load i8*, i8** %11, align 8
  %451 = load i64*, i64** %13, align 8
  %452 = load i64, i64* %48, align 8
  %453 = load i64, i64* %49, align 8
  %454 = load i64, i64* %50, align 8
  %455 = load i64, i64* %55, align 8
  %456 = load i64, i64* %51, align 8
  %457 = load i64, i64* %52, align 8
  %458 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %451, i64 %452, i64 %453, i64 %454, i64 %455, i64 %456, i64 %457)
  %459 = getelementptr inbounds i8, i8* %450, i64 %458
  store i8 %449, i8* %459, align 1
  br label %460

; <label>:460:                                    ; preds = %441
  %461 = load i64, i64* %52, align 8
  %462 = add i64 %461, 1
  store i64 %462, i64* %52, align 8
  br label %408

; <label>:463:                                    ; preds = %408
  br label %464

; <label>:464:                                    ; preds = %463
  %465 = load i64, i64* %51, align 8
  %466 = add i64 %465, 1
  store i64 %466, i64* %51, align 8
  br label %401

; <label>:467:                                    ; preds = %401
  br label %468

; <label>:468:                                    ; preds = %467
  %469 = load i64, i64* %50, align 8
  %470 = add i64 %469, 1
  store i64 %470, i64* %50, align 8
  br label %394

; <label>:471:                                    ; preds = %394
  br label %472

; <label>:472:                                    ; preds = %471
  %473 = load i64, i64* %49, align 8
  %474 = add i64 %473, 1
  store i64 %474, i64* %49, align 8
  br label %387

; <label>:475:                                    ; preds = %387
  br label %476

; <label>:476:                                    ; preds = %475
  %477 = load i64, i64* %48, align 8
  %478 = add i64 %477, 1
  store i64 %478, i64* %48, align 8
  br label %380

; <label>:479:                                    ; preds = %380
  br label %682

; <label>:480:                                    ; preds = %10
  store i64 0, i64* %57, align 8
  br label %481

; <label>:481:                                    ; preds = %577, %480
  %482 = load i64, i64* %57, align 8
  %483 = load i64*, i64** %14, align 8
  %484 = getelementptr inbounds i64, i64* %483, i64 0
  %485 = load i64, i64* %484, align 8
  %486 = icmp ult i64 %482, %485
  br i1 %486, label %487, label %580

; <label>:487:                                    ; preds = %481
  store i64 0, i64* %58, align 8
  br label %488

; <label>:488:                                    ; preds = %573, %487
  %489 = load i64, i64* %58, align 8
  %490 = load i64*, i64** %14, align 8
  %491 = getelementptr inbounds i64, i64* %490, i64 1
  %492 = load i64, i64* %491, align 8
  %493 = icmp ult i64 %489, %492
  br i1 %493, label %494, label %576

; <label>:494:                                    ; preds = %488
  store i64 0, i64* %59, align 8
  br label %495

; <label>:495:                                    ; preds = %569, %494
  %496 = load i64, i64* %59, align 8
  %497 = load i64*, i64** %14, align 8
  %498 = getelementptr inbounds i64, i64* %497, i64 2
  %499 = load i64, i64* %498, align 8
  %500 = icmp ult i64 %496, %499
  br i1 %500, label %501, label %572

; <label>:501:                                    ; preds = %495
  store i64 0, i64* %60, align 8
  br label %502

; <label>:502:                                    ; preds = %565, %501
  %503 = load i64, i64* %60, align 8
  %504 = load i64*, i64** %14, align 8
  %505 = getelementptr inbounds i64, i64* %504, i64 3
  %506 = load i64, i64* %505, align 8
  %507 = icmp ult i64 %503, %506
  br i1 %507, label %508, label %568

; <label>:508:                                    ; preds = %502
  store i64 0, i64* %61, align 8
  br label %509

; <label>:509:                                    ; preds = %561, %508
  %510 = load i64, i64* %61, align 8
  %511 = load i64*, i64** %14, align 8
  %512 = getelementptr inbounds i64, i64* %511, i64 5
  %513 = load i64, i64* %512, align 8
  %514 = icmp ult i64 %510, %513
  br i1 %514, label %515, label %564

; <label>:515:                                    ; preds = %509
  store i32 0, i32* %62, align 4
  store i64 0, i64* %63, align 8
  br label %516

; <label>:516:                                    ; preds = %539, %515
  %517 = load i64, i64* %63, align 8
  %518 = load i64*, i64** %14, align 8
  %519 = getelementptr inbounds i64, i64* %518, i64 4
  %520 = load i64, i64* %519, align 8
  %521 = icmp ult i64 %517, %520
  br i1 %521, label %522, label %542

; <label>:522:                                    ; preds = %516
  %523 = load i8*, i8** %12, align 8
  %524 = load i64*, i64** %14, align 8
  %525 = load i64, i64* %57, align 8
  %526 = load i64, i64* %58, align 8
  %527 = load i64, i64* %59, align 8
  %528 = load i64, i64* %60, align 8
  %529 = load i64, i64* %63, align 8
  %530 = load i64, i64* %61, align 8
  %531 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %524, i64 %525, i64 %526, i64 %527, i64 %528, i64 %529, i64 %530)
  %532 = getelementptr inbounds i8, i8* %523, i64 %531
  %533 = load i8, i8* %532, align 1
  %534 = sext i8 %533 to i32
  %535 = load i32, i32* %16, align 4
  %536 = sub nsw i32 %534, %535
  %537 = load i32, i32* %62, align 4
  %538 = add nsw i32 %537, %536
  store i32 %538, i32* %62, align 4
  br label %539

; <label>:539:                                    ; preds = %522
  %540 = load i64, i64* %63, align 8
  %541 = add i64 %540, 1
  store i64 %541, i64* %63, align 8
  br label %516

; <label>:542:                                    ; preds = %516
  store i64 0, i64* %64, align 8
  %543 = load i32, i32* %62, align 4
  %544 = load i32, i32* %17, align 4
  %545 = load i32, i32* %18, align 4
  %546 = load i32, i32* %19, align 4
  %547 = load i32, i32* %15, align 4
  %548 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %543, i32 %544, i32 %545, i32 %546, i32 %547)
  store i32 %548, i32* %65, align 4
  %549 = load i32, i32* %65, align 4
  %550 = call signext i8 @_Z11libjit_clipi(i32 %549)
  %551 = load i8*, i8** %11, align 8
  %552 = load i64*, i64** %13, align 8
  %553 = load i64, i64* %57, align 8
  %554 = load i64, i64* %58, align 8
  %555 = load i64, i64* %59, align 8
  %556 = load i64, i64* %60, align 8
  %557 = load i64, i64* %64, align 8
  %558 = load i64, i64* %61, align 8
  %559 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %552, i64 %553, i64 %554, i64 %555, i64 %556, i64 %557, i64 %558)
  %560 = getelementptr inbounds i8, i8* %551, i64 %559
  store i8 %550, i8* %560, align 1
  br label %561

; <label>:561:                                    ; preds = %542
  %562 = load i64, i64* %61, align 8
  %563 = add i64 %562, 1
  store i64 %563, i64* %61, align 8
  br label %509

; <label>:564:                                    ; preds = %509
  br label %565

; <label>:565:                                    ; preds = %564
  %566 = load i64, i64* %60, align 8
  %567 = add i64 %566, 1
  store i64 %567, i64* %60, align 8
  br label %502

; <label>:568:                                    ; preds = %502
  br label %569

; <label>:569:                                    ; preds = %568
  %570 = load i64, i64* %59, align 8
  %571 = add i64 %570, 1
  store i64 %571, i64* %59, align 8
  br label %495

; <label>:572:                                    ; preds = %495
  br label %573

; <label>:573:                                    ; preds = %572
  %574 = load i64, i64* %58, align 8
  %575 = add i64 %574, 1
  store i64 %575, i64* %58, align 8
  br label %488

; <label>:576:                                    ; preds = %488
  br label %577

; <label>:577:                                    ; preds = %576
  %578 = load i64, i64* %57, align 8
  %579 = add i64 %578, 1
  store i64 %579, i64* %57, align 8
  br label %481

; <label>:580:                                    ; preds = %481
  br label %682

; <label>:581:                                    ; preds = %10
  store i64 0, i64* %66, align 8
  br label %582

; <label>:582:                                    ; preds = %678, %581
  %583 = load i64, i64* %66, align 8
  %584 = load i64*, i64** %14, align 8
  %585 = getelementptr inbounds i64, i64* %584, i64 0
  %586 = load i64, i64* %585, align 8
  %587 = icmp ult i64 %583, %586
  br i1 %587, label %588, label %681

; <label>:588:                                    ; preds = %582
  store i64 0, i64* %67, align 8
  br label %589

; <label>:589:                                    ; preds = %674, %588
  %590 = load i64, i64* %67, align 8
  %591 = load i64*, i64** %14, align 8
  %592 = getelementptr inbounds i64, i64* %591, i64 1
  %593 = load i64, i64* %592, align 8
  %594 = icmp ult i64 %590, %593
  br i1 %594, label %595, label %677

; <label>:595:                                    ; preds = %589
  store i64 0, i64* %68, align 8
  br label %596

; <label>:596:                                    ; preds = %670, %595
  %597 = load i64, i64* %68, align 8
  %598 = load i64*, i64** %14, align 8
  %599 = getelementptr inbounds i64, i64* %598, i64 2
  %600 = load i64, i64* %599, align 8
  %601 = icmp ult i64 %597, %600
  br i1 %601, label %602, label %673

; <label>:602:                                    ; preds = %596
  store i64 0, i64* %69, align 8
  br label %603

; <label>:603:                                    ; preds = %666, %602
  %604 = load i64, i64* %69, align 8
  %605 = load i64*, i64** %14, align 8
  %606 = getelementptr inbounds i64, i64* %605, i64 3
  %607 = load i64, i64* %606, align 8
  %608 = icmp ult i64 %604, %607
  br i1 %608, label %609, label %669

; <label>:609:                                    ; preds = %603
  store i64 0, i64* %70, align 8
  br label %610

; <label>:610:                                    ; preds = %662, %609
  %611 = load i64, i64* %70, align 8
  %612 = load i64*, i64** %14, align 8
  %613 = getelementptr inbounds i64, i64* %612, i64 4
  %614 = load i64, i64* %613, align 8
  %615 = icmp ult i64 %611, %614
  br i1 %615, label %616, label %665

; <label>:616:                                    ; preds = %610
  store i32 0, i32* %71, align 4
  store i64 0, i64* %72, align 8
  br label %617

; <label>:617:                                    ; preds = %640, %616
  %618 = load i64, i64* %72, align 8
  %619 = load i64*, i64** %14, align 8
  %620 = getelementptr inbounds i64, i64* %619, i64 5
  %621 = load i64, i64* %620, align 8
  %622 = icmp ult i64 %618, %621
  br i1 %622, label %623, label %643

; <label>:623:                                    ; preds = %617
  %624 = load i8*, i8** %12, align 8
  %625 = load i64*, i64** %14, align 8
  %626 = load i64, i64* %66, align 8
  %627 = load i64, i64* %67, align 8
  %628 = load i64, i64* %68, align 8
  %629 = load i64, i64* %69, align 8
  %630 = load i64, i64* %70, align 8
  %631 = load i64, i64* %72, align 8
  %632 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %625, i64 %626, i64 %627, i64 %628, i64 %629, i64 %630, i64 %631)
  %633 = getelementptr inbounds i8, i8* %624, i64 %632
  %634 = load i8, i8* %633, align 1
  %635 = sext i8 %634 to i32
  %636 = load i32, i32* %16, align 4
  %637 = sub nsw i32 %635, %636
  %638 = load i32, i32* %71, align 4
  %639 = add nsw i32 %638, %637
  store i32 %639, i32* %71, align 4
  br label %640

; <label>:640:                                    ; preds = %623
  %641 = load i64, i64* %72, align 8
  %642 = add i64 %641, 1
  store i64 %642, i64* %72, align 8
  br label %617

; <label>:643:                                    ; preds = %617
  store i64 0, i64* %73, align 8
  %644 = load i32, i32* %71, align 4
  %645 = load i32, i32* %17, align 4
  %646 = load i32, i32* %18, align 4
  %647 = load i32, i32* %19, align 4
  %648 = load i32, i32* %15, align 4
  %649 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %644, i32 %645, i32 %646, i32 %647, i32 %648)
  store i32 %649, i32* %74, align 4
  %650 = load i32, i32* %74, align 4
  %651 = call signext i8 @_Z11libjit_clipi(i32 %650)
  %652 = load i8*, i8** %11, align 8
  %653 = load i64*, i64** %13, align 8
  %654 = load i64, i64* %66, align 8
  %655 = load i64, i64* %67, align 8
  %656 = load i64, i64* %68, align 8
  %657 = load i64, i64* %69, align 8
  %658 = load i64, i64* %70, align 8
  %659 = load i64, i64* %73, align 8
  %660 = call i64 @_Z16libjit_getXYZWQRPKmmmmmmm(i64* %653, i64 %654, i64 %655, i64 %656, i64 %657, i64 %658, i64 %659)
  %661 = getelementptr inbounds i8, i8* %652, i64 %660
  store i8 %651, i8* %661, align 1
  br label %662

; <label>:662:                                    ; preds = %643
  %663 = load i64, i64* %70, align 8
  %664 = add i64 %663, 1
  store i64 %664, i64* %70, align 8
  br label %610

; <label>:665:                                    ; preds = %610
  br label %666

; <label>:666:                                    ; preds = %665
  %667 = load i64, i64* %69, align 8
  %668 = add i64 %667, 1
  store i64 %668, i64* %69, align 8
  br label %603

; <label>:669:                                    ; preds = %603
  br label %670

; <label>:670:                                    ; preds = %669
  %671 = load i64, i64* %68, align 8
  %672 = add i64 %671, 1
  store i64 %672, i64* %68, align 8
  br label %596

; <label>:673:                                    ; preds = %596
  br label %674

; <label>:674:                                    ; preds = %673
  %675 = load i64, i64* %67, align 8
  %676 = add i64 %675, 1
  store i64 %676, i64* %67, align 8
  br label %589

; <label>:677:                                    ; preds = %589
  br label %678

; <label>:678:                                    ; preds = %677
  %679 = load i64, i64* %66, align 8
  %680 = add i64 %679, 1
  store i64 %680, i64* %66, align 8
  br label %582

; <label>:681:                                    ; preds = %582
  br label %682

; <label>:682:                                    ; preds = %176, %277, %378, %479, %580, %681, %10
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_cross_entropy_loss_f(float*, float*, i64*, i64*) #2 {
  %5 = alloca float*, align 8
  %6 = alloca float*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca float, align 4
  store float* %0, float** %5, align 8
  store float* %1, float** %6, align 8
  store i64* %2, i64** %7, align 8
  store i64* %3, i64** %8, align 8
  %12 = load float*, float** %5, align 8
  %13 = getelementptr inbounds float, float* %12, i64 0
  store float 0.000000e+00, float* %13, align 4
  store i64 0, i64* %9, align 8
  br label %14

; <label>:14:                                     ; preds = %38, %4
  %15 = load i64, i64* %9, align 8
  %16 = load i64*, i64** %8, align 8
  %17 = getelementptr inbounds i64, i64* %16, i64 0
  %18 = load i64, i64* %17, align 8
  %19 = icmp ult i64 %15, %18
  br i1 %19, label %20, label %41

; <label>:20:                                     ; preds = %14
  %21 = load i64*, i64** %7, align 8
  %22 = load i64, i64* %9, align 8
  %23 = getelementptr inbounds i64, i64* %21, i64 %22
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %10, align 8
  %25 = load float*, float** %6, align 8
  %26 = load i64*, i64** %8, align 8
  %27 = load i64, i64* %9, align 8
  %28 = load i64, i64* %10, align 8
  %29 = call i64 @_Z12libjit_getXYPKmmm(i64* %26, i64 %27, i64 %28)
  %30 = getelementptr inbounds float, float* %25, i64 %29
  %31 = load float, float* %30, align 4
  store float %31, float* %11, align 4
  %32 = load float, float* %11, align 4
  %33 = call reassoc nsz arcp float @_ZSt3logf(float %32)
  %34 = load float*, float** %5, align 8
  %35 = getelementptr inbounds float, float* %34, i64 0
  %36 = load float, float* %35, align 4
  %37 = fsub reassoc nsz arcp contract float %36, %33
  store float %37, float* %35, align 4
  br label %38

; <label>:38:                                     ; preds = %20
  %39 = load i64, i64* %9, align 8
  %40 = add i64 %39, 1
  store i64 %40, i64* %9, align 8
  br label %14

; <label>:41:                                     ; preds = %14
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local i64 @_Z12libjit_getXYPKmmm(i64*, i64, i64) #0 comdat {
  %4 = alloca i64*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64* %0, i64** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load i64, i64* %5, align 8
  %8 = load i64*, i64** %4, align 8
  %9 = getelementptr inbounds i64, i64* %8, i64 1
  %10 = load i64, i64* %9, align 8
  %11 = mul i64 %7, %10
  %12 = load i64, i64* %6, align 8
  %13 = add i64 %11, %12
  ret i64 %13
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_gather64_f(float*, float*, i64*, i64, i64, i64, i64) #2 {
  %8 = alloca float*, align 8
  %9 = alloca float*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store float* %0, float** %8, align 8
  store float* %1, float** %9, align 8
  store i64* %2, i64** %10, align 8
  store i64 %3, i64* %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  %15 = load float*, float** %8, align 8
  %16 = load float*, float** %9, align 8
  %17 = load i64*, i64** %10, align 8
  %18 = load i64, i64* %11, align 8
  %19 = load i64, i64* %12, align 8
  %20 = load i64, i64* %13, align 8
  %21 = load i64, i64* %14, align 8
  call void @_ZN12_GLOBAL__N_113libjit_gatherIflEEvPT_PKS1_PKT0_mmmm(float* %15, float* %16, i64* %17, i64 %18, i64 %19, i64 %20, i64 %21)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_113libjit_gatherIflEEvPT_PKS1_PKT0_mmmm(float*, float*, i64*, i64, i64, i64, i64) #0 {
  %8 = alloca float*, align 8
  %9 = alloca float*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  store float* %0, float** %8, align 8
  store float* %1, float** %9, align 8
  store i64* %2, i64** %10, align 8
  store i64 %3, i64* %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  store i64 0, i64* %15, align 8
  store i64 0, i64* %16, align 8
  br label %20

; <label>:20:                                     ; preds = %59, %7
  %21 = load i64, i64* %16, align 8
  %22 = load i64, i64* %13, align 8
  %23 = icmp ult i64 %21, %22
  br i1 %23, label %24, label %62

; <label>:24:                                     ; preds = %20
  %25 = load i64, i64* %16, align 8
  %26 = load i64, i64* %14, align 8
  %27 = mul i64 %25, %26
  store i64 %27, i64* %17, align 8
  store i64 0, i64* %18, align 8
  br label %28

; <label>:28:                                     ; preds = %55, %24
  %29 = load i64, i64* %18, align 8
  %30 = load i64, i64* %11, align 8
  %31 = icmp ult i64 %29, %30
  br i1 %31, label %32, label %58

; <label>:32:                                     ; preds = %28
  %33 = load i64*, i64** %10, align 8
  %34 = load i64, i64* %18, align 8
  %35 = getelementptr inbounds i64, i64* %33, i64 %34
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %19, align 8
  %37 = load float*, float** %8, align 8
  %38 = load i64, i64* %15, align 8
  %39 = load i64, i64* %12, align 8
  %40 = mul i64 %38, %39
  %41 = getelementptr inbounds float, float* %37, i64 %40
  %42 = bitcast float* %41 to i8*
  %43 = load float*, float** %9, align 8
  %44 = load i64, i64* %17, align 8
  %45 = getelementptr inbounds float, float* %43, i64 %44
  %46 = load i64, i64* %19, align 8
  %47 = load i64, i64* %12, align 8
  %48 = mul i64 %46, %47
  %49 = getelementptr inbounds float, float* %45, i64 %48
  %50 = bitcast float* %49 to i8*
  %51 = load i64, i64* %12, align 8
  %52 = mul i64 %51, 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %42, i8* align 4 %50, i64 %52, i1 false)
  %53 = load i64, i64* %15, align 8
  %54 = add i64 %53, 1
  store i64 %54, i64* %15, align 8
  br label %55

; <label>:55:                                     ; preds = %32
  %56 = load i64, i64* %18, align 8
  %57 = add i64 %56, 1
  store i64 %57, i64* %18, align 8
  br label %28

; <label>:58:                                     ; preds = %28
  br label %59

; <label>:59:                                     ; preds = %58
  %60 = load i64, i64* %16, align 8
  %61 = add i64 %60, 1
  store i64 %61, i64* %16, align 8
  br label %20

; <label>:62:                                     ; preds = %20
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #3

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_gather64_i8(i8*, i8*, i64*, i64, i64, i64, i64) #2 {
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store i8* %0, i8** %8, align 8
  store i8* %1, i8** %9, align 8
  store i64* %2, i64** %10, align 8
  store i64 %3, i64* %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  %15 = load i8*, i8** %8, align 8
  %16 = load i8*, i8** %9, align 8
  %17 = load i64*, i64** %10, align 8
  %18 = load i64, i64* %11, align 8
  %19 = load i64, i64* %12, align 8
  %20 = load i64, i64* %13, align 8
  %21 = load i64, i64* %14, align 8
  call void @_ZN12_GLOBAL__N_113libjit_gatherIalEEvPT_PKS1_PKT0_mmmm(i8* %15, i8* %16, i64* %17, i64 %18, i64 %19, i64 %20, i64 %21)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_113libjit_gatherIalEEvPT_PKS1_PKT0_mmmm(i8*, i8*, i64*, i64, i64, i64, i64) #0 {
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  store i8* %0, i8** %8, align 8
  store i8* %1, i8** %9, align 8
  store i64* %2, i64** %10, align 8
  store i64 %3, i64* %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  store i64 0, i64* %15, align 8
  store i64 0, i64* %16, align 8
  br label %20

; <label>:20:                                     ; preds = %57, %7
  %21 = load i64, i64* %16, align 8
  %22 = load i64, i64* %13, align 8
  %23 = icmp ult i64 %21, %22
  br i1 %23, label %24, label %60

; <label>:24:                                     ; preds = %20
  %25 = load i64, i64* %16, align 8
  %26 = load i64, i64* %14, align 8
  %27 = mul i64 %25, %26
  store i64 %27, i64* %17, align 8
  store i64 0, i64* %18, align 8
  br label %28

; <label>:28:                                     ; preds = %53, %24
  %29 = load i64, i64* %18, align 8
  %30 = load i64, i64* %11, align 8
  %31 = icmp ult i64 %29, %30
  br i1 %31, label %32, label %56

; <label>:32:                                     ; preds = %28
  %33 = load i64*, i64** %10, align 8
  %34 = load i64, i64* %18, align 8
  %35 = getelementptr inbounds i64, i64* %33, i64 %34
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %19, align 8
  %37 = load i8*, i8** %8, align 8
  %38 = load i64, i64* %15, align 8
  %39 = load i64, i64* %12, align 8
  %40 = mul i64 %38, %39
  %41 = getelementptr inbounds i8, i8* %37, i64 %40
  %42 = load i8*, i8** %9, align 8
  %43 = load i64, i64* %17, align 8
  %44 = getelementptr inbounds i8, i8* %42, i64 %43
  %45 = load i64, i64* %19, align 8
  %46 = load i64, i64* %12, align 8
  %47 = mul i64 %45, %46
  %48 = getelementptr inbounds i8, i8* %44, i64 %47
  %49 = load i64, i64* %12, align 8
  %50 = mul i64 %49, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %48, i64 %50, i1 false)
  %51 = load i64, i64* %15, align 8
  %52 = add i64 %51, 1
  store i64 %52, i64* %15, align 8
  br label %53

; <label>:53:                                     ; preds = %32
  %54 = load i64, i64* %18, align 8
  %55 = add i64 %54, 1
  store i64 %55, i64* %18, align 8
  br label %28

; <label>:56:                                     ; preds = %28
  br label %57

; <label>:57:                                     ; preds = %56
  %58 = load i64, i64* %16, align 8
  %59 = add i64 %58, 1
  store i64 %59, i64* %16, align 8
  br label %20

; <label>:60:                                     ; preds = %20
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_gather64_u(i64*, i64*, i64*, i64, i64, i64, i64) #2 {
  %8 = alloca i64*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store i64* %0, i64** %8, align 8
  store i64* %1, i64** %9, align 8
  store i64* %2, i64** %10, align 8
  store i64 %3, i64* %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  %15 = load i64*, i64** %8, align 8
  %16 = load i64*, i64** %9, align 8
  %17 = load i64*, i64** %10, align 8
  %18 = load i64, i64* %11, align 8
  %19 = load i64, i64* %12, align 8
  %20 = load i64, i64* %13, align 8
  %21 = load i64, i64* %14, align 8
  call void @_ZN12_GLOBAL__N_113libjit_gatherIllEEvPT_PKS1_PKT0_mmmm(i64* %15, i64* %16, i64* %17, i64 %18, i64 %19, i64 %20, i64 %21)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_113libjit_gatherIllEEvPT_PKS1_PKT0_mmmm(i64*, i64*, i64*, i64, i64, i64, i64) #0 {
  %8 = alloca i64*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  store i64* %0, i64** %8, align 8
  store i64* %1, i64** %9, align 8
  store i64* %2, i64** %10, align 8
  store i64 %3, i64* %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  store i64 0, i64* %15, align 8
  store i64 0, i64* %16, align 8
  br label %20

; <label>:20:                                     ; preds = %59, %7
  %21 = load i64, i64* %16, align 8
  %22 = load i64, i64* %13, align 8
  %23 = icmp ult i64 %21, %22
  br i1 %23, label %24, label %62

; <label>:24:                                     ; preds = %20
  %25 = load i64, i64* %16, align 8
  %26 = load i64, i64* %14, align 8
  %27 = mul i64 %25, %26
  store i64 %27, i64* %17, align 8
  store i64 0, i64* %18, align 8
  br label %28

; <label>:28:                                     ; preds = %55, %24
  %29 = load i64, i64* %18, align 8
  %30 = load i64, i64* %11, align 8
  %31 = icmp ult i64 %29, %30
  br i1 %31, label %32, label %58

; <label>:32:                                     ; preds = %28
  %33 = load i64*, i64** %10, align 8
  %34 = load i64, i64* %18, align 8
  %35 = getelementptr inbounds i64, i64* %33, i64 %34
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %19, align 8
  %37 = load i64*, i64** %8, align 8
  %38 = load i64, i64* %15, align 8
  %39 = load i64, i64* %12, align 8
  %40 = mul i64 %38, %39
  %41 = getelementptr inbounds i64, i64* %37, i64 %40
  %42 = bitcast i64* %41 to i8*
  %43 = load i64*, i64** %9, align 8
  %44 = load i64, i64* %17, align 8
  %45 = getelementptr inbounds i64, i64* %43, i64 %44
  %46 = load i64, i64* %19, align 8
  %47 = load i64, i64* %12, align 8
  %48 = mul i64 %46, %47
  %49 = getelementptr inbounds i64, i64* %45, i64 %48
  %50 = bitcast i64* %49 to i8*
  %51 = load i64, i64* %12, align 8
  %52 = mul i64 %51, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %50, i64 %52, i1 false)
  %53 = load i64, i64* %15, align 8
  %54 = add i64 %53, 1
  store i64 %54, i64* %15, align 8
  br label %55

; <label>:55:                                     ; preds = %32
  %56 = load i64, i64* %18, align 8
  %57 = add i64 %56, 1
  store i64 %57, i64* %18, align 8
  br label %28

; <label>:58:                                     ; preds = %28
  br label %59

; <label>:59:                                     ; preds = %58
  %60 = load i64, i64* %16, align 8
  %61 = add i64 %60, 1
  store i64 %61, i64* %16, align 8
  br label %20

; <label>:62:                                     ; preds = %20
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_gather32_f(float*, float*, i32*, i64, i64, i64, i64) #2 {
  %8 = alloca float*, align 8
  %9 = alloca float*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store float* %0, float** %8, align 8
  store float* %1, float** %9, align 8
  store i32* %2, i32** %10, align 8
  store i64 %3, i64* %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  %15 = load float*, float** %8, align 8
  %16 = load float*, float** %9, align 8
  %17 = load i32*, i32** %10, align 8
  %18 = load i64, i64* %11, align 8
  %19 = load i64, i64* %12, align 8
  %20 = load i64, i64* %13, align 8
  %21 = load i64, i64* %14, align 8
  call void @_ZN12_GLOBAL__N_113libjit_gatherIfiEEvPT_PKS1_PKT0_mmmm(float* %15, float* %16, i32* %17, i64 %18, i64 %19, i64 %20, i64 %21)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_113libjit_gatherIfiEEvPT_PKS1_PKT0_mmmm(float*, float*, i32*, i64, i64, i64, i64) #0 {
  %8 = alloca float*, align 8
  %9 = alloca float*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  store float* %0, float** %8, align 8
  store float* %1, float** %9, align 8
  store i32* %2, i32** %10, align 8
  store i64 %3, i64* %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  store i64 0, i64* %15, align 8
  store i64 0, i64* %16, align 8
  br label %20

; <label>:20:                                     ; preds = %60, %7
  %21 = load i64, i64* %16, align 8
  %22 = load i64, i64* %13, align 8
  %23 = icmp ult i64 %21, %22
  br i1 %23, label %24, label %63

; <label>:24:                                     ; preds = %20
  %25 = load i64, i64* %16, align 8
  %26 = load i64, i64* %14, align 8
  %27 = mul i64 %25, %26
  store i64 %27, i64* %17, align 8
  store i64 0, i64* %18, align 8
  br label %28

; <label>:28:                                     ; preds = %56, %24
  %29 = load i64, i64* %18, align 8
  %30 = load i64, i64* %11, align 8
  %31 = icmp ult i64 %29, %30
  br i1 %31, label %32, label %59

; <label>:32:                                     ; preds = %28
  %33 = load i32*, i32** %10, align 8
  %34 = load i64, i64* %18, align 8
  %35 = getelementptr inbounds i32, i32* %33, i64 %34
  %36 = load i32, i32* %35, align 4
  %37 = sext i32 %36 to i64
  store i64 %37, i64* %19, align 8
  %38 = load float*, float** %8, align 8
  %39 = load i64, i64* %15, align 8
  %40 = load i64, i64* %12, align 8
  %41 = mul i64 %39, %40
  %42 = getelementptr inbounds float, float* %38, i64 %41
  %43 = bitcast float* %42 to i8*
  %44 = load float*, float** %9, align 8
  %45 = load i64, i64* %17, align 8
  %46 = getelementptr inbounds float, float* %44, i64 %45
  %47 = load i64, i64* %19, align 8
  %48 = load i64, i64* %12, align 8
  %49 = mul i64 %47, %48
  %50 = getelementptr inbounds float, float* %46, i64 %49
  %51 = bitcast float* %50 to i8*
  %52 = load i64, i64* %12, align 8
  %53 = mul i64 %52, 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %43, i8* align 4 %51, i64 %53, i1 false)
  %54 = load i64, i64* %15, align 8
  %55 = add i64 %54, 1
  store i64 %55, i64* %15, align 8
  br label %56

; <label>:56:                                     ; preds = %32
  %57 = load i64, i64* %18, align 8
  %58 = add i64 %57, 1
  store i64 %58, i64* %18, align 8
  br label %28

; <label>:59:                                     ; preds = %28
  br label %60

; <label>:60:                                     ; preds = %59
  %61 = load i64, i64* %16, align 8
  %62 = add i64 %61, 1
  store i64 %62, i64* %16, align 8
  br label %20

; <label>:63:                                     ; preds = %20
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_gather32_i8(i8*, i8*, i32*, i64, i64, i64, i64) #2 {
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store i8* %0, i8** %8, align 8
  store i8* %1, i8** %9, align 8
  store i32* %2, i32** %10, align 8
  store i64 %3, i64* %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  %15 = load i8*, i8** %8, align 8
  %16 = load i8*, i8** %9, align 8
  %17 = load i32*, i32** %10, align 8
  %18 = load i64, i64* %11, align 8
  %19 = load i64, i64* %12, align 8
  %20 = load i64, i64* %13, align 8
  %21 = load i64, i64* %14, align 8
  call void @_ZN12_GLOBAL__N_113libjit_gatherIaiEEvPT_PKS1_PKT0_mmmm(i8* %15, i8* %16, i32* %17, i64 %18, i64 %19, i64 %20, i64 %21)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_113libjit_gatherIaiEEvPT_PKS1_PKT0_mmmm(i8*, i8*, i32*, i64, i64, i64, i64) #0 {
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  store i8* %0, i8** %8, align 8
  store i8* %1, i8** %9, align 8
  store i32* %2, i32** %10, align 8
  store i64 %3, i64* %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  store i64 0, i64* %15, align 8
  store i64 0, i64* %16, align 8
  br label %20

; <label>:20:                                     ; preds = %58, %7
  %21 = load i64, i64* %16, align 8
  %22 = load i64, i64* %13, align 8
  %23 = icmp ult i64 %21, %22
  br i1 %23, label %24, label %61

; <label>:24:                                     ; preds = %20
  %25 = load i64, i64* %16, align 8
  %26 = load i64, i64* %14, align 8
  %27 = mul i64 %25, %26
  store i64 %27, i64* %17, align 8
  store i64 0, i64* %18, align 8
  br label %28

; <label>:28:                                     ; preds = %54, %24
  %29 = load i64, i64* %18, align 8
  %30 = load i64, i64* %11, align 8
  %31 = icmp ult i64 %29, %30
  br i1 %31, label %32, label %57

; <label>:32:                                     ; preds = %28
  %33 = load i32*, i32** %10, align 8
  %34 = load i64, i64* %18, align 8
  %35 = getelementptr inbounds i32, i32* %33, i64 %34
  %36 = load i32, i32* %35, align 4
  %37 = sext i32 %36 to i64
  store i64 %37, i64* %19, align 8
  %38 = load i8*, i8** %8, align 8
  %39 = load i64, i64* %15, align 8
  %40 = load i64, i64* %12, align 8
  %41 = mul i64 %39, %40
  %42 = getelementptr inbounds i8, i8* %38, i64 %41
  %43 = load i8*, i8** %9, align 8
  %44 = load i64, i64* %17, align 8
  %45 = getelementptr inbounds i8, i8* %43, i64 %44
  %46 = load i64, i64* %19, align 8
  %47 = load i64, i64* %12, align 8
  %48 = mul i64 %46, %47
  %49 = getelementptr inbounds i8, i8* %45, i64 %48
  %50 = load i64, i64* %12, align 8
  %51 = mul i64 %50, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %49, i64 %51, i1 false)
  %52 = load i64, i64* %15, align 8
  %53 = add i64 %52, 1
  store i64 %53, i64* %15, align 8
  br label %54

; <label>:54:                                     ; preds = %32
  %55 = load i64, i64* %18, align 8
  %56 = add i64 %55, 1
  store i64 %56, i64* %18, align 8
  br label %28

; <label>:57:                                     ; preds = %28
  br label %58

; <label>:58:                                     ; preds = %57
  %59 = load i64, i64* %16, align 8
  %60 = add i64 %59, 1
  store i64 %60, i64* %16, align 8
  br label %20

; <label>:61:                                     ; preds = %20
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_gather32_u(i64*, i64*, i32*, i64, i64, i64, i64) #2 {
  %8 = alloca i64*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store i64* %0, i64** %8, align 8
  store i64* %1, i64** %9, align 8
  store i32* %2, i32** %10, align 8
  store i64 %3, i64* %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  %15 = load i64*, i64** %8, align 8
  %16 = load i64*, i64** %9, align 8
  %17 = load i32*, i32** %10, align 8
  %18 = load i64, i64* %11, align 8
  %19 = load i64, i64* %12, align 8
  %20 = load i64, i64* %13, align 8
  %21 = load i64, i64* %14, align 8
  call void @_ZN12_GLOBAL__N_113libjit_gatherIliEEvPT_PKS1_PKT0_mmmm(i64* %15, i64* %16, i32* %17, i64 %18, i64 %19, i64 %20, i64 %21)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_113libjit_gatherIliEEvPT_PKS1_PKT0_mmmm(i64*, i64*, i32*, i64, i64, i64, i64) #0 {
  %8 = alloca i64*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  store i64* %0, i64** %8, align 8
  store i64* %1, i64** %9, align 8
  store i32* %2, i32** %10, align 8
  store i64 %3, i64* %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  store i64 0, i64* %15, align 8
  store i64 0, i64* %16, align 8
  br label %20

; <label>:20:                                     ; preds = %60, %7
  %21 = load i64, i64* %16, align 8
  %22 = load i64, i64* %13, align 8
  %23 = icmp ult i64 %21, %22
  br i1 %23, label %24, label %63

; <label>:24:                                     ; preds = %20
  %25 = load i64, i64* %16, align 8
  %26 = load i64, i64* %14, align 8
  %27 = mul i64 %25, %26
  store i64 %27, i64* %17, align 8
  store i64 0, i64* %18, align 8
  br label %28

; <label>:28:                                     ; preds = %56, %24
  %29 = load i64, i64* %18, align 8
  %30 = load i64, i64* %11, align 8
  %31 = icmp ult i64 %29, %30
  br i1 %31, label %32, label %59

; <label>:32:                                     ; preds = %28
  %33 = load i32*, i32** %10, align 8
  %34 = load i64, i64* %18, align 8
  %35 = getelementptr inbounds i32, i32* %33, i64 %34
  %36 = load i32, i32* %35, align 4
  %37 = sext i32 %36 to i64
  store i64 %37, i64* %19, align 8
  %38 = load i64*, i64** %8, align 8
  %39 = load i64, i64* %15, align 8
  %40 = load i64, i64* %12, align 8
  %41 = mul i64 %39, %40
  %42 = getelementptr inbounds i64, i64* %38, i64 %41
  %43 = bitcast i64* %42 to i8*
  %44 = load i64*, i64** %9, align 8
  %45 = load i64, i64* %17, align 8
  %46 = getelementptr inbounds i64, i64* %44, i64 %45
  %47 = load i64, i64* %19, align 8
  %48 = load i64, i64* %12, align 8
  %49 = mul i64 %47, %48
  %50 = getelementptr inbounds i64, i64* %46, i64 %49
  %51 = bitcast i64* %50 to i8*
  %52 = load i64, i64* %12, align 8
  %53 = mul i64 %52, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %51, i64 %53, i1 false)
  %54 = load i64, i64* %15, align 8
  %55 = add i64 %54, 1
  store i64 %55, i64* %15, align 8
  br label %56

; <label>:56:                                     ; preds = %32
  %57 = load i64, i64* %18, align 8
  %58 = add i64 %57, 1
  store i64 %58, i64* %18, align 8
  br label %28

; <label>:59:                                     ; preds = %28
  br label %60

; <label>:60:                                     ; preds = %59
  %61 = load i64, i64* %16, align 8
  %62 = add i64 %61, 1
  store i64 %62, i64* %16, align 8
  br label %20

; <label>:63:                                     ; preds = %20
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_gatherranges64_f(float*, i64*, float*, i64*, i64, i64) #2 {
  %7 = alloca float*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca float*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  store float* %0, float** %7, align 8
  store i64* %1, i64** %8, align 8
  store float* %2, float** %9, align 8
  store i64* %3, i64** %10, align 8
  store i64 %4, i64* %11, align 8
  store i64 %5, i64* %12, align 8
  %13 = load float*, float** %7, align 8
  %14 = load i64*, i64** %8, align 8
  %15 = load float*, float** %9, align 8
  %16 = load i64*, i64** %10, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  call void @_ZN12_GLOBAL__N_119libjit_gatherrangesIflEEvPT_PT0_PKS1_PKS3_mm(float* %13, i64* %14, float* %15, i64* %16, i64 %17, i64 %18)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_119libjit_gatherrangesIflEEvPT_PT0_PKS1_PKS3_mm(float*, i64*, float*, i64*, i64, i64) #0 {
  %7 = alloca float*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca float*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  store float* %0, float** %7, align 8
  store i64* %1, i64** %8, align 8
  store float* %2, float** %9, align 8
  store i64* %3, i64** %10, align 8
  store i64 %4, i64* %11, align 8
  store i64 %5, i64* %12, align 8
  store i64 0, i64* %13, align 8
  store i64 0, i64* %14, align 8
  store i64 0, i64* %15, align 8
  br label %20

; <label>:20:                                     ; preds = %65, %6
  %21 = load i64, i64* %15, align 8
  %22 = load i64, i64* %11, align 8
  %23 = icmp ult i64 %21, %22
  br i1 %23, label %24, label %68

; <label>:24:                                     ; preds = %20
  store i64 0, i64* %16, align 8
  store i64 0, i64* %17, align 8
  br label %25

; <label>:25:                                     ; preds = %57, %24
  %26 = load i64, i64* %17, align 8
  %27 = load i64, i64* %12, align 8
  %28 = icmp ult i64 %26, %27
  br i1 %28, label %29, label %60

; <label>:29:                                     ; preds = %25
  %30 = load i64*, i64** %10, align 8
  %31 = load i64, i64* %14, align 8
  %32 = getelementptr inbounds i64, i64* %30, i64 %31
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %18, align 8
  %34 = load i64*, i64** %10, align 8
  %35 = load i64, i64* %14, align 8
  %36 = add i64 %35, 1
  %37 = getelementptr inbounds i64, i64* %34, i64 %36
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %19, align 8
  %39 = load float*, float** %7, align 8
  %40 = load i64, i64* %13, align 8
  %41 = getelementptr inbounds float, float* %39, i64 %40
  %42 = bitcast float* %41 to i8*
  %43 = load float*, float** %9, align 8
  %44 = load i64, i64* %18, align 8
  %45 = getelementptr inbounds float, float* %43, i64 %44
  %46 = bitcast float* %45 to i8*
  %47 = load i64, i64* %19, align 8
  %48 = mul i64 %47, 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %42, i8* align 4 %46, i64 %48, i1 false)
  %49 = load i64, i64* %19, align 8
  %50 = load i64, i64* %13, align 8
  %51 = add i64 %50, %49
  store i64 %51, i64* %13, align 8
  %52 = load i64, i64* %14, align 8
  %53 = add i64 %52, 2
  store i64 %53, i64* %14, align 8
  %54 = load i64, i64* %19, align 8
  %55 = load i64, i64* %16, align 8
  %56 = add nsw i64 %55, %54
  store i64 %56, i64* %16, align 8
  br label %57

; <label>:57:                                     ; preds = %29
  %58 = load i64, i64* %17, align 8
  %59 = add i64 %58, 1
  store i64 %59, i64* %17, align 8
  br label %25

; <label>:60:                                     ; preds = %25
  %61 = load i64, i64* %16, align 8
  %62 = load i64*, i64** %8, align 8
  %63 = load i64, i64* %15, align 8
  %64 = getelementptr inbounds i64, i64* %62, i64 %63
  store i64 %61, i64* %64, align 8
  br label %65

; <label>:65:                                     ; preds = %60
  %66 = load i64, i64* %15, align 8
  %67 = add i64 %66, 1
  store i64 %67, i64* %15, align 8
  br label %20

; <label>:68:                                     ; preds = %20
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_gatherranges64_i8(i8*, i64*, i8*, i64*, i64, i64) #2 {
  %7 = alloca i8*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  store i8* %0, i8** %7, align 8
  store i64* %1, i64** %8, align 8
  store i8* %2, i8** %9, align 8
  store i64* %3, i64** %10, align 8
  store i64 %4, i64* %11, align 8
  store i64 %5, i64* %12, align 8
  %13 = load i8*, i8** %7, align 8
  %14 = load i64*, i64** %8, align 8
  %15 = load i8*, i8** %9, align 8
  %16 = load i64*, i64** %10, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  call void @_ZN12_GLOBAL__N_119libjit_gatherrangesIalEEvPT_PT0_PKS1_PKS3_mm(i8* %13, i64* %14, i8* %15, i64* %16, i64 %17, i64 %18)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_119libjit_gatherrangesIalEEvPT_PT0_PKS1_PKS3_mm(i8*, i64*, i8*, i64*, i64, i64) #0 {
  %7 = alloca i8*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  store i8* %0, i8** %7, align 8
  store i64* %1, i64** %8, align 8
  store i8* %2, i8** %9, align 8
  store i64* %3, i64** %10, align 8
  store i64 %4, i64* %11, align 8
  store i64 %5, i64* %12, align 8
  store i64 0, i64* %13, align 8
  store i64 0, i64* %14, align 8
  store i64 0, i64* %15, align 8
  br label %20

; <label>:20:                                     ; preds = %63, %6
  %21 = load i64, i64* %15, align 8
  %22 = load i64, i64* %11, align 8
  %23 = icmp ult i64 %21, %22
  br i1 %23, label %24, label %66

; <label>:24:                                     ; preds = %20
  store i64 0, i64* %16, align 8
  store i64 0, i64* %17, align 8
  br label %25

; <label>:25:                                     ; preds = %55, %24
  %26 = load i64, i64* %17, align 8
  %27 = load i64, i64* %12, align 8
  %28 = icmp ult i64 %26, %27
  br i1 %28, label %29, label %58

; <label>:29:                                     ; preds = %25
  %30 = load i64*, i64** %10, align 8
  %31 = load i64, i64* %14, align 8
  %32 = getelementptr inbounds i64, i64* %30, i64 %31
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %18, align 8
  %34 = load i64*, i64** %10, align 8
  %35 = load i64, i64* %14, align 8
  %36 = add i64 %35, 1
  %37 = getelementptr inbounds i64, i64* %34, i64 %36
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %19, align 8
  %39 = load i8*, i8** %7, align 8
  %40 = load i64, i64* %13, align 8
  %41 = getelementptr inbounds i8, i8* %39, i64 %40
  %42 = load i8*, i8** %9, align 8
  %43 = load i64, i64* %18, align 8
  %44 = getelementptr inbounds i8, i8* %42, i64 %43
  %45 = load i64, i64* %19, align 8
  %46 = mul i64 %45, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %44, i64 %46, i1 false)
  %47 = load i64, i64* %19, align 8
  %48 = load i64, i64* %13, align 8
  %49 = add i64 %48, %47
  store i64 %49, i64* %13, align 8
  %50 = load i64, i64* %14, align 8
  %51 = add i64 %50, 2
  store i64 %51, i64* %14, align 8
  %52 = load i64, i64* %19, align 8
  %53 = load i64, i64* %16, align 8
  %54 = add nsw i64 %53, %52
  store i64 %54, i64* %16, align 8
  br label %55

; <label>:55:                                     ; preds = %29
  %56 = load i64, i64* %17, align 8
  %57 = add i64 %56, 1
  store i64 %57, i64* %17, align 8
  br label %25

; <label>:58:                                     ; preds = %25
  %59 = load i64, i64* %16, align 8
  %60 = load i64*, i64** %8, align 8
  %61 = load i64, i64* %15, align 8
  %62 = getelementptr inbounds i64, i64* %60, i64 %61
  store i64 %59, i64* %62, align 8
  br label %63

; <label>:63:                                     ; preds = %58
  %64 = load i64, i64* %15, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %15, align 8
  br label %20

; <label>:66:                                     ; preds = %20
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_gatherranges64_u(i64*, i64*, i64*, i64*, i64, i64) #2 {
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  store i64* %0, i64** %7, align 8
  store i64* %1, i64** %8, align 8
  store i64* %2, i64** %9, align 8
  store i64* %3, i64** %10, align 8
  store i64 %4, i64* %11, align 8
  store i64 %5, i64* %12, align 8
  %13 = load i64*, i64** %7, align 8
  %14 = load i64*, i64** %8, align 8
  %15 = load i64*, i64** %9, align 8
  %16 = load i64*, i64** %10, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  call void @_ZN12_GLOBAL__N_119libjit_gatherrangesIllEEvPT_PT0_PKS1_PKS3_mm(i64* %13, i64* %14, i64* %15, i64* %16, i64 %17, i64 %18)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_119libjit_gatherrangesIllEEvPT_PT0_PKS1_PKS3_mm(i64*, i64*, i64*, i64*, i64, i64) #0 {
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  store i64* %0, i64** %7, align 8
  store i64* %1, i64** %8, align 8
  store i64* %2, i64** %9, align 8
  store i64* %3, i64** %10, align 8
  store i64 %4, i64* %11, align 8
  store i64 %5, i64* %12, align 8
  store i64 0, i64* %13, align 8
  store i64 0, i64* %14, align 8
  store i64 0, i64* %15, align 8
  br label %20

; <label>:20:                                     ; preds = %65, %6
  %21 = load i64, i64* %15, align 8
  %22 = load i64, i64* %11, align 8
  %23 = icmp ult i64 %21, %22
  br i1 %23, label %24, label %68

; <label>:24:                                     ; preds = %20
  store i64 0, i64* %16, align 8
  store i64 0, i64* %17, align 8
  br label %25

; <label>:25:                                     ; preds = %57, %24
  %26 = load i64, i64* %17, align 8
  %27 = load i64, i64* %12, align 8
  %28 = icmp ult i64 %26, %27
  br i1 %28, label %29, label %60

; <label>:29:                                     ; preds = %25
  %30 = load i64*, i64** %10, align 8
  %31 = load i64, i64* %14, align 8
  %32 = getelementptr inbounds i64, i64* %30, i64 %31
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %18, align 8
  %34 = load i64*, i64** %10, align 8
  %35 = load i64, i64* %14, align 8
  %36 = add i64 %35, 1
  %37 = getelementptr inbounds i64, i64* %34, i64 %36
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %19, align 8
  %39 = load i64*, i64** %7, align 8
  %40 = load i64, i64* %13, align 8
  %41 = getelementptr inbounds i64, i64* %39, i64 %40
  %42 = bitcast i64* %41 to i8*
  %43 = load i64*, i64** %9, align 8
  %44 = load i64, i64* %18, align 8
  %45 = getelementptr inbounds i64, i64* %43, i64 %44
  %46 = bitcast i64* %45 to i8*
  %47 = load i64, i64* %19, align 8
  %48 = mul i64 %47, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %46, i64 %48, i1 false)
  %49 = load i64, i64* %19, align 8
  %50 = load i64, i64* %13, align 8
  %51 = add i64 %50, %49
  store i64 %51, i64* %13, align 8
  %52 = load i64, i64* %14, align 8
  %53 = add i64 %52, 2
  store i64 %53, i64* %14, align 8
  %54 = load i64, i64* %19, align 8
  %55 = load i64, i64* %16, align 8
  %56 = add nsw i64 %55, %54
  store i64 %56, i64* %16, align 8
  br label %57

; <label>:57:                                     ; preds = %29
  %58 = load i64, i64* %17, align 8
  %59 = add i64 %58, 1
  store i64 %59, i64* %17, align 8
  br label %25

; <label>:60:                                     ; preds = %25
  %61 = load i64, i64* %16, align 8
  %62 = load i64*, i64** %8, align 8
  %63 = load i64, i64* %15, align 8
  %64 = getelementptr inbounds i64, i64* %62, i64 %63
  store i64 %61, i64* %64, align 8
  br label %65

; <label>:65:                                     ; preds = %60
  %66 = load i64, i64* %15, align 8
  %67 = add i64 %66, 1
  store i64 %67, i64* %15, align 8
  br label %20

; <label>:68:                                     ; preds = %20
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_gatherranges32_f(float*, i32*, float*, i32*, i64, i64) #2 {
  %7 = alloca float*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca float*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  store float* %0, float** %7, align 8
  store i32* %1, i32** %8, align 8
  store float* %2, float** %9, align 8
  store i32* %3, i32** %10, align 8
  store i64 %4, i64* %11, align 8
  store i64 %5, i64* %12, align 8
  %13 = load float*, float** %7, align 8
  %14 = load i32*, i32** %8, align 8
  %15 = load float*, float** %9, align 8
  %16 = load i32*, i32** %10, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  call void @_ZN12_GLOBAL__N_119libjit_gatherrangesIfiEEvPT_PT0_PKS1_PKS3_mm(float* %13, i32* %14, float* %15, i32* %16, i64 %17, i64 %18)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_119libjit_gatherrangesIfiEEvPT_PT0_PKS1_PKS3_mm(float*, i32*, float*, i32*, i64, i64) #0 {
  %7 = alloca float*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca float*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i32, align 4
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store float* %0, float** %7, align 8
  store i32* %1, i32** %8, align 8
  store float* %2, float** %9, align 8
  store i32* %3, i32** %10, align 8
  store i64 %4, i64* %11, align 8
  store i64 %5, i64* %12, align 8
  store i64 0, i64* %13, align 8
  store i64 0, i64* %14, align 8
  store i64 0, i64* %15, align 8
  br label %20

; <label>:20:                                     ; preds = %68, %6
  %21 = load i64, i64* %15, align 8
  %22 = load i64, i64* %11, align 8
  %23 = icmp ult i64 %21, %22
  br i1 %23, label %24, label %71

; <label>:24:                                     ; preds = %20
  store i32 0, i32* %16, align 4
  store i64 0, i64* %17, align 8
  br label %25

; <label>:25:                                     ; preds = %60, %24
  %26 = load i64, i64* %17, align 8
  %27 = load i64, i64* %12, align 8
  %28 = icmp ult i64 %26, %27
  br i1 %28, label %29, label %63

; <label>:29:                                     ; preds = %25
  %30 = load i32*, i32** %10, align 8
  %31 = load i64, i64* %14, align 8
  %32 = getelementptr inbounds i32, i32* %30, i64 %31
  %33 = load i32, i32* %32, align 4
  store i32 %33, i32* %18, align 4
  %34 = load i32*, i32** %10, align 8
  %35 = load i64, i64* %14, align 8
  %36 = add i64 %35, 1
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  store i32 %38, i32* %19, align 4
  %39 = load float*, float** %7, align 8
  %40 = load i64, i64* %13, align 8
  %41 = getelementptr inbounds float, float* %39, i64 %40
  %42 = bitcast float* %41 to i8*
  %43 = load float*, float** %9, align 8
  %44 = load i32, i32* %18, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float* %43, i64 %45
  %47 = bitcast float* %46 to i8*
  %48 = load i32, i32* %19, align 4
  %49 = sext i32 %48 to i64
  %50 = mul i64 %49, 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %42, i8* align 4 %47, i64 %50, i1 false)
  %51 = load i32, i32* %19, align 4
  %52 = sext i32 %51 to i64
  %53 = load i64, i64* %13, align 8
  %54 = add i64 %53, %52
  store i64 %54, i64* %13, align 8
  %55 = load i64, i64* %14, align 8
  %56 = add i64 %55, 2
  store i64 %56, i64* %14, align 8
  %57 = load i32, i32* %19, align 4
  %58 = load i32, i32* %16, align 4
  %59 = add nsw i32 %58, %57
  store i32 %59, i32* %16, align 4
  br label %60

; <label>:60:                                     ; preds = %29
  %61 = load i64, i64* %17, align 8
  %62 = add i64 %61, 1
  store i64 %62, i64* %17, align 8
  br label %25

; <label>:63:                                     ; preds = %25
  %64 = load i32, i32* %16, align 4
  %65 = load i32*, i32** %8, align 8
  %66 = load i64, i64* %15, align 8
  %67 = getelementptr inbounds i32, i32* %65, i64 %66
  store i32 %64, i32* %67, align 4
  br label %68

; <label>:68:                                     ; preds = %63
  %69 = load i64, i64* %15, align 8
  %70 = add i64 %69, 1
  store i64 %70, i64* %15, align 8
  br label %20

; <label>:71:                                     ; preds = %20
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_gatherranges32_i8(i8*, i32*, i8*, i32*, i64, i64) #2 {
  %7 = alloca i8*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  store i8* %0, i8** %7, align 8
  store i32* %1, i32** %8, align 8
  store i8* %2, i8** %9, align 8
  store i32* %3, i32** %10, align 8
  store i64 %4, i64* %11, align 8
  store i64 %5, i64* %12, align 8
  %13 = load i8*, i8** %7, align 8
  %14 = load i32*, i32** %8, align 8
  %15 = load i8*, i8** %9, align 8
  %16 = load i32*, i32** %10, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  call void @_ZN12_GLOBAL__N_119libjit_gatherrangesIaiEEvPT_PT0_PKS1_PKS3_mm(i8* %13, i32* %14, i8* %15, i32* %16, i64 %17, i64 %18)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_119libjit_gatherrangesIaiEEvPT_PT0_PKS1_PKS3_mm(i8*, i32*, i8*, i32*, i64, i64) #0 {
  %7 = alloca i8*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i32, align 4
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store i8* %0, i8** %7, align 8
  store i32* %1, i32** %8, align 8
  store i8* %2, i8** %9, align 8
  store i32* %3, i32** %10, align 8
  store i64 %4, i64* %11, align 8
  store i64 %5, i64* %12, align 8
  store i64 0, i64* %13, align 8
  store i64 0, i64* %14, align 8
  store i64 0, i64* %15, align 8
  br label %20

; <label>:20:                                     ; preds = %66, %6
  %21 = load i64, i64* %15, align 8
  %22 = load i64, i64* %11, align 8
  %23 = icmp ult i64 %21, %22
  br i1 %23, label %24, label %69

; <label>:24:                                     ; preds = %20
  store i32 0, i32* %16, align 4
  store i64 0, i64* %17, align 8
  br label %25

; <label>:25:                                     ; preds = %58, %24
  %26 = load i64, i64* %17, align 8
  %27 = load i64, i64* %12, align 8
  %28 = icmp ult i64 %26, %27
  br i1 %28, label %29, label %61

; <label>:29:                                     ; preds = %25
  %30 = load i32*, i32** %10, align 8
  %31 = load i64, i64* %14, align 8
  %32 = getelementptr inbounds i32, i32* %30, i64 %31
  %33 = load i32, i32* %32, align 4
  store i32 %33, i32* %18, align 4
  %34 = load i32*, i32** %10, align 8
  %35 = load i64, i64* %14, align 8
  %36 = add i64 %35, 1
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  store i32 %38, i32* %19, align 4
  %39 = load i8*, i8** %7, align 8
  %40 = load i64, i64* %13, align 8
  %41 = getelementptr inbounds i8, i8* %39, i64 %40
  %42 = load i8*, i8** %9, align 8
  %43 = load i32, i32* %18, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %42, i64 %44
  %46 = load i32, i32* %19, align 4
  %47 = sext i32 %46 to i64
  %48 = mul i64 %47, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %45, i64 %48, i1 false)
  %49 = load i32, i32* %19, align 4
  %50 = sext i32 %49 to i64
  %51 = load i64, i64* %13, align 8
  %52 = add i64 %51, %50
  store i64 %52, i64* %13, align 8
  %53 = load i64, i64* %14, align 8
  %54 = add i64 %53, 2
  store i64 %54, i64* %14, align 8
  %55 = load i32, i32* %19, align 4
  %56 = load i32, i32* %16, align 4
  %57 = add nsw i32 %56, %55
  store i32 %57, i32* %16, align 4
  br label %58

; <label>:58:                                     ; preds = %29
  %59 = load i64, i64* %17, align 8
  %60 = add i64 %59, 1
  store i64 %60, i64* %17, align 8
  br label %25

; <label>:61:                                     ; preds = %25
  %62 = load i32, i32* %16, align 4
  %63 = load i32*, i32** %8, align 8
  %64 = load i64, i64* %15, align 8
  %65 = getelementptr inbounds i32, i32* %63, i64 %64
  store i32 %62, i32* %65, align 4
  br label %66

; <label>:66:                                     ; preds = %61
  %67 = load i64, i64* %15, align 8
  %68 = add i64 %67, 1
  store i64 %68, i64* %15, align 8
  br label %20

; <label>:69:                                     ; preds = %20
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_gatherranges32_u(i64*, i32*, i64*, i32*, i64, i64) #2 {
  %7 = alloca i64*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  store i64* %0, i64** %7, align 8
  store i32* %1, i32** %8, align 8
  store i64* %2, i64** %9, align 8
  store i32* %3, i32** %10, align 8
  store i64 %4, i64* %11, align 8
  store i64 %5, i64* %12, align 8
  %13 = load i64*, i64** %7, align 8
  %14 = load i32*, i32** %8, align 8
  %15 = load i64*, i64** %9, align 8
  %16 = load i32*, i32** %10, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  call void @_ZN12_GLOBAL__N_119libjit_gatherrangesImiEEvPT_PT0_PKS1_PKS3_mm(i64* %13, i32* %14, i64* %15, i32* %16, i64 %17, i64 %18)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_119libjit_gatherrangesImiEEvPT_PT0_PKS1_PKS3_mm(i64*, i32*, i64*, i32*, i64, i64) #0 {
  %7 = alloca i64*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i32, align 4
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store i64* %0, i64** %7, align 8
  store i32* %1, i32** %8, align 8
  store i64* %2, i64** %9, align 8
  store i32* %3, i32** %10, align 8
  store i64 %4, i64* %11, align 8
  store i64 %5, i64* %12, align 8
  store i64 0, i64* %13, align 8
  store i64 0, i64* %14, align 8
  store i64 0, i64* %15, align 8
  br label %20

; <label>:20:                                     ; preds = %68, %6
  %21 = load i64, i64* %15, align 8
  %22 = load i64, i64* %11, align 8
  %23 = icmp ult i64 %21, %22
  br i1 %23, label %24, label %71

; <label>:24:                                     ; preds = %20
  store i32 0, i32* %16, align 4
  store i64 0, i64* %17, align 8
  br label %25

; <label>:25:                                     ; preds = %60, %24
  %26 = load i64, i64* %17, align 8
  %27 = load i64, i64* %12, align 8
  %28 = icmp ult i64 %26, %27
  br i1 %28, label %29, label %63

; <label>:29:                                     ; preds = %25
  %30 = load i32*, i32** %10, align 8
  %31 = load i64, i64* %14, align 8
  %32 = getelementptr inbounds i32, i32* %30, i64 %31
  %33 = load i32, i32* %32, align 4
  store i32 %33, i32* %18, align 4
  %34 = load i32*, i32** %10, align 8
  %35 = load i64, i64* %14, align 8
  %36 = add i64 %35, 1
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  store i32 %38, i32* %19, align 4
  %39 = load i64*, i64** %7, align 8
  %40 = load i64, i64* %13, align 8
  %41 = getelementptr inbounds i64, i64* %39, i64 %40
  %42 = bitcast i64* %41 to i8*
  %43 = load i64*, i64** %9, align 8
  %44 = load i32, i32* %18, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i64, i64* %43, i64 %45
  %47 = bitcast i64* %46 to i8*
  %48 = load i32, i32* %19, align 4
  %49 = sext i32 %48 to i64
  %50 = mul i64 %49, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %47, i64 %50, i1 false)
  %51 = load i32, i32* %19, align 4
  %52 = sext i32 %51 to i64
  %53 = load i64, i64* %13, align 8
  %54 = add i64 %53, %52
  store i64 %54, i64* %13, align 8
  %55 = load i64, i64* %14, align 8
  %56 = add i64 %55, 2
  store i64 %56, i64* %14, align 8
  %57 = load i32, i32* %19, align 4
  %58 = load i32, i32* %16, align 4
  %59 = add nsw i32 %58, %57
  store i32 %59, i32* %16, align 4
  br label %60

; <label>:60:                                     ; preds = %29
  %61 = load i64, i64* %17, align 8
  %62 = add i64 %61, 1
  store i64 %62, i64* %17, align 8
  br label %25

; <label>:63:                                     ; preds = %25
  %64 = load i32, i32* %16, align 4
  %65 = load i32*, i32** %8, align 8
  %66 = load i64, i64* %15, align 8
  %67 = getelementptr inbounds i32, i32* %65, i64 %66
  store i32 %64, i32* %67, align 4
  br label %68

; <label>:68:                                     ; preds = %63
  %69 = load i64, i64* %15, align 8
  %70 = add i64 %69, 1
  store i64 %70, i64* %15, align 8
  br label %20

; <label>:71:                                     ; preds = %20
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @libjit_lengths_range_fill_i32(i32*, i32*, i64) #0 {
  %4 = alloca i32*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32* %0, i32** %4, align 8
  store i32* %1, i32** %5, align 8
  store i64 %2, i64* %6, align 8
  store i64 0, i64* %7, align 8
  store i64 0, i64* %8, align 8
  %12 = load i64, i64* %6, align 8
  store i64 %12, i64* %9, align 8
  br label %13

; <label>:13:                                     ; preds = %36, %3
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %9, align 8
  %16 = icmp ult i64 %14, %15
  br i1 %16, label %17, label %39

; <label>:17:                                     ; preds = %13
  store i32 0, i32* %10, align 4
  %18 = load i32*, i32** %4, align 8
  %19 = load i64, i64* %8, align 8
  %20 = getelementptr inbounds i32, i32* %18, i64 %19
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %11, align 4
  br label %22

; <label>:22:                                     ; preds = %32, %17
  %23 = load i32, i32* %10, align 4
  %24 = load i32, i32* %11, align 4
  %25 = icmp slt i32 %23, %24
  br i1 %25, label %26, label %35

; <label>:26:                                     ; preds = %22
  %27 = load i32, i32* %10, align 4
  %28 = load i32*, i32** %5, align 8
  %29 = load i64, i64* %7, align 8
  %30 = add i64 %29, 1
  store i64 %30, i64* %7, align 8
  %31 = getelementptr inbounds i32, i32* %28, i64 %29
  store i32 %27, i32* %31, align 4
  br label %32

; <label>:32:                                     ; preds = %26
  %33 = load i32, i32* %10, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %10, align 4
  br label %22

; <label>:35:                                     ; preds = %22
  br label %36

; <label>:36:                                     ; preds = %35
  %37 = load i64, i64* %8, align 8
  %38 = add i64 %37, 1
  store i64 %38, i64* %8, align 8
  br label %13

; <label>:39:                                     ; preds = %13
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_scatterdata_f(float*, i64*, i64*, float*, i64, i64, i64, i1 zeroext) #2 {
  %9 = alloca float*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca float*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8, align 1
  store float* %0, float** %9, align 8
  store i64* %1, i64** %10, align 8
  store i64* %2, i64** %11, align 8
  store float* %3, float** %12, align 8
  store i64 %4, i64* %13, align 8
  store i64 %5, i64* %14, align 8
  store i64 %6, i64* %15, align 8
  %17 = zext i1 %7 to i8
  store i8 %17, i8* %16, align 1
  %18 = load i8, i8* %16, align 1
  %19 = trunc i8 %18 to i1
  br i1 %19, label %20, label %28

; <label>:20:                                     ; preds = %8
  %21 = load float*, float** %9, align 8
  %22 = load i64*, i64** %10, align 8
  %23 = load i64*, i64** %11, align 8
  %24 = load float*, float** %12, align 8
  %25 = load i64, i64* %13, align 8
  %26 = load i64, i64* %14, align 8
  %27 = load i64, i64* %15, align 8
  call void @_ZN12_GLOBAL__N_126libjit_scatterdataaddfloatIfEEvPT_PKmS4_PKS1_mmm(float* %21, i64* %22, i64* %23, float* %24, i64 %25, i64 %26, i64 %27)
  br label %36

; <label>:28:                                     ; preds = %8
  %29 = load float*, float** %9, align 8
  %30 = load i64*, i64** %10, align 8
  %31 = load i64*, i64** %11, align 8
  %32 = load float*, float** %12, align 8
  %33 = load i64, i64* %13, align 8
  %34 = load i64, i64* %14, align 8
  %35 = load i64, i64* %15, align 8
  call void @_ZN12_GLOBAL__N_122libjit_scatterdatacopyIfEEvPT_PKmS4_PKS1_mmm(float* %29, i64* %30, i64* %31, float* %32, i64 %33, i64 %34, i64 %35)
  br label %36

; <label>:36:                                     ; preds = %28, %20
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_126libjit_scatterdataaddfloatIfEEvPT_PKmS4_PKS1_mmm(float*, i64*, i64*, float*, i64, i64, i64) #0 {
  %8 = alloca float*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca float*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  store float* %0, float** %8, align 8
  store i64* %1, i64** %9, align 8
  store i64* %2, i64** %10, align 8
  store float* %3, float** %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  store i64 0, i64* %15, align 8
  br label %19

; <label>:19:                                     ; preds = %81, %7
  %20 = load i64, i64* %15, align 8
  %21 = load i64, i64* %12, align 8
  %22 = icmp ult i64 %20, %21
  br i1 %22, label %23, label %84

; <label>:23:                                     ; preds = %19
  %24 = load i64*, i64** %10, align 8
  %25 = load i64, i64* %15, align 8
  %26 = load i64, i64* %13, align 8
  %27 = mul i64 %25, %26
  %28 = getelementptr inbounds i64, i64* %24, i64 %27
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %16, align 8
  store i64 1, i64* %17, align 8
  br label %30

; <label>:30:                                     ; preds = %51, %23
  %31 = load i64, i64* %17, align 8
  %32 = load i64, i64* %13, align 8
  %33 = icmp ult i64 %31, %32
  br i1 %33, label %34, label %54

; <label>:34:                                     ; preds = %30
  %35 = load i64*, i64** %9, align 8
  %36 = load i64, i64* %17, align 8
  %37 = getelementptr inbounds i64, i64* %35, i64 %36
  %38 = load i64, i64* %37, align 8
  %39 = load i64, i64* %16, align 8
  %40 = mul i64 %39, %38
  store i64 %40, i64* %16, align 8
  %41 = load i64*, i64** %10, align 8
  %42 = load i64, i64* %15, align 8
  %43 = load i64, i64* %13, align 8
  %44 = mul i64 %42, %43
  %45 = load i64, i64* %17, align 8
  %46 = add i64 %44, %45
  %47 = getelementptr inbounds i64, i64* %41, i64 %46
  %48 = load i64, i64* %47, align 8
  %49 = load i64, i64* %16, align 8
  %50 = add i64 %49, %48
  store i64 %50, i64* %16, align 8
  br label %51

; <label>:51:                                     ; preds = %34
  %52 = load i64, i64* %17, align 8
  %53 = add i64 %52, 1
  store i64 %53, i64* %17, align 8
  br label %30

; <label>:54:                                     ; preds = %30
  store i64 0, i64* %18, align 8
  br label %55

; <label>:55:                                     ; preds = %77, %54
  %56 = load i64, i64* %18, align 8
  %57 = load i64, i64* %14, align 8
  %58 = icmp ult i64 %56, %57
  br i1 %58, label %59, label %80

; <label>:59:                                     ; preds = %55
  %60 = load float*, float** %11, align 8
  %61 = load i64, i64* %15, align 8
  %62 = load i64, i64* %14, align 8
  %63 = mul i64 %61, %62
  %64 = load i64, i64* %18, align 8
  %65 = add i64 %63, %64
  %66 = getelementptr inbounds float, float* %60, i64 %65
  %67 = load float, float* %66, align 4
  %68 = load float*, float** %8, align 8
  %69 = load i64, i64* %16, align 8
  %70 = load i64, i64* %14, align 8
  %71 = mul i64 %69, %70
  %72 = load i64, i64* %18, align 8
  %73 = add i64 %71, %72
  %74 = getelementptr inbounds float, float* %68, i64 %73
  %75 = load float, float* %74, align 4
  %76 = fadd reassoc nsz arcp contract float %75, %67
  store float %76, float* %74, align 4
  br label %77

; <label>:77:                                     ; preds = %59
  %78 = load i64, i64* %18, align 8
  %79 = add i64 %78, 1
  store i64 %79, i64* %18, align 8
  br label %55

; <label>:80:                                     ; preds = %55
  br label %81

; <label>:81:                                     ; preds = %80
  %82 = load i64, i64* %15, align 8
  %83 = add i64 %82, 1
  store i64 %83, i64* %15, align 8
  br label %19

; <label>:84:                                     ; preds = %19
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_122libjit_scatterdatacopyIfEEvPT_PKmS4_PKS1_mmm(float*, i64*, i64*, float*, i64, i64, i64) #0 {
  %8 = alloca float*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca float*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  store float* %0, float** %8, align 8
  store i64* %1, i64** %9, align 8
  store i64* %2, i64** %10, align 8
  store float* %3, float** %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  store i64 0, i64* %15, align 8
  br label %18

; <label>:18:                                     ; preds = %68, %7
  %19 = load i64, i64* %15, align 8
  %20 = load i64, i64* %12, align 8
  %21 = icmp ult i64 %19, %20
  br i1 %21, label %22, label %71

; <label>:22:                                     ; preds = %18
  %23 = load i64*, i64** %10, align 8
  %24 = load i64, i64* %15, align 8
  %25 = load i64, i64* %13, align 8
  %26 = mul i64 %24, %25
  %27 = getelementptr inbounds i64, i64* %23, i64 %26
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %16, align 8
  store i64 1, i64* %17, align 8
  br label %29

; <label>:29:                                     ; preds = %50, %22
  %30 = load i64, i64* %17, align 8
  %31 = load i64, i64* %13, align 8
  %32 = icmp ult i64 %30, %31
  br i1 %32, label %33, label %53

; <label>:33:                                     ; preds = %29
  %34 = load i64*, i64** %9, align 8
  %35 = load i64, i64* %17, align 8
  %36 = getelementptr inbounds i64, i64* %34, i64 %35
  %37 = load i64, i64* %36, align 8
  %38 = load i64, i64* %16, align 8
  %39 = mul i64 %38, %37
  store i64 %39, i64* %16, align 8
  %40 = load i64*, i64** %10, align 8
  %41 = load i64, i64* %15, align 8
  %42 = load i64, i64* %13, align 8
  %43 = mul i64 %41, %42
  %44 = load i64, i64* %17, align 8
  %45 = add i64 %43, %44
  %46 = getelementptr inbounds i64, i64* %40, i64 %45
  %47 = load i64, i64* %46, align 8
  %48 = load i64, i64* %16, align 8
  %49 = add i64 %48, %47
  store i64 %49, i64* %16, align 8
  br label %50

; <label>:50:                                     ; preds = %33
  %51 = load i64, i64* %17, align 8
  %52 = add i64 %51, 1
  store i64 %52, i64* %17, align 8
  br label %29

; <label>:53:                                     ; preds = %29
  %54 = load float*, float** %8, align 8
  %55 = load i64, i64* %16, align 8
  %56 = load i64, i64* %14, align 8
  %57 = mul i64 %55, %56
  %58 = getelementptr inbounds float, float* %54, i64 %57
  %59 = bitcast float* %58 to i8*
  %60 = load float*, float** %11, align 8
  %61 = load i64, i64* %15, align 8
  %62 = load i64, i64* %14, align 8
  %63 = mul i64 %61, %62
  %64 = getelementptr inbounds float, float* %60, i64 %63
  %65 = bitcast float* %64 to i8*
  %66 = load i64, i64* %14, align 8
  %67 = mul i64 %66, 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 %65, i64 %67, i1 false)
  br label %68

; <label>:68:                                     ; preds = %53
  %69 = load i64, i64* %15, align 8
  %70 = add i64 %69, 1
  store i64 %70, i64* %15, align 8
  br label %18

; <label>:71:                                     ; preds = %18
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_scatterdata_i8(i8*, i64*, i64*, i8*, i64, i64, i64, i1 zeroext, float, i32, float, i32) #2 {
  %13 = alloca i8*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i8, align 1
  %21 = alloca float, align 4
  %22 = alloca i32, align 4
  %23 = alloca float, align 4
  %24 = alloca i32, align 4
  store i8* %0, i8** %13, align 8
  store i64* %1, i64** %14, align 8
  store i64* %2, i64** %15, align 8
  store i8* %3, i8** %16, align 8
  store i64 %4, i64* %17, align 8
  store i64 %5, i64* %18, align 8
  store i64 %6, i64* %19, align 8
  %25 = zext i1 %7 to i8
  store i8 %25, i8* %20, align 1
  store float %8, float* %21, align 4
  store i32 %9, i32* %22, align 4
  store float %10, float* %23, align 4
  store i32 %11, i32* %24, align 4
  %26 = load i8, i8* %20, align 1
  %27 = trunc i8 %26 to i1
  br i1 %27, label %28, label %40

; <label>:28:                                     ; preds = %12
  %29 = load i8*, i8** %13, align 8
  %30 = load i64*, i64** %14, align 8
  %31 = load i64*, i64** %15, align 8
  %32 = load i8*, i8** %16, align 8
  %33 = load i64, i64* %17, align 8
  %34 = load i64, i64* %18, align 8
  %35 = load i64, i64* %19, align 8
  %36 = load float, float* %21, align 4
  %37 = load i32, i32* %22, align 4
  %38 = load float, float* %23, align 4
  %39 = load i32, i32* %24, align 4
  call void @_ZN12_GLOBAL__N_130libjit_scatterdataaddquantizedIaEEvPT_PKmS4_PKS1_mmmfifi(i8* %29, i64* %30, i64* %31, i8* %32, i64 %33, i64 %34, i64 %35, float %36, i32 %37, float %38, i32 %39)
  br label %48

; <label>:40:                                     ; preds = %12
  %41 = load i8*, i8** %13, align 8
  %42 = load i64*, i64** %14, align 8
  %43 = load i64*, i64** %15, align 8
  %44 = load i8*, i8** %16, align 8
  %45 = load i64, i64* %17, align 8
  %46 = load i64, i64* %18, align 8
  %47 = load i64, i64* %19, align 8
  call void @_ZN12_GLOBAL__N_122libjit_scatterdatacopyIaEEvPT_PKmS4_PKS1_mmm(i8* %41, i64* %42, i64* %43, i8* %44, i64 %45, i64 %46, i64 %47)
  br label %48

; <label>:48:                                     ; preds = %40, %28
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_130libjit_scatterdataaddquantizedIaEEvPT_PKmS4_PKS1_mmmfifi(i8*, i64*, i64*, i8*, i64, i64, i64, float, i32, float, i32) #0 {
  %12 = alloca i8*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca float, align 4
  %20 = alloca i32, align 4
  %21 = alloca float, align 4
  %22 = alloca i32, align 4
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca float, align 4
  %28 = alloca float, align 4
  %29 = alloca i8, align 1
  store i8* %0, i8** %12, align 8
  store i64* %1, i64** %13, align 8
  store i64* %2, i64** %14, align 8
  store i8* %3, i8** %15, align 8
  store i64 %4, i64* %16, align 8
  store i64 %5, i64* %17, align 8
  store i64 %6, i64* %18, align 8
  store float %7, float* %19, align 4
  store i32 %8, i32* %20, align 4
  store float %9, float* %21, align 4
  store i32 %10, i32* %22, align 4
  store i64 0, i64* %23, align 8
  br label %30

; <label>:30:                                     ; preds = %121, %11
  %31 = load i64, i64* %23, align 8
  %32 = load i64, i64* %16, align 8
  %33 = icmp ult i64 %31, %32
  br i1 %33, label %34, label %124

; <label>:34:                                     ; preds = %30
  %35 = load i64*, i64** %14, align 8
  %36 = load i64, i64* %23, align 8
  %37 = load i64, i64* %17, align 8
  %38 = mul i64 %36, %37
  %39 = getelementptr inbounds i64, i64* %35, i64 %38
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %24, align 8
  store i64 1, i64* %25, align 8
  br label %41

; <label>:41:                                     ; preds = %62, %34
  %42 = load i64, i64* %25, align 8
  %43 = load i64, i64* %17, align 8
  %44 = icmp ult i64 %42, %43
  br i1 %44, label %45, label %65

; <label>:45:                                     ; preds = %41
  %46 = load i64*, i64** %13, align 8
  %47 = load i64, i64* %25, align 8
  %48 = getelementptr inbounds i64, i64* %46, i64 %47
  %49 = load i64, i64* %48, align 8
  %50 = load i64, i64* %24, align 8
  %51 = mul i64 %50, %49
  store i64 %51, i64* %24, align 8
  %52 = load i64*, i64** %14, align 8
  %53 = load i64, i64* %23, align 8
  %54 = load i64, i64* %17, align 8
  %55 = mul i64 %53, %54
  %56 = load i64, i64* %25, align 8
  %57 = add i64 %55, %56
  %58 = getelementptr inbounds i64, i64* %52, i64 %57
  %59 = load i64, i64* %58, align 8
  %60 = load i64, i64* %24, align 8
  %61 = add i64 %60, %59
  store i64 %61, i64* %24, align 8
  br label %62

; <label>:62:                                     ; preds = %45
  %63 = load i64, i64* %25, align 8
  %64 = add i64 %63, 1
  store i64 %64, i64* %25, align 8
  br label %41

; <label>:65:                                     ; preds = %41
  store i64 0, i64* %26, align 8
  br label %66

; <label>:66:                                     ; preds = %117, %65
  %67 = load i64, i64* %26, align 8
  %68 = load i64, i64* %18, align 8
  %69 = icmp ult i64 %67, %68
  br i1 %69, label %70, label %120

; <label>:70:                                     ; preds = %66
  %71 = load i8*, i8** %12, align 8
  %72 = load i64, i64* %24, align 8
  %73 = load i64, i64* %18, align 8
  %74 = mul i64 %72, %73
  %75 = load i64, i64* %26, align 8
  %76 = add i64 %74, %75
  %77 = getelementptr inbounds i8, i8* %71, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = sext i8 %78 to i32
  %80 = load i32, i32* %20, align 4
  %81 = sub nsw i32 %79, %80
  %82 = sitofp i32 %81 to float
  %83 = load float, float* %19, align 4
  %84 = fmul reassoc nsz arcp contract float %82, %83
  store float %84, float* %27, align 4
  %85 = load i8*, i8** %15, align 8
  %86 = load i64, i64* %23, align 8
  %87 = load i64, i64* %18, align 8
  %88 = mul i64 %86, %87
  %89 = load i64, i64* %26, align 8
  %90 = add i64 %88, %89
  %91 = getelementptr inbounds i8, i8* %85, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = sext i8 %92 to i32
  %94 = load i32, i32* %22, align 4
  %95 = sub nsw i32 %93, %94
  %96 = sitofp i32 %95 to float
  %97 = load float, float* %21, align 4
  %98 = fmul reassoc nsz arcp contract float %96, %97
  store float %98, float* %28, align 4
  %99 = load float, float* %27, align 4
  %100 = load float, float* %28, align 4
  %101 = fadd reassoc nsz arcp contract float %99, %100
  %102 = load float, float* %19, align 4
  %103 = fdiv reassoc nsz arcp float %101, %102
  %104 = load i32, i32* %20, align 4
  %105 = sitofp i32 %104 to float
  %106 = fadd reassoc nsz arcp contract float %103, %105
  %107 = fptosi float %106 to i32
  %108 = call signext i8 @_Z11libjit_clipi(i32 %107)
  store i8 %108, i8* %29, align 1
  %109 = load i8, i8* %29, align 1
  %110 = load i8*, i8** %12, align 8
  %111 = load i64, i64* %24, align 8
  %112 = load i64, i64* %18, align 8
  %113 = mul i64 %111, %112
  %114 = load i64, i64* %26, align 8
  %115 = add i64 %113, %114
  %116 = getelementptr inbounds i8, i8* %110, i64 %115
  store i8 %109, i8* %116, align 1
  br label %117

; <label>:117:                                    ; preds = %70
  %118 = load i64, i64* %26, align 8
  %119 = add i64 %118, 1
  store i64 %119, i64* %26, align 8
  br label %66

; <label>:120:                                    ; preds = %66
  br label %121

; <label>:121:                                    ; preds = %120
  %122 = load i64, i64* %23, align 8
  %123 = add i64 %122, 1
  store i64 %123, i64* %23, align 8
  br label %30

; <label>:124:                                    ; preds = %30
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_122libjit_scatterdatacopyIaEEvPT_PKmS4_PKS1_mmm(i8*, i64*, i64*, i8*, i64, i64, i64) #0 {
  %8 = alloca i8*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  store i8* %0, i8** %8, align 8
  store i64* %1, i64** %9, align 8
  store i64* %2, i64** %10, align 8
  store i8* %3, i8** %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  store i64 0, i64* %15, align 8
  br label %18

; <label>:18:                                     ; preds = %66, %7
  %19 = load i64, i64* %15, align 8
  %20 = load i64, i64* %12, align 8
  %21 = icmp ult i64 %19, %20
  br i1 %21, label %22, label %69

; <label>:22:                                     ; preds = %18
  %23 = load i64*, i64** %10, align 8
  %24 = load i64, i64* %15, align 8
  %25 = load i64, i64* %13, align 8
  %26 = mul i64 %24, %25
  %27 = getelementptr inbounds i64, i64* %23, i64 %26
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %16, align 8
  store i64 1, i64* %17, align 8
  br label %29

; <label>:29:                                     ; preds = %50, %22
  %30 = load i64, i64* %17, align 8
  %31 = load i64, i64* %13, align 8
  %32 = icmp ult i64 %30, %31
  br i1 %32, label %33, label %53

; <label>:33:                                     ; preds = %29
  %34 = load i64*, i64** %9, align 8
  %35 = load i64, i64* %17, align 8
  %36 = getelementptr inbounds i64, i64* %34, i64 %35
  %37 = load i64, i64* %36, align 8
  %38 = load i64, i64* %16, align 8
  %39 = mul i64 %38, %37
  store i64 %39, i64* %16, align 8
  %40 = load i64*, i64** %10, align 8
  %41 = load i64, i64* %15, align 8
  %42 = load i64, i64* %13, align 8
  %43 = mul i64 %41, %42
  %44 = load i64, i64* %17, align 8
  %45 = add i64 %43, %44
  %46 = getelementptr inbounds i64, i64* %40, i64 %45
  %47 = load i64, i64* %46, align 8
  %48 = load i64, i64* %16, align 8
  %49 = add i64 %48, %47
  store i64 %49, i64* %16, align 8
  br label %50

; <label>:50:                                     ; preds = %33
  %51 = load i64, i64* %17, align 8
  %52 = add i64 %51, 1
  store i64 %52, i64* %17, align 8
  br label %29

; <label>:53:                                     ; preds = %29
  %54 = load i8*, i8** %8, align 8
  %55 = load i64, i64* %16, align 8
  %56 = load i64, i64* %14, align 8
  %57 = mul i64 %55, %56
  %58 = getelementptr inbounds i8, i8* %54, i64 %57
  %59 = load i8*, i8** %11, align 8
  %60 = load i64, i64* %15, align 8
  %61 = load i64, i64* %14, align 8
  %62 = mul i64 %60, %61
  %63 = getelementptr inbounds i8, i8* %59, i64 %62
  %64 = load i64, i64* %14, align 8
  %65 = mul i64 %64, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %63, i64 %65, i1 false)
  br label %66

; <label>:66:                                     ; preds = %53
  %67 = load i64, i64* %15, align 8
  %68 = add i64 %67, 1
  store i64 %68, i64* %15, align 8
  br label %18

; <label>:69:                                     ; preds = %18
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @libjit_lengths_to_ranges_i32(i32*, i32*, i64) #0 {
  %4 = alloca i32*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  store i32* %0, i32** %4, align 8
  store i32* %1, i32** %5, align 8
  store i64 %2, i64* %6, align 8
  store i32 0, i32* %7, align 4
  store i64 0, i64* %8, align 8
  br label %10

; <label>:10:                                     ; preds = %33, %3
  %11 = load i64, i64* %8, align 8
  %12 = load i64, i64* %6, align 8
  %13 = icmp ult i64 %11, %12
  br i1 %13, label %14, label %36

; <label>:14:                                     ; preds = %10
  %15 = load i32*, i32** %5, align 8
  %16 = load i64, i64* %8, align 8
  %17 = getelementptr inbounds i32, i32* %15, i64 %16
  %18 = load i32, i32* %17, align 4
  store i32 %18, i32* %9, align 4
  %19 = load i32, i32* %7, align 4
  %20 = load i32*, i32** %4, align 8
  %21 = load i64, i64* %8, align 8
  %22 = mul i64 %21, 2
  %23 = getelementptr inbounds i32, i32* %20, i64 %22
  store i32 %19, i32* %23, align 4
  %24 = load i32, i32* %9, align 4
  %25 = load i32*, i32** %4, align 8
  %26 = load i64, i64* %8, align 8
  %27 = mul i64 %26, 2
  %28 = add i64 %27, 1
  %29 = getelementptr inbounds i32, i32* %25, i64 %28
  store i32 %24, i32* %29, align 4
  %30 = load i32, i32* %9, align 4
  %31 = load i32, i32* %7, align 4
  %32 = add nsw i32 %31, %30
  store i32 %32, i32* %7, align 4
  br label %33

; <label>:33:                                     ; preds = %14
  %34 = load i64, i64* %8, align 8
  %35 = add i64 %34, 1
  store i64 %35, i64* %8, align 8
  br label %10

; <label>:36:                                     ; preds = %10
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @libjit_sparse_lengths_sum_f(float*, float*, i64*, i32*, i64, i64) #0 {
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  store float* %0, float** %7, align 8
  store float* %1, float** %8, align 8
  store i64* %2, i64** %9, align 8
  store i32* %3, i32** %10, align 8
  store i64 %4, i64* %11, align 8
  store i64 %5, i64* %12, align 8
  %18 = load float*, float** %7, align 8
  %19 = bitcast float* %18 to i8*
  %20 = load i64, i64* %11, align 8
  %21 = load i64, i64* %12, align 8
  %22 = mul i64 %20, %21
  %23 = mul i64 %22, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 %23, i1 false)
  store i64 0, i64* %13, align 8
  store i64 0, i64* %14, align 8
  br label %24

; <label>:24:                                     ; preds = %73, %6
  %25 = load i64, i64* %14, align 8
  %26 = load i64, i64* %11, align 8
  %27 = icmp ult i64 %25, %26
  br i1 %27, label %28, label %76

; <label>:28:                                     ; preds = %24
  store i32 0, i32* %15, align 4
  br label %29

; <label>:29:                                     ; preds = %69, %28
  %30 = load i32, i32* %15, align 4
  %31 = load i32*, i32** %10, align 8
  %32 = load i64, i64* %14, align 8
  %33 = getelementptr inbounds i32, i32* %31, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %30, %34
  br i1 %35, label %36, label %72

; <label>:36:                                     ; preds = %29
  %37 = load i64*, i64** %9, align 8
  %38 = load i64, i64* %13, align 8
  %39 = getelementptr inbounds i64, i64* %37, i64 %38
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %16, align 8
  store i64 0, i64* %17, align 8
  br label %41

; <label>:41:                                     ; preds = %63, %36
  %42 = load i64, i64* %17, align 8
  %43 = load i64, i64* %12, align 8
  %44 = icmp ult i64 %42, %43
  br i1 %44, label %45, label %66

; <label>:45:                                     ; preds = %41
  %46 = load float*, float** %8, align 8
  %47 = load i64, i64* %16, align 8
  %48 = load i64, i64* %12, align 8
  %49 = mul i64 %47, %48
  %50 = load i64, i64* %17, align 8
  %51 = add i64 %49, %50
  %52 = getelementptr inbounds float, float* %46, i64 %51
  %53 = load float, float* %52, align 4
  %54 = load float*, float** %7, align 8
  %55 = load i64, i64* %14, align 8
  %56 = load i64, i64* %12, align 8
  %57 = mul i64 %55, %56
  %58 = load i64, i64* %17, align 8
  %59 = add i64 %57, %58
  %60 = getelementptr inbounds float, float* %54, i64 %59
  %61 = load float, float* %60, align 4
  %62 = fadd reassoc nsz arcp contract float %61, %53
  store float %62, float* %60, align 4
  br label %63

; <label>:63:                                     ; preds = %45
  %64 = load i64, i64* %17, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %17, align 8
  br label %41

; <label>:66:                                     ; preds = %41
  %67 = load i64, i64* %13, align 8
  %68 = add i64 %67, 1
  store i64 %68, i64* %13, align 8
  br label %69

; <label>:69:                                     ; preds = %66
  %70 = load i32, i32* %15, align 4
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* %15, align 4
  br label %29

; <label>:72:                                     ; preds = %29
  br label %73

; <label>:73:                                     ; preds = %72
  %74 = load i64, i64* %14, align 8
  %75 = add i64 %74, 1
  store i64 %75, i64* %14, align 8
  br label %24

; <label>:76:                                     ; preds = %24
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @libjit_sparse_lengths_weighted_sum_f(float*, float*, float*, i64*, i32*, i64, i64) #0 {
  %8 = alloca float*, align 8
  %9 = alloca float*, align 8
  %10 = alloca float*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i32, align 4
  %18 = alloca float, align 4
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  store float* %0, float** %8, align 8
  store float* %1, float** %9, align 8
  store float* %2, float** %10, align 8
  store i64* %3, i64** %11, align 8
  store i32* %4, i32** %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  %21 = load float*, float** %8, align 8
  %22 = bitcast float* %21 to i8*
  %23 = load i64, i64* %13, align 8
  %24 = load i64, i64* %14, align 8
  %25 = mul i64 %23, %24
  %26 = mul i64 %25, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %22, i8 0, i64 %26, i1 false)
  store i64 0, i64* %15, align 8
  store i64 0, i64* %16, align 8
  br label %27

; <label>:27:                                     ; preds = %82, %7
  %28 = load i64, i64* %16, align 8
  %29 = load i64, i64* %13, align 8
  %30 = icmp ult i64 %28, %29
  br i1 %30, label %31, label %85

; <label>:31:                                     ; preds = %27
  store i32 0, i32* %17, align 4
  br label %32

; <label>:32:                                     ; preds = %78, %31
  %33 = load i32, i32* %17, align 4
  %34 = load i32*, i32** %12, align 8
  %35 = load i64, i64* %16, align 8
  %36 = getelementptr inbounds i32, i32* %34, i64 %35
  %37 = load i32, i32* %36, align 4
  %38 = icmp slt i32 %33, %37
  br i1 %38, label %39, label %81

; <label>:39:                                     ; preds = %32
  %40 = load float*, float** %10, align 8
  %41 = load i64, i64* %15, align 8
  %42 = getelementptr inbounds float, float* %40, i64 %41
  %43 = load float, float* %42, align 4
  store float %43, float* %18, align 4
  %44 = load i64*, i64** %11, align 8
  %45 = load i64, i64* %15, align 8
  %46 = getelementptr inbounds i64, i64* %44, i64 %45
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %19, align 8
  store i64 0, i64* %20, align 8
  br label %48

; <label>:48:                                     ; preds = %72, %39
  %49 = load i64, i64* %20, align 8
  %50 = load i64, i64* %14, align 8
  %51 = icmp ult i64 %49, %50
  br i1 %51, label %52, label %75

; <label>:52:                                     ; preds = %48
  %53 = load float, float* %18, align 4
  %54 = load float*, float** %9, align 8
  %55 = load i64, i64* %19, align 8
  %56 = load i64, i64* %14, align 8
  %57 = mul i64 %55, %56
  %58 = load i64, i64* %20, align 8
  %59 = add i64 %57, %58
  %60 = getelementptr inbounds float, float* %54, i64 %59
  %61 = load float, float* %60, align 4
  %62 = fmul reassoc nsz arcp contract float %53, %61
  %63 = load float*, float** %8, align 8
  %64 = load i64, i64* %16, align 8
  %65 = load i64, i64* %14, align 8
  %66 = mul i64 %64, %65
  %67 = load i64, i64* %20, align 8
  %68 = add i64 %66, %67
  %69 = getelementptr inbounds float, float* %63, i64 %68
  %70 = load float, float* %69, align 4
  %71 = fadd reassoc nsz arcp contract float %70, %62
  store float %71, float* %69, align 4
  br label %72

; <label>:72:                                     ; preds = %52
  %73 = load i64, i64* %20, align 8
  %74 = add i64 %73, 1
  store i64 %74, i64* %20, align 8
  br label %48

; <label>:75:                                     ; preds = %48
  %76 = load i64, i64* %15, align 8
  %77 = add i64 %76, 1
  store i64 %77, i64* %15, align 8
  br label %78

; <label>:78:                                     ; preds = %75
  %79 = load i32, i32* %17, align 4
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %17, align 4
  br label %32

; <label>:81:                                     ; preds = %32
  br label %82

; <label>:82:                                     ; preds = %81
  %83 = load i64, i64* %16, align 8
  %84 = add i64 %83, 1
  store i64 %84, i64* %16, align 8
  br label %27

; <label>:85:                                     ; preds = %27
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @libjit_embedding_bag_f(float*, float*, float*, i64*, i64*, i64, i64, i64, i1 zeroext) #0 {
  %10 = alloca float*, align 8
  %11 = alloca float*, align 8
  %12 = alloca float*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i8, align 1
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca float, align 4
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  store float* %0, float** %10, align 8
  store float* %1, float** %11, align 8
  store float* %2, float** %12, align 8
  store i64* %3, i64** %13, align 8
  store i64* %4, i64** %14, align 8
  store i64 %5, i64* %15, align 8
  store i64 %6, i64* %16, align 8
  store i64 %7, i64* %17, align 8
  %27 = zext i1 %8 to i8
  store i8 %27, i8* %18, align 1
  %28 = load i8, i8* %18, align 1
  %29 = trunc i8 %28 to i1
  br i1 %29, label %30, label %33

; <label>:30:                                     ; preds = %9
  %31 = load i64, i64* %15, align 8
  %32 = add i64 %31, -1
  store i64 %32, i64* %15, align 8
  br label %33

; <label>:33:                                     ; preds = %30, %9
  %34 = load float*, float** %10, align 8
  %35 = bitcast float* %34 to i8*
  %36 = load i64, i64* %15, align 8
  %37 = load i64, i64* %16, align 8
  %38 = mul i64 %36, %37
  %39 = mul i64 %38, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %39, i1 false)
  store i64 0, i64* %19, align 8
  store i64 0, i64* %20, align 8
  br label %40

; <label>:40:                                     ; preds = %114, %33
  %41 = load i64, i64* %20, align 8
  %42 = load i64, i64* %15, align 8
  %43 = icmp ult i64 %41, %42
  br i1 %43, label %44, label %117

; <label>:44:                                     ; preds = %40
  %45 = load i64*, i64** %14, align 8
  %46 = load i64, i64* %20, align 8
  %47 = getelementptr inbounds i64, i64* %45, i64 %46
  %48 = load i64, i64* %47, align 8
  store i64 %48, i64* %21, align 8
  %49 = load i8, i8* %18, align 1
  %50 = trunc i8 %49 to i1
  br i1 %50, label %58, label %51

; <label>:51:                                     ; preds = %44
  %52 = load i64, i64* %20, align 8
  %53 = load i64, i64* %15, align 8
  %54 = sub i64 %53, 1
  %55 = icmp eq i64 %52, %54
  br i1 %55, label %56, label %58

; <label>:56:                                     ; preds = %51
  %57 = load i64, i64* %17, align 8
  br label %64

; <label>:58:                                     ; preds = %51, %44
  %59 = load i64*, i64** %14, align 8
  %60 = load i64, i64* %20, align 8
  %61 = add i64 %60, 1
  %62 = getelementptr inbounds i64, i64* %59, i64 %61
  %63 = load i64, i64* %62, align 8
  br label %64

; <label>:64:                                     ; preds = %58, %56
  %65 = phi i64 [ %57, %56 ], [ %63, %58 ]
  store i64 %65, i64* %22, align 8
  %66 = load i64, i64* %21, align 8
  store i64 %66, i64* %23, align 8
  br label %67

; <label>:67:                                     ; preds = %110, %64
  %68 = load i64, i64* %23, align 8
  %69 = load i64, i64* %22, align 8
  %70 = icmp slt i64 %68, %69
  br i1 %70, label %71, label %113

; <label>:71:                                     ; preds = %67
  %72 = load float*, float** %12, align 8
  %73 = load i64, i64* %19, align 8
  %74 = getelementptr inbounds float, float* %72, i64 %73
  %75 = load float, float* %74, align 4
  store float %75, float* %24, align 4
  %76 = load i64*, i64** %13, align 8
  %77 = load i64, i64* %19, align 8
  %78 = getelementptr inbounds i64, i64* %76, i64 %77
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %25, align 8
  store i64 0, i64* %26, align 8
  br label %80

; <label>:80:                                     ; preds = %104, %71
  %81 = load i64, i64* %26, align 8
  %82 = load i64, i64* %16, align 8
  %83 = icmp ult i64 %81, %82
  br i1 %83, label %84, label %107

; <label>:84:                                     ; preds = %80
  %85 = load float, float* %24, align 4
  %86 = load float*, float** %11, align 8
  %87 = load i64, i64* %25, align 8
  %88 = load i64, i64* %16, align 8
  %89 = mul i64 %87, %88
  %90 = load i64, i64* %26, align 8
  %91 = add i64 %89, %90
  %92 = getelementptr inbounds float, float* %86, i64 %91
  %93 = load float, float* %92, align 4
  %94 = fmul reassoc nsz arcp contract float %85, %93
  %95 = load float*, float** %10, align 8
  %96 = load i64, i64* %20, align 8
  %97 = load i64, i64* %16, align 8
  %98 = mul i64 %96, %97
  %99 = load i64, i64* %26, align 8
  %100 = add i64 %98, %99
  %101 = getelementptr inbounds float, float* %95, i64 %100
  %102 = load float, float* %101, align 4
  %103 = fadd reassoc nsz arcp contract float %102, %94
  store float %103, float* %101, align 4
  br label %104

; <label>:104:                                    ; preds = %84
  %105 = load i64, i64* %26, align 8
  %106 = add i64 %105, 1
  store i64 %106, i64* %26, align 8
  br label %80

; <label>:107:                                    ; preds = %80
  %108 = load i64, i64* %19, align 8
  %109 = add i64 %108, 1
  store i64 %109, i64* %19, align 8
  br label %110

; <label>:110:                                    ; preds = %107
  %111 = load i64, i64* %23, align 8
  %112 = add nsw i64 %111, 1
  store i64 %112, i64* %23, align 8
  br label %67

; <label>:113:                                    ; preds = %67
  br label %114

; <label>:114:                                    ; preds = %113
  %115 = load i64, i64* %20, align 8
  %116 = add i64 %115, 1
  store i64 %116, i64* %20, align 8
  br label %40

; <label>:117:                                    ; preds = %40
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @libjit_sparse_lengths_weighted_sum_grad_f(float*, float*, float*, float*, float*, i64*, i32*, i64, i64, i64) #0 {
  %11 = alloca float*, align 8
  %12 = alloca float*, align 8
  %13 = alloca float*, align 8
  %14 = alloca float*, align 8
  %15 = alloca float*, align 8
  %16 = alloca i64*, align 8
  %17 = alloca i32*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca float, align 4
  %25 = alloca float, align 4
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  store float* %0, float** %11, align 8
  store float* %1, float** %12, align 8
  store float* %2, float** %13, align 8
  store float* %3, float** %14, align 8
  store float* %4, float** %15, align 8
  store i64* %5, i64** %16, align 8
  store i32* %6, i32** %17, align 8
  store i64 %7, i64* %18, align 8
  store i64 %8, i64* %19, align 8
  store i64 %9, i64* %20, align 8
  %28 = load float*, float** %12, align 8
  %29 = bitcast float* %28 to i8*
  %30 = load i64, i64* %20, align 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 0, i64 %30, i1 false)
  store i64 0, i64* %21, align 8
  store i64 0, i64* %22, align 8
  br label %31

; <label>:31:                                     ; preds = %109, %10
  %32 = load i64, i64* %21, align 8
  %33 = load i64, i64* %18, align 8
  %34 = icmp ult i64 %32, %33
  br i1 %34, label %35, label %112

; <label>:35:                                     ; preds = %31
  store i32 0, i32* %23, align 4
  br label %36

; <label>:36:                                     ; preds = %103, %35
  %37 = load i32, i32* %23, align 4
  %38 = load i32*, i32** %17, align 8
  %39 = load i64, i64* %21, align 8
  %40 = getelementptr inbounds i32, i32* %38, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = icmp slt i32 %37, %41
  br i1 %42, label %43, label %108

; <label>:43:                                     ; preds = %36
  store float 0.000000e+00, float* %24, align 4
  %44 = load float*, float** %15, align 8
  %45 = load i64, i64* %22, align 8
  %46 = getelementptr inbounds float, float* %44, i64 %45
  %47 = load float, float* %46, align 4
  store float %47, float* %25, align 4
  %48 = load i64*, i64** %16, align 8
  %49 = load i64, i64* %22, align 8
  %50 = getelementptr inbounds i64, i64* %48, i64 %49
  %51 = load i64, i64* %50, align 8
  store i64 %51, i64* %26, align 8
  store i64 0, i64* %27, align 8
  br label %52

; <label>:52:                                     ; preds = %95, %43
  %53 = load i64, i64* %27, align 8
  %54 = load i64, i64* %19, align 8
  %55 = icmp ult i64 %53, %54
  br i1 %55, label %56, label %98

; <label>:56:                                     ; preds = %52
  %57 = load float, float* %25, align 4
  %58 = load float*, float** %11, align 8
  %59 = load i64, i64* %21, align 8
  %60 = load i64, i64* %19, align 8
  %61 = mul i64 %59, %60
  %62 = load i64, i64* %27, align 8
  %63 = add i64 %61, %62
  %64 = getelementptr inbounds float, float* %58, i64 %63
  %65 = load float, float* %64, align 4
  %66 = fmul reassoc nsz arcp contract float %57, %65
  %67 = load float*, float** %12, align 8
  %68 = load i64, i64* %26, align 8
  %69 = load i64, i64* %19, align 8
  %70 = mul i64 %68, %69
  %71 = load i64, i64* %27, align 8
  %72 = add i64 %70, %71
  %73 = getelementptr inbounds float, float* %67, i64 %72
  %74 = load float, float* %73, align 4
  %75 = fadd reassoc nsz arcp contract float %74, %66
  store float %75, float* %73, align 4
  %76 = load float*, float** %11, align 8
  %77 = load i64, i64* %21, align 8
  %78 = load i64, i64* %19, align 8
  %79 = mul i64 %77, %78
  %80 = load i64, i64* %27, align 8
  %81 = add i64 %79, %80
  %82 = getelementptr inbounds float, float* %76, i64 %81
  %83 = load float, float* %82, align 4
  %84 = load float*, float** %14, align 8
  %85 = load i64, i64* %26, align 8
  %86 = load i64, i64* %19, align 8
  %87 = mul i64 %85, %86
  %88 = load i64, i64* %27, align 8
  %89 = add i64 %87, %88
  %90 = getelementptr inbounds float, float* %84, i64 %89
  %91 = load float, float* %90, align 4
  %92 = fmul reassoc nsz arcp contract float %83, %91
  %93 = load float, float* %24, align 4
  %94 = fadd reassoc nsz arcp contract float %93, %92
  store float %94, float* %24, align 4
  br label %95

; <label>:95:                                     ; preds = %56
  %96 = load i64, i64* %27, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %27, align 8
  br label %52

; <label>:98:                                     ; preds = %52
  %99 = load float, float* %24, align 4
  %100 = load float*, float** %13, align 8
  %101 = load i64, i64* %22, align 8
  %102 = getelementptr inbounds float, float* %100, i64 %101
  store float %99, float* %102, align 4
  br label %103

; <label>:103:                                    ; preds = %98
  %104 = load i32, i32* %23, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %23, align 4
  %106 = load i64, i64* %22, align 8
  %107 = add i64 %106, 1
  store i64 %107, i64* %22, align 8
  br label %36

; <label>:108:                                    ; preds = %36
  br label %109

; <label>:109:                                    ; preds = %108
  %110 = load i64, i64* %21, align 8
  %111 = add i64 %110, 1
  store i64 %111, i64* %21, align 8
  br label %31

; <label>:112:                                    ; preds = %31
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @libjit_rowwise_quantized_sparse_lengths_weighted_sum_f(float*, i8*, float*, float*, float*, i64*, i32*, i64, i64) #0 {
  %10 = alloca float*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca float*, align 8
  %13 = alloca float*, align 8
  %14 = alloca float*, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i32*, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i32, align 4
  %22 = alloca float, align 4
  %23 = alloca i64, align 8
  %24 = alloca float, align 4
  %25 = alloca float, align 4
  %26 = alloca i64, align 8
  %27 = alloca float, align 4
  store float* %0, float** %10, align 8
  store i8* %1, i8** %11, align 8
  store float* %2, float** %12, align 8
  store float* %3, float** %13, align 8
  store float* %4, float** %14, align 8
  store i64* %5, i64** %15, align 8
  store i32* %6, i32** %16, align 8
  store i64 %7, i64* %17, align 8
  store i64 %8, i64* %18, align 8
  %28 = load float*, float** %10, align 8
  %29 = bitcast float* %28 to i8*
  %30 = load i64, i64* %17, align 8
  %31 = load i64, i64* %18, align 8
  %32 = mul i64 %30, %31
  %33 = mul i64 %32, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 0, i64 %33, i1 false)
  store i64 0, i64* %19, align 8
  store i64 0, i64* %20, align 8
  br label %34

; <label>:34:                                     ; preds = %104, %9
  %35 = load i64, i64* %20, align 8
  %36 = load i64, i64* %17, align 8
  %37 = icmp ult i64 %35, %36
  br i1 %37, label %38, label %107

; <label>:38:                                     ; preds = %34
  store i32 0, i32* %21, align 4
  br label %39

; <label>:39:                                     ; preds = %100, %38
  %40 = load i32, i32* %21, align 4
  %41 = load i32*, i32** %16, align 8
  %42 = load i64, i64* %20, align 8
  %43 = getelementptr inbounds i32, i32* %41, i64 %42
  %44 = load i32, i32* %43, align 4
  %45 = icmp slt i32 %40, %44
  br i1 %45, label %46, label %103

; <label>:46:                                     ; preds = %39
  %47 = load float*, float** %14, align 8
  %48 = load i64, i64* %19, align 8
  %49 = getelementptr inbounds float, float* %47, i64 %48
  %50 = load float, float* %49, align 4
  store float %50, float* %22, align 4
  %51 = load i64*, i64** %15, align 8
  %52 = load i64, i64* %19, align 8
  %53 = getelementptr inbounds i64, i64* %51, i64 %52
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %23, align 8
  %55 = load float*, float** %12, align 8
  %56 = load i64, i64* %23, align 8
  %57 = getelementptr inbounds float, float* %55, i64 %56
  %58 = load float, float* %57, align 4
  store float %58, float* %24, align 4
  %59 = load float*, float** %13, align 8
  %60 = load i64, i64* %23, align 8
  %61 = getelementptr inbounds float, float* %59, i64 %60
  %62 = load float, float* %61, align 4
  store float %62, float* %25, align 4
  store i64 0, i64* %26, align 8
  br label %63

; <label>:63:                                     ; preds = %94, %46
  %64 = load i64, i64* %26, align 8
  %65 = load i64, i64* %18, align 8
  %66 = icmp ult i64 %64, %65
  br i1 %66, label %67, label %97

; <label>:67:                                     ; preds = %63
  %68 = load float, float* %24, align 4
  %69 = load i8*, i8** %11, align 8
  %70 = load i64, i64* %23, align 8
  %71 = load i64, i64* %18, align 8
  %72 = mul i64 %70, %71
  %73 = load i64, i64* %26, align 8
  %74 = add i64 %72, %73
  %75 = getelementptr inbounds i8, i8* %69, i64 %74
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = sitofp i32 %77 to float
  %79 = fmul reassoc nsz arcp contract float %68, %78
  %80 = load float, float* %25, align 4
  %81 = fadd reassoc nsz arcp contract float %79, %80
  store float %81, float* %27, align 4
  %82 = load float, float* %22, align 4
  %83 = load float, float* %27, align 4
  %84 = fmul reassoc nsz arcp contract float %82, %83
  %85 = load float*, float** %10, align 8
  %86 = load i64, i64* %20, align 8
  %87 = load i64, i64* %18, align 8
  %88 = mul i64 %86, %87
  %89 = load i64, i64* %26, align 8
  %90 = add i64 %88, %89
  %91 = getelementptr inbounds float, float* %85, i64 %90
  %92 = load float, float* %91, align 4
  %93 = fadd reassoc nsz arcp contract float %92, %84
  store float %93, float* %91, align 4
  br label %94

; <label>:94:                                     ; preds = %67
  %95 = load i64, i64* %26, align 8
  %96 = add i64 %95, 1
  store i64 %96, i64* %26, align 8
  br label %63

; <label>:97:                                     ; preds = %63
  %98 = load i64, i64* %19, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %19, align 8
  br label %100

; <label>:100:                                    ; preds = %97
  %101 = load i32, i32* %21, align 4
  %102 = add nsw i32 %101, 1
  store i32 %102, i32* %21, align 4
  br label %39

; <label>:103:                                    ; preds = %39
  br label %104

; <label>:104:                                    ; preds = %103
  %105 = load i64, i64* %20, align 8
  %106 = add i64 %105, 1
  store i64 %106, i64* %20, align 8
  br label %34

; <label>:107:                                    ; preds = %34
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @libjit_fused_rowwise_quantized_sparse_lengths_weighted_sum_f(float*, i8*, float*, i64*, i32*, i64, i64, i64) #0 {
  %9 = alloca float*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca float*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i32*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca float, align 4
  %22 = alloca i64, align 8
  %23 = alloca i8*, align 8
  %24 = alloca float, align 4
  %25 = alloca float, align 4
  %26 = alloca i64, align 8
  %27 = alloca float, align 4
  store float* %0, float** %9, align 8
  store i8* %1, i8** %10, align 8
  store float* %2, float** %11, align 8
  store i64* %3, i64** %12, align 8
  store i32* %4, i32** %13, align 8
  store i64 %5, i64* %14, align 8
  store i64 %6, i64* %15, align 8
  store i64 %7, i64* %16, align 8
  %28 = load float*, float** %9, align 8
  %29 = bitcast float* %28 to i8*
  %30 = load i64, i64* %14, align 8
  %31 = load i64, i64* %16, align 8
  %32 = mul i64 %30, %31
  %33 = mul i64 %32, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 0, i64 %33, i1 false)
  store i64 0, i64* %17, align 8
  store i64 0, i64* %18, align 8
  br label %34

; <label>:34:                                     ; preds = %109, %8
  %35 = load i64, i64* %18, align 8
  %36 = load i64, i64* %14, align 8
  %37 = icmp ult i64 %35, %36
  br i1 %37, label %38, label %112

; <label>:38:                                     ; preds = %34
  store i32 0, i32* %19, align 4
  %39 = load i32*, i32** %13, align 8
  %40 = load i64, i64* %18, align 8
  %41 = getelementptr inbounds i32, i32* %39, i64 %40
  %42 = load i32, i32* %41, align 4
  store i32 %42, i32* %20, align 4
  br label %43

; <label>:43:                                     ; preds = %105, %38
  %44 = load i32, i32* %19, align 4
  %45 = load i32, i32* %20, align 4
  %46 = icmp slt i32 %44, %45
  br i1 %46, label %47, label %108

; <label>:47:                                     ; preds = %43
  %48 = load float*, float** %11, align 8
  %49 = load i64, i64* %17, align 8
  %50 = getelementptr inbounds float, float* %48, i64 %49
  %51 = load float, float* %50, align 4
  store float %51, float* %21, align 4
  %52 = load i64*, i64** %12, align 8
  %53 = load i64, i64* %17, align 8
  %54 = getelementptr inbounds i64, i64* %52, i64 %53
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %22, align 8
  %56 = load i8*, i8** %10, align 8
  %57 = load i64, i64* %22, align 8
  %58 = add i64 %57, 1
  %59 = load i64, i64* %15, align 8
  %60 = mul i64 %58, %59
  %61 = getelementptr inbounds i8, i8* %56, i64 %60
  %62 = getelementptr inbounds i8, i8* %61, i64 -8
  store i8* %62, i8** %23, align 8
  %63 = bitcast float* %24 to i8*
  %64 = load i8*, i8** %23, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 1 %64, i64 4, i1 false)
  %65 = bitcast float* %25 to i8*
  %66 = load i8*, i8** %23, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %65, i8* align 1 %67, i64 4, i1 false)
  store i64 0, i64* %26, align 8
  br label %68

; <label>:68:                                     ; preds = %99, %47
  %69 = load i64, i64* %26, align 8
  %70 = load i64, i64* %16, align 8
  %71 = icmp ult i64 %69, %70
  br i1 %71, label %72, label %102

; <label>:72:                                     ; preds = %68
  %73 = load float, float* %24, align 4
  %74 = load i8*, i8** %10, align 8
  %75 = load i64, i64* %22, align 8
  %76 = load i64, i64* %15, align 8
  %77 = mul i64 %75, %76
  %78 = load i64, i64* %26, align 8
  %79 = add i64 %77, %78
  %80 = getelementptr inbounds i8, i8* %74, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = sitofp i32 %82 to float
  %84 = fmul reassoc nsz arcp contract float %73, %83
  %85 = load float, float* %25, align 4
  %86 = fadd reassoc nsz arcp contract float %84, %85
  store float %86, float* %27, align 4
  %87 = load float, float* %21, align 4
  %88 = load float, float* %27, align 4
  %89 = fmul reassoc nsz arcp contract float %87, %88
  %90 = load float*, float** %9, align 8
  %91 = load i64, i64* %18, align 8
  %92 = load i64, i64* %16, align 8
  %93 = mul i64 %91, %92
  %94 = load i64, i64* %26, align 8
  %95 = add i64 %93, %94
  %96 = getelementptr inbounds float, float* %90, i64 %95
  %97 = load float, float* %96, align 4
  %98 = fadd reassoc nsz arcp contract float %97, %89
  store float %98, float* %96, align 4
  br label %99

; <label>:99:                                     ; preds = %72
  %100 = load i64, i64* %26, align 8
  %101 = add i64 %100, 1
  store i64 %101, i64* %26, align 8
  br label %68

; <label>:102:                                    ; preds = %68
  %103 = load i64, i64* %17, align 8
  %104 = add i64 %103, 1
  store i64 %104, i64* %17, align 8
  br label %105

; <label>:105:                                    ; preds = %102
  %106 = load i32, i32* %19, align 4
  %107 = add nsw i32 %106, 1
  store i32 %107, i32* %19, align 4
  br label %43

; <label>:108:                                    ; preds = %43
  br label %109

; <label>:109:                                    ; preds = %108
  %110 = load i64, i64* %18, align 8
  %111 = add i64 %110, 1
  store i64 %111, i64* %18, align 8
  br label %34

; <label>:112:                                    ; preds = %34
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @libjit_embedding_bag_byte_rowwise_offsets_f(float*, i8*, float*, i64*, i64*, i64, i64, i64, i64, i1 zeroext) #0 {
  %11 = alloca float*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca float*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i8, align 1
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca float, align 4
  %26 = alloca i64, align 8
  %27 = alloca i8*, align 8
  %28 = alloca float, align 4
  %29 = alloca float, align 4
  %30 = alloca i64, align 8
  %31 = alloca float, align 4
  store float* %0, float** %11, align 8
  store i8* %1, i8** %12, align 8
  store float* %2, float** %13, align 8
  store i64* %3, i64** %14, align 8
  store i64* %4, i64** %15, align 8
  store i64 %5, i64* %16, align 8
  store i64 %6, i64* %17, align 8
  store i64 %7, i64* %18, align 8
  store i64 %8, i64* %19, align 8
  %32 = zext i1 %9 to i8
  store i8 %32, i8* %20, align 1
  %33 = load i8, i8* %20, align 1
  %34 = trunc i8 %33 to i1
  br i1 %34, label %35, label %38

; <label>:35:                                     ; preds = %10
  %36 = load i64, i64* %16, align 8
  %37 = add i64 %36, -1
  store i64 %37, i64* %16, align 8
  br label %38

; <label>:38:                                     ; preds = %35, %10
  %39 = load float*, float** %11, align 8
  %40 = bitcast float* %39 to i8*
  %41 = load i64, i64* %16, align 8
  %42 = load i64, i64* %19, align 8
  %43 = mul i64 %41, %42
  %44 = mul i64 %43, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %40, i8 0, i64 %44, i1 false)
  store i64 0, i64* %21, align 8
  br label %45

; <label>:45:                                     ; preds = %136, %38
  %46 = load i64, i64* %21, align 8
  %47 = load i64, i64* %16, align 8
  %48 = icmp ult i64 %46, %47
  br i1 %48, label %49, label %139

; <label>:49:                                     ; preds = %45
  %50 = load i64*, i64** %15, align 8
  %51 = load i64, i64* %21, align 8
  %52 = getelementptr inbounds i64, i64* %50, i64 %51
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %22, align 8
  %54 = load i8, i8* %20, align 1
  %55 = trunc i8 %54 to i1
  br i1 %55, label %63, label %56

; <label>:56:                                     ; preds = %49
  %57 = load i64, i64* %21, align 8
  %58 = load i64, i64* %16, align 8
  %59 = sub i64 %58, 1
  %60 = icmp eq i64 %57, %59
  br i1 %60, label %61, label %63

; <label>:61:                                     ; preds = %56
  %62 = load i64, i64* %17, align 8
  br label %69

; <label>:63:                                     ; preds = %56, %49
  %64 = load i64*, i64** %15, align 8
  %65 = load i64, i64* %21, align 8
  %66 = add i64 %65, 1
  %67 = getelementptr inbounds i64, i64* %64, i64 %66
  %68 = load i64, i64* %67, align 8
  br label %69

; <label>:69:                                     ; preds = %63, %61
  %70 = phi i64 [ %62, %61 ], [ %68, %63 ]
  store i64 %70, i64* %23, align 8
  %71 = load i64, i64* %22, align 8
  store i64 %71, i64* %24, align 8
  br label %72

; <label>:72:                                     ; preds = %132, %69
  %73 = load i64, i64* %24, align 8
  %74 = load i64, i64* %23, align 8
  %75 = icmp ult i64 %73, %74
  br i1 %75, label %76, label %135

; <label>:76:                                     ; preds = %72
  %77 = load float*, float** %13, align 8
  %78 = load i64, i64* %24, align 8
  %79 = getelementptr inbounds float, float* %77, i64 %78
  %80 = load float, float* %79, align 4
  store float %80, float* %25, align 4
  %81 = load i64*, i64** %14, align 8
  %82 = load i64, i64* %24, align 8
  %83 = getelementptr inbounds i64, i64* %81, i64 %82
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %26, align 8
  %85 = load i8*, i8** %12, align 8
  %86 = load i64, i64* %26, align 8
  %87 = add i64 %86, 1
  %88 = load i64, i64* %18, align 8
  %89 = mul i64 %87, %88
  %90 = getelementptr inbounds i8, i8* %85, i64 %89
  %91 = getelementptr inbounds i8, i8* %90, i64 -8
  store i8* %91, i8** %27, align 8
  %92 = bitcast float* %28 to i8*
  %93 = load i8*, i8** %27, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %92, i8* align 1 %93, i64 4, i1 false)
  %94 = bitcast float* %29 to i8*
  %95 = load i8*, i8** %27, align 8
  %96 = getelementptr inbounds i8, i8* %95, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %94, i8* align 1 %96, i64 4, i1 false)
  store i64 0, i64* %30, align 8
  br label %97

; <label>:97:                                     ; preds = %128, %76
  %98 = load i64, i64* %30, align 8
  %99 = load i64, i64* %19, align 8
  %100 = icmp ult i64 %98, %99
  br i1 %100, label %101, label %131

; <label>:101:                                    ; preds = %97
  %102 = load float, float* %28, align 4
  %103 = load i8*, i8** %12, align 8
  %104 = load i64, i64* %26, align 8
  %105 = load i64, i64* %18, align 8
  %106 = mul i64 %104, %105
  %107 = load i64, i64* %30, align 8
  %108 = add i64 %106, %107
  %109 = getelementptr inbounds i8, i8* %103, i64 %108
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = sitofp i32 %111 to float
  %113 = fmul reassoc nsz arcp contract float %102, %112
  %114 = load float, float* %29, align 4
  %115 = fadd reassoc nsz arcp contract float %113, %114
  store float %115, float* %31, align 4
  %116 = load float, float* %25, align 4
  %117 = load float, float* %31, align 4
  %118 = fmul reassoc nsz arcp contract float %116, %117
  %119 = load float*, float** %11, align 8
  %120 = load i64, i64* %21, align 8
  %121 = load i64, i64* %19, align 8
  %122 = mul i64 %120, %121
  %123 = load i64, i64* %30, align 8
  %124 = add i64 %122, %123
  %125 = getelementptr inbounds float, float* %119, i64 %124
  %126 = load float, float* %125, align 4
  %127 = fadd reassoc nsz arcp contract float %126, %118
  store float %127, float* %125, align 4
  br label %128

; <label>:128:                                    ; preds = %101
  %129 = load i64, i64* %30, align 8
  %130 = add i64 %129, 1
  store i64 %130, i64* %30, align 8
  br label %97

; <label>:131:                                    ; preds = %97
  br label %132

; <label>:132:                                    ; preds = %131
  %133 = load i64, i64* %24, align 8
  %134 = add i64 %133, 1
  store i64 %134, i64* %24, align 8
  br label %72

; <label>:135:                                    ; preds = %72
  br label %136

; <label>:136:                                    ; preds = %135
  %137 = load i64, i64* %21, align 8
  %138 = add i64 %137, 1
  store i64 %138, i64* %21, align 8
  br label %45

; <label>:139:                                    ; preds = %45
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @libjit_sparse_to_dense_f(float*, i64*, float*, i64, i64, i64) #0 {
  %7 = alloca float*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca float*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  store float* %0, float** %7, align 8
  store i64* %1, i64** %8, align 8
  store float* %2, float** %9, align 8
  store i64 %3, i64* %10, align 8
  store i64 %4, i64* %11, align 8
  store i64 %5, i64* %12, align 8
  %18 = load float*, float** %7, align 8
  %19 = bitcast float* %18 to i8*
  %20 = load i64, i64* %11, align 8
  %21 = mul i64 %20, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 %21, i1 false)
  store i64 0, i64* %13, align 8
  store i64 0, i64* %14, align 8
  br label %22

; <label>:22:                                     ; preds = %56, %6
  %23 = load i64, i64* %13, align 8
  %24 = load i64, i64* %10, align 8
  %25 = icmp ult i64 %23, %24
  br i1 %25, label %26, label %62

; <label>:26:                                     ; preds = %22
  %27 = load i64*, i64** %8, align 8
  %28 = load i64, i64* %13, align 8
  %29 = getelementptr inbounds i64, i64* %27, i64 %28
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %15, align 8
  %31 = load i64, i64* %15, align 8
  %32 = load i64, i64* %12, align 8
  %33 = mul i64 %31, %32
  store i64 %33, i64* %16, align 8
  store i64 0, i64* %17, align 8
  br label %34

; <label>:34:                                     ; preds = %52, %26
  %35 = load i64, i64* %17, align 8
  %36 = load i64, i64* %12, align 8
  %37 = icmp ult i64 %35, %36
  br i1 %37, label %38, label %55

; <label>:38:                                     ; preds = %34
  %39 = load float*, float** %9, align 8
  %40 = load i64, i64* %14, align 8
  %41 = load i64, i64* %17, align 8
  %42 = add i64 %40, %41
  %43 = getelementptr inbounds float, float* %39, i64 %42
  %44 = load float, float* %43, align 4
  %45 = load float*, float** %7, align 8
  %46 = load i64, i64* %16, align 8
  %47 = load i64, i64* %17, align 8
  %48 = add i64 %46, %47
  %49 = getelementptr inbounds float, float* %45, i64 %48
  %50 = load float, float* %49, align 4
  %51 = fadd reassoc nsz arcp contract float %50, %44
  store float %51, float* %49, align 4
  br label %52

; <label>:52:                                     ; preds = %38
  %53 = load i64, i64* %17, align 8
  %54 = add i64 %53, 1
  store i64 %54, i64* %17, align 8
  br label %34

; <label>:55:                                     ; preds = %34
  br label %56

; <label>:56:                                     ; preds = %55
  %57 = load i64, i64* %13, align 8
  %58 = add i64 %57, 1
  store i64 %58, i64* %13, align 8
  %59 = load i64, i64* %12, align 8
  %60 = load i64, i64* %14, align 8
  %61 = add i64 %60, %59
  store i64 %61, i64* %14, align 8
  br label %22

; <label>:62:                                     ; preds = %22
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @libjit_lengths_sum_f(float*, float*, i32*, i64, i64, i64) #0 {
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i32, align 4
  %17 = alloca i64, align 8
  store float* %0, float** %7, align 8
  store float* %1, float** %8, align 8
  store i32* %2, i32** %9, align 8
  store i64 %3, i64* %10, align 8
  store i64 %4, i64* %11, align 8
  store i64 %5, i64* %12, align 8
  %18 = load float*, float** %7, align 8
  %19 = bitcast float* %18 to i8*
  %20 = load i64, i64* %10, align 8
  %21 = mul i64 %20, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 %21, i1 false)
  store i64 0, i64* %13, align 8
  store i64 0, i64* %14, align 8
  store i64 0, i64* %15, align 8
  br label %22

; <label>:22:                                     ; preds = %67, %6
  %23 = load i64, i64* %15, align 8
  %24 = load i64, i64* %11, align 8
  %25 = icmp ult i64 %23, %24
  br i1 %25, label %26, label %70

; <label>:26:                                     ; preds = %22
  store i32 0, i32* %16, align 4
  br label %27

; <label>:27:                                     ; preds = %60, %26
  %28 = load i32, i32* %16, align 4
  %29 = load i32*, i32** %9, align 8
  %30 = load i64, i64* %15, align 8
  %31 = getelementptr inbounds i32, i32* %29, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = icmp slt i32 %28, %32
  br i1 %33, label %34, label %63

; <label>:34:                                     ; preds = %27
  store i64 0, i64* %17, align 8
  br label %35

; <label>:35:                                     ; preds = %53, %34
  %36 = load i64, i64* %17, align 8
  %37 = load i64, i64* %12, align 8
  %38 = icmp ult i64 %36, %37
  br i1 %38, label %39, label %56

; <label>:39:                                     ; preds = %35
  %40 = load float*, float** %8, align 8
  %41 = load i64, i64* %14, align 8
  %42 = load i64, i64* %17, align 8
  %43 = add i64 %41, %42
  %44 = getelementptr inbounds float, float* %40, i64 %43
  %45 = load float, float* %44, align 4
  %46 = load float*, float** %7, align 8
  %47 = load i64, i64* %13, align 8
  %48 = load i64, i64* %17, align 8
  %49 = add i64 %47, %48
  %50 = getelementptr inbounds float, float* %46, i64 %49
  %51 = load float, float* %50, align 4
  %52 = fadd reassoc nsz arcp contract float %51, %45
  store float %52, float* %50, align 4
  br label %53

; <label>:53:                                     ; preds = %39
  %54 = load i64, i64* %17, align 8
  %55 = add i64 %54, 1
  store i64 %55, i64* %17, align 8
  br label %35

; <label>:56:                                     ; preds = %35
  %57 = load i64, i64* %12, align 8
  %58 = load i64, i64* %14, align 8
  %59 = add i64 %58, %57
  store i64 %59, i64* %14, align 8
  br label %60

; <label>:60:                                     ; preds = %56
  %61 = load i32, i32* %16, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %16, align 4
  br label %27

; <label>:63:                                     ; preds = %27
  %64 = load i64, i64* %12, align 8
  %65 = load i64, i64* %13, align 8
  %66 = add i64 %65, %64
  store i64 %66, i64* %13, align 8
  br label %67

; <label>:67:                                     ; preds = %63
  %68 = load i64, i64* %15, align 8
  %69 = add i64 %68, 1
  store i64 %69, i64* %15, align 8
  br label %22

; <label>:70:                                     ; preds = %22
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_local_response_normalization_f(float*, float*, float*, i64*, i64*, i64, float, float, float) #2 {
  %10 = alloca float*, align 8
  %11 = alloca float*, align 8
  %12 = alloca float*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64, align 8
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  %19 = alloca i64, align 8
  %20 = alloca float, align 4
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca float, align 4
  %26 = alloca i64, align 8
  %27 = alloca float, align 4
  %28 = alloca float, align 4
  %29 = alloca float, align 4
  store float* %0, float** %10, align 8
  store float* %1, float** %11, align 8
  store float* %2, float** %12, align 8
  store i64* %3, i64** %13, align 8
  store i64* %4, i64** %14, align 8
  store i64 %5, i64* %15, align 8
  store float %6, float* %16, align 4
  store float %7, float* %17, align 4
  store float %8, float* %18, align 4
  %30 = load i64, i64* %15, align 8
  %31 = mul i64 2, %30
  %32 = add i64 %31, 1
  store i64 %32, i64* %19, align 8
  %33 = load float, float* %16, align 4
  %34 = load i64, i64* %19, align 8
  %35 = uitofp i64 %34 to float
  %36 = fdiv reassoc nsz arcp float %33, %35
  store float %36, float* %20, align 4
  store i64 0, i64* %21, align 8
  br label %37

; <label>:37:                                     ; preds = %165, %9
  %38 = load i64, i64* %21, align 8
  %39 = load i64*, i64** %14, align 8
  %40 = getelementptr inbounds i64, i64* %39, i64 0
  %41 = load i64, i64* %40, align 8
  %42 = icmp ult i64 %38, %41
  br i1 %42, label %43, label %168

; <label>:43:                                     ; preds = %37
  store i64 0, i64* %22, align 8
  br label %44

; <label>:44:                                     ; preds = %161, %43
  %45 = load i64, i64* %22, align 8
  %46 = load i64*, i64** %14, align 8
  %47 = getelementptr inbounds i64, i64* %46, i64 1
  %48 = load i64, i64* %47, align 8
  %49 = icmp ult i64 %45, %48
  br i1 %49, label %50, label %164

; <label>:50:                                     ; preds = %44
  store i64 0, i64* %23, align 8
  br label %51

; <label>:51:                                     ; preds = %157, %50
  %52 = load i64, i64* %23, align 8
  %53 = load i64*, i64** %14, align 8
  %54 = getelementptr inbounds i64, i64* %53, i64 2
  %55 = load i64, i64* %54, align 8
  %56 = icmp ult i64 %52, %55
  br i1 %56, label %57, label %160

; <label>:57:                                     ; preds = %51
  store i64 0, i64* %24, align 8
  br label %58

; <label>:58:                                     ; preds = %153, %57
  %59 = load i64, i64* %24, align 8
  %60 = load i64*, i64** %14, align 8
  %61 = getelementptr inbounds i64, i64* %60, i64 3
  %62 = load i64, i64* %61, align 8
  %63 = icmp ult i64 %59, %62
  br i1 %63, label %64, label %156

; <label>:64:                                     ; preds = %58
  store float 0.000000e+00, float* %25, align 4
  %65 = load i64, i64* %24, align 8
  %66 = load i64, i64* %15, align 8
  %67 = icmp uge i64 %65, %66
  br i1 %67, label %68, label %72

; <label>:68:                                     ; preds = %64
  %69 = load i64, i64* %24, align 8
  %70 = load i64, i64* %15, align 8
  %71 = sub i64 %69, %70
  br label %73

; <label>:72:                                     ; preds = %64
  br label %73

; <label>:73:                                     ; preds = %72, %68
  %74 = phi i64 [ %71, %68 ], [ 0, %72 ]
  store i64 %74, i64* %26, align 8
  br label %75

; <label>:75:                                     ; preds = %112, %73
  %76 = load i64, i64* %26, align 8
  %77 = load i64, i64* %24, align 8
  %78 = load i64, i64* %15, align 8
  %79 = add i64 %77, %78
  %80 = load i64*, i64** %14, align 8
  %81 = getelementptr inbounds i64, i64* %80, i64 3
  %82 = load i64, i64* %81, align 8
  %83 = sub i64 %82, 1
  %84 = icmp ult i64 %79, %83
  br i1 %84, label %85, label %89

; <label>:85:                                     ; preds = %75
  %86 = load i64, i64* %24, align 8
  %87 = load i64, i64* %15, align 8
  %88 = add i64 %86, %87
  br label %94

; <label>:89:                                     ; preds = %75
  %90 = load i64*, i64** %14, align 8
  %91 = getelementptr inbounds i64, i64* %90, i64 3
  %92 = load i64, i64* %91, align 8
  %93 = sub i64 %92, 1
  br label %94

; <label>:94:                                     ; preds = %89, %85
  %95 = phi i64 [ %88, %85 ], [ %93, %89 ]
  %96 = icmp ule i64 %76, %95
  br i1 %96, label %97, label %115

; <label>:97:                                     ; preds = %94
  %98 = load float*, float** %11, align 8
  %99 = load i64*, i64** %14, align 8
  %100 = load i64, i64* %21, align 8
  %101 = load i64, i64* %22, align 8
  %102 = load i64, i64* %23, align 8
  %103 = load i64, i64* %26, align 8
  %104 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %99, i64 %100, i64 %101, i64 %102, i64 %103)
  %105 = getelementptr inbounds float, float* %98, i64 %104
  %106 = load float, float* %105, align 4
  store float %106, float* %27, align 4
  %107 = load float, float* %27, align 4
  %108 = load float, float* %27, align 4
  %109 = fmul reassoc nsz arcp contract float %107, %108
  %110 = load float, float* %25, align 4
  %111 = fadd reassoc nsz arcp contract float %110, %109
  store float %111, float* %25, align 4
  br label %112

; <label>:112:                                    ; preds = %97
  %113 = load i64, i64* %26, align 8
  %114 = add i64 %113, 1
  store i64 %114, i64* %26, align 8
  br label %75

; <label>:115:                                    ; preds = %94
  %116 = load float, float* %18, align 4
  %117 = load float, float* %20, align 4
  %118 = load float, float* %25, align 4
  %119 = fmul reassoc nsz arcp contract float %117, %118
  %120 = fadd reassoc nsz arcp contract float %116, %119
  store float %120, float* %28, align 4
  %121 = load float, float* %28, align 4
  %122 = load float*, float** %12, align 8
  %123 = load i64*, i64** %14, align 8
  %124 = load i64, i64* %21, align 8
  %125 = load i64, i64* %22, align 8
  %126 = load i64, i64* %23, align 8
  %127 = load i64, i64* %24, align 8
  %128 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %123, i64 %124, i64 %125, i64 %126, i64 %127)
  %129 = getelementptr inbounds float, float* %122, i64 %128
  store float %121, float* %129, align 4
  %130 = load float, float* %28, align 4
  %131 = load float, float* %17, align 4
  %132 = fsub reassoc nsz arcp float -0.000000e+00, %131
  %133 = call reassoc nsz arcp float @_ZSt3powff(float %130, float %132)
  store float %133, float* %29, align 4
  %134 = load float*, float** %11, align 8
  %135 = load i64*, i64** %14, align 8
  %136 = load i64, i64* %21, align 8
  %137 = load i64, i64* %22, align 8
  %138 = load i64, i64* %23, align 8
  %139 = load i64, i64* %24, align 8
  %140 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %135, i64 %136, i64 %137, i64 %138, i64 %139)
  %141 = getelementptr inbounds float, float* %134, i64 %140
  %142 = load float, float* %141, align 4
  %143 = load float, float* %29, align 4
  %144 = fmul reassoc nsz arcp contract float %142, %143
  %145 = load float*, float** %10, align 8
  %146 = load i64*, i64** %13, align 8
  %147 = load i64, i64* %21, align 8
  %148 = load i64, i64* %22, align 8
  %149 = load i64, i64* %23, align 8
  %150 = load i64, i64* %24, align 8
  %151 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %146, i64 %147, i64 %148, i64 %149, i64 %150)
  %152 = getelementptr inbounds float, float* %145, i64 %151
  store float %144, float* %152, align 4
  br label %153

; <label>:153:                                    ; preds = %115
  %154 = load i64, i64* %24, align 8
  %155 = add i64 %154, 1
  store i64 %155, i64* %24, align 8
  br label %58

; <label>:156:                                    ; preds = %58
  br label %157

; <label>:157:                                    ; preds = %156
  %158 = load i64, i64* %23, align 8
  %159 = add i64 %158, 1
  store i64 %159, i64* %23, align 8
  br label %51

; <label>:160:                                    ; preds = %51
  br label %161

; <label>:161:                                    ; preds = %160
  %162 = load i64, i64* %22, align 8
  %163 = add i64 %162, 1
  store i64 %163, i64* %22, align 8
  br label %44

; <label>:164:                                    ; preds = %44
  br label %165

; <label>:165:                                    ; preds = %164
  %166 = load i64, i64* %21, align 8
  %167 = add i64 %166, 1
  store i64 %167, i64* %21, align 8
  br label %37

; <label>:168:                                    ; preds = %37
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local i64 @_Z14libjit_getXYZWPKmmmmm(i64*, i64, i64, i64, i64) #0 comdat {
  %6 = alloca i64*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  store i64* %0, i64** %6, align 8
  store i64 %1, i64* %7, align 8
  store i64 %2, i64* %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  %11 = load i64, i64* %7, align 8
  %12 = load i64*, i64** %6, align 8
  %13 = getelementptr inbounds i64, i64* %12, i64 1
  %14 = load i64, i64* %13, align 8
  %15 = mul i64 %11, %14
  %16 = load i64*, i64** %6, align 8
  %17 = getelementptr inbounds i64, i64* %16, i64 2
  %18 = load i64, i64* %17, align 8
  %19 = mul i64 %15, %18
  %20 = load i64*, i64** %6, align 8
  %21 = getelementptr inbounds i64, i64* %20, i64 3
  %22 = load i64, i64* %21, align 8
  %23 = mul i64 %19, %22
  %24 = load i64, i64* %8, align 8
  %25 = load i64*, i64** %6, align 8
  %26 = getelementptr inbounds i64, i64* %25, i64 2
  %27 = load i64, i64* %26, align 8
  %28 = mul i64 %24, %27
  %29 = load i64*, i64** %6, align 8
  %30 = getelementptr inbounds i64, i64* %29, i64 3
  %31 = load i64, i64* %30, align 8
  %32 = mul i64 %28, %31
  %33 = add i64 %23, %32
  %34 = load i64, i64* %9, align 8
  %35 = load i64*, i64** %6, align 8
  %36 = getelementptr inbounds i64, i64* %35, i64 3
  %37 = load i64, i64* %36, align 8
  %38 = mul i64 %34, %37
  %39 = add i64 %33, %38
  %40 = load i64, i64* %10, align 8
  %41 = add i64 %39, %40
  ret i64 %41
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_local_response_normalization_grad_f(float*, float*, float*, float*, float*, i64*, i64, float, float) #2 {
  %10 = alloca float*, align 8
  %11 = alloca float*, align 8
  %12 = alloca float*, align 8
  %13 = alloca float*, align 8
  %14 = alloca float*, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i64, align 8
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  %19 = alloca i64, align 8
  %20 = alloca float, align 4
  %21 = alloca float, align 4
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca float, align 4
  %26 = alloca i64, align 8
  %27 = alloca float, align 4
  %28 = alloca float, align 4
  %29 = alloca float, align 4
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca float, align 4
  %33 = alloca float, align 4
  %34 = alloca float, align 4
  %35 = alloca i64, align 8
  %36 = alloca float, align 4
  %37 = alloca float, align 4
  %38 = alloca float, align 4
  %39 = alloca float, align 4
  %40 = alloca float, align 4
  %41 = alloca float, align 4
  store float* %0, float** %10, align 8
  store float* %1, float** %11, align 8
  store float* %2, float** %12, align 8
  store float* %3, float** %13, align 8
  store float* %4, float** %14, align 8
  store i64* %5, i64** %15, align 8
  store i64 %6, i64* %16, align 8
  store float %7, float* %17, align 4
  store float %8, float* %18, align 4
  %42 = load i64, i64* %16, align 8
  %43 = mul i64 2, %42
  %44 = add i64 %43, 1
  store i64 %44, i64* %19, align 8
  %45 = load float, float* %17, align 4
  %46 = load i64, i64* %19, align 8
  %47 = uitofp i64 %46 to float
  %48 = fdiv reassoc nsz arcp float %45, %47
  store float %48, float* %20, align 4
  %49 = load float, float* %20, align 4
  %50 = fmul reassoc nsz arcp contract float 2.000000e+00, %49
  %51 = load float, float* %18, align 4
  %52 = fmul reassoc nsz arcp contract float %50, %51
  store float %52, float* %21, align 4
  store i64 0, i64* %22, align 8
  br label %53

; <label>:53:                                     ; preds = %282, %9
  %54 = load i64, i64* %22, align 8
  %55 = load i64*, i64** %15, align 8
  %56 = getelementptr inbounds i64, i64* %55, i64 0
  %57 = load i64, i64* %56, align 8
  %58 = icmp ult i64 %54, %57
  br i1 %58, label %59, label %285

; <label>:59:                                     ; preds = %53
  store i64 0, i64* %23, align 8
  br label %60

; <label>:60:                                     ; preds = %278, %59
  %61 = load i64, i64* %23, align 8
  %62 = load i64*, i64** %15, align 8
  %63 = getelementptr inbounds i64, i64* %62, i64 1
  %64 = load i64, i64* %63, align 8
  %65 = icmp ult i64 %61, %64
  br i1 %65, label %66, label %281

; <label>:66:                                     ; preds = %60
  store i64 0, i64* %24, align 8
  br label %67

; <label>:67:                                     ; preds = %274, %66
  %68 = load i64, i64* %24, align 8
  %69 = load i64*, i64** %15, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 2
  %71 = load i64, i64* %70, align 8
  %72 = icmp ult i64 %68, %71
  br i1 %72, label %73, label %277

; <label>:73:                                     ; preds = %67
  store float 0.000000e+00, float* %25, align 4
  store i64 0, i64* %26, align 8
  br label %74

; <label>:74:                                     ; preds = %125, %73
  %75 = load i64, i64* %26, align 8
  %76 = load i64, i64* %16, align 8
  %77 = load i64*, i64** %15, align 8
  %78 = getelementptr inbounds i64, i64* %77, i64 3
  %79 = load i64, i64* %78, align 8
  %80 = icmp ult i64 %76, %79
  br i1 %80, label %81, label %83

; <label>:81:                                     ; preds = %74
  %82 = load i64, i64* %16, align 8
  br label %87

; <label>:83:                                     ; preds = %74
  %84 = load i64*, i64** %15, align 8
  %85 = getelementptr inbounds i64, i64* %84, i64 3
  %86 = load i64, i64* %85, align 8
  br label %87

; <label>:87:                                     ; preds = %83, %81
  %88 = phi i64 [ %82, %81 ], [ %86, %83 ]
  %89 = icmp ult i64 %75, %88
  br i1 %89, label %90, label %128

; <label>:90:                                     ; preds = %87
  %91 = load float*, float** %11, align 8
  %92 = load i64*, i64** %15, align 8
  %93 = load i64, i64* %22, align 8
  %94 = load i64, i64* %23, align 8
  %95 = load i64, i64* %24, align 8
  %96 = load i64, i64* %26, align 8
  %97 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %92, i64 %93, i64 %94, i64 %95, i64 %96)
  %98 = getelementptr inbounds float, float* %91, i64 %97
  %99 = load float, float* %98, align 4
  store float %99, float* %27, align 4
  %100 = load float*, float** %13, align 8
  %101 = load i64*, i64** %15, align 8
  %102 = load i64, i64* %22, align 8
  %103 = load i64, i64* %23, align 8
  %104 = load i64, i64* %24, align 8
  %105 = load i64, i64* %26, align 8
  %106 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %101, i64 %102, i64 %103, i64 %104, i64 %105)
  %107 = getelementptr inbounds float, float* %100, i64 %106
  %108 = load float, float* %107, align 4
  store float %108, float* %28, align 4
  %109 = load float*, float** %14, align 8
  %110 = load i64*, i64** %15, align 8
  %111 = load i64, i64* %22, align 8
  %112 = load i64, i64* %23, align 8
  %113 = load i64, i64* %24, align 8
  %114 = load i64, i64* %26, align 8
  %115 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %110, i64 %111, i64 %112, i64 %113, i64 %114)
  %116 = getelementptr inbounds float, float* %109, i64 %115
  %117 = load float, float* %116, align 4
  store float %117, float* %29, align 4
  %118 = load float, float* %27, align 4
  %119 = load float, float* %28, align 4
  %120 = load float, float* %29, align 4
  %121 = fdiv reassoc nsz arcp float %119, %120
  %122 = fmul reassoc nsz arcp contract float %118, %121
  %123 = load float, float* %25, align 4
  %124 = fadd reassoc nsz arcp contract float %123, %122
  store float %124, float* %25, align 4
  br label %125

; <label>:125:                                    ; preds = %90
  %126 = load i64, i64* %26, align 8
  %127 = add i64 %126, 1
  store i64 %127, i64* %26, align 8
  br label %74

; <label>:128:                                    ; preds = %87
  store i64 0, i64* %30, align 8
  br label %129

; <label>:129:                                    ; preds = %270, %128
  %130 = load i64, i64* %30, align 8
  %131 = load i64*, i64** %15, align 8
  %132 = getelementptr inbounds i64, i64* %131, i64 3
  %133 = load i64, i64* %132, align 8
  %134 = icmp ult i64 %130, %133
  br i1 %134, label %135, label %273

; <label>:135:                                    ; preds = %129
  %136 = load i64, i64* %30, align 8
  %137 = load i64, i64* %16, align 8
  %138 = icmp ugt i64 %136, %137
  br i1 %138, label %139, label %178

; <label>:139:                                    ; preds = %135
  %140 = load i64, i64* %30, align 8
  %141 = load i64, i64* %16, align 8
  %142 = sub i64 %140, %141
  %143 = sub i64 %142, 1
  store i64 %143, i64* %31, align 8
  %144 = load float*, float** %11, align 8
  %145 = load i64*, i64** %15, align 8
  %146 = load i64, i64* %22, align 8
  %147 = load i64, i64* %23, align 8
  %148 = load i64, i64* %24, align 8
  %149 = load i64, i64* %31, align 8
  %150 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %145, i64 %146, i64 %147, i64 %148, i64 %149)
  %151 = getelementptr inbounds float, float* %144, i64 %150
  %152 = load float, float* %151, align 4
  store float %152, float* %32, align 4
  %153 = load float*, float** %13, align 8
  %154 = load i64*, i64** %15, align 8
  %155 = load i64, i64* %22, align 8
  %156 = load i64, i64* %23, align 8
  %157 = load i64, i64* %24, align 8
  %158 = load i64, i64* %31, align 8
  %159 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %154, i64 %155, i64 %156, i64 %157, i64 %158)
  %160 = getelementptr inbounds float, float* %153, i64 %159
  %161 = load float, float* %160, align 4
  store float %161, float* %33, align 4
  %162 = load float*, float** %14, align 8
  %163 = load i64*, i64** %15, align 8
  %164 = load i64, i64* %22, align 8
  %165 = load i64, i64* %23, align 8
  %166 = load i64, i64* %24, align 8
  %167 = load i64, i64* %31, align 8
  %168 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %163, i64 %164, i64 %165, i64 %166, i64 %167)
  %169 = getelementptr inbounds float, float* %162, i64 %168
  %170 = load float, float* %169, align 4
  store float %170, float* %34, align 4
  %171 = load float, float* %32, align 4
  %172 = load float, float* %33, align 4
  %173 = load float, float* %34, align 4
  %174 = fdiv reassoc nsz arcp float %172, %173
  %175 = fmul reassoc nsz arcp contract float %171, %174
  %176 = load float, float* %25, align 4
  %177 = fsub reassoc nsz arcp contract float %176, %175
  store float %177, float* %25, align 4
  br label %178

; <label>:178:                                    ; preds = %139, %135
  %179 = load i64, i64* %30, align 8
  %180 = load i64, i64* %16, align 8
  %181 = add i64 %179, %180
  store i64 %181, i64* %35, align 8
  %182 = load i64, i64* %35, align 8
  %183 = load i64*, i64** %15, align 8
  %184 = getelementptr inbounds i64, i64* %183, i64 3
  %185 = load i64, i64* %184, align 8
  %186 = icmp ult i64 %182, %185
  br i1 %186, label %187, label %222

; <label>:187:                                    ; preds = %178
  %188 = load float*, float** %11, align 8
  %189 = load i64*, i64** %15, align 8
  %190 = load i64, i64* %22, align 8
  %191 = load i64, i64* %23, align 8
  %192 = load i64, i64* %24, align 8
  %193 = load i64, i64* %35, align 8
  %194 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %189, i64 %190, i64 %191, i64 %192, i64 %193)
  %195 = getelementptr inbounds float, float* %188, i64 %194
  %196 = load float, float* %195, align 4
  store float %196, float* %36, align 4
  %197 = load float*, float** %13, align 8
  %198 = load i64*, i64** %15, align 8
  %199 = load i64, i64* %22, align 8
  %200 = load i64, i64* %23, align 8
  %201 = load i64, i64* %24, align 8
  %202 = load i64, i64* %35, align 8
  %203 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %198, i64 %199, i64 %200, i64 %201, i64 %202)
  %204 = getelementptr inbounds float, float* %197, i64 %203
  %205 = load float, float* %204, align 4
  store float %205, float* %37, align 4
  %206 = load float*, float** %14, align 8
  %207 = load i64*, i64** %15, align 8
  %208 = load i64, i64* %22, align 8
  %209 = load i64, i64* %23, align 8
  %210 = load i64, i64* %24, align 8
  %211 = load i64, i64* %35, align 8
  %212 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %207, i64 %208, i64 %209, i64 %210, i64 %211)
  %213 = getelementptr inbounds float, float* %206, i64 %212
  %214 = load float, float* %213, align 4
  store float %214, float* %38, align 4
  %215 = load float, float* %36, align 4
  %216 = load float, float* %37, align 4
  %217 = load float, float* %38, align 4
  %218 = fdiv reassoc nsz arcp float %216, %217
  %219 = fmul reassoc nsz arcp contract float %215, %218
  %220 = load float, float* %25, align 4
  %221 = fadd reassoc nsz arcp contract float %220, %219
  store float %221, float* %25, align 4
  br label %222

; <label>:222:                                    ; preds = %187, %178
  %223 = load float*, float** %11, align 8
  %224 = load i64*, i64** %15, align 8
  %225 = load i64, i64* %22, align 8
  %226 = load i64, i64* %23, align 8
  %227 = load i64, i64* %24, align 8
  %228 = load i64, i64* %30, align 8
  %229 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %224, i64 %225, i64 %226, i64 %227, i64 %228)
  %230 = getelementptr inbounds float, float* %223, i64 %229
  %231 = load float, float* %230, align 4
  store float %231, float* %39, align 4
  %232 = load float*, float** %12, align 8
  %233 = load i64*, i64** %15, align 8
  %234 = load i64, i64* %22, align 8
  %235 = load i64, i64* %23, align 8
  %236 = load i64, i64* %24, align 8
  %237 = load i64, i64* %30, align 8
  %238 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %233, i64 %234, i64 %235, i64 %236, i64 %237)
  %239 = getelementptr inbounds float, float* %232, i64 %238
  %240 = load float, float* %239, align 4
  store float %240, float* %40, align 4
  %241 = load float*, float** %14, align 8
  %242 = load i64*, i64** %15, align 8
  %243 = load i64, i64* %22, align 8
  %244 = load i64, i64* %23, align 8
  %245 = load i64, i64* %24, align 8
  %246 = load i64, i64* %30, align 8
  %247 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %242, i64 %243, i64 %244, i64 %245, i64 %246)
  %248 = getelementptr inbounds float, float* %241, i64 %247
  %249 = load float, float* %248, align 4
  store float %249, float* %41, align 4
  %250 = load float, float* %39, align 4
  %251 = load float, float* %41, align 4
  %252 = load float, float* %18, align 4
  %253 = fsub reassoc nsz arcp float -0.000000e+00, %252
  %254 = call reassoc nsz arcp float @_ZSt3powff(float %251, float %253)
  %255 = fmul reassoc nsz arcp contract float %250, %254
  %256 = load float, float* %21, align 4
  %257 = load float, float* %40, align 4
  %258 = fmul reassoc nsz arcp contract float %256, %257
  %259 = load float, float* %25, align 4
  %260 = fmul reassoc nsz arcp contract float %258, %259
  %261 = fsub reassoc nsz arcp contract float %255, %260
  %262 = load float*, float** %10, align 8
  %263 = load i64*, i64** %15, align 8
  %264 = load i64, i64* %22, align 8
  %265 = load i64, i64* %23, align 8
  %266 = load i64, i64* %24, align 8
  %267 = load i64, i64* %30, align 8
  %268 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %263, i64 %264, i64 %265, i64 %266, i64 %267)
  %269 = getelementptr inbounds float, float* %262, i64 %268
  store float %261, float* %269, align 4
  br label %270

; <label>:270:                                    ; preds = %222
  %271 = load i64, i64* %30, align 8
  %272 = add i64 %271, 1
  store i64 %272, i64* %30, align 8
  br label %129

; <label>:273:                                    ; preds = %129
  br label %274

; <label>:274:                                    ; preds = %273
  %275 = load i64, i64* %24, align 8
  %276 = add i64 %275, 1
  store i64 %276, i64* %24, align 8
  br label %67

; <label>:277:                                    ; preds = %67
  br label %278

; <label>:278:                                    ; preds = %277
  %279 = load i64, i64* %23, align 8
  %280 = add i64 %279, 1
  store i64 %280, i64* %23, align 8
  br label %60

; <label>:281:                                    ; preds = %60
  br label %282

; <label>:282:                                    ; preds = %281
  %283 = load i64, i64* %22, align 8
  %284 = add i64 %283, 1
  store i64 %284, i64* %22, align 8
  br label %53

; <label>:285:                                    ; preds = %53
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_max_pool_i8(i8*, i8*, i64*, i64*, i64*, i64*, i64*) #2 {
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  store i8* %0, i8** %8, align 8
  store i8* %1, i8** %9, align 8
  store i64* %2, i64** %10, align 8
  store i64* %3, i64** %11, align 8
  store i64* %4, i64** %12, align 8
  store i64* %5, i64** %13, align 8
  store i64* %6, i64** %14, align 8
  %15 = load i8*, i8** %8, align 8
  %16 = load i8*, i8** %9, align 8
  %17 = load i64*, i64** %10, align 8
  %18 = load i64*, i64** %11, align 8
  %19 = load i64*, i64** %12, align 8
  %20 = load i64*, i64** %13, align 8
  %21 = load i64*, i64** %14, align 8
  call void @_ZN12_GLOBAL__N_123libjit_max_pool_genericIaEEvPKT_PS1_PKmS6_PmS7_S7_(i8* %15, i8* %16, i64* %17, i64* %18, i64* %19, i64* %20, i64* %21)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_123libjit_max_pool_genericIaEEvPKT_PS1_PKmS6_PmS7_S7_(i8*, i8*, i64*, i64*, i64*, i64*, i64*) #0 {
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i32, align 4
  %28 = alloca i8, align 1
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca float, align 4
  store i8* %0, i8** %8, align 8
  store i8* %1, i8** %9, align 8
  store i64* %2, i64** %10, align 8
  store i64* %3, i64** %11, align 8
  store i64* %4, i64** %12, align 8
  store i64* %5, i64** %13, align 8
  store i64* %6, i64** %14, align 8
  %34 = load i64*, i64** %14, align 8
  %35 = getelementptr inbounds i64, i64* %34, i64 0
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %15, align 8
  %37 = load i64*, i64** %14, align 8
  %38 = getelementptr inbounds i64, i64* %37, i64 1
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %16, align 8
  %40 = load i64*, i64** %13, align 8
  %41 = getelementptr inbounds i64, i64* %40, i64 0
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %17, align 8
  %43 = load i64*, i64** %13, align 8
  %44 = getelementptr inbounds i64, i64* %43, i64 1
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %18, align 8
  %46 = load i64*, i64** %12, align 8
  %47 = getelementptr inbounds i64, i64* %46, i64 0
  %48 = load i64, i64* %47, align 8
  store i64 %48, i64* %19, align 8
  %49 = load i64*, i64** %12, align 8
  %50 = getelementptr inbounds i64, i64* %49, i64 1
  %51 = load i64, i64* %50, align 8
  store i64 %51, i64* %20, align 8
  store i64 0, i64* %21, align 8
  br label %52

; <label>:52:                                     ; preds = %176, %7
  %53 = load i64, i64* %21, align 8
  %54 = load i64*, i64** %11, align 8
  %55 = getelementptr inbounds i64, i64* %54, i64 0
  %56 = load i64, i64* %55, align 8
  %57 = icmp ult i64 %53, %56
  br i1 %57, label %58, label %179

; <label>:58:                                     ; preds = %52
  %59 = load i64, i64* %15, align 8
  %60 = sub nsw i64 0, %59
  store i64 %60, i64* %22, align 8
  store i64 0, i64* %23, align 8
  br label %61

; <label>:61:                                     ; preds = %169, %58
  %62 = load i64, i64* %23, align 8
  %63 = load i64*, i64** %11, align 8
  %64 = getelementptr inbounds i64, i64* %63, i64 1
  %65 = load i64, i64* %64, align 8
  %66 = icmp ult i64 %62, %65
  br i1 %66, label %67, label %175

; <label>:67:                                     ; preds = %61
  %68 = load i64, i64* %16, align 8
  %69 = sub nsw i64 0, %68
  store i64 %69, i64* %24, align 8
  store i64 0, i64* %25, align 8
  br label %70

; <label>:70:                                     ; preds = %162, %67
  %71 = load i64, i64* %25, align 8
  %72 = load i64*, i64** %11, align 8
  %73 = getelementptr inbounds i64, i64* %72, i64 2
  %74 = load i64, i64* %73, align 8
  %75 = icmp ult i64 %71, %74
  br i1 %75, label %76, label %168

; <label>:76:                                     ; preds = %70
  store i64 0, i64* %26, align 8
  br label %77

; <label>:77:                                     ; preds = %158, %76
  %78 = load i64, i64* %26, align 8
  %79 = load i64*, i64** %10, align 8
  %80 = getelementptr inbounds i64, i64* %79, i64 3
  %81 = load i64, i64* %80, align 8
  %82 = icmp ult i64 %78, %81
  br i1 %82, label %83, label %161

; <label>:83:                                     ; preds = %77
  store i32 1, i32* %27, align 4
  store i8 0, i8* %28, align 1
  store i64 0, i64* %29, align 8
  br label %84

; <label>:84:                                     ; preds = %145, %83
  %85 = load i64, i64* %29, align 8
  %86 = load i64, i64* %19, align 8
  %87 = icmp ult i64 %85, %86
  br i1 %87, label %88, label %148

; <label>:88:                                     ; preds = %84
  store i64 0, i64* %30, align 8
  br label %89

; <label>:89:                                     ; preds = %141, %88
  %90 = load i64, i64* %30, align 8
  %91 = load i64, i64* %20, align 8
  %92 = icmp ult i64 %90, %91
  br i1 %92, label %93, label %144

; <label>:93:                                     ; preds = %89
  %94 = load i64, i64* %22, align 8
  %95 = load i64, i64* %29, align 8
  %96 = add i64 %94, %95
  store i64 %96, i64* %31, align 8
  %97 = load i64, i64* %24, align 8
  %98 = load i64, i64* %30, align 8
  %99 = add i64 %97, %98
  store i64 %99, i64* %32, align 8
  %100 = load i64, i64* %31, align 8
  %101 = icmp slt i64 %100, 0
  br i1 %101, label %117, label %102

; <label>:102:                                    ; preds = %93
  %103 = load i64, i64* %32, align 8
  %104 = icmp slt i64 %103, 0
  br i1 %104, label %117, label %105

; <label>:105:                                    ; preds = %102
  %106 = load i64, i64* %31, align 8
  %107 = load i64*, i64** %10, align 8
  %108 = getelementptr inbounds i64, i64* %107, i64 1
  %109 = load i64, i64* %108, align 8
  %110 = icmp sge i64 %106, %109
  br i1 %110, label %117, label %111

; <label>:111:                                    ; preds = %105
  %112 = load i64, i64* %32, align 8
  %113 = load i64*, i64** %10, align 8
  %114 = getelementptr inbounds i64, i64* %113, i64 2
  %115 = load i64, i64* %114, align 8
  %116 = icmp sge i64 %112, %115
  br i1 %116, label %117, label %118

; <label>:117:                                    ; preds = %111, %105, %102, %93
  br label %141

; <label>:118:                                    ; preds = %111
  %119 = load i8*, i8** %8, align 8
  %120 = load i64*, i64** %10, align 8
  %121 = load i64, i64* %21, align 8
  %122 = load i64, i64* %31, align 8
  %123 = load i64, i64* %32, align 8
  %124 = load i64, i64* %26, align 8
  %125 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %120, i64 %121, i64 %122, i64 %123, i64 %124)
  %126 = getelementptr inbounds i8, i8* %119, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = sitofp i8 %127 to float
  store float %128, float* %33, align 4
  %129 = load i32, i32* %27, align 4
  %130 = icmp ne i32 %129, 0
  br i1 %130, label %137, label %131

; <label>:131:                                    ; preds = %118
  %132 = load float, float* %33, align 4
  %133 = load i8, i8* %28, align 1
  %134 = sext i8 %133 to i32
  %135 = sitofp i32 %134 to float
  %136 = fcmp reassoc nsz arcp oge float %132, %135
  br i1 %136, label %137, label %140

; <label>:137:                                    ; preds = %131, %118
  store i32 0, i32* %27, align 4
  %138 = load float, float* %33, align 4
  %139 = fptosi float %138 to i8
  store i8 %139, i8* %28, align 1
  br label %140

; <label>:140:                                    ; preds = %137, %131
  br label %141

; <label>:141:                                    ; preds = %140, %117
  %142 = load i64, i64* %30, align 8
  %143 = add i64 %142, 1
  store i64 %143, i64* %30, align 8
  br label %89

; <label>:144:                                    ; preds = %89
  br label %145

; <label>:145:                                    ; preds = %144
  %146 = load i64, i64* %29, align 8
  %147 = add i64 %146, 1
  store i64 %147, i64* %29, align 8
  br label %84

; <label>:148:                                    ; preds = %84
  %149 = load i8, i8* %28, align 1
  %150 = load i8*, i8** %9, align 8
  %151 = load i64*, i64** %11, align 8
  %152 = load i64, i64* %21, align 8
  %153 = load i64, i64* %23, align 8
  %154 = load i64, i64* %25, align 8
  %155 = load i64, i64* %26, align 8
  %156 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %151, i64 %152, i64 %153, i64 %154, i64 %155)
  %157 = getelementptr inbounds i8, i8* %150, i64 %156
  store i8 %149, i8* %157, align 1
  br label %158

; <label>:158:                                    ; preds = %148
  %159 = load i64, i64* %26, align 8
  %160 = add i64 %159, 1
  store i64 %160, i64* %26, align 8
  br label %77

; <label>:161:                                    ; preds = %77
  br label %162

; <label>:162:                                    ; preds = %161
  %163 = load i64, i64* %18, align 8
  %164 = load i64, i64* %24, align 8
  %165 = add i64 %164, %163
  store i64 %165, i64* %24, align 8
  %166 = load i64, i64* %25, align 8
  %167 = add i64 %166, 1
  store i64 %167, i64* %25, align 8
  br label %70

; <label>:168:                                    ; preds = %70
  br label %169

; <label>:169:                                    ; preds = %168
  %170 = load i64, i64* %17, align 8
  %171 = load i64, i64* %22, align 8
  %172 = add i64 %171, %170
  store i64 %172, i64* %22, align 8
  %173 = load i64, i64* %23, align 8
  %174 = add i64 %173, 1
  store i64 %174, i64* %23, align 8
  br label %61

; <label>:175:                                    ; preds = %61
  br label %176

; <label>:176:                                    ; preds = %175
  %177 = load i64, i64* %21, align 8
  %178 = add i64 %177, 1
  store i64 %178, i64* %21, align 8
  br label %52

; <label>:179:                                    ; preds = %52
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_max_pool_f(float*, float*, i64*, i64*, i64*, i64*, i64*) #2 {
  %8 = alloca float*, align 8
  %9 = alloca float*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  store float* %0, float** %8, align 8
  store float* %1, float** %9, align 8
  store i64* %2, i64** %10, align 8
  store i64* %3, i64** %11, align 8
  store i64* %4, i64** %12, align 8
  store i64* %5, i64** %13, align 8
  store i64* %6, i64** %14, align 8
  %15 = load float*, float** %8, align 8
  %16 = load float*, float** %9, align 8
  %17 = load i64*, i64** %10, align 8
  %18 = load i64*, i64** %11, align 8
  %19 = load i64*, i64** %12, align 8
  %20 = load i64*, i64** %13, align 8
  %21 = load i64*, i64** %14, align 8
  call void @_ZN12_GLOBAL__N_123libjit_max_pool_genericIfEEvPKT_PS1_PKmS6_PmS7_S7_(float* %15, float* %16, i64* %17, i64* %18, i64* %19, i64* %20, i64* %21)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_123libjit_max_pool_genericIfEEvPKT_PS1_PKmS6_PmS7_S7_(float*, float*, i64*, i64*, i64*, i64*, i64*) #0 {
  %8 = alloca float*, align 8
  %9 = alloca float*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i32, align 4
  %28 = alloca float, align 4
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca float, align 4
  store float* %0, float** %8, align 8
  store float* %1, float** %9, align 8
  store i64* %2, i64** %10, align 8
  store i64* %3, i64** %11, align 8
  store i64* %4, i64** %12, align 8
  store i64* %5, i64** %13, align 8
  store i64* %6, i64** %14, align 8
  %34 = load i64*, i64** %14, align 8
  %35 = getelementptr inbounds i64, i64* %34, i64 0
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %15, align 8
  %37 = load i64*, i64** %14, align 8
  %38 = getelementptr inbounds i64, i64* %37, i64 1
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %16, align 8
  %40 = load i64*, i64** %13, align 8
  %41 = getelementptr inbounds i64, i64* %40, i64 0
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %17, align 8
  %43 = load i64*, i64** %13, align 8
  %44 = getelementptr inbounds i64, i64* %43, i64 1
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %18, align 8
  %46 = load i64*, i64** %12, align 8
  %47 = getelementptr inbounds i64, i64* %46, i64 0
  %48 = load i64, i64* %47, align 8
  store i64 %48, i64* %19, align 8
  %49 = load i64*, i64** %12, align 8
  %50 = getelementptr inbounds i64, i64* %49, i64 1
  %51 = load i64, i64* %50, align 8
  store i64 %51, i64* %20, align 8
  store i64 0, i64* %21, align 8
  br label %52

; <label>:52:                                     ; preds = %172, %7
  %53 = load i64, i64* %21, align 8
  %54 = load i64*, i64** %11, align 8
  %55 = getelementptr inbounds i64, i64* %54, i64 0
  %56 = load i64, i64* %55, align 8
  %57 = icmp ult i64 %53, %56
  br i1 %57, label %58, label %175

; <label>:58:                                     ; preds = %52
  %59 = load i64, i64* %15, align 8
  %60 = sub nsw i64 0, %59
  store i64 %60, i64* %22, align 8
  store i64 0, i64* %23, align 8
  br label %61

; <label>:61:                                     ; preds = %165, %58
  %62 = load i64, i64* %23, align 8
  %63 = load i64*, i64** %11, align 8
  %64 = getelementptr inbounds i64, i64* %63, i64 1
  %65 = load i64, i64* %64, align 8
  %66 = icmp ult i64 %62, %65
  br i1 %66, label %67, label %171

; <label>:67:                                     ; preds = %61
  %68 = load i64, i64* %16, align 8
  %69 = sub nsw i64 0, %68
  store i64 %69, i64* %24, align 8
  store i64 0, i64* %25, align 8
  br label %70

; <label>:70:                                     ; preds = %158, %67
  %71 = load i64, i64* %25, align 8
  %72 = load i64*, i64** %11, align 8
  %73 = getelementptr inbounds i64, i64* %72, i64 2
  %74 = load i64, i64* %73, align 8
  %75 = icmp ult i64 %71, %74
  br i1 %75, label %76, label %164

; <label>:76:                                     ; preds = %70
  store i64 0, i64* %26, align 8
  br label %77

; <label>:77:                                     ; preds = %154, %76
  %78 = load i64, i64* %26, align 8
  %79 = load i64*, i64** %10, align 8
  %80 = getelementptr inbounds i64, i64* %79, i64 3
  %81 = load i64, i64* %80, align 8
  %82 = icmp ult i64 %78, %81
  br i1 %82, label %83, label %157

; <label>:83:                                     ; preds = %77
  store i32 1, i32* %27, align 4
  store float 0.000000e+00, float* %28, align 4
  store i64 0, i64* %29, align 8
  br label %84

; <label>:84:                                     ; preds = %141, %83
  %85 = load i64, i64* %29, align 8
  %86 = load i64, i64* %19, align 8
  %87 = icmp ult i64 %85, %86
  br i1 %87, label %88, label %144

; <label>:88:                                     ; preds = %84
  store i64 0, i64* %30, align 8
  br label %89

; <label>:89:                                     ; preds = %137, %88
  %90 = load i64, i64* %30, align 8
  %91 = load i64, i64* %20, align 8
  %92 = icmp ult i64 %90, %91
  br i1 %92, label %93, label %140

; <label>:93:                                     ; preds = %89
  %94 = load i64, i64* %22, align 8
  %95 = load i64, i64* %29, align 8
  %96 = add i64 %94, %95
  store i64 %96, i64* %31, align 8
  %97 = load i64, i64* %24, align 8
  %98 = load i64, i64* %30, align 8
  %99 = add i64 %97, %98
  store i64 %99, i64* %32, align 8
  %100 = load i64, i64* %31, align 8
  %101 = icmp slt i64 %100, 0
  br i1 %101, label %117, label %102

; <label>:102:                                    ; preds = %93
  %103 = load i64, i64* %32, align 8
  %104 = icmp slt i64 %103, 0
  br i1 %104, label %117, label %105

; <label>:105:                                    ; preds = %102
  %106 = load i64, i64* %31, align 8
  %107 = load i64*, i64** %10, align 8
  %108 = getelementptr inbounds i64, i64* %107, i64 1
  %109 = load i64, i64* %108, align 8
  %110 = icmp sge i64 %106, %109
  br i1 %110, label %117, label %111

; <label>:111:                                    ; preds = %105
  %112 = load i64, i64* %32, align 8
  %113 = load i64*, i64** %10, align 8
  %114 = getelementptr inbounds i64, i64* %113, i64 2
  %115 = load i64, i64* %114, align 8
  %116 = icmp sge i64 %112, %115
  br i1 %116, label %117, label %118

; <label>:117:                                    ; preds = %111, %105, %102, %93
  br label %137

; <label>:118:                                    ; preds = %111
  %119 = load float*, float** %8, align 8
  %120 = load i64*, i64** %10, align 8
  %121 = load i64, i64* %21, align 8
  %122 = load i64, i64* %31, align 8
  %123 = load i64, i64* %32, align 8
  %124 = load i64, i64* %26, align 8
  %125 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %120, i64 %121, i64 %122, i64 %123, i64 %124)
  %126 = getelementptr inbounds float, float* %119, i64 %125
  %127 = load float, float* %126, align 4
  store float %127, float* %33, align 4
  %128 = load i32, i32* %27, align 4
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %130

; <label>:130:                                    ; preds = %118
  %131 = load float, float* %33, align 4
  %132 = load float, float* %28, align 4
  %133 = fcmp reassoc nsz arcp oge float %131, %132
  br i1 %133, label %134, label %136

; <label>:134:                                    ; preds = %130, %118
  store i32 0, i32* %27, align 4
  %135 = load float, float* %33, align 4
  store float %135, float* %28, align 4
  br label %136

; <label>:136:                                    ; preds = %134, %130
  br label %137

; <label>:137:                                    ; preds = %136, %117
  %138 = load i64, i64* %30, align 8
  %139 = add i64 %138, 1
  store i64 %139, i64* %30, align 8
  br label %89

; <label>:140:                                    ; preds = %89
  br label %141

; <label>:141:                                    ; preds = %140
  %142 = load i64, i64* %29, align 8
  %143 = add i64 %142, 1
  store i64 %143, i64* %29, align 8
  br label %84

; <label>:144:                                    ; preds = %84
  %145 = load float, float* %28, align 4
  %146 = load float*, float** %9, align 8
  %147 = load i64*, i64** %11, align 8
  %148 = load i64, i64* %21, align 8
  %149 = load i64, i64* %23, align 8
  %150 = load i64, i64* %25, align 8
  %151 = load i64, i64* %26, align 8
  %152 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %147, i64 %148, i64 %149, i64 %150, i64 %151)
  %153 = getelementptr inbounds float, float* %146, i64 %152
  store float %145, float* %153, align 4
  br label %154

; <label>:154:                                    ; preds = %144
  %155 = load i64, i64* %26, align 8
  %156 = add i64 %155, 1
  store i64 %156, i64* %26, align 8
  br label %77

; <label>:157:                                    ; preds = %77
  br label %158

; <label>:158:                                    ; preds = %157
  %159 = load i64, i64* %18, align 8
  %160 = load i64, i64* %24, align 8
  %161 = add i64 %160, %159
  store i64 %161, i64* %24, align 8
  %162 = load i64, i64* %25, align 8
  %163 = add i64 %162, 1
  store i64 %163, i64* %25, align 8
  br label %70

; <label>:164:                                    ; preds = %70
  br label %165

; <label>:165:                                    ; preds = %164
  %166 = load i64, i64* %17, align 8
  %167 = load i64, i64* %22, align 8
  %168 = add i64 %167, %166
  store i64 %168, i64* %22, align 8
  %169 = load i64, i64* %23, align 8
  %170 = add i64 %169, 1
  store i64 %170, i64* %23, align 8
  br label %61

; <label>:171:                                    ; preds = %61
  br label %172

; <label>:172:                                    ; preds = %171
  %173 = load i64, i64* %21, align 8
  %174 = add i64 %173, 1
  store i64 %174, i64* %21, align 8
  br label %52

; <label>:175:                                    ; preds = %52
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_max_pool_argmax_i8(i8*, i8*, i64*, i64*, i64*, i64*, i64*, i64*) #2 {
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i64*, align 8
  store i8* %0, i8** %9, align 8
  store i8* %1, i8** %10, align 8
  store i64* %2, i64** %11, align 8
  store i64* %3, i64** %12, align 8
  store i64* %4, i64** %13, align 8
  store i64* %5, i64** %14, align 8
  store i64* %6, i64** %15, align 8
  store i64* %7, i64** %16, align 8
  %17 = load i8*, i8** %9, align 8
  %18 = load i8*, i8** %10, align 8
  %19 = load i64*, i64** %11, align 8
  %20 = load i64*, i64** %12, align 8
  %21 = load i64*, i64** %13, align 8
  %22 = load i64*, i64** %14, align 8
  %23 = load i64*, i64** %15, align 8
  %24 = load i64*, i64** %16, align 8
  call void @_ZN12_GLOBAL__N_130libjit_max_pool_argmax_genericIaEEvPKT_PS1_PmPKmS7_S5_S5_S5_(i8* %17, i8* %18, i64* %19, i64* %20, i64* %21, i64* %22, i64* %23, i64* %24)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_130libjit_max_pool_argmax_genericIaEEvPKT_PS1_PmPKmS7_S5_S5_S5_(i8*, i8*, i64*, i64*, i64*, i64*, i64*, i64*) #0 {
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i64*, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i32, align 4
  %31 = alloca i8, align 1
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca i8, align 1
  %38 = alloca i64, align 8
  store i8* %0, i8** %9, align 8
  store i8* %1, i8** %10, align 8
  store i64* %2, i64** %11, align 8
  store i64* %3, i64** %12, align 8
  store i64* %4, i64** %13, align 8
  store i64* %5, i64** %14, align 8
  store i64* %6, i64** %15, align 8
  store i64* %7, i64** %16, align 8
  %39 = load i64*, i64** %16, align 8
  %40 = getelementptr inbounds i64, i64* %39, i64 0
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %17, align 8
  %42 = load i64*, i64** %16, align 8
  %43 = getelementptr inbounds i64, i64* %42, i64 1
  %44 = load i64, i64* %43, align 8
  store i64 %44, i64* %18, align 8
  %45 = load i64*, i64** %15, align 8
  %46 = getelementptr inbounds i64, i64* %45, i64 0
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %19, align 8
  %48 = load i64*, i64** %15, align 8
  %49 = getelementptr inbounds i64, i64* %48, i64 1
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %20, align 8
  %51 = load i64*, i64** %14, align 8
  %52 = getelementptr inbounds i64, i64* %51, i64 0
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %21, align 8
  %54 = load i64*, i64** %14, align 8
  %55 = getelementptr inbounds i64, i64* %54, i64 1
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %22, align 8
  store i64 0, i64* %23, align 8
  br label %57

; <label>:57:                                     ; preds = %186, %8
  %58 = load i64, i64* %23, align 8
  %59 = load i64*, i64** %13, align 8
  %60 = getelementptr inbounds i64, i64* %59, i64 0
  %61 = load i64, i64* %60, align 8
  %62 = icmp ult i64 %58, %61
  br i1 %62, label %63, label %189

; <label>:63:                                     ; preds = %57
  %64 = load i64, i64* %17, align 8
  %65 = sub nsw i64 0, %64
  store i64 %65, i64* %24, align 8
  store i64 0, i64* %25, align 8
  br label %66

; <label>:66:                                     ; preds = %179, %63
  %67 = load i64, i64* %25, align 8
  %68 = load i64*, i64** %13, align 8
  %69 = getelementptr inbounds i64, i64* %68, i64 1
  %70 = load i64, i64* %69, align 8
  %71 = icmp ult i64 %67, %70
  br i1 %71, label %72, label %185

; <label>:72:                                     ; preds = %66
  %73 = load i64, i64* %18, align 8
  %74 = sub nsw i64 0, %73
  store i64 %74, i64* %26, align 8
  store i64 0, i64* %27, align 8
  br label %75

; <label>:75:                                     ; preds = %172, %72
  %76 = load i64, i64* %27, align 8
  %77 = load i64*, i64** %13, align 8
  %78 = getelementptr inbounds i64, i64* %77, i64 2
  %79 = load i64, i64* %78, align 8
  %80 = icmp ult i64 %76, %79
  br i1 %80, label %81, label %178

; <label>:81:                                     ; preds = %75
  store i64 0, i64* %28, align 8
  br label %82

; <label>:82:                                     ; preds = %168, %81
  %83 = load i64, i64* %28, align 8
  %84 = load i64*, i64** %13, align 8
  %85 = getelementptr inbounds i64, i64* %84, i64 3
  %86 = load i64, i64* %85, align 8
  %87 = icmp ult i64 %83, %86
  br i1 %87, label %88, label %171

; <label>:88:                                     ; preds = %82
  store i64 0, i64* %29, align 8
  store i32 1, i32* %30, align 4
  store i8 0, i8* %31, align 1
  store i64 0, i64* %32, align 8
  br label %89

; <label>:89:                                     ; preds = %150, %88
  %90 = load i64, i64* %32, align 8
  %91 = load i64, i64* %21, align 8
  %92 = icmp ult i64 %90, %91
  br i1 %92, label %93, label %153

; <label>:93:                                     ; preds = %89
  store i64 0, i64* %33, align 8
  br label %94

; <label>:94:                                     ; preds = %146, %93
  %95 = load i64, i64* %33, align 8
  %96 = load i64, i64* %22, align 8
  %97 = icmp ult i64 %95, %96
  br i1 %97, label %98, label %149

; <label>:98:                                     ; preds = %94
  %99 = load i64, i64* %24, align 8
  %100 = load i64, i64* %32, align 8
  %101 = add i64 %99, %100
  store i64 %101, i64* %34, align 8
  %102 = load i64, i64* %26, align 8
  %103 = load i64, i64* %33, align 8
  %104 = add i64 %102, %103
  store i64 %104, i64* %35, align 8
  %105 = load i64, i64* %34, align 8
  %106 = icmp slt i64 %105, 0
  br i1 %106, label %122, label %107

; <label>:107:                                    ; preds = %98
  %108 = load i64, i64* %35, align 8
  %109 = icmp slt i64 %108, 0
  br i1 %109, label %122, label %110

; <label>:110:                                    ; preds = %107
  %111 = load i64, i64* %34, align 8
  %112 = load i64*, i64** %12, align 8
  %113 = getelementptr inbounds i64, i64* %112, i64 1
  %114 = load i64, i64* %113, align 8
  %115 = icmp sge i64 %111, %114
  br i1 %115, label %122, label %116

; <label>:116:                                    ; preds = %110
  %117 = load i64, i64* %35, align 8
  %118 = load i64*, i64** %12, align 8
  %119 = getelementptr inbounds i64, i64* %118, i64 2
  %120 = load i64, i64* %119, align 8
  %121 = icmp sge i64 %117, %120
  br i1 %121, label %122, label %123

; <label>:122:                                    ; preds = %116, %110, %107, %98
  br label %146

; <label>:123:                                    ; preds = %116
  %124 = load i64*, i64** %12, align 8
  %125 = load i64, i64* %23, align 8
  %126 = load i64, i64* %34, align 8
  %127 = load i64, i64* %35, align 8
  %128 = load i64, i64* %28, align 8
  %129 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %124, i64 %125, i64 %126, i64 %127, i64 %128)
  store i64 %129, i64* %36, align 8
  %130 = load i8*, i8** %9, align 8
  %131 = load i64, i64* %36, align 8
  %132 = getelementptr inbounds i8, i8* %130, i64 %131
  %133 = load i8, i8* %132, align 1
  store i8 %133, i8* %37, align 1
  %134 = load i32, i32* %30, align 4
  %135 = icmp ne i32 %134, 0
  br i1 %135, label %142, label %136

; <label>:136:                                    ; preds = %123
  %137 = load i8, i8* %37, align 1
  %138 = sext i8 %137 to i32
  %139 = load i8, i8* %31, align 1
  %140 = sext i8 %139 to i32
  %141 = icmp sge i32 %138, %140
  br i1 %141, label %142, label %145

; <label>:142:                                    ; preds = %136, %123
  store i32 0, i32* %30, align 4
  %143 = load i8, i8* %37, align 1
  store i8 %143, i8* %31, align 1
  %144 = load i64, i64* %36, align 8
  store i64 %144, i64* %29, align 8
  br label %145

; <label>:145:                                    ; preds = %142, %136
  br label %146

; <label>:146:                                    ; preds = %145, %122
  %147 = load i64, i64* %33, align 8
  %148 = add i64 %147, 1
  store i64 %148, i64* %33, align 8
  br label %94

; <label>:149:                                    ; preds = %94
  br label %150

; <label>:150:                                    ; preds = %149
  %151 = load i64, i64* %32, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %32, align 8
  br label %89

; <label>:153:                                    ; preds = %89
  %154 = load i64*, i64** %13, align 8
  %155 = load i64, i64* %23, align 8
  %156 = load i64, i64* %25, align 8
  %157 = load i64, i64* %27, align 8
  %158 = load i64, i64* %28, align 8
  %159 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %154, i64 %155, i64 %156, i64 %157, i64 %158)
  store i64 %159, i64* %38, align 8
  %160 = load i8, i8* %31, align 1
  %161 = load i8*, i8** %10, align 8
  %162 = load i64, i64* %38, align 8
  %163 = getelementptr inbounds i8, i8* %161, i64 %162
  store i8 %160, i8* %163, align 1
  %164 = load i64, i64* %29, align 8
  %165 = load i64*, i64** %11, align 8
  %166 = load i64, i64* %38, align 8
  %167 = getelementptr inbounds i64, i64* %165, i64 %166
  store i64 %164, i64* %167, align 8
  br label %168

; <label>:168:                                    ; preds = %153
  %169 = load i64, i64* %28, align 8
  %170 = add i64 %169, 1
  store i64 %170, i64* %28, align 8
  br label %82

; <label>:171:                                    ; preds = %82
  br label %172

; <label>:172:                                    ; preds = %171
  %173 = load i64, i64* %20, align 8
  %174 = load i64, i64* %26, align 8
  %175 = add i64 %174, %173
  store i64 %175, i64* %26, align 8
  %176 = load i64, i64* %27, align 8
  %177 = add i64 %176, 1
  store i64 %177, i64* %27, align 8
  br label %75

; <label>:178:                                    ; preds = %75
  br label %179

; <label>:179:                                    ; preds = %178
  %180 = load i64, i64* %19, align 8
  %181 = load i64, i64* %24, align 8
  %182 = add i64 %181, %180
  store i64 %182, i64* %24, align 8
  %183 = load i64, i64* %25, align 8
  %184 = add i64 %183, 1
  store i64 %184, i64* %25, align 8
  br label %66

; <label>:185:                                    ; preds = %66
  br label %186

; <label>:186:                                    ; preds = %185
  %187 = load i64, i64* %23, align 8
  %188 = add i64 %187, 1
  store i64 %188, i64* %23, align 8
  br label %57

; <label>:189:                                    ; preds = %57
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_max_pool_argmax_f(float*, float*, i64*, i64*, i64*, i64*, i64*, i64*) #2 {
  %9 = alloca float*, align 8
  %10 = alloca float*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i64*, align 8
  store float* %0, float** %9, align 8
  store float* %1, float** %10, align 8
  store i64* %2, i64** %11, align 8
  store i64* %3, i64** %12, align 8
  store i64* %4, i64** %13, align 8
  store i64* %5, i64** %14, align 8
  store i64* %6, i64** %15, align 8
  store i64* %7, i64** %16, align 8
  %17 = load float*, float** %9, align 8
  %18 = load float*, float** %10, align 8
  %19 = load i64*, i64** %11, align 8
  %20 = load i64*, i64** %12, align 8
  %21 = load i64*, i64** %13, align 8
  %22 = load i64*, i64** %14, align 8
  %23 = load i64*, i64** %15, align 8
  %24 = load i64*, i64** %16, align 8
  call void @_ZN12_GLOBAL__N_130libjit_max_pool_argmax_genericIfEEvPKT_PS1_PmPKmS7_S5_S5_S5_(float* %17, float* %18, i64* %19, i64* %20, i64* %21, i64* %22, i64* %23, i64* %24)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_130libjit_max_pool_argmax_genericIfEEvPKT_PS1_PmPKmS7_S5_S5_S5_(float*, float*, i64*, i64*, i64*, i64*, i64*, i64*) #0 {
  %9 = alloca float*, align 8
  %10 = alloca float*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i64*, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i32, align 4
  %31 = alloca float, align 4
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca float, align 4
  %38 = alloca i64, align 8
  store float* %0, float** %9, align 8
  store float* %1, float** %10, align 8
  store i64* %2, i64** %11, align 8
  store i64* %3, i64** %12, align 8
  store i64* %4, i64** %13, align 8
  store i64* %5, i64** %14, align 8
  store i64* %6, i64** %15, align 8
  store i64* %7, i64** %16, align 8
  %39 = load i64*, i64** %16, align 8
  %40 = getelementptr inbounds i64, i64* %39, i64 0
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %17, align 8
  %42 = load i64*, i64** %16, align 8
  %43 = getelementptr inbounds i64, i64* %42, i64 1
  %44 = load i64, i64* %43, align 8
  store i64 %44, i64* %18, align 8
  %45 = load i64*, i64** %15, align 8
  %46 = getelementptr inbounds i64, i64* %45, i64 0
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %19, align 8
  %48 = load i64*, i64** %15, align 8
  %49 = getelementptr inbounds i64, i64* %48, i64 1
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %20, align 8
  %51 = load i64*, i64** %14, align 8
  %52 = getelementptr inbounds i64, i64* %51, i64 0
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %21, align 8
  %54 = load i64*, i64** %14, align 8
  %55 = getelementptr inbounds i64, i64* %54, i64 1
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %22, align 8
  store i64 0, i64* %23, align 8
  br label %57

; <label>:57:                                     ; preds = %184, %8
  %58 = load i64, i64* %23, align 8
  %59 = load i64*, i64** %13, align 8
  %60 = getelementptr inbounds i64, i64* %59, i64 0
  %61 = load i64, i64* %60, align 8
  %62 = icmp ult i64 %58, %61
  br i1 %62, label %63, label %187

; <label>:63:                                     ; preds = %57
  %64 = load i64, i64* %17, align 8
  %65 = sub nsw i64 0, %64
  store i64 %65, i64* %24, align 8
  store i64 0, i64* %25, align 8
  br label %66

; <label>:66:                                     ; preds = %177, %63
  %67 = load i64, i64* %25, align 8
  %68 = load i64*, i64** %13, align 8
  %69 = getelementptr inbounds i64, i64* %68, i64 1
  %70 = load i64, i64* %69, align 8
  %71 = icmp ult i64 %67, %70
  br i1 %71, label %72, label %183

; <label>:72:                                     ; preds = %66
  %73 = load i64, i64* %18, align 8
  %74 = sub nsw i64 0, %73
  store i64 %74, i64* %26, align 8
  store i64 0, i64* %27, align 8
  br label %75

; <label>:75:                                     ; preds = %170, %72
  %76 = load i64, i64* %27, align 8
  %77 = load i64*, i64** %13, align 8
  %78 = getelementptr inbounds i64, i64* %77, i64 2
  %79 = load i64, i64* %78, align 8
  %80 = icmp ult i64 %76, %79
  br i1 %80, label %81, label %176

; <label>:81:                                     ; preds = %75
  store i64 0, i64* %28, align 8
  br label %82

; <label>:82:                                     ; preds = %166, %81
  %83 = load i64, i64* %28, align 8
  %84 = load i64*, i64** %13, align 8
  %85 = getelementptr inbounds i64, i64* %84, i64 3
  %86 = load i64, i64* %85, align 8
  %87 = icmp ult i64 %83, %86
  br i1 %87, label %88, label %169

; <label>:88:                                     ; preds = %82
  store i64 0, i64* %29, align 8
  store i32 1, i32* %30, align 4
  store float 0.000000e+00, float* %31, align 4
  store i64 0, i64* %32, align 8
  br label %89

; <label>:89:                                     ; preds = %148, %88
  %90 = load i64, i64* %32, align 8
  %91 = load i64, i64* %21, align 8
  %92 = icmp ult i64 %90, %91
  br i1 %92, label %93, label %151

; <label>:93:                                     ; preds = %89
  store i64 0, i64* %33, align 8
  br label %94

; <label>:94:                                     ; preds = %144, %93
  %95 = load i64, i64* %33, align 8
  %96 = load i64, i64* %22, align 8
  %97 = icmp ult i64 %95, %96
  br i1 %97, label %98, label %147

; <label>:98:                                     ; preds = %94
  %99 = load i64, i64* %24, align 8
  %100 = load i64, i64* %32, align 8
  %101 = add i64 %99, %100
  store i64 %101, i64* %34, align 8
  %102 = load i64, i64* %26, align 8
  %103 = load i64, i64* %33, align 8
  %104 = add i64 %102, %103
  store i64 %104, i64* %35, align 8
  %105 = load i64, i64* %34, align 8
  %106 = icmp slt i64 %105, 0
  br i1 %106, label %122, label %107

; <label>:107:                                    ; preds = %98
  %108 = load i64, i64* %35, align 8
  %109 = icmp slt i64 %108, 0
  br i1 %109, label %122, label %110

; <label>:110:                                    ; preds = %107
  %111 = load i64, i64* %34, align 8
  %112 = load i64*, i64** %12, align 8
  %113 = getelementptr inbounds i64, i64* %112, i64 1
  %114 = load i64, i64* %113, align 8
  %115 = icmp sge i64 %111, %114
  br i1 %115, label %122, label %116

; <label>:116:                                    ; preds = %110
  %117 = load i64, i64* %35, align 8
  %118 = load i64*, i64** %12, align 8
  %119 = getelementptr inbounds i64, i64* %118, i64 2
  %120 = load i64, i64* %119, align 8
  %121 = icmp sge i64 %117, %120
  br i1 %121, label %122, label %123

; <label>:122:                                    ; preds = %116, %110, %107, %98
  br label %144

; <label>:123:                                    ; preds = %116
  %124 = load i64*, i64** %12, align 8
  %125 = load i64, i64* %23, align 8
  %126 = load i64, i64* %34, align 8
  %127 = load i64, i64* %35, align 8
  %128 = load i64, i64* %28, align 8
  %129 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %124, i64 %125, i64 %126, i64 %127, i64 %128)
  store i64 %129, i64* %36, align 8
  %130 = load float*, float** %9, align 8
  %131 = load i64, i64* %36, align 8
  %132 = getelementptr inbounds float, float* %130, i64 %131
  %133 = load float, float* %132, align 4
  store float %133, float* %37, align 4
  %134 = load i32, i32* %30, align 4
  %135 = icmp ne i32 %134, 0
  br i1 %135, label %140, label %136

; <label>:136:                                    ; preds = %123
  %137 = load float, float* %37, align 4
  %138 = load float, float* %31, align 4
  %139 = fcmp reassoc nsz arcp oge float %137, %138
  br i1 %139, label %140, label %143

; <label>:140:                                    ; preds = %136, %123
  store i32 0, i32* %30, align 4
  %141 = load float, float* %37, align 4
  store float %141, float* %31, align 4
  %142 = load i64, i64* %36, align 8
  store i64 %142, i64* %29, align 8
  br label %143

; <label>:143:                                    ; preds = %140, %136
  br label %144

; <label>:144:                                    ; preds = %143, %122
  %145 = load i64, i64* %33, align 8
  %146 = add i64 %145, 1
  store i64 %146, i64* %33, align 8
  br label %94

; <label>:147:                                    ; preds = %94
  br label %148

; <label>:148:                                    ; preds = %147
  %149 = load i64, i64* %32, align 8
  %150 = add i64 %149, 1
  store i64 %150, i64* %32, align 8
  br label %89

; <label>:151:                                    ; preds = %89
  %152 = load i64*, i64** %13, align 8
  %153 = load i64, i64* %23, align 8
  %154 = load i64, i64* %25, align 8
  %155 = load i64, i64* %27, align 8
  %156 = load i64, i64* %28, align 8
  %157 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %152, i64 %153, i64 %154, i64 %155, i64 %156)
  store i64 %157, i64* %38, align 8
  %158 = load float, float* %31, align 4
  %159 = load float*, float** %10, align 8
  %160 = load i64, i64* %38, align 8
  %161 = getelementptr inbounds float, float* %159, i64 %160
  store float %158, float* %161, align 4
  %162 = load i64, i64* %29, align 8
  %163 = load i64*, i64** %11, align 8
  %164 = load i64, i64* %38, align 8
  %165 = getelementptr inbounds i64, i64* %163, i64 %164
  store i64 %162, i64* %165, align 8
  br label %166

; <label>:166:                                    ; preds = %151
  %167 = load i64, i64* %28, align 8
  %168 = add i64 %167, 1
  store i64 %168, i64* %28, align 8
  br label %82

; <label>:169:                                    ; preds = %82
  br label %170

; <label>:170:                                    ; preds = %169
  %171 = load i64, i64* %20, align 8
  %172 = load i64, i64* %26, align 8
  %173 = add i64 %172, %171
  store i64 %173, i64* %26, align 8
  %174 = load i64, i64* %27, align 8
  %175 = add i64 %174, 1
  store i64 %175, i64* %27, align 8
  br label %75

; <label>:176:                                    ; preds = %75
  br label %177

; <label>:177:                                    ; preds = %176
  %178 = load i64, i64* %19, align 8
  %179 = load i64, i64* %24, align 8
  %180 = add i64 %179, %178
  store i64 %180, i64* %24, align 8
  %181 = load i64, i64* %25, align 8
  %182 = add i64 %181, 1
  store i64 %182, i64* %25, align 8
  br label %66

; <label>:183:                                    ; preds = %66
  br label %184

; <label>:184:                                    ; preds = %183
  %185 = load i64, i64* %23, align 8
  %186 = add i64 %185, 1
  store i64 %186, i64* %23, align 8
  br label %57

; <label>:187:                                    ; preds = %57
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_arg_max_i8(i8*, i64*, i64*, i64) #2 {
  %5 = alloca i8*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  store i8* %0, i8** %5, align 8
  store i64* %1, i64** %6, align 8
  store i64* %2, i64** %7, align 8
  store i64 %3, i64* %8, align 8
  %9 = load i8*, i8** %5, align 8
  %10 = load i64*, i64** %6, align 8
  %11 = load i64*, i64** %7, align 8
  %12 = load i64, i64* %8, align 8
  call void @_ZN12_GLOBAL__N_122libjit_arg_max_genericIaEEvPKT_PmPKmm(i8* %9, i64* %10, i64* %11, i64 %12)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_122libjit_arg_max_genericIaEEvPKT_PmPKmm(i8*, i64*, i64*, i64) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca [4 x i64*], align 16
  %14 = alloca [4 x i64], align 16
  %15 = alloca i8, align 1
  %16 = alloca i64, align 8
  %17 = alloca i8, align 1
  store i8* %0, i8** %5, align 8
  store i64* %1, i64** %6, align 8
  store i64* %2, i64** %7, align 8
  store i64 %3, i64* %8, align 8
  store i64 0, i64* %12, align 8
  %18 = load i64, i64* %8, align 8
  %19 = add i64 %18, 1
  %20 = urem i64 %19, 4
  %21 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 %20
  store i64* %9, i64** %21, align 8
  %22 = load i64, i64* %8, align 8
  %23 = add i64 %22, 2
  %24 = urem i64 %23, 4
  %25 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 %24
  store i64* %10, i64** %25, align 8
  %26 = load i64, i64* %8, align 8
  %27 = add i64 %26, 3
  %28 = urem i64 %27, 4
  %29 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 %28
  store i64* %11, i64** %29, align 8
  %30 = load i64, i64* %8, align 8
  %31 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 %30
  store i64* %12, i64** %31, align 8
  %32 = getelementptr inbounds [4 x i64], [4 x i64]* %14, i64 0, i64 0
  %33 = load i64*, i64** %7, align 8
  %34 = getelementptr inbounds i64, i64* %33, i64 0
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %32, align 8
  %36 = getelementptr inbounds i64, i64* %32, i64 1
  %37 = load i64*, i64** %7, align 8
  %38 = getelementptr inbounds i64, i64* %37, i64 1
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %36, align 8
  %40 = getelementptr inbounds i64, i64* %36, i64 1
  %41 = load i64*, i64** %7, align 8
  %42 = getelementptr inbounds i64, i64* %41, i64 2
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %40, align 8
  %44 = getelementptr inbounds i64, i64* %40, i64 1
  %45 = load i64*, i64** %7, align 8
  %46 = getelementptr inbounds i64, i64* %45, i64 3
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %44, align 8
  %48 = load i64, i64* %8, align 8
  %49 = getelementptr inbounds [4 x i64], [4 x i64]* %14, i64 0, i64 %48
  store i64 1, i64* %49, align 8
  store i64 0, i64* %9, align 8
  br label %50

; <label>:50:                                     ; preds = %160, %4
  %51 = load i64, i64* %9, align 8
  %52 = load i64*, i64** %7, align 8
  %53 = load i64, i64* %8, align 8
  %54 = add i64 %53, 1
  %55 = urem i64 %54, 4
  %56 = getelementptr inbounds i64, i64* %52, i64 %55
  %57 = load i64, i64* %56, align 8
  %58 = icmp ult i64 %51, %57
  br i1 %58, label %59, label %163

; <label>:59:                                     ; preds = %50
  store i64 0, i64* %10, align 8
  br label %60

; <label>:60:                                     ; preds = %156, %59
  %61 = load i64, i64* %10, align 8
  %62 = load i64*, i64** %7, align 8
  %63 = load i64, i64* %8, align 8
  %64 = add i64 %63, 2
  %65 = urem i64 %64, 4
  %66 = getelementptr inbounds i64, i64* %62, i64 %65
  %67 = load i64, i64* %66, align 8
  %68 = icmp ult i64 %61, %67
  br i1 %68, label %69, label %159

; <label>:69:                                     ; preds = %60
  store i64 0, i64* %11, align 8
  br label %70

; <label>:70:                                     ; preds = %152, %69
  %71 = load i64, i64* %11, align 8
  %72 = load i64*, i64** %7, align 8
  %73 = load i64, i64* %8, align 8
  %74 = add i64 %73, 3
  %75 = urem i64 %74, 4
  %76 = getelementptr inbounds i64, i64* %72, i64 %75
  %77 = load i64, i64* %76, align 8
  %78 = icmp ult i64 %71, %77
  br i1 %78, label %79, label %155

; <label>:79:                                     ; preds = %70
  %80 = load i8*, i8** %5, align 8
  %81 = load i64*, i64** %7, align 8
  %82 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 0
  %83 = load i64*, i64** %82, align 16
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 1
  %86 = load i64*, i64** %85, align 8
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 2
  %89 = load i64*, i64** %88, align 16
  %90 = load i64, i64* %89, align 8
  %91 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %81, i64 %84, i64 %87, i64 %90, i64 0)
  %92 = getelementptr inbounds i8, i8* %80, i64 %91
  %93 = load i8, i8* %92, align 1
  store i8 %93, i8* %15, align 1
  store i64 0, i64* %16, align 8
  store i64 0, i64* %12, align 8
  br label %94

; <label>:94:                                     ; preds = %128, %79
  %95 = load i64, i64* %12, align 8
  %96 = load i64*, i64** %7, align 8
  %97 = load i64, i64* %8, align 8
  %98 = getelementptr inbounds i64, i64* %96, i64 %97
  %99 = load i64, i64* %98, align 8
  %100 = icmp ult i64 %95, %99
  br i1 %100, label %101, label %131

; <label>:101:                                    ; preds = %94
  %102 = load i8*, i8** %5, align 8
  %103 = load i64*, i64** %7, align 8
  %104 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 0
  %105 = load i64*, i64** %104, align 16
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 1
  %108 = load i64*, i64** %107, align 8
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 2
  %111 = load i64*, i64** %110, align 16
  %112 = load i64, i64* %111, align 8
  %113 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 3
  %114 = load i64*, i64** %113, align 8
  %115 = load i64, i64* %114, align 8
  %116 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %103, i64 %106, i64 %109, i64 %112, i64 %115)
  %117 = getelementptr inbounds i8, i8* %102, i64 %116
  %118 = load i8, i8* %117, align 1
  store i8 %118, i8* %17, align 1
  %119 = load i8, i8* %17, align 1
  %120 = sext i8 %119 to i32
  %121 = load i8, i8* %15, align 1
  %122 = sext i8 %121 to i32
  %123 = icmp sgt i32 %120, %122
  br i1 %123, label %124, label %127

; <label>:124:                                    ; preds = %101
  %125 = load i8, i8* %17, align 1
  store i8 %125, i8* %15, align 1
  %126 = load i64, i64* %12, align 8
  store i64 %126, i64* %16, align 8
  br label %127

; <label>:127:                                    ; preds = %124, %101
  br label %128

; <label>:128:                                    ; preds = %127
  %129 = load i64, i64* %12, align 8
  %130 = add i64 %129, 1
  store i64 %130, i64* %12, align 8
  br label %94

; <label>:131:                                    ; preds = %94
  %132 = load i64, i64* %8, align 8
  %133 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 %132
  %134 = load i64*, i64** %133, align 8
  store i64 0, i64* %134, align 8
  %135 = load i64, i64* %16, align 8
  %136 = load i64*, i64** %6, align 8
  %137 = getelementptr inbounds [4 x i64], [4 x i64]* %14, i32 0, i32 0
  %138 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 0
  %139 = load i64*, i64** %138, align 16
  %140 = load i64, i64* %139, align 8
  %141 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 1
  %142 = load i64*, i64** %141, align 8
  %143 = load i64, i64* %142, align 8
  %144 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 2
  %145 = load i64*, i64** %144, align 16
  %146 = load i64, i64* %145, align 8
  %147 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 3
  %148 = load i64*, i64** %147, align 8
  %149 = load i64, i64* %148, align 8
  %150 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %137, i64 %140, i64 %143, i64 %146, i64 %149)
  %151 = getelementptr inbounds i64, i64* %136, i64 %150
  store i64 %135, i64* %151, align 8
  br label %152

; <label>:152:                                    ; preds = %131
  %153 = load i64, i64* %11, align 8
  %154 = add i64 %153, 1
  store i64 %154, i64* %11, align 8
  br label %70

; <label>:155:                                    ; preds = %70
  br label %156

; <label>:156:                                    ; preds = %155
  %157 = load i64, i64* %10, align 8
  %158 = add i64 %157, 1
  store i64 %158, i64* %10, align 8
  br label %60

; <label>:159:                                    ; preds = %60
  br label %160

; <label>:160:                                    ; preds = %159
  %161 = load i64, i64* %9, align 8
  %162 = add i64 %161, 1
  store i64 %162, i64* %9, align 8
  br label %50

; <label>:163:                                    ; preds = %50
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_arg_max_f(float*, i64*, i64*, i64) #2 {
  %5 = alloca float*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  store float* %0, float** %5, align 8
  store i64* %1, i64** %6, align 8
  store i64* %2, i64** %7, align 8
  store i64 %3, i64* %8, align 8
  %9 = load float*, float** %5, align 8
  %10 = load i64*, i64** %6, align 8
  %11 = load i64*, i64** %7, align 8
  %12 = load i64, i64* %8, align 8
  call void @_ZN12_GLOBAL__N_122libjit_arg_max_genericIfEEvPKT_PmPKmm(float* %9, i64* %10, i64* %11, i64 %12)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_122libjit_arg_max_genericIfEEvPKT_PmPKmm(float*, i64*, i64*, i64) #0 {
  %5 = alloca float*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca [4 x i64*], align 16
  %14 = alloca [4 x i64], align 16
  %15 = alloca float, align 4
  %16 = alloca i64, align 8
  %17 = alloca float, align 4
  store float* %0, float** %5, align 8
  store i64* %1, i64** %6, align 8
  store i64* %2, i64** %7, align 8
  store i64 %3, i64* %8, align 8
  store i64 0, i64* %12, align 8
  %18 = load i64, i64* %8, align 8
  %19 = add i64 %18, 1
  %20 = urem i64 %19, 4
  %21 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 %20
  store i64* %9, i64** %21, align 8
  %22 = load i64, i64* %8, align 8
  %23 = add i64 %22, 2
  %24 = urem i64 %23, 4
  %25 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 %24
  store i64* %10, i64** %25, align 8
  %26 = load i64, i64* %8, align 8
  %27 = add i64 %26, 3
  %28 = urem i64 %27, 4
  %29 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 %28
  store i64* %11, i64** %29, align 8
  %30 = load i64, i64* %8, align 8
  %31 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 %30
  store i64* %12, i64** %31, align 8
  %32 = getelementptr inbounds [4 x i64], [4 x i64]* %14, i64 0, i64 0
  %33 = load i64*, i64** %7, align 8
  %34 = getelementptr inbounds i64, i64* %33, i64 0
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %32, align 8
  %36 = getelementptr inbounds i64, i64* %32, i64 1
  %37 = load i64*, i64** %7, align 8
  %38 = getelementptr inbounds i64, i64* %37, i64 1
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %36, align 8
  %40 = getelementptr inbounds i64, i64* %36, i64 1
  %41 = load i64*, i64** %7, align 8
  %42 = getelementptr inbounds i64, i64* %41, i64 2
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %40, align 8
  %44 = getelementptr inbounds i64, i64* %40, i64 1
  %45 = load i64*, i64** %7, align 8
  %46 = getelementptr inbounds i64, i64* %45, i64 3
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %44, align 8
  %48 = load i64, i64* %8, align 8
  %49 = getelementptr inbounds [4 x i64], [4 x i64]* %14, i64 0, i64 %48
  store i64 1, i64* %49, align 8
  store i64 0, i64* %9, align 8
  br label %50

; <label>:50:                                     ; preds = %158, %4
  %51 = load i64, i64* %9, align 8
  %52 = load i64*, i64** %7, align 8
  %53 = load i64, i64* %8, align 8
  %54 = add i64 %53, 1
  %55 = urem i64 %54, 4
  %56 = getelementptr inbounds i64, i64* %52, i64 %55
  %57 = load i64, i64* %56, align 8
  %58 = icmp ult i64 %51, %57
  br i1 %58, label %59, label %161

; <label>:59:                                     ; preds = %50
  store i64 0, i64* %10, align 8
  br label %60

; <label>:60:                                     ; preds = %154, %59
  %61 = load i64, i64* %10, align 8
  %62 = load i64*, i64** %7, align 8
  %63 = load i64, i64* %8, align 8
  %64 = add i64 %63, 2
  %65 = urem i64 %64, 4
  %66 = getelementptr inbounds i64, i64* %62, i64 %65
  %67 = load i64, i64* %66, align 8
  %68 = icmp ult i64 %61, %67
  br i1 %68, label %69, label %157

; <label>:69:                                     ; preds = %60
  store i64 0, i64* %11, align 8
  br label %70

; <label>:70:                                     ; preds = %150, %69
  %71 = load i64, i64* %11, align 8
  %72 = load i64*, i64** %7, align 8
  %73 = load i64, i64* %8, align 8
  %74 = add i64 %73, 3
  %75 = urem i64 %74, 4
  %76 = getelementptr inbounds i64, i64* %72, i64 %75
  %77 = load i64, i64* %76, align 8
  %78 = icmp ult i64 %71, %77
  br i1 %78, label %79, label %153

; <label>:79:                                     ; preds = %70
  %80 = load float*, float** %5, align 8
  %81 = load i64*, i64** %7, align 8
  %82 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 0
  %83 = load i64*, i64** %82, align 16
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 1
  %86 = load i64*, i64** %85, align 8
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 2
  %89 = load i64*, i64** %88, align 16
  %90 = load i64, i64* %89, align 8
  %91 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %81, i64 %84, i64 %87, i64 %90, i64 0)
  %92 = getelementptr inbounds float, float* %80, i64 %91
  %93 = load float, float* %92, align 4
  store float %93, float* %15, align 4
  store i64 0, i64* %16, align 8
  store i64 0, i64* %12, align 8
  br label %94

; <label>:94:                                     ; preds = %126, %79
  %95 = load i64, i64* %12, align 8
  %96 = load i64*, i64** %7, align 8
  %97 = load i64, i64* %8, align 8
  %98 = getelementptr inbounds i64, i64* %96, i64 %97
  %99 = load i64, i64* %98, align 8
  %100 = icmp ult i64 %95, %99
  br i1 %100, label %101, label %129

; <label>:101:                                    ; preds = %94
  %102 = load float*, float** %5, align 8
  %103 = load i64*, i64** %7, align 8
  %104 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 0
  %105 = load i64*, i64** %104, align 16
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 1
  %108 = load i64*, i64** %107, align 8
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 2
  %111 = load i64*, i64** %110, align 16
  %112 = load i64, i64* %111, align 8
  %113 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 3
  %114 = load i64*, i64** %113, align 8
  %115 = load i64, i64* %114, align 8
  %116 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %103, i64 %106, i64 %109, i64 %112, i64 %115)
  %117 = getelementptr inbounds float, float* %102, i64 %116
  %118 = load float, float* %117, align 4
  store float %118, float* %17, align 4
  %119 = load float, float* %17, align 4
  %120 = load float, float* %15, align 4
  %121 = fcmp reassoc nsz arcp ogt float %119, %120
  br i1 %121, label %122, label %125

; <label>:122:                                    ; preds = %101
  %123 = load float, float* %17, align 4
  store float %123, float* %15, align 4
  %124 = load i64, i64* %12, align 8
  store i64 %124, i64* %16, align 8
  br label %125

; <label>:125:                                    ; preds = %122, %101
  br label %126

; <label>:126:                                    ; preds = %125
  %127 = load i64, i64* %12, align 8
  %128 = add i64 %127, 1
  store i64 %128, i64* %12, align 8
  br label %94

; <label>:129:                                    ; preds = %94
  %130 = load i64, i64* %8, align 8
  %131 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 %130
  %132 = load i64*, i64** %131, align 8
  store i64 0, i64* %132, align 8
  %133 = load i64, i64* %16, align 8
  %134 = load i64*, i64** %6, align 8
  %135 = getelementptr inbounds [4 x i64], [4 x i64]* %14, i32 0, i32 0
  %136 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 0
  %137 = load i64*, i64** %136, align 16
  %138 = load i64, i64* %137, align 8
  %139 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 1
  %140 = load i64*, i64** %139, align 8
  %141 = load i64, i64* %140, align 8
  %142 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 2
  %143 = load i64*, i64** %142, align 16
  %144 = load i64, i64* %143, align 8
  %145 = getelementptr inbounds [4 x i64*], [4 x i64*]* %13, i64 0, i64 3
  %146 = load i64*, i64** %145, align 8
  %147 = load i64, i64* %146, align 8
  %148 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %135, i64 %138, i64 %141, i64 %144, i64 %147)
  %149 = getelementptr inbounds i64, i64* %134, i64 %148
  store i64 %133, i64* %149, align 8
  br label %150

; <label>:150:                                    ; preds = %129
  %151 = load i64, i64* %11, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %11, align 8
  br label %70

; <label>:153:                                    ; preds = %70
  br label %154

; <label>:154:                                    ; preds = %153
  %155 = load i64, i64* %10, align 8
  %156 = add i64 %155, 1
  store i64 %156, i64* %10, align 8
  br label %60

; <label>:157:                                    ; preds = %60
  br label %158

; <label>:158:                                    ; preds = %157
  %159 = load i64, i64* %9, align 8
  %160 = add i64 %159, 1
  store i64 %160, i64* %9, align 8
  br label %50

; <label>:161:                                    ; preds = %50
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_max_pool_argmax_grad_f(float*, float*, i64*, i64*, i64*) #2 {
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca float, align 4
  store float* %0, float** %6, align 8
  store float* %1, float** %7, align 8
  store i64* %2, i64** %8, align 8
  store i64* %3, i64** %9, align 8
  store i64* %4, i64** %10, align 8
  store i64 0, i64* %11, align 8
  br label %19

; <label>:19:                                     ; preds = %108, %5
  %20 = load i64, i64* %11, align 8
  %21 = load i64*, i64** %10, align 8
  %22 = getelementptr inbounds i64, i64* %21, i64 0
  %23 = load i64, i64* %22, align 8
  %24 = icmp ult i64 %20, %23
  br i1 %24, label %25, label %111

; <label>:25:                                     ; preds = %19
  store i64 0, i64* %12, align 8
  br label %26

; <label>:26:                                     ; preds = %104, %25
  %27 = load i64, i64* %12, align 8
  %28 = load i64*, i64** %10, align 8
  %29 = getelementptr inbounds i64, i64* %28, i64 3
  %30 = load i64, i64* %29, align 8
  %31 = icmp ult i64 %27, %30
  br i1 %31, label %32, label %107

; <label>:32:                                     ; preds = %26
  store i64 0, i64* %13, align 8
  br label %33

; <label>:33:                                     ; preds = %59, %32
  %34 = load i64, i64* %13, align 8
  %35 = load i64*, i64** %9, align 8
  %36 = getelementptr inbounds i64, i64* %35, i64 1
  %37 = load i64, i64* %36, align 8
  %38 = icmp ult i64 %34, %37
  br i1 %38, label %39, label %62

; <label>:39:                                     ; preds = %33
  store i64 0, i64* %14, align 8
  br label %40

; <label>:40:                                     ; preds = %55, %39
  %41 = load i64, i64* %14, align 8
  %42 = load i64*, i64** %9, align 8
  %43 = getelementptr inbounds i64, i64* %42, i64 2
  %44 = load i64, i64* %43, align 8
  %45 = icmp ult i64 %41, %44
  br i1 %45, label %46, label %58

; <label>:46:                                     ; preds = %40
  %47 = load float*, float** %6, align 8
  %48 = load i64*, i64** %9, align 8
  %49 = load i64, i64* %11, align 8
  %50 = load i64, i64* %13, align 8
  %51 = load i64, i64* %14, align 8
  %52 = load i64, i64* %12, align 8
  %53 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %48, i64 %49, i64 %50, i64 %51, i64 %52)
  %54 = getelementptr inbounds float, float* %47, i64 %53
  store float 0.000000e+00, float* %54, align 4
  br label %55

; <label>:55:                                     ; preds = %46
  %56 = load i64, i64* %14, align 8
  %57 = add i64 %56, 1
  store i64 %57, i64* %14, align 8
  br label %40

; <label>:58:                                     ; preds = %40
  br label %59

; <label>:59:                                     ; preds = %58
  %60 = load i64, i64* %13, align 8
  %61 = add i64 %60, 1
  store i64 %61, i64* %13, align 8
  br label %33

; <label>:62:                                     ; preds = %33
  store i64 0, i64* %15, align 8
  br label %63

; <label>:63:                                     ; preds = %100, %62
  %64 = load i64, i64* %15, align 8
  %65 = load i64*, i64** %10, align 8
  %66 = getelementptr inbounds i64, i64* %65, i64 1
  %67 = load i64, i64* %66, align 8
  %68 = icmp ult i64 %64, %67
  br i1 %68, label %69, label %103

; <label>:69:                                     ; preds = %63
  store i64 0, i64* %16, align 8
  br label %70

; <label>:70:                                     ; preds = %96, %69
  %71 = load i64, i64* %16, align 8
  %72 = load i64*, i64** %10, align 8
  %73 = getelementptr inbounds i64, i64* %72, i64 2
  %74 = load i64, i64* %73, align 8
  %75 = icmp ult i64 %71, %74
  br i1 %75, label %76, label %99

; <label>:76:                                     ; preds = %70
  %77 = load i64*, i64** %10, align 8
  %78 = load i64, i64* %11, align 8
  %79 = load i64, i64* %15, align 8
  %80 = load i64, i64* %16, align 8
  %81 = load i64, i64* %12, align 8
  %82 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %77, i64 %78, i64 %79, i64 %80, i64 %81)
  store i64 %82, i64* %17, align 8
  %83 = load float*, float** %7, align 8
  %84 = load i64, i64* %17, align 8
  %85 = getelementptr inbounds float, float* %83, i64 %84
  %86 = load float, float* %85, align 4
  store float %86, float* %18, align 4
  %87 = load float, float* %18, align 4
  %88 = load float*, float** %6, align 8
  %89 = load i64*, i64** %8, align 8
  %90 = load i64, i64* %17, align 8
  %91 = getelementptr inbounds i64, i64* %89, i64 %90
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds float, float* %88, i64 %92
  %94 = load float, float* %93, align 4
  %95 = fadd reassoc nsz arcp contract float %94, %87
  store float %95, float* %93, align 4
  br label %96

; <label>:96:                                     ; preds = %76
  %97 = load i64, i64* %16, align 8
  %98 = add i64 %97, 1
  store i64 %98, i64* %16, align 8
  br label %70

; <label>:99:                                     ; preds = %70
  br label %100

; <label>:100:                                    ; preds = %99
  %101 = load i64, i64* %15, align 8
  %102 = add i64 %101, 1
  store i64 %102, i64* %15, align 8
  br label %63

; <label>:103:                                    ; preds = %63
  br label %104

; <label>:104:                                    ; preds = %103
  %105 = load i64, i64* %12, align 8
  %106 = add i64 %105, 1
  store i64 %106, i64* %12, align 8
  br label %26

; <label>:107:                                    ; preds = %26
  br label %108

; <label>:108:                                    ; preds = %107
  %109 = load i64, i64* %11, align 8
  %110 = add i64 %109, 1
  store i64 %110, i64* %11, align 8
  br label %19

; <label>:111:                                    ; preds = %19
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_avg_pool_i8(i8*, i8*, i64*, i64*, i64*, i64*, i64*, i32, i32, i32, i32, i32) #2 {
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i64*, align 8
  %17 = alloca i64*, align 8
  %18 = alloca i64*, align 8
  %19 = alloca i64*, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca i32, align 4
  %38 = alloca i64, align 8
  %39 = alloca i64, align 8
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  store i8* %0, i8** %13, align 8
  store i8* %1, i8** %14, align 8
  store i64* %2, i64** %15, align 8
  store i64* %3, i64** %16, align 8
  store i64* %4, i64** %17, align 8
  store i64* %5, i64** %18, align 8
  store i64* %6, i64** %19, align 8
  store i32 %7, i32* %20, align 4
  store i32 %8, i32* %21, align 4
  store i32 %9, i32* %22, align 4
  store i32 %10, i32* %23, align 4
  store i32 %11, i32* %24, align 4
  %42 = load i64*, i64** %19, align 8
  %43 = getelementptr inbounds i64, i64* %42, i64 0
  %44 = load i64, i64* %43, align 8
  store i64 %44, i64* %25, align 8
  %45 = load i64*, i64** %19, align 8
  %46 = getelementptr inbounds i64, i64* %45, i64 1
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %26, align 8
  %48 = load i64*, i64** %18, align 8
  %49 = getelementptr inbounds i64, i64* %48, i64 0
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %27, align 8
  %51 = load i64*, i64** %18, align 8
  %52 = getelementptr inbounds i64, i64* %51, i64 1
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %28, align 8
  %54 = load i64*, i64** %17, align 8
  %55 = getelementptr inbounds i64, i64* %54, i64 0
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %29, align 8
  %57 = load i64*, i64** %17, align 8
  %58 = getelementptr inbounds i64, i64* %57, i64 1
  %59 = load i64, i64* %58, align 8
  store i64 %59, i64* %30, align 8
  store i64 0, i64* %31, align 8
  br label %60

; <label>:60:                                     ; preds = %182, %12
  %61 = load i64, i64* %31, align 8
  %62 = load i64*, i64** %16, align 8
  %63 = getelementptr inbounds i64, i64* %62, i64 0
  %64 = load i64, i64* %63, align 8
  %65 = icmp ult i64 %61, %64
  br i1 %65, label %66, label %185

; <label>:66:                                     ; preds = %60
  %67 = load i64, i64* %25, align 8
  %68 = sub nsw i64 0, %67
  store i64 %68, i64* %32, align 8
  store i64 0, i64* %33, align 8
  br label %69

; <label>:69:                                     ; preds = %175, %66
  %70 = load i64, i64* %33, align 8
  %71 = load i64*, i64** %16, align 8
  %72 = getelementptr inbounds i64, i64* %71, i64 1
  %73 = load i64, i64* %72, align 8
  %74 = icmp ult i64 %70, %73
  br i1 %74, label %75, label %181

; <label>:75:                                     ; preds = %69
  %76 = load i64, i64* %26, align 8
  %77 = sub nsw i64 0, %76
  store i64 %77, i64* %34, align 8
  store i64 0, i64* %35, align 8
  br label %78

; <label>:78:                                     ; preds = %168, %75
  %79 = load i64, i64* %35, align 8
  %80 = load i64*, i64** %16, align 8
  %81 = getelementptr inbounds i64, i64* %80, i64 2
  %82 = load i64, i64* %81, align 8
  %83 = icmp ult i64 %79, %82
  br i1 %83, label %84, label %174

; <label>:84:                                     ; preds = %78
  store i64 0, i64* %36, align 8
  br label %85

; <label>:85:                                     ; preds = %164, %84
  %86 = load i64, i64* %36, align 8
  %87 = load i64*, i64** %15, align 8
  %88 = getelementptr inbounds i64, i64* %87, i64 3
  %89 = load i64, i64* %88, align 8
  %90 = icmp ult i64 %86, %89
  br i1 %90, label %91, label %167

; <label>:91:                                     ; preds = %85
  store i32 0, i32* %37, align 4
  store i64 0, i64* %38, align 8
  br label %92

; <label>:92:                                     ; preds = %145, %91
  %93 = load i64, i64* %38, align 8
  %94 = load i64, i64* %29, align 8
  %95 = icmp ult i64 %93, %94
  br i1 %95, label %96, label %148

; <label>:96:                                     ; preds = %92
  store i64 0, i64* %39, align 8
  br label %97

; <label>:97:                                     ; preds = %141, %96
  %98 = load i64, i64* %39, align 8
  %99 = load i64, i64* %30, align 8
  %100 = icmp ult i64 %98, %99
  br i1 %100, label %101, label %144

; <label>:101:                                    ; preds = %97
  %102 = load i64, i64* %32, align 8
  %103 = load i64, i64* %38, align 8
  %104 = add i64 %102, %103
  store i64 %104, i64* %40, align 8
  %105 = load i64, i64* %34, align 8
  %106 = load i64, i64* %39, align 8
  %107 = add i64 %105, %106
  store i64 %107, i64* %41, align 8
  %108 = load i64, i64* %40, align 8
  %109 = icmp slt i64 %108, 0
  br i1 %109, label %125, label %110

; <label>:110:                                    ; preds = %101
  %111 = load i64, i64* %41, align 8
  %112 = icmp slt i64 %111, 0
  br i1 %112, label %125, label %113

; <label>:113:                                    ; preds = %110
  %114 = load i64, i64* %40, align 8
  %115 = load i64*, i64** %15, align 8
  %116 = getelementptr inbounds i64, i64* %115, i64 1
  %117 = load i64, i64* %116, align 8
  %118 = icmp sge i64 %114, %117
  br i1 %118, label %125, label %119

; <label>:119:                                    ; preds = %113
  %120 = load i64, i64* %41, align 8
  %121 = load i64*, i64** %15, align 8
  %122 = getelementptr inbounds i64, i64* %121, i64 2
  %123 = load i64, i64* %122, align 8
  %124 = icmp sge i64 %120, %123
  br i1 %124, label %125, label %126

; <label>:125:                                    ; preds = %119, %113, %110, %101
  br label %141

; <label>:126:                                    ; preds = %119
  %127 = load i8*, i8** %13, align 8
  %128 = load i64*, i64** %15, align 8
  %129 = load i64, i64* %31, align 8
  %130 = load i64, i64* %40, align 8
  %131 = load i64, i64* %41, align 8
  %132 = load i64, i64* %36, align 8
  %133 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %128, i64 %129, i64 %130, i64 %131, i64 %132)
  %134 = getelementptr inbounds i8, i8* %127, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = sext i8 %135 to i32
  %137 = load i32, i32* %21, align 4
  %138 = sub nsw i32 %136, %137
  %139 = load i32, i32* %37, align 4
  %140 = add nsw i32 %139, %138
  store i32 %140, i32* %37, align 4
  br label %141

; <label>:141:                                    ; preds = %126, %125
  %142 = load i64, i64* %39, align 8
  %143 = add i64 %142, 1
  store i64 %143, i64* %39, align 8
  br label %97

; <label>:144:                                    ; preds = %97
  br label %145

; <label>:145:                                    ; preds = %144
  %146 = load i64, i64* %38, align 8
  %147 = add i64 %146, 1
  store i64 %147, i64* %38, align 8
  br label %92

; <label>:148:                                    ; preds = %92
  %149 = load i32, i32* %37, align 4
  %150 = load i32, i32* %22, align 4
  %151 = load i32, i32* %23, align 4
  %152 = load i32, i32* %24, align 4
  %153 = load i32, i32* %20, align 4
  %154 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %149, i32 %150, i32 %151, i32 %152, i32 %153)
  %155 = call signext i8 @_Z11libjit_clipi(i32 %154)
  %156 = load i8*, i8** %14, align 8
  %157 = load i64*, i64** %16, align 8
  %158 = load i64, i64* %31, align 8
  %159 = load i64, i64* %33, align 8
  %160 = load i64, i64* %35, align 8
  %161 = load i64, i64* %36, align 8
  %162 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %157, i64 %158, i64 %159, i64 %160, i64 %161)
  %163 = getelementptr inbounds i8, i8* %156, i64 %162
  store i8 %155, i8* %163, align 1
  br label %164

; <label>:164:                                    ; preds = %148
  %165 = load i64, i64* %36, align 8
  %166 = add i64 %165, 1
  store i64 %166, i64* %36, align 8
  br label %85

; <label>:167:                                    ; preds = %85
  br label %168

; <label>:168:                                    ; preds = %167
  %169 = load i64, i64* %28, align 8
  %170 = load i64, i64* %34, align 8
  %171 = add i64 %170, %169
  store i64 %171, i64* %34, align 8
  %172 = load i64, i64* %35, align 8
  %173 = add i64 %172, 1
  store i64 %173, i64* %35, align 8
  br label %78

; <label>:174:                                    ; preds = %78
  br label %175

; <label>:175:                                    ; preds = %174
  %176 = load i64, i64* %27, align 8
  %177 = load i64, i64* %32, align 8
  %178 = add i64 %177, %176
  store i64 %178, i64* %32, align 8
  %179 = load i64, i64* %33, align 8
  %180 = add i64 %179, 1
  store i64 %180, i64* %33, align 8
  br label %69

; <label>:181:                                    ; preds = %69
  br label %182

; <label>:182:                                    ; preds = %181
  %183 = load i64, i64* %31, align 8
  %184 = add i64 %183, 1
  store i64 %184, i64* %31, align 8
  br label %60

; <label>:185:                                    ; preds = %60
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_avg_pool_f(float*, float*, i64*, i64*, i64*, i64*, i64*) #2 {
  %8 = alloca float*, align 8
  %9 = alloca float*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca float, align 4
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca float, align 4
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  store float* %0, float** %8, align 8
  store float* %1, float** %9, align 8
  store i64* %2, i64** %10, align 8
  store i64* %3, i64** %11, align 8
  store i64* %4, i64** %12, align 8
  store i64* %5, i64** %13, align 8
  store i64* %6, i64** %14, align 8
  %33 = load i64*, i64** %14, align 8
  %34 = getelementptr inbounds i64, i64* %33, i64 0
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %15, align 8
  %36 = load i64*, i64** %14, align 8
  %37 = getelementptr inbounds i64, i64* %36, i64 1
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %16, align 8
  %39 = load i64*, i64** %13, align 8
  %40 = getelementptr inbounds i64, i64* %39, i64 0
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %17, align 8
  %42 = load i64*, i64** %13, align 8
  %43 = getelementptr inbounds i64, i64* %42, i64 1
  %44 = load i64, i64* %43, align 8
  store i64 %44, i64* %18, align 8
  %45 = load i64*, i64** %12, align 8
  %46 = getelementptr inbounds i64, i64* %45, i64 0
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %19, align 8
  %48 = load i64*, i64** %12, align 8
  %49 = getelementptr inbounds i64, i64* %48, i64 1
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %20, align 8
  %51 = load i64, i64* %19, align 8
  %52 = load i64, i64* %20, align 8
  %53 = mul i64 %51, %52
  %54 = uitofp i64 %53 to float
  store float %54, float* %21, align 4
  store i64 0, i64* %22, align 8
  br label %55

; <label>:55:                                     ; preds = %170, %7
  %56 = load i64, i64* %22, align 8
  %57 = load i64*, i64** %11, align 8
  %58 = getelementptr inbounds i64, i64* %57, i64 0
  %59 = load i64, i64* %58, align 8
  %60 = icmp ult i64 %56, %59
  br i1 %60, label %61, label %173

; <label>:61:                                     ; preds = %55
  %62 = load i64, i64* %15, align 8
  %63 = sub nsw i64 0, %62
  store i64 %63, i64* %23, align 8
  store i64 0, i64* %24, align 8
  br label %64

; <label>:64:                                     ; preds = %163, %61
  %65 = load i64, i64* %24, align 8
  %66 = load i64*, i64** %11, align 8
  %67 = getelementptr inbounds i64, i64* %66, i64 1
  %68 = load i64, i64* %67, align 8
  %69 = icmp ult i64 %65, %68
  br i1 %69, label %70, label %169

; <label>:70:                                     ; preds = %64
  %71 = load i64, i64* %16, align 8
  %72 = sub nsw i64 0, %71
  store i64 %72, i64* %25, align 8
  store i64 0, i64* %26, align 8
  br label %73

; <label>:73:                                     ; preds = %156, %70
  %74 = load i64, i64* %26, align 8
  %75 = load i64*, i64** %11, align 8
  %76 = getelementptr inbounds i64, i64* %75, i64 2
  %77 = load i64, i64* %76, align 8
  %78 = icmp ult i64 %74, %77
  br i1 %78, label %79, label %162

; <label>:79:                                     ; preds = %73
  store i64 0, i64* %27, align 8
  br label %80

; <label>:80:                                     ; preds = %152, %79
  %81 = load i64, i64* %27, align 8
  %82 = load i64*, i64** %10, align 8
  %83 = getelementptr inbounds i64, i64* %82, i64 3
  %84 = load i64, i64* %83, align 8
  %85 = icmp ult i64 %81, %84
  br i1 %85, label %86, label %155

; <label>:86:                                     ; preds = %80
  store float 0.000000e+00, float* %28, align 4
  store i64 0, i64* %29, align 8
  br label %87

; <label>:87:                                     ; preds = %137, %86
  %88 = load i64, i64* %29, align 8
  %89 = load i64, i64* %19, align 8
  %90 = icmp ult i64 %88, %89
  br i1 %90, label %91, label %140

; <label>:91:                                     ; preds = %87
  store i64 0, i64* %30, align 8
  br label %92

; <label>:92:                                     ; preds = %133, %91
  %93 = load i64, i64* %30, align 8
  %94 = load i64, i64* %20, align 8
  %95 = icmp ult i64 %93, %94
  br i1 %95, label %96, label %136

; <label>:96:                                     ; preds = %92
  %97 = load i64, i64* %23, align 8
  %98 = load i64, i64* %29, align 8
  %99 = add i64 %97, %98
  store i64 %99, i64* %31, align 8
  %100 = load i64, i64* %25, align 8
  %101 = load i64, i64* %30, align 8
  %102 = add i64 %100, %101
  store i64 %102, i64* %32, align 8
  %103 = load i64, i64* %31, align 8
  %104 = icmp slt i64 %103, 0
  br i1 %104, label %120, label %105

; <label>:105:                                    ; preds = %96
  %106 = load i64, i64* %32, align 8
  %107 = icmp slt i64 %106, 0
  br i1 %107, label %120, label %108

; <label>:108:                                    ; preds = %105
  %109 = load i64, i64* %31, align 8
  %110 = load i64*, i64** %10, align 8
  %111 = getelementptr inbounds i64, i64* %110, i64 1
  %112 = load i64, i64* %111, align 8
  %113 = icmp sge i64 %109, %112
  br i1 %113, label %120, label %114

; <label>:114:                                    ; preds = %108
  %115 = load i64, i64* %32, align 8
  %116 = load i64*, i64** %10, align 8
  %117 = getelementptr inbounds i64, i64* %116, i64 2
  %118 = load i64, i64* %117, align 8
  %119 = icmp sge i64 %115, %118
  br i1 %119, label %120, label %121

; <label>:120:                                    ; preds = %114, %108, %105, %96
  br label %133

; <label>:121:                                    ; preds = %114
  %122 = load float*, float** %8, align 8
  %123 = load i64*, i64** %10, align 8
  %124 = load i64, i64* %22, align 8
  %125 = load i64, i64* %31, align 8
  %126 = load i64, i64* %32, align 8
  %127 = load i64, i64* %27, align 8
  %128 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %123, i64 %124, i64 %125, i64 %126, i64 %127)
  %129 = getelementptr inbounds float, float* %122, i64 %128
  %130 = load float, float* %129, align 4
  %131 = load float, float* %28, align 4
  %132 = fadd reassoc nsz arcp contract float %131, %130
  store float %132, float* %28, align 4
  br label %133

; <label>:133:                                    ; preds = %121, %120
  %134 = load i64, i64* %30, align 8
  %135 = add i64 %134, 1
  store i64 %135, i64* %30, align 8
  br label %92

; <label>:136:                                    ; preds = %92
  br label %137

; <label>:137:                                    ; preds = %136
  %138 = load i64, i64* %29, align 8
  %139 = add i64 %138, 1
  store i64 %139, i64* %29, align 8
  br label %87

; <label>:140:                                    ; preds = %87
  %141 = load float, float* %28, align 4
  %142 = load float, float* %21, align 4
  %143 = fdiv reassoc nsz arcp float %141, %142
  %144 = load float*, float** %9, align 8
  %145 = load i64*, i64** %11, align 8
  %146 = load i64, i64* %22, align 8
  %147 = load i64, i64* %24, align 8
  %148 = load i64, i64* %26, align 8
  %149 = load i64, i64* %27, align 8
  %150 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %145, i64 %146, i64 %147, i64 %148, i64 %149)
  %151 = getelementptr inbounds float, float* %144, i64 %150
  store float %143, float* %151, align 4
  br label %152

; <label>:152:                                    ; preds = %140
  %153 = load i64, i64* %27, align 8
  %154 = add i64 %153, 1
  store i64 %154, i64* %27, align 8
  br label %80

; <label>:155:                                    ; preds = %80
  br label %156

; <label>:156:                                    ; preds = %155
  %157 = load i64, i64* %18, align 8
  %158 = load i64, i64* %25, align 8
  %159 = add i64 %158, %157
  store i64 %159, i64* %25, align 8
  %160 = load i64, i64* %26, align 8
  %161 = add i64 %160, 1
  store i64 %161, i64* %26, align 8
  br label %73

; <label>:162:                                    ; preds = %73
  br label %163

; <label>:163:                                    ; preds = %162
  %164 = load i64, i64* %17, align 8
  %165 = load i64, i64* %23, align 8
  %166 = add i64 %165, %164
  store i64 %166, i64* %23, align 8
  %167 = load i64, i64* %24, align 8
  %168 = add i64 %167, 1
  store i64 %168, i64* %24, align 8
  br label %64

; <label>:169:                                    ; preds = %64
  br label %170

; <label>:170:                                    ; preds = %169
  %171 = load i64, i64* %22, align 8
  %172 = add i64 %171, 1
  store i64 %172, i64* %22, align 8
  br label %55

; <label>:173:                                    ; preds = %55
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_adaptive_avg_pool_f(float*, float*, i64*, i64*) #2 {
  %5 = alloca float*, align 8
  %6 = alloca float*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca float, align 4
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  store float* %0, float** %5, align 8
  store float* %1, float** %6, align 8
  store i64* %2, i64** %7, align 8
  store i64* %3, i64** %8, align 8
  store i64 0, i64* %9, align 8
  br label %22

; <label>:22:                                     ; preds = %170, %4
  %23 = load i64, i64* %9, align 8
  %24 = load i64*, i64** %8, align 8
  %25 = getelementptr inbounds i64, i64* %24, i64 0
  %26 = load i64, i64* %25, align 8
  %27 = icmp ult i64 %23, %26
  br i1 %27, label %28, label %173

; <label>:28:                                     ; preds = %22
  store i64 0, i64* %10, align 8
  br label %29

; <label>:29:                                     ; preds = %166, %28
  %30 = load i64, i64* %10, align 8
  %31 = load i64*, i64** %7, align 8
  %32 = getelementptr inbounds i64, i64* %31, i64 3
  %33 = load i64, i64* %32, align 8
  %34 = icmp ult i64 %30, %33
  br i1 %34, label %35, label %169

; <label>:35:                                     ; preds = %29
  store i64 0, i64* %11, align 8
  br label %36

; <label>:36:                                     ; preds = %162, %35
  %37 = load i64, i64* %11, align 8
  %38 = load i64*, i64** %8, align 8
  %39 = getelementptr inbounds i64, i64* %38, i64 1
  %40 = load i64, i64* %39, align 8
  %41 = icmp ult i64 %37, %40
  br i1 %41, label %42, label %165

; <label>:42:                                     ; preds = %36
  %43 = load i64, i64* %11, align 8
  %44 = load i64*, i64** %7, align 8
  %45 = getelementptr inbounds i64, i64* %44, i64 1
  %46 = load i64, i64* %45, align 8
  %47 = mul i64 %43, %46
  %48 = uitofp i64 %47 to float
  %49 = load i64*, i64** %8, align 8
  %50 = getelementptr inbounds i64, i64* %49, i64 1
  %51 = load i64, i64* %50, align 8
  %52 = uitofp i64 %51 to float
  %53 = fdiv reassoc nsz arcp float %48, %52
  %54 = call reassoc nsz arcp float @_ZSt5floorf(float %53)
  %55 = fptoui float %54 to i64
  store i64 %55, i64* %12, align 8
  %56 = load i64, i64* %11, align 8
  %57 = add i64 %56, 1
  %58 = load i64*, i64** %7, align 8
  %59 = getelementptr inbounds i64, i64* %58, i64 1
  %60 = load i64, i64* %59, align 8
  %61 = mul i64 %57, %60
  %62 = uitofp i64 %61 to float
  %63 = load i64*, i64** %8, align 8
  %64 = getelementptr inbounds i64, i64* %63, i64 1
  %65 = load i64, i64* %64, align 8
  %66 = uitofp i64 %65 to float
  %67 = fdiv reassoc nsz arcp float %62, %66
  %68 = call reassoc nsz arcp float @_ZSt4ceilf(float %67)
  %69 = fptoui float %68 to i64
  %70 = load i64, i64* %12, align 8
  %71 = sub i64 %69, %70
  store i64 %71, i64* %13, align 8
  store i64 0, i64* %14, align 8
  br label %72

; <label>:72:                                     ; preds = %158, %42
  %73 = load i64, i64* %14, align 8
  %74 = load i64*, i64** %8, align 8
  %75 = getelementptr inbounds i64, i64* %74, i64 2
  %76 = load i64, i64* %75, align 8
  %77 = icmp ult i64 %73, %76
  br i1 %77, label %78, label %161

; <label>:78:                                     ; preds = %72
  %79 = load i64, i64* %14, align 8
  %80 = load i64*, i64** %7, align 8
  %81 = getelementptr inbounds i64, i64* %80, i64 2
  %82 = load i64, i64* %81, align 8
  %83 = mul i64 %79, %82
  %84 = uitofp i64 %83 to float
  %85 = load i64*, i64** %8, align 8
  %86 = getelementptr inbounds i64, i64* %85, i64 2
  %87 = load i64, i64* %86, align 8
  %88 = uitofp i64 %87 to float
  %89 = fdiv reassoc nsz arcp float %84, %88
  %90 = call reassoc nsz arcp float @_ZSt5floorf(float %89)
  %91 = fptoui float %90 to i64
  store i64 %91, i64* %15, align 8
  %92 = load i64, i64* %14, align 8
  %93 = add i64 %92, 1
  %94 = load i64*, i64** %7, align 8
  %95 = getelementptr inbounds i64, i64* %94, i64 2
  %96 = load i64, i64* %95, align 8
  %97 = mul i64 %93, %96
  %98 = uitofp i64 %97 to float
  %99 = load i64*, i64** %8, align 8
  %100 = getelementptr inbounds i64, i64* %99, i64 2
  %101 = load i64, i64* %100, align 8
  %102 = uitofp i64 %101 to float
  %103 = fdiv reassoc nsz arcp float %98, %102
  %104 = call reassoc nsz arcp float @_ZSt4ceilf(float %103)
  %105 = fptoui float %104 to i64
  %106 = load i64, i64* %15, align 8
  %107 = sub i64 %105, %106
  store i64 %107, i64* %16, align 8
  store float 0.000000e+00, float* %17, align 4
  store i64 0, i64* %18, align 8
  br label %108

; <label>:108:                                    ; preds = %139, %78
  %109 = load i64, i64* %18, align 8
  %110 = load i64, i64* %13, align 8
  %111 = icmp ult i64 %109, %110
  br i1 %111, label %112, label %142

; <label>:112:                                    ; preds = %108
  store i64 0, i64* %19, align 8
  br label %113

; <label>:113:                                    ; preds = %135, %112
  %114 = load i64, i64* %19, align 8
  %115 = load i64, i64* %16, align 8
  %116 = icmp ult i64 %114, %115
  br i1 %116, label %117, label %138

; <label>:117:                                    ; preds = %113
  %118 = load i64, i64* %12, align 8
  %119 = load i64, i64* %18, align 8
  %120 = add i64 %118, %119
  store i64 %120, i64* %20, align 8
  %121 = load i64, i64* %15, align 8
  %122 = load i64, i64* %19, align 8
  %123 = add i64 %121, %122
  store i64 %123, i64* %21, align 8
  %124 = load float*, float** %5, align 8
  %125 = load i64*, i64** %7, align 8
  %126 = load i64, i64* %9, align 8
  %127 = load i64, i64* %20, align 8
  %128 = load i64, i64* %21, align 8
  %129 = load i64, i64* %10, align 8
  %130 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %125, i64 %126, i64 %127, i64 %128, i64 %129)
  %131 = getelementptr inbounds float, float* %124, i64 %130
  %132 = load float, float* %131, align 4
  %133 = load float, float* %17, align 4
  %134 = fadd reassoc nsz arcp contract float %133, %132
  store float %134, float* %17, align 4
  br label %135

; <label>:135:                                    ; preds = %117
  %136 = load i64, i64* %19, align 8
  %137 = add i64 %136, 1
  store i64 %137, i64* %19, align 8
  br label %113

; <label>:138:                                    ; preds = %113
  br label %139

; <label>:139:                                    ; preds = %138
  %140 = load i64, i64* %18, align 8
  %141 = add i64 %140, 1
  store i64 %141, i64* %18, align 8
  br label %108

; <label>:142:                                    ; preds = %108
  %143 = load float, float* %17, align 4
  %144 = load i64, i64* %16, align 8
  %145 = uitofp i64 %144 to float
  %146 = fdiv reassoc nsz arcp float %143, %145
  %147 = load i64, i64* %13, align 8
  %148 = uitofp i64 %147 to float
  %149 = fdiv reassoc nsz arcp float %146, %148
  %150 = load float*, float** %6, align 8
  %151 = load i64*, i64** %8, align 8
  %152 = load i64, i64* %9, align 8
  %153 = load i64, i64* %11, align 8
  %154 = load i64, i64* %14, align 8
  %155 = load i64, i64* %10, align 8
  %156 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %151, i64 %152, i64 %153, i64 %154, i64 %155)
  %157 = getelementptr inbounds float, float* %150, i64 %156
  store float %149, float* %157, align 4
  br label %158

; <label>:158:                                    ; preds = %142
  %159 = load i64, i64* %14, align 8
  %160 = add i64 %159, 1
  store i64 %160, i64* %14, align 8
  br label %72

; <label>:161:                                    ; preds = %72
  br label %162

; <label>:162:                                    ; preds = %161
  %163 = load i64, i64* %11, align 8
  %164 = add i64 %163, 1
  store i64 %164, i64* %11, align 8
  br label %36

; <label>:165:                                    ; preds = %36
  br label %166

; <label>:166:                                    ; preds = %165
  %167 = load i64, i64* %10, align 8
  %168 = add i64 %167, 1
  store i64 %168, i64* %10, align 8
  br label %29

; <label>:169:                                    ; preds = %29
  br label %170

; <label>:170:                                    ; preds = %169
  %171 = load i64, i64* %9, align 8
  %172 = add i64 %171, 1
  store i64 %172, i64* %9, align 8
  br label %22

; <label>:173:                                    ; preds = %22
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZSt5floorf(float) #0 comdat {
  %2 = alloca float, align 4
  store float %0, float* %2, align 4
  %3 = load float, float* %2, align 4
  %4 = call reassoc nsz arcp float @llvm.floor.f32(float %3)
  ret float %4
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZSt4ceilf(float) #0 comdat {
  %2 = alloca float, align 4
  store float %0, float* %2, align 4
  %3 = load float, float* %2, align 4
  %4 = call reassoc nsz arcp float @llvm.ceil.f32(float %3)
  ret float %4
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #1

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_avg_pool_grad_f(float*, float*, i64*, i64*, i64*, i64*, i64*) #2 {
  %8 = alloca float*, align 8
  %9 = alloca float*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca float, align 4
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca float, align 4
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  store float* %0, float** %8, align 8
  store float* %1, float** %9, align 8
  store i64* %2, i64** %10, align 8
  store i64* %3, i64** %11, align 8
  store i64* %4, i64** %12, align 8
  store i64* %5, i64** %13, align 8
  store i64* %6, i64** %14, align 8
  %35 = load i64*, i64** %14, align 8
  %36 = getelementptr inbounds i64, i64* %35, i64 0
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %15, align 8
  %38 = load i64*, i64** %14, align 8
  %39 = getelementptr inbounds i64, i64* %38, i64 1
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %16, align 8
  %41 = load i64*, i64** %13, align 8
  %42 = getelementptr inbounds i64, i64* %41, i64 0
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %17, align 8
  %44 = load i64*, i64** %13, align 8
  %45 = getelementptr inbounds i64, i64* %44, i64 1
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %18, align 8
  %47 = load i64*, i64** %12, align 8
  %48 = getelementptr inbounds i64, i64* %47, i64 0
  %49 = load i64, i64* %48, align 8
  store i64 %49, i64* %19, align 8
  %50 = load i64*, i64** %12, align 8
  %51 = getelementptr inbounds i64, i64* %50, i64 1
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %20, align 8
  %53 = load i64, i64* %19, align 8
  %54 = load i64, i64* %20, align 8
  %55 = mul i64 %53, %54
  %56 = uitofp i64 %55 to float
  store float %56, float* %21, align 4
  store i64 0, i64* %22, align 8
  br label %57

; <label>:57:                                     ; preds = %202, %7
  %58 = load i64, i64* %22, align 8
  %59 = load i64*, i64** %11, align 8
  %60 = getelementptr inbounds i64, i64* %59, i64 0
  %61 = load i64, i64* %60, align 8
  %62 = icmp ult i64 %58, %61
  br i1 %62, label %63, label %205

; <label>:63:                                     ; preds = %57
  store i64 0, i64* %23, align 8
  br label %64

; <label>:64:                                     ; preds = %198, %63
  %65 = load i64, i64* %23, align 8
  %66 = load i64*, i64** %11, align 8
  %67 = getelementptr inbounds i64, i64* %66, i64 3
  %68 = load i64, i64* %67, align 8
  %69 = icmp ult i64 %65, %68
  br i1 %69, label %70, label %201

; <label>:70:                                     ; preds = %64
  store i64 0, i64* %24, align 8
  br label %71

; <label>:71:                                     ; preds = %97, %70
  %72 = load i64, i64* %24, align 8
  %73 = load i64*, i64** %10, align 8
  %74 = getelementptr inbounds i64, i64* %73, i64 1
  %75 = load i64, i64* %74, align 8
  %76 = icmp ult i64 %72, %75
  br i1 %76, label %77, label %100

; <label>:77:                                     ; preds = %71
  store i64 0, i64* %25, align 8
  br label %78

; <label>:78:                                     ; preds = %93, %77
  %79 = load i64, i64* %25, align 8
  %80 = load i64*, i64** %10, align 8
  %81 = getelementptr inbounds i64, i64* %80, i64 2
  %82 = load i64, i64* %81, align 8
  %83 = icmp ult i64 %79, %82
  br i1 %83, label %84, label %96

; <label>:84:                                     ; preds = %78
  %85 = load float*, float** %8, align 8
  %86 = load i64*, i64** %10, align 8
  %87 = load i64, i64* %22, align 8
  %88 = load i64, i64* %24, align 8
  %89 = load i64, i64* %25, align 8
  %90 = load i64, i64* %23, align 8
  %91 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %86, i64 %87, i64 %88, i64 %89, i64 %90)
  %92 = getelementptr inbounds float, float* %85, i64 %91
  store float 0.000000e+00, float* %92, align 4
  br label %93

; <label>:93:                                     ; preds = %84
  %94 = load i64, i64* %25, align 8
  %95 = add i64 %94, 1
  store i64 %95, i64* %25, align 8
  br label %78

; <label>:96:                                     ; preds = %78
  br label %97

; <label>:97:                                     ; preds = %96
  %98 = load i64, i64* %24, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %24, align 8
  br label %71

; <label>:100:                                    ; preds = %71
  %101 = load i64, i64* %15, align 8
  %102 = sub nsw i64 0, %101
  store i64 %102, i64* %26, align 8
  store i64 0, i64* %27, align 8
  br label %103

; <label>:103:                                    ; preds = %191, %100
  %104 = load i64, i64* %27, align 8
  %105 = load i64*, i64** %11, align 8
  %106 = getelementptr inbounds i64, i64* %105, i64 1
  %107 = load i64, i64* %106, align 8
  %108 = icmp ult i64 %104, %107
  br i1 %108, label %109, label %197

; <label>:109:                                    ; preds = %103
  %110 = load i64, i64* %16, align 8
  %111 = sub nsw i64 0, %110
  store i64 %111, i64* %28, align 8
  store i64 0, i64* %29, align 8
  br label %112

; <label>:112:                                    ; preds = %184, %109
  %113 = load i64, i64* %29, align 8
  %114 = load i64*, i64** %11, align 8
  %115 = getelementptr inbounds i64, i64* %114, i64 2
  %116 = load i64, i64* %115, align 8
  %117 = icmp ult i64 %113, %116
  br i1 %117, label %118, label %190

; <label>:118:                                    ; preds = %112
  %119 = load float*, float** %9, align 8
  %120 = load i64*, i64** %11, align 8
  %121 = load i64, i64* %22, align 8
  %122 = load i64, i64* %27, align 8
  %123 = load i64, i64* %29, align 8
  %124 = load i64, i64* %23, align 8
  %125 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %120, i64 %121, i64 %122, i64 %123, i64 %124)
  %126 = getelementptr inbounds float, float* %119, i64 %125
  %127 = load float, float* %126, align 4
  %128 = load float, float* %21, align 4
  %129 = fdiv reassoc nsz arcp float %127, %128
  store float %129, float* %30, align 4
  store i64 0, i64* %31, align 8
  br label %130

; <label>:130:                                    ; preds = %180, %118
  %131 = load i64, i64* %31, align 8
  %132 = load i64, i64* %19, align 8
  %133 = icmp ult i64 %131, %132
  br i1 %133, label %134, label %183

; <label>:134:                                    ; preds = %130
  store i64 0, i64* %32, align 8
  br label %135

; <label>:135:                                    ; preds = %176, %134
  %136 = load i64, i64* %32, align 8
  %137 = load i64, i64* %20, align 8
  %138 = icmp ult i64 %136, %137
  br i1 %138, label %139, label %179

; <label>:139:                                    ; preds = %135
  %140 = load i64, i64* %26, align 8
  %141 = load i64, i64* %31, align 8
  %142 = add i64 %140, %141
  store i64 %142, i64* %33, align 8
  %143 = load i64, i64* %28, align 8
  %144 = load i64, i64* %32, align 8
  %145 = add i64 %143, %144
  store i64 %145, i64* %34, align 8
  %146 = load i64, i64* %33, align 8
  %147 = icmp slt i64 %146, 0
  br i1 %147, label %163, label %148

; <label>:148:                                    ; preds = %139
  %149 = load i64, i64* %34, align 8
  %150 = icmp slt i64 %149, 0
  br i1 %150, label %163, label %151

; <label>:151:                                    ; preds = %148
  %152 = load i64, i64* %33, align 8
  %153 = load i64*, i64** %10, align 8
  %154 = getelementptr inbounds i64, i64* %153, i64 1
  %155 = load i64, i64* %154, align 8
  %156 = icmp sge i64 %152, %155
  br i1 %156, label %163, label %157

; <label>:157:                                    ; preds = %151
  %158 = load i64, i64* %34, align 8
  %159 = load i64*, i64** %10, align 8
  %160 = getelementptr inbounds i64, i64* %159, i64 2
  %161 = load i64, i64* %160, align 8
  %162 = icmp sge i64 %158, %161
  br i1 %162, label %163, label %164

; <label>:163:                                    ; preds = %157, %151, %148, %139
  br label %176

; <label>:164:                                    ; preds = %157
  %165 = load float, float* %30, align 4
  %166 = load float*, float** %8, align 8
  %167 = load i64*, i64** %10, align 8
  %168 = load i64, i64* %22, align 8
  %169 = load i64, i64* %33, align 8
  %170 = load i64, i64* %34, align 8
  %171 = load i64, i64* %23, align 8
  %172 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %167, i64 %168, i64 %169, i64 %170, i64 %171)
  %173 = getelementptr inbounds float, float* %166, i64 %172
  %174 = load float, float* %173, align 4
  %175 = fadd reassoc nsz arcp contract float %174, %165
  store float %175, float* %173, align 4
  br label %176

; <label>:176:                                    ; preds = %164, %163
  %177 = load i64, i64* %32, align 8
  %178 = add i64 %177, 1
  store i64 %178, i64* %32, align 8
  br label %135

; <label>:179:                                    ; preds = %135
  br label %180

; <label>:180:                                    ; preds = %179
  %181 = load i64, i64* %31, align 8
  %182 = add i64 %181, 1
  store i64 %182, i64* %31, align 8
  br label %130

; <label>:183:                                    ; preds = %130
  br label %184

; <label>:184:                                    ; preds = %183
  %185 = load i64, i64* %18, align 8
  %186 = load i64, i64* %28, align 8
  %187 = add i64 %186, %185
  store i64 %187, i64* %28, align 8
  %188 = load i64, i64* %29, align 8
  %189 = add i64 %188, 1
  store i64 %189, i64* %29, align 8
  br label %112

; <label>:190:                                    ; preds = %112
  br label %191

; <label>:191:                                    ; preds = %190
  %192 = load i64, i64* %17, align 8
  %193 = load i64, i64* %26, align 8
  %194 = add i64 %193, %192
  store i64 %194, i64* %26, align 8
  %195 = load i64, i64* %27, align 8
  %196 = add i64 %195, 1
  store i64 %196, i64* %27, align 8
  br label %103

; <label>:197:                                    ; preds = %103
  br label %198

; <label>:198:                                    ; preds = %197
  %199 = load i64, i64* %23, align 8
  %200 = add i64 %199, 1
  store i64 %200, i64* %23, align 8
  br label %64

; <label>:201:                                    ; preds = %64
  br label %202

; <label>:202:                                    ; preds = %201
  %203 = load i64, i64* %22, align 8
  %204 = add i64 %203, 1
  store i64 %204, i64* %22, align 8
  br label %57

; <label>:205:                                    ; preds = %57
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i8 @libjit_element_quantize_kernel_i8(i64, float*, float, i32) #0 {
  %5 = alloca i64, align 8
  %6 = alloca float*, align 8
  %7 = alloca float, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i64 %0, i64* %5, align 8
  store float* %1, float** %6, align 8
  store float %2, float* %7, align 4
  store i32 %3, i32* %8, align 4
  %10 = load float*, float** %6, align 8
  %11 = load i64, i64* %5, align 8
  %12 = getelementptr inbounds float, float* %10, i64 %11
  %13 = load float, float* %12, align 4
  %14 = load float, float* %7, align 4
  %15 = fdiv reassoc nsz arcp float %13, %14
  %16 = load i32, i32* %8, align 4
  %17 = sitofp i32 %16 to float
  %18 = fadd reassoc nsz arcp contract float %15, %17
  %19 = call reassoc nsz arcp float @llvm.nearbyint.f32(float %18)
  %20 = fptosi float %19 to i32
  store i32 %20, i32* %9, align 4
  %21 = load i32, i32* %9, align 4
  %22 = icmp slt i32 127, %21
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %4
  br label %26

; <label>:24:                                     ; preds = %4
  %25 = load i32, i32* %9, align 4
  br label %26

; <label>:26:                                     ; preds = %24, %23
  %27 = phi i32 [ 127, %23 ], [ %25, %24 ]
  %28 = icmp sgt i32 -128, %27
  br i1 %28, label %29, label %30

; <label>:29:                                     ; preds = %26
  br label %38

; <label>:30:                                     ; preds = %26
  %31 = load i32, i32* %9, align 4
  %32 = icmp slt i32 127, %31
  br i1 %32, label %33, label %34

; <label>:33:                                     ; preds = %30
  br label %36

; <label>:34:                                     ; preds = %30
  %35 = load i32, i32* %9, align 4
  br label %36

; <label>:36:                                     ; preds = %34, %33
  %37 = phi i32 [ 127, %33 ], [ %35, %34 ]
  br label %38

; <label>:38:                                     ; preds = %36, %29
  %39 = phi i32 [ -128, %29 ], [ %37, %36 ]
  %40 = trunc i32 %39 to i8
  ret i8 %40
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.nearbyint.f32(float) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @libjit_element_quantize_kernel_i32(i64, float*, float, i32) #0 {
  %5 = alloca i64, align 8
  %6 = alloca float*, align 8
  %7 = alloca float, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i64 %0, i64* %5, align 8
  store float* %1, float** %6, align 8
  store float %2, float* %7, align 4
  store i32 %3, i32* %8, align 4
  %10 = load float*, float** %6, align 8
  %11 = load i64, i64* %5, align 8
  %12 = getelementptr inbounds float, float* %10, i64 %11
  %13 = load float, float* %12, align 4
  %14 = load float, float* %7, align 4
  %15 = fdiv reassoc nsz arcp float %13, %14
  %16 = load i32, i32* %8, align 4
  %17 = sitofp i32 %16 to float
  %18 = fadd reassoc nsz arcp contract float %15, %17
  %19 = call reassoc nsz arcp float @llvm.nearbyint.f32(float %18)
  %20 = fptosi float %19 to i32
  store i32 %20, i32* %9, align 4
  %21 = load i32, i32* %9, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local float @libjit_element_dequantize_kernel_f(i64, i8*, float, i32) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = alloca float, align 4
  %8 = alloca i32, align 4
  store i64 %0, i64* %5, align 8
  store i8* %1, i8** %6, align 8
  store float %2, float* %7, align 4
  store i32 %3, i32* %8, align 4
  %9 = load float, float* %7, align 4
  %10 = load i8*, i8** %6, align 8
  %11 = load i64, i64* %5, align 8
  %12 = getelementptr inbounds i8, i8* %10, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = load i32, i32* %8, align 4
  %16 = sub nsw i32 %14, %15
  %17 = sitofp i32 %16 to float
  %18 = fmul reassoc nsz arcp contract float %9, %17
  ret float %18
}

; Function Attrs: noinline optnone uwtable
define dso_local signext i8 @libjit_element_rescale_kernel_i8(i64, i8*, i32, i32, i32, i32, i32) #2 {
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i64 %0, i64* %8, align 8
  store i8* %1, i8** %9, align 8
  store i32 %2, i32* %10, align 4
  store i32 %3, i32* %11, align 4
  store i32 %4, i32* %12, align 4
  store i32 %5, i32* %13, align 4
  store i32 %6, i32* %14, align 4
  %16 = load i8*, i8** %9, align 8
  %17 = load i64, i64* %8, align 8
  %18 = getelementptr inbounds i8, i8* %16, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  %21 = load i32, i32* %11, align 4
  %22 = sub nsw i32 %20, %21
  %23 = load i32, i32* %12, align 4
  %24 = load i32, i32* %13, align 4
  %25 = load i32, i32* %14, align 4
  %26 = load i32, i32* %10, align 4
  %27 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %22, i32 %23, i32 %24, i32 %25, i32 %26)
  store i32 %27, i32* %15, align 4
  %28 = load i32, i32* %15, align 4
  %29 = call signext i8 @_Z11libjit_clipi(i32 %28)
  ret i8 %29
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_softmax_f(float*, float*, i64*, i64*) #2 {
  %5 = alloca float*, align 8
  %6 = alloca float*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca float, align 4
  %11 = alloca i64, align 8
  %12 = alloca float, align 4
  %13 = alloca i64, align 8
  %14 = alloca float, align 4
  %15 = alloca i64, align 8
  store float* %0, float** %5, align 8
  store float* %1, float** %6, align 8
  store i64* %2, i64** %7, align 8
  store i64* %3, i64** %8, align 8
  store i64 0, i64* %9, align 8
  br label %16

; <label>:16:                                     ; preds = %118, %4
  %17 = load i64, i64* %9, align 8
  %18 = load i64*, i64** %7, align 8
  %19 = getelementptr inbounds i64, i64* %18, i64 0
  %20 = load i64, i64* %19, align 8
  %21 = icmp ult i64 %17, %20
  br i1 %21, label %22, label %121

; <label>:22:                                     ; preds = %16
  %23 = load float*, float** %5, align 8
  %24 = load i64*, i64** %7, align 8
  %25 = load i64, i64* %9, align 8
  %26 = call i64 @_Z12libjit_getXYPKmmm(i64* %24, i64 %25, i64 0)
  %27 = getelementptr inbounds float, float* %23, i64 %26
  %28 = load float, float* %27, align 4
  store float %28, float* %10, align 4
  store i64 1, i64* %11, align 8
  br label %29

; <label>:29:                                     ; preds = %57, %22
  %30 = load i64, i64* %11, align 8
  %31 = load i64*, i64** %7, align 8
  %32 = getelementptr inbounds i64, i64* %31, i64 1
  %33 = load i64, i64* %32, align 8
  %34 = icmp ult i64 %30, %33
  br i1 %34, label %35, label %60

; <label>:35:                                     ; preds = %29
  %36 = load float, float* %10, align 4
  %37 = load float*, float** %5, align 8
  %38 = load i64*, i64** %7, align 8
  %39 = load i64, i64* %9, align 8
  %40 = load i64, i64* %11, align 8
  %41 = call i64 @_Z12libjit_getXYPKmmm(i64* %38, i64 %39, i64 %40)
  %42 = getelementptr inbounds float, float* %37, i64 %41
  %43 = load float, float* %42, align 4
  %44 = fcmp reassoc nsz arcp ogt float %36, %43
  br i1 %44, label %45, label %47

; <label>:45:                                     ; preds = %35
  %46 = load float, float* %10, align 4
  br label %55

; <label>:47:                                     ; preds = %35
  %48 = load float*, float** %5, align 8
  %49 = load i64*, i64** %7, align 8
  %50 = load i64, i64* %9, align 8
  %51 = load i64, i64* %11, align 8
  %52 = call i64 @_Z12libjit_getXYPKmmm(i64* %49, i64 %50, i64 %51)
  %53 = getelementptr inbounds float, float* %48, i64 %52
  %54 = load float, float* %53, align 4
  br label %55

; <label>:55:                                     ; preds = %47, %45
  %56 = phi float [ %46, %45 ], [ %54, %47 ]
  store float %56, float* %10, align 4
  br label %57

; <label>:57:                                     ; preds = %55
  %58 = load i64, i64* %11, align 8
  %59 = add i64 %58, 1
  store i64 %59, i64* %11, align 8
  br label %29

; <label>:60:                                     ; preds = %29
  store float 0.000000e+00, float* %12, align 4
  store i64 0, i64* %13, align 8
  br label %61

; <label>:61:                                     ; preds = %88, %60
  %62 = load i64, i64* %13, align 8
  %63 = load i64*, i64** %7, align 8
  %64 = getelementptr inbounds i64, i64* %63, i64 1
  %65 = load i64, i64* %64, align 8
  %66 = icmp ult i64 %62, %65
  br i1 %66, label %67, label %91

; <label>:67:                                     ; preds = %61
  %68 = load float*, float** %5, align 8
  %69 = load i64*, i64** %7, align 8
  %70 = load i64, i64* %9, align 8
  %71 = load i64, i64* %13, align 8
  %72 = call i64 @_Z12libjit_getXYPKmmm(i64* %69, i64 %70, i64 %71)
  %73 = getelementptr inbounds float, float* %68, i64 %72
  %74 = load float, float* %73, align 4
  %75 = load float, float* %10, align 4
  %76 = fsub reassoc nsz arcp contract float %74, %75
  %77 = call reassoc nsz arcp float @llvm.exp.f32(float %76)
  store float %77, float* %14, align 4
  %78 = load float, float* %14, align 4
  %79 = load float, float* %12, align 4
  %80 = fadd reassoc nsz arcp contract float %79, %78
  store float %80, float* %12, align 4
  %81 = load float, float* %14, align 4
  %82 = load float*, float** %6, align 8
  %83 = load i64*, i64** %8, align 8
  %84 = load i64, i64* %9, align 8
  %85 = load i64, i64* %13, align 8
  %86 = call i64 @_Z12libjit_getXYPKmmm(i64* %83, i64 %84, i64 %85)
  %87 = getelementptr inbounds float, float* %82, i64 %86
  store float %81, float* %87, align 4
  br label %88

; <label>:88:                                     ; preds = %67
  %89 = load i64, i64* %13, align 8
  %90 = add i64 %89, 1
  store i64 %90, i64* %13, align 8
  br label %61

; <label>:91:                                     ; preds = %61
  store i64 0, i64* %15, align 8
  br label %92

; <label>:92:                                     ; preds = %114, %91
  %93 = load i64, i64* %15, align 8
  %94 = load i64*, i64** %7, align 8
  %95 = getelementptr inbounds i64, i64* %94, i64 1
  %96 = load i64, i64* %95, align 8
  %97 = icmp ult i64 %93, %96
  br i1 %97, label %98, label %117

; <label>:98:                                     ; preds = %92
  %99 = load float*, float** %6, align 8
  %100 = load i64*, i64** %8, align 8
  %101 = load i64, i64* %9, align 8
  %102 = load i64, i64* %15, align 8
  %103 = call i64 @_Z12libjit_getXYPKmmm(i64* %100, i64 %101, i64 %102)
  %104 = getelementptr inbounds float, float* %99, i64 %103
  %105 = load float, float* %104, align 4
  %106 = load float, float* %12, align 4
  %107 = fdiv reassoc nsz arcp float %105, %106
  %108 = load float*, float** %6, align 8
  %109 = load i64*, i64** %8, align 8
  %110 = load i64, i64* %9, align 8
  %111 = load i64, i64* %15, align 8
  %112 = call i64 @_Z12libjit_getXYPKmmm(i64* %109, i64 %110, i64 %111)
  %113 = getelementptr inbounds float, float* %108, i64 %112
  store float %107, float* %113, align 4
  br label %114

; <label>:114:                                    ; preds = %98
  %115 = load i64, i64* %15, align 8
  %116 = add i64 %115, 1
  store i64 %116, i64* %15, align 8
  br label %92

; <label>:117:                                    ; preds = %92
  br label %118

; <label>:118:                                    ; preds = %117
  %119 = load i64, i64* %9, align 8
  %120 = add i64 %119, 1
  store i64 %120, i64* %9, align 8
  br label %16

; <label>:121:                                    ; preds = %16
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_softmax_grad_f(float*, float*, i64*, i64*, i64*) #2 {
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca float, align 4
  store float* %0, float** %6, align 8
  store float* %1, float** %7, align 8
  store i64* %2, i64** %8, align 8
  store i64* %3, i64** %9, align 8
  store i64* %4, i64** %10, align 8
  store i64 0, i64* %11, align 8
  br label %14

; <label>:14:                                     ; preds = %56, %5
  %15 = load i64, i64* %11, align 8
  %16 = load i64*, i64** %9, align 8
  %17 = getelementptr inbounds i64, i64* %16, i64 0
  %18 = load i64, i64* %17, align 8
  %19 = icmp ult i64 %15, %18
  br i1 %19, label %20, label %59

; <label>:20:                                     ; preds = %14
  store i64 0, i64* %12, align 8
  br label %21

; <label>:21:                                     ; preds = %52, %20
  %22 = load i64, i64* %12, align 8
  %23 = load i64*, i64** %9, align 8
  %24 = getelementptr inbounds i64, i64* %23, i64 1
  %25 = load i64, i64* %24, align 8
  %26 = icmp ult i64 %22, %25
  br i1 %26, label %27, label %55

; <label>:27:                                     ; preds = %21
  %28 = load i64*, i64** %8, align 8
  %29 = load i64*, i64** %10, align 8
  %30 = load i64, i64* %11, align 8
  %31 = call i64 @_Z12libjit_getXYPKmmm(i64* %29, i64 %30, i64 0)
  %32 = getelementptr inbounds i64, i64* %28, i64 %31
  %33 = load i64, i64* %32, align 8
  %34 = load i64, i64* %12, align 8
  %35 = icmp eq i64 %33, %34
  %36 = uitofp i1 %35 to float
  store float %36, float* %13, align 4
  %37 = load float*, float** %7, align 8
  %38 = load i64*, i64** %9, align 8
  %39 = load i64, i64* %11, align 8
  %40 = load i64, i64* %12, align 8
  %41 = call i64 @_Z12libjit_getXYPKmmm(i64* %38, i64 %39, i64 %40)
  %42 = getelementptr inbounds float, float* %37, i64 %41
  %43 = load float, float* %42, align 4
  %44 = load float, float* %13, align 4
  %45 = fsub reassoc nsz arcp contract float %43, %44
  %46 = load float*, float** %6, align 8
  %47 = load i64*, i64** %9, align 8
  %48 = load i64, i64* %11, align 8
  %49 = load i64, i64* %12, align 8
  %50 = call i64 @_Z12libjit_getXYPKmmm(i64* %47, i64 %48, i64 %49)
  %51 = getelementptr inbounds float, float* %46, i64 %50
  store float %45, float* %51, align 4
  br label %52

; <label>:52:                                     ; preds = %27
  %53 = load i64, i64* %12, align 8
  %54 = add i64 %53, 1
  store i64 %54, i64* %12, align 8
  br label %21

; <label>:55:                                     ; preds = %21
  br label %56

; <label>:56:                                     ; preds = %55
  %57 = load i64, i64* %11, align 8
  %58 = add i64 %57, 1
  store i64 %58, i64* %11, align 8
  br label %14

; <label>:59:                                     ; preds = %14
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @libjit_sigmoid_f(float*, float*, i64) #0 {
  %4 = alloca float*, align 8
  %5 = alloca float*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca float, align 4
  store float* %0, float** %4, align 8
  store float* %1, float** %5, align 8
  store i64 %2, i64* %6, align 8
  store i64 0, i64* %7, align 8
  br label %9

; <label>:9:                                      ; preds = %26, %3
  %10 = load i64, i64* %7, align 8
  %11 = load i64, i64* %6, align 8
  %12 = icmp ult i64 %10, %11
  br i1 %12, label %13, label %29

; <label>:13:                                     ; preds = %9
  %14 = load float*, float** %4, align 8
  %15 = load i64, i64* %7, align 8
  %16 = getelementptr inbounds float, float* %14, i64 %15
  %17 = load float, float* %16, align 4
  %18 = fsub reassoc nsz arcp float -0.000000e+00, %17
  %19 = call reassoc nsz arcp float @llvm.exp.f32(float %18)
  store float %19, float* %8, align 4
  %20 = load float, float* %8, align 4
  %21 = fadd reassoc nsz arcp contract float %20, 1.000000e+00
  %22 = fdiv reassoc nsz arcp float 1.000000e+00, %21
  %23 = load float*, float** %5, align 8
  %24 = load i64, i64* %7, align 8
  %25 = getelementptr inbounds float, float* %23, i64 %24
  store float %22, float* %25, align 4
  br label %26

; <label>:26:                                     ; preds = %13
  %27 = load i64, i64* %7, align 8
  %28 = add i64 %27, 1
  store i64 %28, i64* %7, align 8
  br label %9

; <label>:29:                                     ; preds = %9
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_topk_f(float*, i64*, float*, i64*, i64, i64, i64) #2 {
  %8 = alloca float*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca float*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store float* %0, float** %8, align 8
  store i64* %1, i64** %9, align 8
  store float* %2, float** %10, align 8
  store i64* %3, i64** %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  %15 = load float*, float** %8, align 8
  %16 = load i64*, i64** %9, align 8
  %17 = load float*, float** %10, align 8
  %18 = load i64*, i64** %11, align 8
  %19 = load i64, i64* %12, align 8
  %20 = load i64, i64* %13, align 8
  %21 = load i64, i64* %14, align 8
  call void @_ZN12_GLOBAL__N_111libjit_topkIfEEvPT_PmPKS1_S3_mmm(float* %15, i64* %16, float* %17, i64* %18, i64 %19, i64 %20, i64 %21)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_111libjit_topkIfEEvPT_PmPKS1_S3_mmm(float*, i64*, float*, i64*, i64, i64, i64) #2 {
  %8 = alloca float*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca float*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca %"struct.(anonymous namespace)::value_index"*, align 8
  %18 = alloca %"struct.(anonymous namespace)::value_index", align 8
  %19 = alloca i64, align 8
  %20 = alloca %"struct.(anonymous namespace)::value_index", align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  store float* %0, float** %8, align 8
  store i64* %1, i64** %9, align 8
  store float* %2, float** %10, align 8
  store i64* %3, i64** %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  store i64 0, i64* %15, align 8
  store i64 0, i64* %16, align 8
  %23 = load i64*, i64** %11, align 8
  %24 = bitcast i64* %23 to %"struct.(anonymous namespace)::value_index"*
  store %"struct.(anonymous namespace)::value_index"* %24, %"struct.(anonymous namespace)::value_index"** %17, align 8
  %25 = load i64, i64* %12, align 8
  %26 = icmp eq i64 %25, 1
  br i1 %26, label %27, label %86

; <label>:27:                                     ; preds = %7
  br label %28

; <label>:28:                                     ; preds = %69, %27
  %29 = load i64, i64* %15, align 8
  %30 = load i64, i64* %14, align 8
  %31 = icmp ult i64 %29, %30
  br i1 %31, label %32, label %85

; <label>:32:                                     ; preds = %28
  %33 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %18, i32 0, i32 0
  store i64 0, i64* %33, align 8
  %34 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %18, i32 0, i32 1
  %35 = load float*, float** %10, align 8
  %36 = load i64, i64* %15, align 8
  %37 = getelementptr inbounds float, float* %35, i64 %36
  %38 = load float, float* %37, align 4
  store float %38, float* %34, align 8
  store i64 1, i64* %19, align 8
  br label %39

; <label>:39:                                     ; preds = %66, %32
  %40 = load i64, i64* %19, align 8
  %41 = load i64, i64* %13, align 8
  %42 = icmp ult i64 %40, %41
  br i1 %42, label %43, label %69

; <label>:43:                                     ; preds = %39
  %44 = load float*, float** %10, align 8
  %45 = load i64, i64* %19, align 8
  %46 = load i64, i64* %15, align 8
  %47 = add i64 %45, %46
  %48 = getelementptr inbounds float, float* %44, i64 %47
  %49 = load float, float* %48, align 4
  %50 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %18, i32 0, i32 1
  %51 = load float, float* %50, align 8
  %52 = fcmp reassoc nsz arcp ogt float %49, %51
  br i1 %52, label %53, label %65

; <label>:53:                                     ; preds = %43
  %54 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %20, i32 0, i32 0
  %55 = load i64, i64* %19, align 8
  store i64 %55, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %20, i32 0, i32 1
  %57 = load float*, float** %10, align 8
  %58 = load i64, i64* %19, align 8
  %59 = load i64, i64* %15, align 8
  %60 = add i64 %58, %59
  %61 = getelementptr inbounds float, float* %57, i64 %60
  %62 = load float, float* %61, align 4
  store float %62, float* %56, align 8
  %63 = bitcast %"struct.(anonymous namespace)::value_index"* %18 to i8*
  %64 = bitcast %"struct.(anonymous namespace)::value_index"* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 16, i1 false)
  br label %65

; <label>:65:                                     ; preds = %53, %43
  br label %66

; <label>:66:                                     ; preds = %65
  %67 = load i64, i64* %19, align 8
  %68 = add i64 %67, 1
  store i64 %68, i64* %19, align 8
  br label %39

; <label>:69:                                     ; preds = %39
  %70 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %18, i32 0, i32 0
  %71 = load i64, i64* %70, align 8
  %72 = load i64*, i64** %9, align 8
  %73 = load i64, i64* %16, align 8
  %74 = getelementptr inbounds i64, i64* %72, i64 %73
  store i64 %71, i64* %74, align 8
  %75 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %18, i32 0, i32 1
  %76 = load float, float* %75, align 8
  %77 = load float*, float** %8, align 8
  %78 = load i64, i64* %16, align 8
  %79 = getelementptr inbounds float, float* %77, i64 %78
  store float %76, float* %79, align 4
  %80 = load i64, i64* %16, align 8
  %81 = add i64 %80, 1
  store i64 %81, i64* %16, align 8
  %82 = load i64, i64* %13, align 8
  %83 = load i64, i64* %15, align 8
  %84 = add i64 %83, %82
  store i64 %84, i64* %15, align 8
  br label %28

; <label>:85:                                     ; preds = %28
  br label %145

; <label>:86:                                     ; preds = %7
  br label %87

; <label>:87:                                     ; preds = %144, %86
  %88 = load i64, i64* %15, align 8
  %89 = load i64, i64* %14, align 8
  %90 = icmp ult i64 %88, %89
  br i1 %90, label %91, label %145

; <label>:91:                                     ; preds = %87
  store i64 0, i64* %21, align 8
  br label %92

; <label>:92:                                     ; preds = %111, %91
  %93 = load i64, i64* %21, align 8
  %94 = load i64, i64* %13, align 8
  %95 = icmp ult i64 %93, %94
  br i1 %95, label %96, label %114

; <label>:96:                                     ; preds = %92
  %97 = load i64, i64* %21, align 8
  %98 = load %"struct.(anonymous namespace)::value_index"*, %"struct.(anonymous namespace)::value_index"** %17, align 8
  %99 = load i64, i64* %21, align 8
  %100 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %98, i64 %99
  %101 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %100, i32 0, i32 0
  store i64 %97, i64* %101, align 8
  %102 = load float*, float** %10, align 8
  %103 = load i64, i64* %15, align 8
  %104 = add i64 %103, 1
  store i64 %104, i64* %15, align 8
  %105 = getelementptr inbounds float, float* %102, i64 %103
  %106 = load float, float* %105, align 4
  %107 = load %"struct.(anonymous namespace)::value_index"*, %"struct.(anonymous namespace)::value_index"** %17, align 8
  %108 = load i64, i64* %21, align 8
  %109 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %107, i64 %108
  %110 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %109, i32 0, i32 1
  store float %106, float* %110, align 8
  br label %111

; <label>:111:                                    ; preds = %96
  %112 = load i64, i64* %21, align 8
  %113 = add i64 %112, 1
  store i64 %113, i64* %21, align 8
  br label %92

; <label>:114:                                    ; preds = %92
  %115 = load %"struct.(anonymous namespace)::value_index"*, %"struct.(anonymous namespace)::value_index"** %17, align 8
  %116 = bitcast %"struct.(anonymous namespace)::value_index"* %115 to i8*
  %117 = load i64, i64* %13, align 8
  call void @qsort(i8* %116, i64 %117, i64 16, i32 (i8*, i8*)* @_ZN12_GLOBAL__N_116value_index_sortIfEEiPKvS2_)
  store i64 0, i64* %22, align 8
  br label %118

; <label>:118:                                    ; preds = %141, %114
  %119 = load i64, i64* %22, align 8
  %120 = load i64, i64* %12, align 8
  %121 = icmp ult i64 %119, %120
  br i1 %121, label %122, label %144

; <label>:122:                                    ; preds = %118
  %123 = load %"struct.(anonymous namespace)::value_index"*, %"struct.(anonymous namespace)::value_index"** %17, align 8
  %124 = load i64, i64* %22, align 8
  %125 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %123, i64 %124
  %126 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %125, i32 0, i32 0
  %127 = load i64, i64* %126, align 8
  %128 = load i64*, i64** %9, align 8
  %129 = load i64, i64* %16, align 8
  %130 = getelementptr inbounds i64, i64* %128, i64 %129
  store i64 %127, i64* %130, align 8
  %131 = load %"struct.(anonymous namespace)::value_index"*, %"struct.(anonymous namespace)::value_index"** %17, align 8
  %132 = load i64, i64* %22, align 8
  %133 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %131, i64 %132
  %134 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %133, i32 0, i32 1
  %135 = load float, float* %134, align 8
  %136 = load float*, float** %8, align 8
  %137 = load i64, i64* %16, align 8
  %138 = getelementptr inbounds float, float* %136, i64 %137
  store float %135, float* %138, align 4
  %139 = load i64, i64* %16, align 8
  %140 = add i64 %139, 1
  store i64 %140, i64* %16, align 8
  br label %141

; <label>:141:                                    ; preds = %122
  %142 = load i64, i64* %22, align 8
  %143 = add i64 %142, 1
  store i64 %143, i64* %22, align 8
  br label %118

; <label>:144:                                    ; preds = %118
  br label %87

; <label>:145:                                    ; preds = %85, %87
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @_ZN12_GLOBAL__N_116value_index_sortIfEEiPKvS2_(i8*, i8*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %"struct.(anonymous namespace)::value_index"*, align 8
  %7 = alloca %"struct.(anonymous namespace)::value_index"*, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  %8 = load i8*, i8** %4, align 8
  %9 = bitcast i8* %8 to %"struct.(anonymous namespace)::value_index"*
  store %"struct.(anonymous namespace)::value_index"* %9, %"struct.(anonymous namespace)::value_index"** %6, align 8
  %10 = load i8*, i8** %5, align 8
  %11 = bitcast i8* %10 to %"struct.(anonymous namespace)::value_index"*
  store %"struct.(anonymous namespace)::value_index"* %11, %"struct.(anonymous namespace)::value_index"** %7, align 8
  %12 = load %"struct.(anonymous namespace)::value_index"*, %"struct.(anonymous namespace)::value_index"** %6, align 8
  %13 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %12, i32 0, i32 1
  %14 = load float, float* %13, align 8
  %15 = load %"struct.(anonymous namespace)::value_index"*, %"struct.(anonymous namespace)::value_index"** %7, align 8
  %16 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %15, i32 0, i32 1
  %17 = load float, float* %16, align 8
  %18 = fcmp reassoc nsz arcp une float %14, %17
  br i1 %18, label %19, label %29

; <label>:19:                                     ; preds = %2
  %20 = load %"struct.(anonymous namespace)::value_index"*, %"struct.(anonymous namespace)::value_index"** %6, align 8
  %21 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %20, i32 0, i32 1
  %22 = load float, float* %21, align 8
  %23 = load %"struct.(anonymous namespace)::value_index"*, %"struct.(anonymous namespace)::value_index"** %7, align 8
  %24 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %23, i32 0, i32 1
  %25 = load float, float* %24, align 8
  %26 = fcmp reassoc nsz arcp ogt float %22, %25
  %27 = zext i1 %26 to i64
  %28 = select i1 %26, i32 -1, i32 1
  store i32 %28, i32* %3, align 4
  br label %39

; <label>:29:                                     ; preds = %2
  %30 = load %"struct.(anonymous namespace)::value_index"*, %"struct.(anonymous namespace)::value_index"** %6, align 8
  %31 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %30, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = load %"struct.(anonymous namespace)::value_index"*, %"struct.(anonymous namespace)::value_index"** %7, align 8
  %34 = getelementptr inbounds %"struct.(anonymous namespace)::value_index", %"struct.(anonymous namespace)::value_index"* %33, i32 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = icmp ult i64 %32, %35
  %37 = zext i1 %36 to i64
  %38 = select i1 %36, i32 -1, i32 1
  store i32 %38, i32* %3, align 4
  br label %39

; <label>:39:                                     ; preds = %29, %19
  %40 = load i32, i32* %3, align 4
  ret i32 %40
}

declare dso_local void @qsort(i8*, i64, i64, i32 (i8*, i8*)*) #4

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_topk_i8(i8*, i64*, i8*, i64*, i64, i64, i64) #2 {
  %8 = alloca i8*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store i8* %0, i8** %8, align 8
  store i64* %1, i64** %9, align 8
  store i8* %2, i8** %10, align 8
  store i64* %3, i64** %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  %15 = load i8*, i8** %8, align 8
  %16 = load i64*, i64** %9, align 8
  %17 = load i8*, i8** %10, align 8
  %18 = load i64*, i64** %11, align 8
  %19 = load i64, i64* %12, align 8
  %20 = load i64, i64* %13, align 8
  %21 = load i64, i64* %14, align 8
  call void @_ZN12_GLOBAL__N_111libjit_topkIaEEvPT_PmPKS1_S3_mmm(i8* %15, i64* %16, i8* %17, i64* %18, i64 %19, i64 %20, i64 %21)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_111libjit_topkIaEEvPT_PmPKS1_S3_mmm(i8*, i64*, i8*, i64*, i64, i64, i64) #2 {
  %8 = alloca i8*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca %"struct.(anonymous namespace)::value_index.1"*, align 8
  %18 = alloca %"struct.(anonymous namespace)::value_index.1", align 8
  %19 = alloca i64, align 8
  %20 = alloca %"struct.(anonymous namespace)::value_index.1", align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  store i8* %0, i8** %8, align 8
  store i64* %1, i64** %9, align 8
  store i8* %2, i8** %10, align 8
  store i64* %3, i64** %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  store i64 0, i64* %15, align 8
  store i64 0, i64* %16, align 8
  %23 = load i64*, i64** %11, align 8
  %24 = bitcast i64* %23 to %"struct.(anonymous namespace)::value_index.1"*
  store %"struct.(anonymous namespace)::value_index.1"* %24, %"struct.(anonymous namespace)::value_index.1"** %17, align 8
  %25 = load i64, i64* %12, align 8
  %26 = icmp eq i64 %25, 1
  br i1 %26, label %27, label %88

; <label>:27:                                     ; preds = %7
  br label %28

; <label>:28:                                     ; preds = %71, %27
  %29 = load i64, i64* %15, align 8
  %30 = load i64, i64* %14, align 8
  %31 = icmp ult i64 %29, %30
  br i1 %31, label %32, label %87

; <label>:32:                                     ; preds = %28
  %33 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %18, i32 0, i32 0
  store i64 0, i64* %33, align 8
  %34 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %18, i32 0, i32 1
  %35 = load i8*, i8** %10, align 8
  %36 = load i64, i64* %15, align 8
  %37 = getelementptr inbounds i8, i8* %35, i64 %36
  %38 = load i8, i8* %37, align 1
  store i8 %38, i8* %34, align 8
  store i64 1, i64* %19, align 8
  br label %39

; <label>:39:                                     ; preds = %68, %32
  %40 = load i64, i64* %19, align 8
  %41 = load i64, i64* %13, align 8
  %42 = icmp ult i64 %40, %41
  br i1 %42, label %43, label %71

; <label>:43:                                     ; preds = %39
  %44 = load i8*, i8** %10, align 8
  %45 = load i64, i64* %19, align 8
  %46 = load i64, i64* %15, align 8
  %47 = add i64 %45, %46
  %48 = getelementptr inbounds i8, i8* %44, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = sext i8 %49 to i32
  %51 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %18, i32 0, i32 1
  %52 = load i8, i8* %51, align 8
  %53 = sext i8 %52 to i32
  %54 = icmp sgt i32 %50, %53
  br i1 %54, label %55, label %67

; <label>:55:                                     ; preds = %43
  %56 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %20, i32 0, i32 0
  %57 = load i64, i64* %19, align 8
  store i64 %57, i64* %56, align 8
  %58 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %20, i32 0, i32 1
  %59 = load i8*, i8** %10, align 8
  %60 = load i64, i64* %19, align 8
  %61 = load i64, i64* %15, align 8
  %62 = add i64 %60, %61
  %63 = getelementptr inbounds i8, i8* %59, i64 %62
  %64 = load i8, i8* %63, align 1
  store i8 %64, i8* %58, align 8
  %65 = bitcast %"struct.(anonymous namespace)::value_index.1"* %18 to i8*
  %66 = bitcast %"struct.(anonymous namespace)::value_index.1"* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 16, i1 false)
  br label %67

; <label>:67:                                     ; preds = %55, %43
  br label %68

; <label>:68:                                     ; preds = %67
  %69 = load i64, i64* %19, align 8
  %70 = add i64 %69, 1
  store i64 %70, i64* %19, align 8
  br label %39

; <label>:71:                                     ; preds = %39
  %72 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %18, i32 0, i32 0
  %73 = load i64, i64* %72, align 8
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %16, align 8
  %76 = getelementptr inbounds i64, i64* %74, i64 %75
  store i64 %73, i64* %76, align 8
  %77 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %18, i32 0, i32 1
  %78 = load i8, i8* %77, align 8
  %79 = load i8*, i8** %8, align 8
  %80 = load i64, i64* %16, align 8
  %81 = getelementptr inbounds i8, i8* %79, i64 %80
  store i8 %78, i8* %81, align 1
  %82 = load i64, i64* %16, align 8
  %83 = add i64 %82, 1
  store i64 %83, i64* %16, align 8
  %84 = load i64, i64* %13, align 8
  %85 = load i64, i64* %15, align 8
  %86 = add i64 %85, %84
  store i64 %86, i64* %15, align 8
  br label %28

; <label>:87:                                     ; preds = %28
  br label %147

; <label>:88:                                     ; preds = %7
  br label %89

; <label>:89:                                     ; preds = %146, %88
  %90 = load i64, i64* %15, align 8
  %91 = load i64, i64* %14, align 8
  %92 = icmp ult i64 %90, %91
  br i1 %92, label %93, label %147

; <label>:93:                                     ; preds = %89
  store i64 0, i64* %21, align 8
  br label %94

; <label>:94:                                     ; preds = %113, %93
  %95 = load i64, i64* %21, align 8
  %96 = load i64, i64* %13, align 8
  %97 = icmp ult i64 %95, %96
  br i1 %97, label %98, label %116

; <label>:98:                                     ; preds = %94
  %99 = load i64, i64* %21, align 8
  %100 = load %"struct.(anonymous namespace)::value_index.1"*, %"struct.(anonymous namespace)::value_index.1"** %17, align 8
  %101 = load i64, i64* %21, align 8
  %102 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %100, i64 %101
  %103 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %102, i32 0, i32 0
  store i64 %99, i64* %103, align 8
  %104 = load i8*, i8** %10, align 8
  %105 = load i64, i64* %15, align 8
  %106 = add i64 %105, 1
  store i64 %106, i64* %15, align 8
  %107 = getelementptr inbounds i8, i8* %104, i64 %105
  %108 = load i8, i8* %107, align 1
  %109 = load %"struct.(anonymous namespace)::value_index.1"*, %"struct.(anonymous namespace)::value_index.1"** %17, align 8
  %110 = load i64, i64* %21, align 8
  %111 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %109, i64 %110
  %112 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %111, i32 0, i32 1
  store i8 %108, i8* %112, align 8
  br label %113

; <label>:113:                                    ; preds = %98
  %114 = load i64, i64* %21, align 8
  %115 = add i64 %114, 1
  store i64 %115, i64* %21, align 8
  br label %94

; <label>:116:                                    ; preds = %94
  %117 = load %"struct.(anonymous namespace)::value_index.1"*, %"struct.(anonymous namespace)::value_index.1"** %17, align 8
  %118 = bitcast %"struct.(anonymous namespace)::value_index.1"* %117 to i8*
  %119 = load i64, i64* %13, align 8
  call void @qsort(i8* %118, i64 %119, i64 16, i32 (i8*, i8*)* @_ZN12_GLOBAL__N_116value_index_sortIaEEiPKvS2_)
  store i64 0, i64* %22, align 8
  br label %120

; <label>:120:                                    ; preds = %143, %116
  %121 = load i64, i64* %22, align 8
  %122 = load i64, i64* %12, align 8
  %123 = icmp ult i64 %121, %122
  br i1 %123, label %124, label %146

; <label>:124:                                    ; preds = %120
  %125 = load %"struct.(anonymous namespace)::value_index.1"*, %"struct.(anonymous namespace)::value_index.1"** %17, align 8
  %126 = load i64, i64* %22, align 8
  %127 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %125, i64 %126
  %128 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %127, i32 0, i32 0
  %129 = load i64, i64* %128, align 8
  %130 = load i64*, i64** %9, align 8
  %131 = load i64, i64* %16, align 8
  %132 = getelementptr inbounds i64, i64* %130, i64 %131
  store i64 %129, i64* %132, align 8
  %133 = load %"struct.(anonymous namespace)::value_index.1"*, %"struct.(anonymous namespace)::value_index.1"** %17, align 8
  %134 = load i64, i64* %22, align 8
  %135 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %133, i64 %134
  %136 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %135, i32 0, i32 1
  %137 = load i8, i8* %136, align 8
  %138 = load i8*, i8** %8, align 8
  %139 = load i64, i64* %16, align 8
  %140 = getelementptr inbounds i8, i8* %138, i64 %139
  store i8 %137, i8* %140, align 1
  %141 = load i64, i64* %16, align 8
  %142 = add i64 %141, 1
  store i64 %142, i64* %16, align 8
  br label %143

; <label>:143:                                    ; preds = %124
  %144 = load i64, i64* %22, align 8
  %145 = add i64 %144, 1
  store i64 %145, i64* %22, align 8
  br label %120

; <label>:146:                                    ; preds = %120
  br label %89

; <label>:147:                                    ; preds = %87, %89
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @_ZN12_GLOBAL__N_116value_index_sortIaEEiPKvS2_(i8*, i8*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %"struct.(anonymous namespace)::value_index.1"*, align 8
  %7 = alloca %"struct.(anonymous namespace)::value_index.1"*, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  %8 = load i8*, i8** %4, align 8
  %9 = bitcast i8* %8 to %"struct.(anonymous namespace)::value_index.1"*
  store %"struct.(anonymous namespace)::value_index.1"* %9, %"struct.(anonymous namespace)::value_index.1"** %6, align 8
  %10 = load i8*, i8** %5, align 8
  %11 = bitcast i8* %10 to %"struct.(anonymous namespace)::value_index.1"*
  store %"struct.(anonymous namespace)::value_index.1"* %11, %"struct.(anonymous namespace)::value_index.1"** %7, align 8
  %12 = load %"struct.(anonymous namespace)::value_index.1"*, %"struct.(anonymous namespace)::value_index.1"** %6, align 8
  %13 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %12, i32 0, i32 1
  %14 = load i8, i8* %13, align 8
  %15 = sext i8 %14 to i32
  %16 = load %"struct.(anonymous namespace)::value_index.1"*, %"struct.(anonymous namespace)::value_index.1"** %7, align 8
  %17 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %16, i32 0, i32 1
  %18 = load i8, i8* %17, align 8
  %19 = sext i8 %18 to i32
  %20 = icmp ne i32 %15, %19
  br i1 %20, label %21, label %33

; <label>:21:                                     ; preds = %2
  %22 = load %"struct.(anonymous namespace)::value_index.1"*, %"struct.(anonymous namespace)::value_index.1"** %6, align 8
  %23 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %22, i32 0, i32 1
  %24 = load i8, i8* %23, align 8
  %25 = sext i8 %24 to i32
  %26 = load %"struct.(anonymous namespace)::value_index.1"*, %"struct.(anonymous namespace)::value_index.1"** %7, align 8
  %27 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %26, i32 0, i32 1
  %28 = load i8, i8* %27, align 8
  %29 = sext i8 %28 to i32
  %30 = icmp sgt i32 %25, %29
  %31 = zext i1 %30 to i64
  %32 = select i1 %30, i32 -1, i32 1
  store i32 %32, i32* %3, align 4
  br label %43

; <label>:33:                                     ; preds = %2
  %34 = load %"struct.(anonymous namespace)::value_index.1"*, %"struct.(anonymous namespace)::value_index.1"** %6, align 8
  %35 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %34, i32 0, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = load %"struct.(anonymous namespace)::value_index.1"*, %"struct.(anonymous namespace)::value_index.1"** %7, align 8
  %38 = getelementptr inbounds %"struct.(anonymous namespace)::value_index.1", %"struct.(anonymous namespace)::value_index.1"* %37, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp ult i64 %36, %39
  %41 = zext i1 %40 to i64
  %42 = select i1 %40, i32 -1, i32 1
  store i32 %42, i32* %3, align 4
  br label %43

; <label>:43:                                     ; preds = %33, %21
  %44 = load i32, i32* %3, align 4
  ret i32 %44
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_transpose_i8(i8*, i8*, i64*, i64*, i64*, i64) #2 {
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64, align 8
  store i8* %0, i8** %7, align 8
  store i8* %1, i8** %8, align 8
  store i64* %2, i64** %9, align 8
  store i64* %3, i64** %10, align 8
  store i64* %4, i64** %11, align 8
  store i64 %5, i64* %12, align 8
  %13 = load i8*, i8** %7, align 8
  %14 = load i8*, i8** %8, align 8
  %15 = load i64*, i64** %9, align 8
  %16 = load i64*, i64** %10, align 8
  %17 = load i64*, i64** %11, align 8
  %18 = load i64, i64* %12, align 8
  call void @_ZN12_GLOBAL__N_124libjit_transpose_genericIaEEvPKT_PS1_PKmS6_S6_m(i8* %13, i8* %14, i64* %15, i64* %16, i64* %17, i64 %18)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_124libjit_transpose_genericIaEEvPKT_PS1_PKmS6_S6_m(i8*, i8*, i64*, i64*, i64*, i64) #2 {
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  %14 = alloca [5 x i64], align 16
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  store i8* %0, i8** %7, align 8
  store i8* %1, i8** %8, align 8
  store i64* %2, i64** %9, align 8
  store i64* %3, i64** %10, align 8
  store i64* %4, i64** %11, align 8
  store i64 %5, i64* %12, align 8
  store i32 64, i32* %13, align 4
  %33 = load i64, i64* %12, align 8
  %34 = icmp eq i64 %33, 5
  br i1 %34, label %35, label %140

; <label>:35:                                     ; preds = %6
  store i64 0, i64* %15, align 8
  br label %36

; <label>:36:                                     ; preds = %136, %35
  %37 = load i64, i64* %15, align 8
  %38 = load i64*, i64** %10, align 8
  %39 = getelementptr inbounds i64, i64* %38, i64 0
  %40 = load i64, i64* %39, align 8
  %41 = icmp ult i64 %37, %40
  br i1 %41, label %42, label %139

; <label>:42:                                     ; preds = %36
  store i64 0, i64* %16, align 8
  br label %43

; <label>:43:                                     ; preds = %132, %42
  %44 = load i64, i64* %16, align 8
  %45 = load i64*, i64** %10, align 8
  %46 = getelementptr inbounds i64, i64* %45, i64 1
  %47 = load i64, i64* %46, align 8
  %48 = icmp ult i64 %44, %47
  br i1 %48, label %49, label %135

; <label>:49:                                     ; preds = %43
  store i64 0, i64* %17, align 8
  br label %50

; <label>:50:                                     ; preds = %128, %49
  %51 = load i64, i64* %17, align 8
  %52 = load i64*, i64** %10, align 8
  %53 = getelementptr inbounds i64, i64* %52, i64 2
  %54 = load i64, i64* %53, align 8
  %55 = icmp ult i64 %51, %54
  br i1 %55, label %56, label %131

; <label>:56:                                     ; preds = %50
  store i64 0, i64* %18, align 8
  br label %57

; <label>:57:                                     ; preds = %124, %56
  %58 = load i64, i64* %18, align 8
  %59 = load i64*, i64** %10, align 8
  %60 = getelementptr inbounds i64, i64* %59, i64 3
  %61 = load i64, i64* %60, align 8
  %62 = icmp ult i64 %58, %61
  br i1 %62, label %63, label %127

; <label>:63:                                     ; preds = %57
  store i64 0, i64* %19, align 8
  br label %64

; <label>:64:                                     ; preds = %120, %63
  %65 = load i64, i64* %19, align 8
  %66 = load i64*, i64** %10, align 8
  %67 = getelementptr inbounds i64, i64* %66, i64 4
  %68 = load i64, i64* %67, align 8
  %69 = icmp ult i64 %65, %68
  br i1 %69, label %70, label %123

; <label>:70:                                     ; preds = %64
  %71 = load i64, i64* %15, align 8
  %72 = load i64*, i64** %11, align 8
  %73 = getelementptr inbounds i64, i64* %72, i64 0
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %74
  store i64 %71, i64* %75, align 8
  %76 = load i64, i64* %16, align 8
  %77 = load i64*, i64** %11, align 8
  %78 = getelementptr inbounds i64, i64* %77, i64 1
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %79
  store i64 %76, i64* %80, align 8
  %81 = load i64, i64* %17, align 8
  %82 = load i64*, i64** %11, align 8
  %83 = getelementptr inbounds i64, i64* %82, i64 2
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %84
  store i64 %81, i64* %85, align 8
  %86 = load i64, i64* %18, align 8
  %87 = load i64*, i64** %11, align 8
  %88 = getelementptr inbounds i64, i64* %87, i64 3
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %89
  store i64 %86, i64* %90, align 8
  %91 = load i64, i64* %19, align 8
  %92 = load i64*, i64** %11, align 8
  %93 = getelementptr inbounds i64, i64* %92, i64 4
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %94
  store i64 %91, i64* %95, align 8
  %96 = load i8*, i8** %7, align 8
  %97 = load i64*, i64** %9, align 8
  %98 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 0
  %99 = load i64, i64* %98, align 16
  %100 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 1
  %101 = load i64, i64* %100, align 8
  %102 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 2
  %103 = load i64, i64* %102, align 16
  %104 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 3
  %105 = load i64, i64* %104, align 8
  %106 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 4
  %107 = load i64, i64* %106, align 16
  %108 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %97, i64 %99, i64 %101, i64 %103, i64 %105, i64 %107)
  %109 = getelementptr inbounds i8, i8* %96, i64 %108
  %110 = load i8, i8* %109, align 1
  %111 = load i8*, i8** %8, align 8
  %112 = load i64*, i64** %10, align 8
  %113 = load i64, i64* %15, align 8
  %114 = load i64, i64* %16, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load i64, i64* %18, align 8
  %117 = load i64, i64* %19, align 8
  %118 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %112, i64 %113, i64 %114, i64 %115, i64 %116, i64 %117)
  %119 = getelementptr inbounds i8, i8* %111, i64 %118
  store i8 %110, i8* %119, align 1
  br label %120

; <label>:120:                                    ; preds = %70
  %121 = load i64, i64* %19, align 8
  %122 = add i64 %121, 1
  store i64 %122, i64* %19, align 8
  br label %64

; <label>:123:                                    ; preds = %64
  br label %124

; <label>:124:                                    ; preds = %123
  %125 = load i64, i64* %18, align 8
  %126 = add i64 %125, 1
  store i64 %126, i64* %18, align 8
  br label %57

; <label>:127:                                    ; preds = %57
  br label %128

; <label>:128:                                    ; preds = %127
  %129 = load i64, i64* %17, align 8
  %130 = add i64 %129, 1
  store i64 %130, i64* %17, align 8
  br label %50

; <label>:131:                                    ; preds = %50
  br label %132

; <label>:132:                                    ; preds = %131
  %133 = load i64, i64* %16, align 8
  %134 = add i64 %133, 1
  store i64 %134, i64* %16, align 8
  br label %43

; <label>:135:                                    ; preds = %43
  br label %136

; <label>:136:                                    ; preds = %135
  %137 = load i64, i64* %15, align 8
  %138 = add i64 %137, 1
  store i64 %138, i64* %15, align 8
  br label %36

; <label>:139:                                    ; preds = %36
  br label %446

; <label>:140:                                    ; preds = %6
  %141 = load i64, i64* %12, align 8
  %142 = icmp eq i64 %141, 4
  br i1 %142, label %143, label %229

; <label>:143:                                    ; preds = %140
  store i64 0, i64* %20, align 8
  br label %144

; <label>:144:                                    ; preds = %225, %143
  %145 = load i64, i64* %20, align 8
  %146 = load i64*, i64** %10, align 8
  %147 = getelementptr inbounds i64, i64* %146, i64 0
  %148 = load i64, i64* %147, align 8
  %149 = icmp ult i64 %145, %148
  br i1 %149, label %150, label %228

; <label>:150:                                    ; preds = %144
  store i64 0, i64* %21, align 8
  br label %151

; <label>:151:                                    ; preds = %221, %150
  %152 = load i64, i64* %21, align 8
  %153 = load i64*, i64** %10, align 8
  %154 = getelementptr inbounds i64, i64* %153, i64 1
  %155 = load i64, i64* %154, align 8
  %156 = icmp ult i64 %152, %155
  br i1 %156, label %157, label %224

; <label>:157:                                    ; preds = %151
  store i64 0, i64* %22, align 8
  br label %158

; <label>:158:                                    ; preds = %217, %157
  %159 = load i64, i64* %22, align 8
  %160 = load i64*, i64** %10, align 8
  %161 = getelementptr inbounds i64, i64* %160, i64 2
  %162 = load i64, i64* %161, align 8
  %163 = icmp ult i64 %159, %162
  br i1 %163, label %164, label %220

; <label>:164:                                    ; preds = %158
  store i64 0, i64* %23, align 8
  br label %165

; <label>:165:                                    ; preds = %213, %164
  %166 = load i64, i64* %23, align 8
  %167 = load i64*, i64** %10, align 8
  %168 = getelementptr inbounds i64, i64* %167, i64 3
  %169 = load i64, i64* %168, align 8
  %170 = icmp ult i64 %166, %169
  br i1 %170, label %171, label %216

; <label>:171:                                    ; preds = %165
  %172 = load i64, i64* %20, align 8
  %173 = load i64*, i64** %11, align 8
  %174 = getelementptr inbounds i64, i64* %173, i64 0
  %175 = load i64, i64* %174, align 8
  %176 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %175
  store i64 %172, i64* %176, align 8
  %177 = load i64, i64* %21, align 8
  %178 = load i64*, i64** %11, align 8
  %179 = getelementptr inbounds i64, i64* %178, i64 1
  %180 = load i64, i64* %179, align 8
  %181 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %180
  store i64 %177, i64* %181, align 8
  %182 = load i64, i64* %22, align 8
  %183 = load i64*, i64** %11, align 8
  %184 = getelementptr inbounds i64, i64* %183, i64 2
  %185 = load i64, i64* %184, align 8
  %186 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %185
  store i64 %182, i64* %186, align 8
  %187 = load i64, i64* %23, align 8
  %188 = load i64*, i64** %11, align 8
  %189 = getelementptr inbounds i64, i64* %188, i64 3
  %190 = load i64, i64* %189, align 8
  %191 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %190
  store i64 %187, i64* %191, align 8
  %192 = load i8*, i8** %7, align 8
  %193 = load i64*, i64** %9, align 8
  %194 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 0
  %195 = load i64, i64* %194, align 16
  %196 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 1
  %197 = load i64, i64* %196, align 8
  %198 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 2
  %199 = load i64, i64* %198, align 16
  %200 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 3
  %201 = load i64, i64* %200, align 8
  %202 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %193, i64 %195, i64 %197, i64 %199, i64 %201)
  %203 = getelementptr inbounds i8, i8* %192, i64 %202
  %204 = load i8, i8* %203, align 1
  %205 = load i8*, i8** %8, align 8
  %206 = load i64*, i64** %10, align 8
  %207 = load i64, i64* %20, align 8
  %208 = load i64, i64* %21, align 8
  %209 = load i64, i64* %22, align 8
  %210 = load i64, i64* %23, align 8
  %211 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %206, i64 %207, i64 %208, i64 %209, i64 %210)
  %212 = getelementptr inbounds i8, i8* %205, i64 %211
  store i8 %204, i8* %212, align 1
  br label %213

; <label>:213:                                    ; preds = %171
  %214 = load i64, i64* %23, align 8
  %215 = add i64 %214, 1
  store i64 %215, i64* %23, align 8
  br label %165

; <label>:216:                                    ; preds = %165
  br label %217

; <label>:217:                                    ; preds = %216
  %218 = load i64, i64* %22, align 8
  %219 = add i64 %218, 1
  store i64 %219, i64* %22, align 8
  br label %158

; <label>:220:                                    ; preds = %158
  br label %221

; <label>:221:                                    ; preds = %220
  %222 = load i64, i64* %21, align 8
  %223 = add i64 %222, 1
  store i64 %223, i64* %21, align 8
  br label %151

; <label>:224:                                    ; preds = %151
  br label %225

; <label>:225:                                    ; preds = %224
  %226 = load i64, i64* %20, align 8
  %227 = add i64 %226, 1
  store i64 %227, i64* %20, align 8
  br label %144

; <label>:228:                                    ; preds = %144
  br label %446

; <label>:229:                                    ; preds = %140
  %230 = load i64, i64* %12, align 8
  %231 = icmp eq i64 %230, 3
  br i1 %231, label %232, label %347

; <label>:232:                                    ; preds = %229
  store i64 0, i64* %24, align 8
  br label %233

; <label>:233:                                    ; preds = %343, %232
  %234 = load i64, i64* %24, align 8
  %235 = load i64*, i64** %10, align 8
  %236 = getelementptr inbounds i64, i64* %235, i64 0
  %237 = load i64, i64* %236, align 8
  %238 = icmp ult i64 %234, %237
  br i1 %238, label %239, label %346

; <label>:239:                                    ; preds = %233
  store i64 0, i64* %25, align 8
  br label %240

; <label>:240:                                    ; preds = %339, %239
  %241 = load i64, i64* %25, align 8
  %242 = load i64*, i64** %10, align 8
  %243 = getelementptr inbounds i64, i64* %242, i64 1
  %244 = load i64, i64* %243, align 8
  %245 = icmp ult i64 %241, %244
  br i1 %245, label %246, label %342

; <label>:246:                                    ; preds = %240
  store i64 0, i64* %26, align 8
  br label %247

; <label>:247:                                    ; preds = %335, %246
  %248 = load i64, i64* %26, align 8
  %249 = load i64*, i64** %10, align 8
  %250 = getelementptr inbounds i64, i64* %249, i64 2
  %251 = load i64, i64* %250, align 8
  %252 = icmp ult i64 %248, %251
  br i1 %252, label %253, label %338

; <label>:253:                                    ; preds = %247
  %254 = load i64, i64* %25, align 8
  store i64 %254, i64* %27, align 8
  br label %255

; <label>:255:                                    ; preds = %331, %253
  %256 = load i64, i64* %27, align 8
  %257 = load i64, i64* %25, align 8
  %258 = add i64 %257, 64
  %259 = load i64*, i64** %10, align 8
  %260 = getelementptr inbounds i64, i64* %259, i64 1
  %261 = load i64, i64* %260, align 8
  %262 = icmp ult i64 %258, %261
  br i1 %262, label %263, label %266

; <label>:263:                                    ; preds = %255
  %264 = load i64, i64* %25, align 8
  %265 = add i64 %264, 64
  br label %270

; <label>:266:                                    ; preds = %255
  %267 = load i64*, i64** %10, align 8
  %268 = getelementptr inbounds i64, i64* %267, i64 1
  %269 = load i64, i64* %268, align 8
  br label %270

; <label>:270:                                    ; preds = %266, %263
  %271 = phi i64 [ %265, %263 ], [ %269, %266 ]
  %272 = icmp ult i64 %256, %271
  br i1 %272, label %273, label %334

; <label>:273:                                    ; preds = %270
  %274 = load i64, i64* %26, align 8
  store i64 %274, i64* %28, align 8
  br label %275

; <label>:275:                                    ; preds = %327, %273
  %276 = load i64, i64* %28, align 8
  %277 = load i64, i64* %26, align 8
  %278 = add i64 %277, 64
  %279 = load i64*, i64** %10, align 8
  %280 = getelementptr inbounds i64, i64* %279, i64 2
  %281 = load i64, i64* %280, align 8
  %282 = icmp ult i64 %278, %281
  br i1 %282, label %283, label %286

; <label>:283:                                    ; preds = %275
  %284 = load i64, i64* %26, align 8
  %285 = add i64 %284, 64
  br label %290

; <label>:286:                                    ; preds = %275
  %287 = load i64*, i64** %10, align 8
  %288 = getelementptr inbounds i64, i64* %287, i64 2
  %289 = load i64, i64* %288, align 8
  br label %290

; <label>:290:                                    ; preds = %286, %283
  %291 = phi i64 [ %285, %283 ], [ %289, %286 ]
  %292 = icmp ult i64 %276, %291
  br i1 %292, label %293, label %330

; <label>:293:                                    ; preds = %290
  %294 = load i64, i64* %24, align 8
  %295 = load i64*, i64** %11, align 8
  %296 = getelementptr inbounds i64, i64* %295, i64 0
  %297 = load i64, i64* %296, align 8
  %298 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %297
  store i64 %294, i64* %298, align 8
  %299 = load i64, i64* %27, align 8
  %300 = load i64*, i64** %11, align 8
  %301 = getelementptr inbounds i64, i64* %300, i64 1
  %302 = load i64, i64* %301, align 8
  %303 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %302
  store i64 %299, i64* %303, align 8
  %304 = load i64, i64* %28, align 8
  %305 = load i64*, i64** %11, align 8
  %306 = getelementptr inbounds i64, i64* %305, i64 2
  %307 = load i64, i64* %306, align 8
  %308 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %307
  store i64 %304, i64* %308, align 8
  %309 = load i8*, i8** %7, align 8
  %310 = load i64*, i64** %9, align 8
  %311 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 0
  %312 = load i64, i64* %311, align 16
  %313 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 1
  %314 = load i64, i64* %313, align 8
  %315 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 2
  %316 = load i64, i64* %315, align 16
  %317 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %310, i64 %312, i64 %314, i64 %316)
  %318 = getelementptr inbounds i8, i8* %309, i64 %317
  %319 = load i8, i8* %318, align 1
  %320 = load i8*, i8** %8, align 8
  %321 = load i64*, i64** %10, align 8
  %322 = load i64, i64* %24, align 8
  %323 = load i64, i64* %27, align 8
  %324 = load i64, i64* %28, align 8
  %325 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %321, i64 %322, i64 %323, i64 %324)
  %326 = getelementptr inbounds i8, i8* %320, i64 %325
  store i8 %319, i8* %326, align 1
  br label %327

; <label>:327:                                    ; preds = %293
  %328 = load i64, i64* %28, align 8
  %329 = add i64 %328, 1
  store i64 %329, i64* %28, align 8
  br label %275

; <label>:330:                                    ; preds = %290
  br label %331

; <label>:331:                                    ; preds = %330
  %332 = load i64, i64* %27, align 8
  %333 = add i64 %332, 1
  store i64 %333, i64* %27, align 8
  br label %255

; <label>:334:                                    ; preds = %270
  br label %335

; <label>:335:                                    ; preds = %334
  %336 = load i64, i64* %26, align 8
  %337 = add i64 %336, 64
  store i64 %337, i64* %26, align 8
  br label %247

; <label>:338:                                    ; preds = %247
  br label %339

; <label>:339:                                    ; preds = %338
  %340 = load i64, i64* %25, align 8
  %341 = add i64 %340, 64
  store i64 %341, i64* %25, align 8
  br label %240

; <label>:342:                                    ; preds = %240
  br label %343

; <label>:343:                                    ; preds = %342
  %344 = load i64, i64* %24, align 8
  %345 = add i64 %344, 1
  store i64 %345, i64* %24, align 8
  br label %233

; <label>:346:                                    ; preds = %233
  br label %446

; <label>:347:                                    ; preds = %229
  %348 = load i64, i64* %12, align 8
  %349 = icmp eq i64 %348, 2
  br i1 %349, label %350, label %446

; <label>:350:                                    ; preds = %347
  store i64 0, i64* %29, align 8
  br label %351

; <label>:351:                                    ; preds = %442, %350
  %352 = load i64, i64* %29, align 8
  %353 = load i64*, i64** %10, align 8
  %354 = getelementptr inbounds i64, i64* %353, i64 0
  %355 = load i64, i64* %354, align 8
  %356 = icmp ult i64 %352, %355
  br i1 %356, label %357, label %445

; <label>:357:                                    ; preds = %351
  store i64 0, i64* %30, align 8
  br label %358

; <label>:358:                                    ; preds = %438, %357
  %359 = load i64, i64* %30, align 8
  %360 = load i64*, i64** %10, align 8
  %361 = getelementptr inbounds i64, i64* %360, i64 1
  %362 = load i64, i64* %361, align 8
  %363 = icmp ult i64 %359, %362
  br i1 %363, label %364, label %441

; <label>:364:                                    ; preds = %358
  %365 = load i64, i64* %29, align 8
  store i64 %365, i64* %31, align 8
  br label %366

; <label>:366:                                    ; preds = %434, %364
  %367 = load i64, i64* %31, align 8
  %368 = load i64, i64* %29, align 8
  %369 = add i64 %368, 64
  %370 = load i64*, i64** %10, align 8
  %371 = getelementptr inbounds i64, i64* %370, i64 0
  %372 = load i64, i64* %371, align 8
  %373 = icmp ult i64 %369, %372
  br i1 %373, label %374, label %377

; <label>:374:                                    ; preds = %366
  %375 = load i64, i64* %29, align 8
  %376 = add i64 %375, 64
  br label %381

; <label>:377:                                    ; preds = %366
  %378 = load i64*, i64** %10, align 8
  %379 = getelementptr inbounds i64, i64* %378, i64 0
  %380 = load i64, i64* %379, align 8
  br label %381

; <label>:381:                                    ; preds = %377, %374
  %382 = phi i64 [ %376, %374 ], [ %380, %377 ]
  %383 = icmp ult i64 %367, %382
  br i1 %383, label %384, label %437

; <label>:384:                                    ; preds = %381
  %385 = load i64, i64* %30, align 8
  store i64 %385, i64* %32, align 8
  br label %386

; <label>:386:                                    ; preds = %430, %384
  %387 = load i64, i64* %32, align 8
  %388 = load i64, i64* %30, align 8
  %389 = add i64 %388, 64
  %390 = load i64*, i64** %10, align 8
  %391 = getelementptr inbounds i64, i64* %390, i64 1
  %392 = load i64, i64* %391, align 8
  %393 = icmp ult i64 %389, %392
  br i1 %393, label %394, label %397

; <label>:394:                                    ; preds = %386
  %395 = load i64, i64* %30, align 8
  %396 = add i64 %395, 64
  br label %401

; <label>:397:                                    ; preds = %386
  %398 = load i64*, i64** %10, align 8
  %399 = getelementptr inbounds i64, i64* %398, i64 1
  %400 = load i64, i64* %399, align 8
  br label %401

; <label>:401:                                    ; preds = %397, %394
  %402 = phi i64 [ %396, %394 ], [ %400, %397 ]
  %403 = icmp ult i64 %387, %402
  br i1 %403, label %404, label %433

; <label>:404:                                    ; preds = %401
  %405 = load i64, i64* %31, align 8
  %406 = load i64*, i64** %11, align 8
  %407 = getelementptr inbounds i64, i64* %406, i64 0
  %408 = load i64, i64* %407, align 8
  %409 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %408
  store i64 %405, i64* %409, align 8
  %410 = load i64, i64* %32, align 8
  %411 = load i64*, i64** %11, align 8
  %412 = getelementptr inbounds i64, i64* %411, i64 1
  %413 = load i64, i64* %412, align 8
  %414 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %413
  store i64 %410, i64* %414, align 8
  %415 = load i8*, i8** %7, align 8
  %416 = load i64*, i64** %9, align 8
  %417 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 0
  %418 = load i64, i64* %417, align 16
  %419 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 1
  %420 = load i64, i64* %419, align 8
  %421 = call i64 @_Z12libjit_getXYPKmmm(i64* %416, i64 %418, i64 %420)
  %422 = getelementptr inbounds i8, i8* %415, i64 %421
  %423 = load i8, i8* %422, align 1
  %424 = load i8*, i8** %8, align 8
  %425 = load i64*, i64** %10, align 8
  %426 = load i64, i64* %31, align 8
  %427 = load i64, i64* %32, align 8
  %428 = call i64 @_Z12libjit_getXYPKmmm(i64* %425, i64 %426, i64 %427)
  %429 = getelementptr inbounds i8, i8* %424, i64 %428
  store i8 %423, i8* %429, align 1
  br label %430

; <label>:430:                                    ; preds = %404
  %431 = load i64, i64* %32, align 8
  %432 = add i64 %431, 1
  store i64 %432, i64* %32, align 8
  br label %386

; <label>:433:                                    ; preds = %401
  br label %434

; <label>:434:                                    ; preds = %433
  %435 = load i64, i64* %31, align 8
  %436 = add i64 %435, 1
  store i64 %436, i64* %31, align 8
  br label %366

; <label>:437:                                    ; preds = %381
  br label %438

; <label>:438:                                    ; preds = %437
  %439 = load i64, i64* %30, align 8
  %440 = add i64 %439, 64
  store i64 %440, i64* %30, align 8
  br label %358

; <label>:441:                                    ; preds = %358
  br label %442

; <label>:442:                                    ; preds = %441
  %443 = load i64, i64* %29, align 8
  %444 = add i64 %443, 64
  store i64 %444, i64* %29, align 8
  br label %351

; <label>:445:                                    ; preds = %351
  br label %446

; <label>:446:                                    ; preds = %139, %228, %346, %445, %347
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local i64 @_Z15libjit_getXYZWQPKmmmmmm(i64*, i64, i64, i64, i64, i64) #0 comdat {
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  store i64* %0, i64** %7, align 8
  store i64 %1, i64* %8, align 8
  store i64 %2, i64* %9, align 8
  store i64 %3, i64* %10, align 8
  store i64 %4, i64* %11, align 8
  store i64 %5, i64* %12, align 8
  %13 = load i64, i64* %8, align 8
  %14 = load i64*, i64** %7, align 8
  %15 = getelementptr inbounds i64, i64* %14, i64 1
  %16 = load i64, i64* %15, align 8
  %17 = mul i64 %13, %16
  %18 = load i64*, i64** %7, align 8
  %19 = getelementptr inbounds i64, i64* %18, i64 2
  %20 = load i64, i64* %19, align 8
  %21 = mul i64 %17, %20
  %22 = load i64*, i64** %7, align 8
  %23 = getelementptr inbounds i64, i64* %22, i64 3
  %24 = load i64, i64* %23, align 8
  %25 = mul i64 %21, %24
  %26 = load i64*, i64** %7, align 8
  %27 = getelementptr inbounds i64, i64* %26, i64 4
  %28 = load i64, i64* %27, align 8
  %29 = mul i64 %25, %28
  %30 = load i64, i64* %9, align 8
  %31 = load i64*, i64** %7, align 8
  %32 = getelementptr inbounds i64, i64* %31, i64 2
  %33 = load i64, i64* %32, align 8
  %34 = mul i64 %30, %33
  %35 = load i64*, i64** %7, align 8
  %36 = getelementptr inbounds i64, i64* %35, i64 3
  %37 = load i64, i64* %36, align 8
  %38 = mul i64 %34, %37
  %39 = load i64*, i64** %7, align 8
  %40 = getelementptr inbounds i64, i64* %39, i64 4
  %41 = load i64, i64* %40, align 8
  %42 = mul i64 %38, %41
  %43 = add i64 %29, %42
  %44 = load i64, i64* %10, align 8
  %45 = load i64*, i64** %7, align 8
  %46 = getelementptr inbounds i64, i64* %45, i64 3
  %47 = load i64, i64* %46, align 8
  %48 = mul i64 %44, %47
  %49 = load i64*, i64** %7, align 8
  %50 = getelementptr inbounds i64, i64* %49, i64 4
  %51 = load i64, i64* %50, align 8
  %52 = mul i64 %48, %51
  %53 = add i64 %43, %52
  %54 = load i64, i64* %11, align 8
  %55 = load i64*, i64** %7, align 8
  %56 = getelementptr inbounds i64, i64* %55, i64 4
  %57 = load i64, i64* %56, align 8
  %58 = mul i64 %54, %57
  %59 = add i64 %53, %58
  %60 = load i64, i64* %12, align 8
  %61 = add i64 %59, %60
  ret i64 %61
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local i64 @_Z13libjit_getXYZPKmmmm(i64*, i64, i64, i64) #0 comdat {
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  store i64* %0, i64** %5, align 8
  store i64 %1, i64* %6, align 8
  store i64 %2, i64* %7, align 8
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %6, align 8
  %10 = load i64*, i64** %5, align 8
  %11 = getelementptr inbounds i64, i64* %10, i64 1
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %9, %12
  %14 = load i64*, i64** %5, align 8
  %15 = getelementptr inbounds i64, i64* %14, i64 2
  %16 = load i64, i64* %15, align 8
  %17 = mul i64 %13, %16
  %18 = load i64, i64* %7, align 8
  %19 = load i64*, i64** %5, align 8
  %20 = getelementptr inbounds i64, i64* %19, i64 2
  %21 = load i64, i64* %20, align 8
  %22 = mul i64 %18, %21
  %23 = add i64 %17, %22
  %24 = load i64, i64* %8, align 8
  %25 = add i64 %23, %24
  ret i64 %25
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_transpose_f(float*, float*, i64*, i64*, i64*, i64) #2 {
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64, align 8
  store float* %0, float** %7, align 8
  store float* %1, float** %8, align 8
  store i64* %2, i64** %9, align 8
  store i64* %3, i64** %10, align 8
  store i64* %4, i64** %11, align 8
  store i64 %5, i64* %12, align 8
  %13 = load float*, float** %7, align 8
  %14 = load float*, float** %8, align 8
  %15 = load i64*, i64** %9, align 8
  %16 = load i64*, i64** %10, align 8
  %17 = load i64*, i64** %11, align 8
  %18 = load i64, i64* %12, align 8
  call void @_ZN12_GLOBAL__N_124libjit_transpose_genericIfEEvPKT_PS1_PKmS6_S6_m(float* %13, float* %14, i64* %15, i64* %16, i64* %17, i64 %18)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_124libjit_transpose_genericIfEEvPKT_PS1_PKmS6_S6_m(float*, float*, i64*, i64*, i64*, i64) #0 {
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  %14 = alloca [5 x i64], align 16
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  store float* %0, float** %7, align 8
  store float* %1, float** %8, align 8
  store i64* %2, i64** %9, align 8
  store i64* %3, i64** %10, align 8
  store i64* %4, i64** %11, align 8
  store i64 %5, i64* %12, align 8
  store i32 64, i32* %13, align 4
  %33 = load i64, i64* %12, align 8
  %34 = icmp eq i64 %33, 5
  br i1 %34, label %35, label %140

; <label>:35:                                     ; preds = %6
  store i64 0, i64* %15, align 8
  br label %36

; <label>:36:                                     ; preds = %136, %35
  %37 = load i64, i64* %15, align 8
  %38 = load i64*, i64** %10, align 8
  %39 = getelementptr inbounds i64, i64* %38, i64 0
  %40 = load i64, i64* %39, align 8
  %41 = icmp ult i64 %37, %40
  br i1 %41, label %42, label %139

; <label>:42:                                     ; preds = %36
  store i64 0, i64* %16, align 8
  br label %43

; <label>:43:                                     ; preds = %132, %42
  %44 = load i64, i64* %16, align 8
  %45 = load i64*, i64** %10, align 8
  %46 = getelementptr inbounds i64, i64* %45, i64 1
  %47 = load i64, i64* %46, align 8
  %48 = icmp ult i64 %44, %47
  br i1 %48, label %49, label %135

; <label>:49:                                     ; preds = %43
  store i64 0, i64* %17, align 8
  br label %50

; <label>:50:                                     ; preds = %128, %49
  %51 = load i64, i64* %17, align 8
  %52 = load i64*, i64** %10, align 8
  %53 = getelementptr inbounds i64, i64* %52, i64 2
  %54 = load i64, i64* %53, align 8
  %55 = icmp ult i64 %51, %54
  br i1 %55, label %56, label %131

; <label>:56:                                     ; preds = %50
  store i64 0, i64* %18, align 8
  br label %57

; <label>:57:                                     ; preds = %124, %56
  %58 = load i64, i64* %18, align 8
  %59 = load i64*, i64** %10, align 8
  %60 = getelementptr inbounds i64, i64* %59, i64 3
  %61 = load i64, i64* %60, align 8
  %62 = icmp ult i64 %58, %61
  br i1 %62, label %63, label %127

; <label>:63:                                     ; preds = %57
  store i64 0, i64* %19, align 8
  br label %64

; <label>:64:                                     ; preds = %120, %63
  %65 = load i64, i64* %19, align 8
  %66 = load i64*, i64** %10, align 8
  %67 = getelementptr inbounds i64, i64* %66, i64 4
  %68 = load i64, i64* %67, align 8
  %69 = icmp ult i64 %65, %68
  br i1 %69, label %70, label %123

; <label>:70:                                     ; preds = %64
  %71 = load i64, i64* %15, align 8
  %72 = load i64*, i64** %11, align 8
  %73 = getelementptr inbounds i64, i64* %72, i64 0
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %74
  store i64 %71, i64* %75, align 8
  %76 = load i64, i64* %16, align 8
  %77 = load i64*, i64** %11, align 8
  %78 = getelementptr inbounds i64, i64* %77, i64 1
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %79
  store i64 %76, i64* %80, align 8
  %81 = load i64, i64* %17, align 8
  %82 = load i64*, i64** %11, align 8
  %83 = getelementptr inbounds i64, i64* %82, i64 2
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %84
  store i64 %81, i64* %85, align 8
  %86 = load i64, i64* %18, align 8
  %87 = load i64*, i64** %11, align 8
  %88 = getelementptr inbounds i64, i64* %87, i64 3
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %89
  store i64 %86, i64* %90, align 8
  %91 = load i64, i64* %19, align 8
  %92 = load i64*, i64** %11, align 8
  %93 = getelementptr inbounds i64, i64* %92, i64 4
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %94
  store i64 %91, i64* %95, align 8
  %96 = load float*, float** %7, align 8
  %97 = load i64*, i64** %9, align 8
  %98 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 0
  %99 = load i64, i64* %98, align 16
  %100 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 1
  %101 = load i64, i64* %100, align 8
  %102 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 2
  %103 = load i64, i64* %102, align 16
  %104 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 3
  %105 = load i64, i64* %104, align 8
  %106 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 4
  %107 = load i64, i64* %106, align 16
  %108 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %97, i64 %99, i64 %101, i64 %103, i64 %105, i64 %107)
  %109 = getelementptr inbounds float, float* %96, i64 %108
  %110 = load float, float* %109, align 4
  %111 = load float*, float** %8, align 8
  %112 = load i64*, i64** %10, align 8
  %113 = load i64, i64* %15, align 8
  %114 = load i64, i64* %16, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load i64, i64* %18, align 8
  %117 = load i64, i64* %19, align 8
  %118 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %112, i64 %113, i64 %114, i64 %115, i64 %116, i64 %117)
  %119 = getelementptr inbounds float, float* %111, i64 %118
  store float %110, float* %119, align 4
  br label %120

; <label>:120:                                    ; preds = %70
  %121 = load i64, i64* %19, align 8
  %122 = add i64 %121, 1
  store i64 %122, i64* %19, align 8
  br label %64

; <label>:123:                                    ; preds = %64
  br label %124

; <label>:124:                                    ; preds = %123
  %125 = load i64, i64* %18, align 8
  %126 = add i64 %125, 1
  store i64 %126, i64* %18, align 8
  br label %57

; <label>:127:                                    ; preds = %57
  br label %128

; <label>:128:                                    ; preds = %127
  %129 = load i64, i64* %17, align 8
  %130 = add i64 %129, 1
  store i64 %130, i64* %17, align 8
  br label %50

; <label>:131:                                    ; preds = %50
  br label %132

; <label>:132:                                    ; preds = %131
  %133 = load i64, i64* %16, align 8
  %134 = add i64 %133, 1
  store i64 %134, i64* %16, align 8
  br label %43

; <label>:135:                                    ; preds = %43
  br label %136

; <label>:136:                                    ; preds = %135
  %137 = load i64, i64* %15, align 8
  %138 = add i64 %137, 1
  store i64 %138, i64* %15, align 8
  br label %36

; <label>:139:                                    ; preds = %36
  br label %446

; <label>:140:                                    ; preds = %6
  %141 = load i64, i64* %12, align 8
  %142 = icmp eq i64 %141, 4
  br i1 %142, label %143, label %229

; <label>:143:                                    ; preds = %140
  store i64 0, i64* %20, align 8
  br label %144

; <label>:144:                                    ; preds = %225, %143
  %145 = load i64, i64* %20, align 8
  %146 = load i64*, i64** %10, align 8
  %147 = getelementptr inbounds i64, i64* %146, i64 0
  %148 = load i64, i64* %147, align 8
  %149 = icmp ult i64 %145, %148
  br i1 %149, label %150, label %228

; <label>:150:                                    ; preds = %144
  store i64 0, i64* %21, align 8
  br label %151

; <label>:151:                                    ; preds = %221, %150
  %152 = load i64, i64* %21, align 8
  %153 = load i64*, i64** %10, align 8
  %154 = getelementptr inbounds i64, i64* %153, i64 1
  %155 = load i64, i64* %154, align 8
  %156 = icmp ult i64 %152, %155
  br i1 %156, label %157, label %224

; <label>:157:                                    ; preds = %151
  store i64 0, i64* %22, align 8
  br label %158

; <label>:158:                                    ; preds = %217, %157
  %159 = load i64, i64* %22, align 8
  %160 = load i64*, i64** %10, align 8
  %161 = getelementptr inbounds i64, i64* %160, i64 2
  %162 = load i64, i64* %161, align 8
  %163 = icmp ult i64 %159, %162
  br i1 %163, label %164, label %220

; <label>:164:                                    ; preds = %158
  store i64 0, i64* %23, align 8
  br label %165

; <label>:165:                                    ; preds = %213, %164
  %166 = load i64, i64* %23, align 8
  %167 = load i64*, i64** %10, align 8
  %168 = getelementptr inbounds i64, i64* %167, i64 3
  %169 = load i64, i64* %168, align 8
  %170 = icmp ult i64 %166, %169
  br i1 %170, label %171, label %216

; <label>:171:                                    ; preds = %165
  %172 = load i64, i64* %20, align 8
  %173 = load i64*, i64** %11, align 8
  %174 = getelementptr inbounds i64, i64* %173, i64 0
  %175 = load i64, i64* %174, align 8
  %176 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %175
  store i64 %172, i64* %176, align 8
  %177 = load i64, i64* %21, align 8
  %178 = load i64*, i64** %11, align 8
  %179 = getelementptr inbounds i64, i64* %178, i64 1
  %180 = load i64, i64* %179, align 8
  %181 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %180
  store i64 %177, i64* %181, align 8
  %182 = load i64, i64* %22, align 8
  %183 = load i64*, i64** %11, align 8
  %184 = getelementptr inbounds i64, i64* %183, i64 2
  %185 = load i64, i64* %184, align 8
  %186 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %185
  store i64 %182, i64* %186, align 8
  %187 = load i64, i64* %23, align 8
  %188 = load i64*, i64** %11, align 8
  %189 = getelementptr inbounds i64, i64* %188, i64 3
  %190 = load i64, i64* %189, align 8
  %191 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %190
  store i64 %187, i64* %191, align 8
  %192 = load float*, float** %7, align 8
  %193 = load i64*, i64** %9, align 8
  %194 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 0
  %195 = load i64, i64* %194, align 16
  %196 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 1
  %197 = load i64, i64* %196, align 8
  %198 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 2
  %199 = load i64, i64* %198, align 16
  %200 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 3
  %201 = load i64, i64* %200, align 8
  %202 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %193, i64 %195, i64 %197, i64 %199, i64 %201)
  %203 = getelementptr inbounds float, float* %192, i64 %202
  %204 = load float, float* %203, align 4
  %205 = load float*, float** %8, align 8
  %206 = load i64*, i64** %10, align 8
  %207 = load i64, i64* %20, align 8
  %208 = load i64, i64* %21, align 8
  %209 = load i64, i64* %22, align 8
  %210 = load i64, i64* %23, align 8
  %211 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %206, i64 %207, i64 %208, i64 %209, i64 %210)
  %212 = getelementptr inbounds float, float* %205, i64 %211
  store float %204, float* %212, align 4
  br label %213

; <label>:213:                                    ; preds = %171
  %214 = load i64, i64* %23, align 8
  %215 = add i64 %214, 1
  store i64 %215, i64* %23, align 8
  br label %165

; <label>:216:                                    ; preds = %165
  br label %217

; <label>:217:                                    ; preds = %216
  %218 = load i64, i64* %22, align 8
  %219 = add i64 %218, 1
  store i64 %219, i64* %22, align 8
  br label %158

; <label>:220:                                    ; preds = %158
  br label %221

; <label>:221:                                    ; preds = %220
  %222 = load i64, i64* %21, align 8
  %223 = add i64 %222, 1
  store i64 %223, i64* %21, align 8
  br label %151

; <label>:224:                                    ; preds = %151
  br label %225

; <label>:225:                                    ; preds = %224
  %226 = load i64, i64* %20, align 8
  %227 = add i64 %226, 1
  store i64 %227, i64* %20, align 8
  br label %144

; <label>:228:                                    ; preds = %144
  br label %446

; <label>:229:                                    ; preds = %140
  %230 = load i64, i64* %12, align 8
  %231 = icmp eq i64 %230, 3
  br i1 %231, label %232, label %347

; <label>:232:                                    ; preds = %229
  store i64 0, i64* %24, align 8
  br label %233

; <label>:233:                                    ; preds = %343, %232
  %234 = load i64, i64* %24, align 8
  %235 = load i64*, i64** %10, align 8
  %236 = getelementptr inbounds i64, i64* %235, i64 0
  %237 = load i64, i64* %236, align 8
  %238 = icmp ult i64 %234, %237
  br i1 %238, label %239, label %346

; <label>:239:                                    ; preds = %233
  store i64 0, i64* %25, align 8
  br label %240

; <label>:240:                                    ; preds = %339, %239
  %241 = load i64, i64* %25, align 8
  %242 = load i64*, i64** %10, align 8
  %243 = getelementptr inbounds i64, i64* %242, i64 1
  %244 = load i64, i64* %243, align 8
  %245 = icmp ult i64 %241, %244
  br i1 %245, label %246, label %342

; <label>:246:                                    ; preds = %240
  store i64 0, i64* %26, align 8
  br label %247

; <label>:247:                                    ; preds = %335, %246
  %248 = load i64, i64* %26, align 8
  %249 = load i64*, i64** %10, align 8
  %250 = getelementptr inbounds i64, i64* %249, i64 2
  %251 = load i64, i64* %250, align 8
  %252 = icmp ult i64 %248, %251
  br i1 %252, label %253, label %338

; <label>:253:                                    ; preds = %247
  %254 = load i64, i64* %25, align 8
  store i64 %254, i64* %27, align 8
  br label %255

; <label>:255:                                    ; preds = %331, %253
  %256 = load i64, i64* %27, align 8
  %257 = load i64, i64* %25, align 8
  %258 = add i64 %257, 64
  %259 = load i64*, i64** %10, align 8
  %260 = getelementptr inbounds i64, i64* %259, i64 1
  %261 = load i64, i64* %260, align 8
  %262 = icmp ult i64 %258, %261
  br i1 %262, label %263, label %266

; <label>:263:                                    ; preds = %255
  %264 = load i64, i64* %25, align 8
  %265 = add i64 %264, 64
  br label %270

; <label>:266:                                    ; preds = %255
  %267 = load i64*, i64** %10, align 8
  %268 = getelementptr inbounds i64, i64* %267, i64 1
  %269 = load i64, i64* %268, align 8
  br label %270

; <label>:270:                                    ; preds = %266, %263
  %271 = phi i64 [ %265, %263 ], [ %269, %266 ]
  %272 = icmp ult i64 %256, %271
  br i1 %272, label %273, label %334

; <label>:273:                                    ; preds = %270
  %274 = load i64, i64* %26, align 8
  store i64 %274, i64* %28, align 8
  br label %275

; <label>:275:                                    ; preds = %327, %273
  %276 = load i64, i64* %28, align 8
  %277 = load i64, i64* %26, align 8
  %278 = add i64 %277, 64
  %279 = load i64*, i64** %10, align 8
  %280 = getelementptr inbounds i64, i64* %279, i64 2
  %281 = load i64, i64* %280, align 8
  %282 = icmp ult i64 %278, %281
  br i1 %282, label %283, label %286

; <label>:283:                                    ; preds = %275
  %284 = load i64, i64* %26, align 8
  %285 = add i64 %284, 64
  br label %290

; <label>:286:                                    ; preds = %275
  %287 = load i64*, i64** %10, align 8
  %288 = getelementptr inbounds i64, i64* %287, i64 2
  %289 = load i64, i64* %288, align 8
  br label %290

; <label>:290:                                    ; preds = %286, %283
  %291 = phi i64 [ %285, %283 ], [ %289, %286 ]
  %292 = icmp ult i64 %276, %291
  br i1 %292, label %293, label %330

; <label>:293:                                    ; preds = %290
  %294 = load i64, i64* %24, align 8
  %295 = load i64*, i64** %11, align 8
  %296 = getelementptr inbounds i64, i64* %295, i64 0
  %297 = load i64, i64* %296, align 8
  %298 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %297
  store i64 %294, i64* %298, align 8
  %299 = load i64, i64* %27, align 8
  %300 = load i64*, i64** %11, align 8
  %301 = getelementptr inbounds i64, i64* %300, i64 1
  %302 = load i64, i64* %301, align 8
  %303 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %302
  store i64 %299, i64* %303, align 8
  %304 = load i64, i64* %28, align 8
  %305 = load i64*, i64** %11, align 8
  %306 = getelementptr inbounds i64, i64* %305, i64 2
  %307 = load i64, i64* %306, align 8
  %308 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %307
  store i64 %304, i64* %308, align 8
  %309 = load float*, float** %7, align 8
  %310 = load i64*, i64** %9, align 8
  %311 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 0
  %312 = load i64, i64* %311, align 16
  %313 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 1
  %314 = load i64, i64* %313, align 8
  %315 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 2
  %316 = load i64, i64* %315, align 16
  %317 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %310, i64 %312, i64 %314, i64 %316)
  %318 = getelementptr inbounds float, float* %309, i64 %317
  %319 = load float, float* %318, align 4
  %320 = load float*, float** %8, align 8
  %321 = load i64*, i64** %10, align 8
  %322 = load i64, i64* %24, align 8
  %323 = load i64, i64* %27, align 8
  %324 = load i64, i64* %28, align 8
  %325 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %321, i64 %322, i64 %323, i64 %324)
  %326 = getelementptr inbounds float, float* %320, i64 %325
  store float %319, float* %326, align 4
  br label %327

; <label>:327:                                    ; preds = %293
  %328 = load i64, i64* %28, align 8
  %329 = add i64 %328, 1
  store i64 %329, i64* %28, align 8
  br label %275

; <label>:330:                                    ; preds = %290
  br label %331

; <label>:331:                                    ; preds = %330
  %332 = load i64, i64* %27, align 8
  %333 = add i64 %332, 1
  store i64 %333, i64* %27, align 8
  br label %255

; <label>:334:                                    ; preds = %270
  br label %335

; <label>:335:                                    ; preds = %334
  %336 = load i64, i64* %26, align 8
  %337 = add i64 %336, 64
  store i64 %337, i64* %26, align 8
  br label %247

; <label>:338:                                    ; preds = %247
  br label %339

; <label>:339:                                    ; preds = %338
  %340 = load i64, i64* %25, align 8
  %341 = add i64 %340, 64
  store i64 %341, i64* %25, align 8
  br label %240

; <label>:342:                                    ; preds = %240
  br label %343

; <label>:343:                                    ; preds = %342
  %344 = load i64, i64* %24, align 8
  %345 = add i64 %344, 1
  store i64 %345, i64* %24, align 8
  br label %233

; <label>:346:                                    ; preds = %233
  br label %446

; <label>:347:                                    ; preds = %229
  %348 = load i64, i64* %12, align 8
  %349 = icmp eq i64 %348, 2
  br i1 %349, label %350, label %446

; <label>:350:                                    ; preds = %347
  store i64 0, i64* %29, align 8
  br label %351

; <label>:351:                                    ; preds = %442, %350
  %352 = load i64, i64* %29, align 8
  %353 = load i64*, i64** %10, align 8
  %354 = getelementptr inbounds i64, i64* %353, i64 0
  %355 = load i64, i64* %354, align 8
  %356 = icmp ult i64 %352, %355
  br i1 %356, label %357, label %445

; <label>:357:                                    ; preds = %351
  store i64 0, i64* %30, align 8
  br label %358

; <label>:358:                                    ; preds = %438, %357
  %359 = load i64, i64* %30, align 8
  %360 = load i64*, i64** %10, align 8
  %361 = getelementptr inbounds i64, i64* %360, i64 1
  %362 = load i64, i64* %361, align 8
  %363 = icmp ult i64 %359, %362
  br i1 %363, label %364, label %441

; <label>:364:                                    ; preds = %358
  %365 = load i64, i64* %29, align 8
  store i64 %365, i64* %31, align 8
  br label %366

; <label>:366:                                    ; preds = %434, %364
  %367 = load i64, i64* %31, align 8
  %368 = load i64, i64* %29, align 8
  %369 = add i64 %368, 64
  %370 = load i64*, i64** %10, align 8
  %371 = getelementptr inbounds i64, i64* %370, i64 0
  %372 = load i64, i64* %371, align 8
  %373 = icmp ult i64 %369, %372
  br i1 %373, label %374, label %377

; <label>:374:                                    ; preds = %366
  %375 = load i64, i64* %29, align 8
  %376 = add i64 %375, 64
  br label %381

; <label>:377:                                    ; preds = %366
  %378 = load i64*, i64** %10, align 8
  %379 = getelementptr inbounds i64, i64* %378, i64 0
  %380 = load i64, i64* %379, align 8
  br label %381

; <label>:381:                                    ; preds = %377, %374
  %382 = phi i64 [ %376, %374 ], [ %380, %377 ]
  %383 = icmp ult i64 %367, %382
  br i1 %383, label %384, label %437

; <label>:384:                                    ; preds = %381
  %385 = load i64, i64* %30, align 8
  store i64 %385, i64* %32, align 8
  br label %386

; <label>:386:                                    ; preds = %430, %384
  %387 = load i64, i64* %32, align 8
  %388 = load i64, i64* %30, align 8
  %389 = add i64 %388, 64
  %390 = load i64*, i64** %10, align 8
  %391 = getelementptr inbounds i64, i64* %390, i64 1
  %392 = load i64, i64* %391, align 8
  %393 = icmp ult i64 %389, %392
  br i1 %393, label %394, label %397

; <label>:394:                                    ; preds = %386
  %395 = load i64, i64* %30, align 8
  %396 = add i64 %395, 64
  br label %401

; <label>:397:                                    ; preds = %386
  %398 = load i64*, i64** %10, align 8
  %399 = getelementptr inbounds i64, i64* %398, i64 1
  %400 = load i64, i64* %399, align 8
  br label %401

; <label>:401:                                    ; preds = %397, %394
  %402 = phi i64 [ %396, %394 ], [ %400, %397 ]
  %403 = icmp ult i64 %387, %402
  br i1 %403, label %404, label %433

; <label>:404:                                    ; preds = %401
  %405 = load i64, i64* %31, align 8
  %406 = load i64*, i64** %11, align 8
  %407 = getelementptr inbounds i64, i64* %406, i64 0
  %408 = load i64, i64* %407, align 8
  %409 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %408
  store i64 %405, i64* %409, align 8
  %410 = load i64, i64* %32, align 8
  %411 = load i64*, i64** %11, align 8
  %412 = getelementptr inbounds i64, i64* %411, i64 1
  %413 = load i64, i64* %412, align 8
  %414 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %413
  store i64 %410, i64* %414, align 8
  %415 = load float*, float** %7, align 8
  %416 = load i64*, i64** %9, align 8
  %417 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 0
  %418 = load i64, i64* %417, align 16
  %419 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 1
  %420 = load i64, i64* %419, align 8
  %421 = call i64 @_Z12libjit_getXYPKmmm(i64* %416, i64 %418, i64 %420)
  %422 = getelementptr inbounds float, float* %415, i64 %421
  %423 = load float, float* %422, align 4
  %424 = load float*, float** %8, align 8
  %425 = load i64*, i64** %10, align 8
  %426 = load i64, i64* %31, align 8
  %427 = load i64, i64* %32, align 8
  %428 = call i64 @_Z12libjit_getXYPKmmm(i64* %425, i64 %426, i64 %427)
  %429 = getelementptr inbounds float, float* %424, i64 %428
  store float %423, float* %429, align 4
  br label %430

; <label>:430:                                    ; preds = %404
  %431 = load i64, i64* %32, align 8
  %432 = add i64 %431, 1
  store i64 %432, i64* %32, align 8
  br label %386

; <label>:433:                                    ; preds = %401
  br label %434

; <label>:434:                                    ; preds = %433
  %435 = load i64, i64* %31, align 8
  %436 = add i64 %435, 1
  store i64 %436, i64* %31, align 8
  br label %366

; <label>:437:                                    ; preds = %381
  br label %438

; <label>:438:                                    ; preds = %437
  %439 = load i64, i64* %30, align 8
  %440 = add i64 %439, 64
  store i64 %440, i64* %30, align 8
  br label %358

; <label>:441:                                    ; preds = %358
  br label %442

; <label>:442:                                    ; preds = %441
  %443 = load i64, i64* %29, align 8
  %444 = add i64 %443, 64
  store i64 %444, i64* %29, align 8
  br label %351

; <label>:445:                                    ; preds = %351
  br label %446

; <label>:446:                                    ; preds = %139, %228, %346, %445, %347
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_transpose_u(i64*, i64*, i64*, i64*, i64*, i64) #2 {
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64, align 8
  store i64* %0, i64** %7, align 8
  store i64* %1, i64** %8, align 8
  store i64* %2, i64** %9, align 8
  store i64* %3, i64** %10, align 8
  store i64* %4, i64** %11, align 8
  store i64 %5, i64* %12, align 8
  %13 = load i64*, i64** %7, align 8
  %14 = load i64*, i64** %8, align 8
  %15 = load i64*, i64** %9, align 8
  %16 = load i64*, i64** %10, align 8
  %17 = load i64*, i64** %11, align 8
  %18 = load i64, i64* %12, align 8
  call void @_ZN12_GLOBAL__N_124libjit_transpose_genericIlEEvPKT_PS1_PKmS6_S6_m(i64* %13, i64* %14, i64* %15, i64* %16, i64* %17, i64 %18)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_124libjit_transpose_genericIlEEvPKT_PS1_PKmS6_S6_m(i64*, i64*, i64*, i64*, i64*, i64) #0 {
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  %14 = alloca [5 x i64], align 16
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  store i64* %0, i64** %7, align 8
  store i64* %1, i64** %8, align 8
  store i64* %2, i64** %9, align 8
  store i64* %3, i64** %10, align 8
  store i64* %4, i64** %11, align 8
  store i64 %5, i64* %12, align 8
  store i32 64, i32* %13, align 4
  %33 = load i64, i64* %12, align 8
  %34 = icmp eq i64 %33, 5
  br i1 %34, label %35, label %140

; <label>:35:                                     ; preds = %6
  store i64 0, i64* %15, align 8
  br label %36

; <label>:36:                                     ; preds = %136, %35
  %37 = load i64, i64* %15, align 8
  %38 = load i64*, i64** %10, align 8
  %39 = getelementptr inbounds i64, i64* %38, i64 0
  %40 = load i64, i64* %39, align 8
  %41 = icmp ult i64 %37, %40
  br i1 %41, label %42, label %139

; <label>:42:                                     ; preds = %36
  store i64 0, i64* %16, align 8
  br label %43

; <label>:43:                                     ; preds = %132, %42
  %44 = load i64, i64* %16, align 8
  %45 = load i64*, i64** %10, align 8
  %46 = getelementptr inbounds i64, i64* %45, i64 1
  %47 = load i64, i64* %46, align 8
  %48 = icmp ult i64 %44, %47
  br i1 %48, label %49, label %135

; <label>:49:                                     ; preds = %43
  store i64 0, i64* %17, align 8
  br label %50

; <label>:50:                                     ; preds = %128, %49
  %51 = load i64, i64* %17, align 8
  %52 = load i64*, i64** %10, align 8
  %53 = getelementptr inbounds i64, i64* %52, i64 2
  %54 = load i64, i64* %53, align 8
  %55 = icmp ult i64 %51, %54
  br i1 %55, label %56, label %131

; <label>:56:                                     ; preds = %50
  store i64 0, i64* %18, align 8
  br label %57

; <label>:57:                                     ; preds = %124, %56
  %58 = load i64, i64* %18, align 8
  %59 = load i64*, i64** %10, align 8
  %60 = getelementptr inbounds i64, i64* %59, i64 3
  %61 = load i64, i64* %60, align 8
  %62 = icmp ult i64 %58, %61
  br i1 %62, label %63, label %127

; <label>:63:                                     ; preds = %57
  store i64 0, i64* %19, align 8
  br label %64

; <label>:64:                                     ; preds = %120, %63
  %65 = load i64, i64* %19, align 8
  %66 = load i64*, i64** %10, align 8
  %67 = getelementptr inbounds i64, i64* %66, i64 4
  %68 = load i64, i64* %67, align 8
  %69 = icmp ult i64 %65, %68
  br i1 %69, label %70, label %123

; <label>:70:                                     ; preds = %64
  %71 = load i64, i64* %15, align 8
  %72 = load i64*, i64** %11, align 8
  %73 = getelementptr inbounds i64, i64* %72, i64 0
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %74
  store i64 %71, i64* %75, align 8
  %76 = load i64, i64* %16, align 8
  %77 = load i64*, i64** %11, align 8
  %78 = getelementptr inbounds i64, i64* %77, i64 1
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %79
  store i64 %76, i64* %80, align 8
  %81 = load i64, i64* %17, align 8
  %82 = load i64*, i64** %11, align 8
  %83 = getelementptr inbounds i64, i64* %82, i64 2
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %84
  store i64 %81, i64* %85, align 8
  %86 = load i64, i64* %18, align 8
  %87 = load i64*, i64** %11, align 8
  %88 = getelementptr inbounds i64, i64* %87, i64 3
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %89
  store i64 %86, i64* %90, align 8
  %91 = load i64, i64* %19, align 8
  %92 = load i64*, i64** %11, align 8
  %93 = getelementptr inbounds i64, i64* %92, i64 4
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %94
  store i64 %91, i64* %95, align 8
  %96 = load i64*, i64** %7, align 8
  %97 = load i64*, i64** %9, align 8
  %98 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 0
  %99 = load i64, i64* %98, align 16
  %100 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 1
  %101 = load i64, i64* %100, align 8
  %102 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 2
  %103 = load i64, i64* %102, align 16
  %104 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 3
  %105 = load i64, i64* %104, align 8
  %106 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 4
  %107 = load i64, i64* %106, align 16
  %108 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %97, i64 %99, i64 %101, i64 %103, i64 %105, i64 %107)
  %109 = getelementptr inbounds i64, i64* %96, i64 %108
  %110 = load i64, i64* %109, align 8
  %111 = load i64*, i64** %8, align 8
  %112 = load i64*, i64** %10, align 8
  %113 = load i64, i64* %15, align 8
  %114 = load i64, i64* %16, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load i64, i64* %18, align 8
  %117 = load i64, i64* %19, align 8
  %118 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %112, i64 %113, i64 %114, i64 %115, i64 %116, i64 %117)
  %119 = getelementptr inbounds i64, i64* %111, i64 %118
  store i64 %110, i64* %119, align 8
  br label %120

; <label>:120:                                    ; preds = %70
  %121 = load i64, i64* %19, align 8
  %122 = add i64 %121, 1
  store i64 %122, i64* %19, align 8
  br label %64

; <label>:123:                                    ; preds = %64
  br label %124

; <label>:124:                                    ; preds = %123
  %125 = load i64, i64* %18, align 8
  %126 = add i64 %125, 1
  store i64 %126, i64* %18, align 8
  br label %57

; <label>:127:                                    ; preds = %57
  br label %128

; <label>:128:                                    ; preds = %127
  %129 = load i64, i64* %17, align 8
  %130 = add i64 %129, 1
  store i64 %130, i64* %17, align 8
  br label %50

; <label>:131:                                    ; preds = %50
  br label %132

; <label>:132:                                    ; preds = %131
  %133 = load i64, i64* %16, align 8
  %134 = add i64 %133, 1
  store i64 %134, i64* %16, align 8
  br label %43

; <label>:135:                                    ; preds = %43
  br label %136

; <label>:136:                                    ; preds = %135
  %137 = load i64, i64* %15, align 8
  %138 = add i64 %137, 1
  store i64 %138, i64* %15, align 8
  br label %36

; <label>:139:                                    ; preds = %36
  br label %446

; <label>:140:                                    ; preds = %6
  %141 = load i64, i64* %12, align 8
  %142 = icmp eq i64 %141, 4
  br i1 %142, label %143, label %229

; <label>:143:                                    ; preds = %140
  store i64 0, i64* %20, align 8
  br label %144

; <label>:144:                                    ; preds = %225, %143
  %145 = load i64, i64* %20, align 8
  %146 = load i64*, i64** %10, align 8
  %147 = getelementptr inbounds i64, i64* %146, i64 0
  %148 = load i64, i64* %147, align 8
  %149 = icmp ult i64 %145, %148
  br i1 %149, label %150, label %228

; <label>:150:                                    ; preds = %144
  store i64 0, i64* %21, align 8
  br label %151

; <label>:151:                                    ; preds = %221, %150
  %152 = load i64, i64* %21, align 8
  %153 = load i64*, i64** %10, align 8
  %154 = getelementptr inbounds i64, i64* %153, i64 1
  %155 = load i64, i64* %154, align 8
  %156 = icmp ult i64 %152, %155
  br i1 %156, label %157, label %224

; <label>:157:                                    ; preds = %151
  store i64 0, i64* %22, align 8
  br label %158

; <label>:158:                                    ; preds = %217, %157
  %159 = load i64, i64* %22, align 8
  %160 = load i64*, i64** %10, align 8
  %161 = getelementptr inbounds i64, i64* %160, i64 2
  %162 = load i64, i64* %161, align 8
  %163 = icmp ult i64 %159, %162
  br i1 %163, label %164, label %220

; <label>:164:                                    ; preds = %158
  store i64 0, i64* %23, align 8
  br label %165

; <label>:165:                                    ; preds = %213, %164
  %166 = load i64, i64* %23, align 8
  %167 = load i64*, i64** %10, align 8
  %168 = getelementptr inbounds i64, i64* %167, i64 3
  %169 = load i64, i64* %168, align 8
  %170 = icmp ult i64 %166, %169
  br i1 %170, label %171, label %216

; <label>:171:                                    ; preds = %165
  %172 = load i64, i64* %20, align 8
  %173 = load i64*, i64** %11, align 8
  %174 = getelementptr inbounds i64, i64* %173, i64 0
  %175 = load i64, i64* %174, align 8
  %176 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %175
  store i64 %172, i64* %176, align 8
  %177 = load i64, i64* %21, align 8
  %178 = load i64*, i64** %11, align 8
  %179 = getelementptr inbounds i64, i64* %178, i64 1
  %180 = load i64, i64* %179, align 8
  %181 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %180
  store i64 %177, i64* %181, align 8
  %182 = load i64, i64* %22, align 8
  %183 = load i64*, i64** %11, align 8
  %184 = getelementptr inbounds i64, i64* %183, i64 2
  %185 = load i64, i64* %184, align 8
  %186 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %185
  store i64 %182, i64* %186, align 8
  %187 = load i64, i64* %23, align 8
  %188 = load i64*, i64** %11, align 8
  %189 = getelementptr inbounds i64, i64* %188, i64 3
  %190 = load i64, i64* %189, align 8
  %191 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %190
  store i64 %187, i64* %191, align 8
  %192 = load i64*, i64** %7, align 8
  %193 = load i64*, i64** %9, align 8
  %194 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 0
  %195 = load i64, i64* %194, align 16
  %196 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 1
  %197 = load i64, i64* %196, align 8
  %198 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 2
  %199 = load i64, i64* %198, align 16
  %200 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 3
  %201 = load i64, i64* %200, align 8
  %202 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %193, i64 %195, i64 %197, i64 %199, i64 %201)
  %203 = getelementptr inbounds i64, i64* %192, i64 %202
  %204 = load i64, i64* %203, align 8
  %205 = load i64*, i64** %8, align 8
  %206 = load i64*, i64** %10, align 8
  %207 = load i64, i64* %20, align 8
  %208 = load i64, i64* %21, align 8
  %209 = load i64, i64* %22, align 8
  %210 = load i64, i64* %23, align 8
  %211 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %206, i64 %207, i64 %208, i64 %209, i64 %210)
  %212 = getelementptr inbounds i64, i64* %205, i64 %211
  store i64 %204, i64* %212, align 8
  br label %213

; <label>:213:                                    ; preds = %171
  %214 = load i64, i64* %23, align 8
  %215 = add i64 %214, 1
  store i64 %215, i64* %23, align 8
  br label %165

; <label>:216:                                    ; preds = %165
  br label %217

; <label>:217:                                    ; preds = %216
  %218 = load i64, i64* %22, align 8
  %219 = add i64 %218, 1
  store i64 %219, i64* %22, align 8
  br label %158

; <label>:220:                                    ; preds = %158
  br label %221

; <label>:221:                                    ; preds = %220
  %222 = load i64, i64* %21, align 8
  %223 = add i64 %222, 1
  store i64 %223, i64* %21, align 8
  br label %151

; <label>:224:                                    ; preds = %151
  br label %225

; <label>:225:                                    ; preds = %224
  %226 = load i64, i64* %20, align 8
  %227 = add i64 %226, 1
  store i64 %227, i64* %20, align 8
  br label %144

; <label>:228:                                    ; preds = %144
  br label %446

; <label>:229:                                    ; preds = %140
  %230 = load i64, i64* %12, align 8
  %231 = icmp eq i64 %230, 3
  br i1 %231, label %232, label %347

; <label>:232:                                    ; preds = %229
  store i64 0, i64* %24, align 8
  br label %233

; <label>:233:                                    ; preds = %343, %232
  %234 = load i64, i64* %24, align 8
  %235 = load i64*, i64** %10, align 8
  %236 = getelementptr inbounds i64, i64* %235, i64 0
  %237 = load i64, i64* %236, align 8
  %238 = icmp ult i64 %234, %237
  br i1 %238, label %239, label %346

; <label>:239:                                    ; preds = %233
  store i64 0, i64* %25, align 8
  br label %240

; <label>:240:                                    ; preds = %339, %239
  %241 = load i64, i64* %25, align 8
  %242 = load i64*, i64** %10, align 8
  %243 = getelementptr inbounds i64, i64* %242, i64 1
  %244 = load i64, i64* %243, align 8
  %245 = icmp ult i64 %241, %244
  br i1 %245, label %246, label %342

; <label>:246:                                    ; preds = %240
  store i64 0, i64* %26, align 8
  br label %247

; <label>:247:                                    ; preds = %335, %246
  %248 = load i64, i64* %26, align 8
  %249 = load i64*, i64** %10, align 8
  %250 = getelementptr inbounds i64, i64* %249, i64 2
  %251 = load i64, i64* %250, align 8
  %252 = icmp ult i64 %248, %251
  br i1 %252, label %253, label %338

; <label>:253:                                    ; preds = %247
  %254 = load i64, i64* %25, align 8
  store i64 %254, i64* %27, align 8
  br label %255

; <label>:255:                                    ; preds = %331, %253
  %256 = load i64, i64* %27, align 8
  %257 = load i64, i64* %25, align 8
  %258 = add i64 %257, 64
  %259 = load i64*, i64** %10, align 8
  %260 = getelementptr inbounds i64, i64* %259, i64 1
  %261 = load i64, i64* %260, align 8
  %262 = icmp ult i64 %258, %261
  br i1 %262, label %263, label %266

; <label>:263:                                    ; preds = %255
  %264 = load i64, i64* %25, align 8
  %265 = add i64 %264, 64
  br label %270

; <label>:266:                                    ; preds = %255
  %267 = load i64*, i64** %10, align 8
  %268 = getelementptr inbounds i64, i64* %267, i64 1
  %269 = load i64, i64* %268, align 8
  br label %270

; <label>:270:                                    ; preds = %266, %263
  %271 = phi i64 [ %265, %263 ], [ %269, %266 ]
  %272 = icmp ult i64 %256, %271
  br i1 %272, label %273, label %334

; <label>:273:                                    ; preds = %270
  %274 = load i64, i64* %26, align 8
  store i64 %274, i64* %28, align 8
  br label %275

; <label>:275:                                    ; preds = %327, %273
  %276 = load i64, i64* %28, align 8
  %277 = load i64, i64* %26, align 8
  %278 = add i64 %277, 64
  %279 = load i64*, i64** %10, align 8
  %280 = getelementptr inbounds i64, i64* %279, i64 2
  %281 = load i64, i64* %280, align 8
  %282 = icmp ult i64 %278, %281
  br i1 %282, label %283, label %286

; <label>:283:                                    ; preds = %275
  %284 = load i64, i64* %26, align 8
  %285 = add i64 %284, 64
  br label %290

; <label>:286:                                    ; preds = %275
  %287 = load i64*, i64** %10, align 8
  %288 = getelementptr inbounds i64, i64* %287, i64 2
  %289 = load i64, i64* %288, align 8
  br label %290

; <label>:290:                                    ; preds = %286, %283
  %291 = phi i64 [ %285, %283 ], [ %289, %286 ]
  %292 = icmp ult i64 %276, %291
  br i1 %292, label %293, label %330

; <label>:293:                                    ; preds = %290
  %294 = load i64, i64* %24, align 8
  %295 = load i64*, i64** %11, align 8
  %296 = getelementptr inbounds i64, i64* %295, i64 0
  %297 = load i64, i64* %296, align 8
  %298 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %297
  store i64 %294, i64* %298, align 8
  %299 = load i64, i64* %27, align 8
  %300 = load i64*, i64** %11, align 8
  %301 = getelementptr inbounds i64, i64* %300, i64 1
  %302 = load i64, i64* %301, align 8
  %303 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %302
  store i64 %299, i64* %303, align 8
  %304 = load i64, i64* %28, align 8
  %305 = load i64*, i64** %11, align 8
  %306 = getelementptr inbounds i64, i64* %305, i64 2
  %307 = load i64, i64* %306, align 8
  %308 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %307
  store i64 %304, i64* %308, align 8
  %309 = load i64*, i64** %7, align 8
  %310 = load i64*, i64** %9, align 8
  %311 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 0
  %312 = load i64, i64* %311, align 16
  %313 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 1
  %314 = load i64, i64* %313, align 8
  %315 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 2
  %316 = load i64, i64* %315, align 16
  %317 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %310, i64 %312, i64 %314, i64 %316)
  %318 = getelementptr inbounds i64, i64* %309, i64 %317
  %319 = load i64, i64* %318, align 8
  %320 = load i64*, i64** %8, align 8
  %321 = load i64*, i64** %10, align 8
  %322 = load i64, i64* %24, align 8
  %323 = load i64, i64* %27, align 8
  %324 = load i64, i64* %28, align 8
  %325 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %321, i64 %322, i64 %323, i64 %324)
  %326 = getelementptr inbounds i64, i64* %320, i64 %325
  store i64 %319, i64* %326, align 8
  br label %327

; <label>:327:                                    ; preds = %293
  %328 = load i64, i64* %28, align 8
  %329 = add i64 %328, 1
  store i64 %329, i64* %28, align 8
  br label %275

; <label>:330:                                    ; preds = %290
  br label %331

; <label>:331:                                    ; preds = %330
  %332 = load i64, i64* %27, align 8
  %333 = add i64 %332, 1
  store i64 %333, i64* %27, align 8
  br label %255

; <label>:334:                                    ; preds = %270
  br label %335

; <label>:335:                                    ; preds = %334
  %336 = load i64, i64* %26, align 8
  %337 = add i64 %336, 64
  store i64 %337, i64* %26, align 8
  br label %247

; <label>:338:                                    ; preds = %247
  br label %339

; <label>:339:                                    ; preds = %338
  %340 = load i64, i64* %25, align 8
  %341 = add i64 %340, 64
  store i64 %341, i64* %25, align 8
  br label %240

; <label>:342:                                    ; preds = %240
  br label %343

; <label>:343:                                    ; preds = %342
  %344 = load i64, i64* %24, align 8
  %345 = add i64 %344, 1
  store i64 %345, i64* %24, align 8
  br label %233

; <label>:346:                                    ; preds = %233
  br label %446

; <label>:347:                                    ; preds = %229
  %348 = load i64, i64* %12, align 8
  %349 = icmp eq i64 %348, 2
  br i1 %349, label %350, label %446

; <label>:350:                                    ; preds = %347
  store i64 0, i64* %29, align 8
  br label %351

; <label>:351:                                    ; preds = %442, %350
  %352 = load i64, i64* %29, align 8
  %353 = load i64*, i64** %10, align 8
  %354 = getelementptr inbounds i64, i64* %353, i64 0
  %355 = load i64, i64* %354, align 8
  %356 = icmp ult i64 %352, %355
  br i1 %356, label %357, label %445

; <label>:357:                                    ; preds = %351
  store i64 0, i64* %30, align 8
  br label %358

; <label>:358:                                    ; preds = %438, %357
  %359 = load i64, i64* %30, align 8
  %360 = load i64*, i64** %10, align 8
  %361 = getelementptr inbounds i64, i64* %360, i64 1
  %362 = load i64, i64* %361, align 8
  %363 = icmp ult i64 %359, %362
  br i1 %363, label %364, label %441

; <label>:364:                                    ; preds = %358
  %365 = load i64, i64* %29, align 8
  store i64 %365, i64* %31, align 8
  br label %366

; <label>:366:                                    ; preds = %434, %364
  %367 = load i64, i64* %31, align 8
  %368 = load i64, i64* %29, align 8
  %369 = add i64 %368, 64
  %370 = load i64*, i64** %10, align 8
  %371 = getelementptr inbounds i64, i64* %370, i64 0
  %372 = load i64, i64* %371, align 8
  %373 = icmp ult i64 %369, %372
  br i1 %373, label %374, label %377

; <label>:374:                                    ; preds = %366
  %375 = load i64, i64* %29, align 8
  %376 = add i64 %375, 64
  br label %381

; <label>:377:                                    ; preds = %366
  %378 = load i64*, i64** %10, align 8
  %379 = getelementptr inbounds i64, i64* %378, i64 0
  %380 = load i64, i64* %379, align 8
  br label %381

; <label>:381:                                    ; preds = %377, %374
  %382 = phi i64 [ %376, %374 ], [ %380, %377 ]
  %383 = icmp ult i64 %367, %382
  br i1 %383, label %384, label %437

; <label>:384:                                    ; preds = %381
  %385 = load i64, i64* %30, align 8
  store i64 %385, i64* %32, align 8
  br label %386

; <label>:386:                                    ; preds = %430, %384
  %387 = load i64, i64* %32, align 8
  %388 = load i64, i64* %30, align 8
  %389 = add i64 %388, 64
  %390 = load i64*, i64** %10, align 8
  %391 = getelementptr inbounds i64, i64* %390, i64 1
  %392 = load i64, i64* %391, align 8
  %393 = icmp ult i64 %389, %392
  br i1 %393, label %394, label %397

; <label>:394:                                    ; preds = %386
  %395 = load i64, i64* %30, align 8
  %396 = add i64 %395, 64
  br label %401

; <label>:397:                                    ; preds = %386
  %398 = load i64*, i64** %10, align 8
  %399 = getelementptr inbounds i64, i64* %398, i64 1
  %400 = load i64, i64* %399, align 8
  br label %401

; <label>:401:                                    ; preds = %397, %394
  %402 = phi i64 [ %396, %394 ], [ %400, %397 ]
  %403 = icmp ult i64 %387, %402
  br i1 %403, label %404, label %433

; <label>:404:                                    ; preds = %401
  %405 = load i64, i64* %31, align 8
  %406 = load i64*, i64** %11, align 8
  %407 = getelementptr inbounds i64, i64* %406, i64 0
  %408 = load i64, i64* %407, align 8
  %409 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %408
  store i64 %405, i64* %409, align 8
  %410 = load i64, i64* %32, align 8
  %411 = load i64*, i64** %11, align 8
  %412 = getelementptr inbounds i64, i64* %411, i64 1
  %413 = load i64, i64* %412, align 8
  %414 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %413
  store i64 %410, i64* %414, align 8
  %415 = load i64*, i64** %7, align 8
  %416 = load i64*, i64** %9, align 8
  %417 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 0
  %418 = load i64, i64* %417, align 16
  %419 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 1
  %420 = load i64, i64* %419, align 8
  %421 = call i64 @_Z12libjit_getXYPKmmm(i64* %416, i64 %418, i64 %420)
  %422 = getelementptr inbounds i64, i64* %415, i64 %421
  %423 = load i64, i64* %422, align 8
  %424 = load i64*, i64** %8, align 8
  %425 = load i64*, i64** %10, align 8
  %426 = load i64, i64* %31, align 8
  %427 = load i64, i64* %32, align 8
  %428 = call i64 @_Z12libjit_getXYPKmmm(i64* %425, i64 %426, i64 %427)
  %429 = getelementptr inbounds i64, i64* %424, i64 %428
  store i64 %423, i64* %429, align 8
  br label %430

; <label>:430:                                    ; preds = %404
  %431 = load i64, i64* %32, align 8
  %432 = add i64 %431, 1
  store i64 %432, i64* %32, align 8
  br label %386

; <label>:433:                                    ; preds = %401
  br label %434

; <label>:434:                                    ; preds = %433
  %435 = load i64, i64* %31, align 8
  %436 = add i64 %435, 1
  store i64 %436, i64* %31, align 8
  br label %366

; <label>:437:                                    ; preds = %381
  br label %438

; <label>:438:                                    ; preds = %437
  %439 = load i64, i64* %30, align 8
  %440 = add i64 %439, 64
  store i64 %440, i64* %30, align 8
  br label %358

; <label>:441:                                    ; preds = %358
  br label %442

; <label>:442:                                    ; preds = %441
  %443 = load i64, i64* %29, align 8
  %444 = add i64 %443, 64
  store i64 %444, i64* %29, align 8
  br label %351

; <label>:445:                                    ; preds = %351
  br label %446

; <label>:446:                                    ; preds = %139, %228, %346, %445, %347
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_transpose_b(i8*, i8*, i64*, i64*, i64*, i64) #2 {
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64, align 8
  store i8* %0, i8** %7, align 8
  store i8* %1, i8** %8, align 8
  store i64* %2, i64** %9, align 8
  store i64* %3, i64** %10, align 8
  store i64* %4, i64** %11, align 8
  store i64 %5, i64* %12, align 8
  %13 = load i8*, i8** %7, align 8
  %14 = load i8*, i8** %8, align 8
  %15 = load i64*, i64** %9, align 8
  %16 = load i64*, i64** %10, align 8
  %17 = load i64*, i64** %11, align 8
  %18 = load i64, i64* %12, align 8
  call void @_ZN12_GLOBAL__N_124libjit_transpose_genericIbEEvPKT_PS1_PKmS6_S6_m(i8* %13, i8* %14, i64* %15, i64* %16, i64* %17, i64 %18)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_124libjit_transpose_genericIbEEvPKT_PS1_PKmS6_S6_m(i8*, i8*, i64*, i64*, i64*, i64) #0 {
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  %14 = alloca [5 x i64], align 16
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  store i8* %0, i8** %7, align 8
  store i8* %1, i8** %8, align 8
  store i64* %2, i64** %9, align 8
  store i64* %3, i64** %10, align 8
  store i64* %4, i64** %11, align 8
  store i64 %5, i64* %12, align 8
  store i32 64, i32* %13, align 4
  %33 = load i64, i64* %12, align 8
  %34 = icmp eq i64 %33, 5
  br i1 %34, label %35, label %142

; <label>:35:                                     ; preds = %6
  store i64 0, i64* %15, align 8
  br label %36

; <label>:36:                                     ; preds = %138, %35
  %37 = load i64, i64* %15, align 8
  %38 = load i64*, i64** %10, align 8
  %39 = getelementptr inbounds i64, i64* %38, i64 0
  %40 = load i64, i64* %39, align 8
  %41 = icmp ult i64 %37, %40
  br i1 %41, label %42, label %141

; <label>:42:                                     ; preds = %36
  store i64 0, i64* %16, align 8
  br label %43

; <label>:43:                                     ; preds = %134, %42
  %44 = load i64, i64* %16, align 8
  %45 = load i64*, i64** %10, align 8
  %46 = getelementptr inbounds i64, i64* %45, i64 1
  %47 = load i64, i64* %46, align 8
  %48 = icmp ult i64 %44, %47
  br i1 %48, label %49, label %137

; <label>:49:                                     ; preds = %43
  store i64 0, i64* %17, align 8
  br label %50

; <label>:50:                                     ; preds = %130, %49
  %51 = load i64, i64* %17, align 8
  %52 = load i64*, i64** %10, align 8
  %53 = getelementptr inbounds i64, i64* %52, i64 2
  %54 = load i64, i64* %53, align 8
  %55 = icmp ult i64 %51, %54
  br i1 %55, label %56, label %133

; <label>:56:                                     ; preds = %50
  store i64 0, i64* %18, align 8
  br label %57

; <label>:57:                                     ; preds = %126, %56
  %58 = load i64, i64* %18, align 8
  %59 = load i64*, i64** %10, align 8
  %60 = getelementptr inbounds i64, i64* %59, i64 3
  %61 = load i64, i64* %60, align 8
  %62 = icmp ult i64 %58, %61
  br i1 %62, label %63, label %129

; <label>:63:                                     ; preds = %57
  store i64 0, i64* %19, align 8
  br label %64

; <label>:64:                                     ; preds = %122, %63
  %65 = load i64, i64* %19, align 8
  %66 = load i64*, i64** %10, align 8
  %67 = getelementptr inbounds i64, i64* %66, i64 4
  %68 = load i64, i64* %67, align 8
  %69 = icmp ult i64 %65, %68
  br i1 %69, label %70, label %125

; <label>:70:                                     ; preds = %64
  %71 = load i64, i64* %15, align 8
  %72 = load i64*, i64** %11, align 8
  %73 = getelementptr inbounds i64, i64* %72, i64 0
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %74
  store i64 %71, i64* %75, align 8
  %76 = load i64, i64* %16, align 8
  %77 = load i64*, i64** %11, align 8
  %78 = getelementptr inbounds i64, i64* %77, i64 1
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %79
  store i64 %76, i64* %80, align 8
  %81 = load i64, i64* %17, align 8
  %82 = load i64*, i64** %11, align 8
  %83 = getelementptr inbounds i64, i64* %82, i64 2
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %84
  store i64 %81, i64* %85, align 8
  %86 = load i64, i64* %18, align 8
  %87 = load i64*, i64** %11, align 8
  %88 = getelementptr inbounds i64, i64* %87, i64 3
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %89
  store i64 %86, i64* %90, align 8
  %91 = load i64, i64* %19, align 8
  %92 = load i64*, i64** %11, align 8
  %93 = getelementptr inbounds i64, i64* %92, i64 4
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %94
  store i64 %91, i64* %95, align 8
  %96 = load i8*, i8** %7, align 8
  %97 = load i64*, i64** %9, align 8
  %98 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 0
  %99 = load i64, i64* %98, align 16
  %100 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 1
  %101 = load i64, i64* %100, align 8
  %102 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 2
  %103 = load i64, i64* %102, align 16
  %104 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 3
  %105 = load i64, i64* %104, align 8
  %106 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 4
  %107 = load i64, i64* %106, align 16
  %108 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %97, i64 %99, i64 %101, i64 %103, i64 %105, i64 %107)
  %109 = getelementptr inbounds i8, i8* %96, i64 %108
  %110 = load i8, i8* %109, align 1
  %111 = trunc i8 %110 to i1
  %112 = load i8*, i8** %8, align 8
  %113 = load i64*, i64** %10, align 8
  %114 = load i64, i64* %15, align 8
  %115 = load i64, i64* %16, align 8
  %116 = load i64, i64* %17, align 8
  %117 = load i64, i64* %18, align 8
  %118 = load i64, i64* %19, align 8
  %119 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %113, i64 %114, i64 %115, i64 %116, i64 %117, i64 %118)
  %120 = getelementptr inbounds i8, i8* %112, i64 %119
  %121 = zext i1 %111 to i8
  store i8 %121, i8* %120, align 1
  br label %122

; <label>:122:                                    ; preds = %70
  %123 = load i64, i64* %19, align 8
  %124 = add i64 %123, 1
  store i64 %124, i64* %19, align 8
  br label %64

; <label>:125:                                    ; preds = %64
  br label %126

; <label>:126:                                    ; preds = %125
  %127 = load i64, i64* %18, align 8
  %128 = add i64 %127, 1
  store i64 %128, i64* %18, align 8
  br label %57

; <label>:129:                                    ; preds = %57
  br label %130

; <label>:130:                                    ; preds = %129
  %131 = load i64, i64* %17, align 8
  %132 = add i64 %131, 1
  store i64 %132, i64* %17, align 8
  br label %50

; <label>:133:                                    ; preds = %50
  br label %134

; <label>:134:                                    ; preds = %133
  %135 = load i64, i64* %16, align 8
  %136 = add i64 %135, 1
  store i64 %136, i64* %16, align 8
  br label %43

; <label>:137:                                    ; preds = %43
  br label %138

; <label>:138:                                    ; preds = %137
  %139 = load i64, i64* %15, align 8
  %140 = add i64 %139, 1
  store i64 %140, i64* %15, align 8
  br label %36

; <label>:141:                                    ; preds = %36
  br label %454

; <label>:142:                                    ; preds = %6
  %143 = load i64, i64* %12, align 8
  %144 = icmp eq i64 %143, 4
  br i1 %144, label %145, label %233

; <label>:145:                                    ; preds = %142
  store i64 0, i64* %20, align 8
  br label %146

; <label>:146:                                    ; preds = %229, %145
  %147 = load i64, i64* %20, align 8
  %148 = load i64*, i64** %10, align 8
  %149 = getelementptr inbounds i64, i64* %148, i64 0
  %150 = load i64, i64* %149, align 8
  %151 = icmp ult i64 %147, %150
  br i1 %151, label %152, label %232

; <label>:152:                                    ; preds = %146
  store i64 0, i64* %21, align 8
  br label %153

; <label>:153:                                    ; preds = %225, %152
  %154 = load i64, i64* %21, align 8
  %155 = load i64*, i64** %10, align 8
  %156 = getelementptr inbounds i64, i64* %155, i64 1
  %157 = load i64, i64* %156, align 8
  %158 = icmp ult i64 %154, %157
  br i1 %158, label %159, label %228

; <label>:159:                                    ; preds = %153
  store i64 0, i64* %22, align 8
  br label %160

; <label>:160:                                    ; preds = %221, %159
  %161 = load i64, i64* %22, align 8
  %162 = load i64*, i64** %10, align 8
  %163 = getelementptr inbounds i64, i64* %162, i64 2
  %164 = load i64, i64* %163, align 8
  %165 = icmp ult i64 %161, %164
  br i1 %165, label %166, label %224

; <label>:166:                                    ; preds = %160
  store i64 0, i64* %23, align 8
  br label %167

; <label>:167:                                    ; preds = %217, %166
  %168 = load i64, i64* %23, align 8
  %169 = load i64*, i64** %10, align 8
  %170 = getelementptr inbounds i64, i64* %169, i64 3
  %171 = load i64, i64* %170, align 8
  %172 = icmp ult i64 %168, %171
  br i1 %172, label %173, label %220

; <label>:173:                                    ; preds = %167
  %174 = load i64, i64* %20, align 8
  %175 = load i64*, i64** %11, align 8
  %176 = getelementptr inbounds i64, i64* %175, i64 0
  %177 = load i64, i64* %176, align 8
  %178 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %177
  store i64 %174, i64* %178, align 8
  %179 = load i64, i64* %21, align 8
  %180 = load i64*, i64** %11, align 8
  %181 = getelementptr inbounds i64, i64* %180, i64 1
  %182 = load i64, i64* %181, align 8
  %183 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %182
  store i64 %179, i64* %183, align 8
  %184 = load i64, i64* %22, align 8
  %185 = load i64*, i64** %11, align 8
  %186 = getelementptr inbounds i64, i64* %185, i64 2
  %187 = load i64, i64* %186, align 8
  %188 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %187
  store i64 %184, i64* %188, align 8
  %189 = load i64, i64* %23, align 8
  %190 = load i64*, i64** %11, align 8
  %191 = getelementptr inbounds i64, i64* %190, i64 3
  %192 = load i64, i64* %191, align 8
  %193 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %192
  store i64 %189, i64* %193, align 8
  %194 = load i8*, i8** %7, align 8
  %195 = load i64*, i64** %9, align 8
  %196 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 0
  %197 = load i64, i64* %196, align 16
  %198 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 1
  %199 = load i64, i64* %198, align 8
  %200 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 2
  %201 = load i64, i64* %200, align 16
  %202 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 3
  %203 = load i64, i64* %202, align 8
  %204 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %195, i64 %197, i64 %199, i64 %201, i64 %203)
  %205 = getelementptr inbounds i8, i8* %194, i64 %204
  %206 = load i8, i8* %205, align 1
  %207 = trunc i8 %206 to i1
  %208 = load i8*, i8** %8, align 8
  %209 = load i64*, i64** %10, align 8
  %210 = load i64, i64* %20, align 8
  %211 = load i64, i64* %21, align 8
  %212 = load i64, i64* %22, align 8
  %213 = load i64, i64* %23, align 8
  %214 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %209, i64 %210, i64 %211, i64 %212, i64 %213)
  %215 = getelementptr inbounds i8, i8* %208, i64 %214
  %216 = zext i1 %207 to i8
  store i8 %216, i8* %215, align 1
  br label %217

; <label>:217:                                    ; preds = %173
  %218 = load i64, i64* %23, align 8
  %219 = add i64 %218, 1
  store i64 %219, i64* %23, align 8
  br label %167

; <label>:220:                                    ; preds = %167
  br label %221

; <label>:221:                                    ; preds = %220
  %222 = load i64, i64* %22, align 8
  %223 = add i64 %222, 1
  store i64 %223, i64* %22, align 8
  br label %160

; <label>:224:                                    ; preds = %160
  br label %225

; <label>:225:                                    ; preds = %224
  %226 = load i64, i64* %21, align 8
  %227 = add i64 %226, 1
  store i64 %227, i64* %21, align 8
  br label %153

; <label>:228:                                    ; preds = %153
  br label %229

; <label>:229:                                    ; preds = %228
  %230 = load i64, i64* %20, align 8
  %231 = add i64 %230, 1
  store i64 %231, i64* %20, align 8
  br label %146

; <label>:232:                                    ; preds = %146
  br label %454

; <label>:233:                                    ; preds = %142
  %234 = load i64, i64* %12, align 8
  %235 = icmp eq i64 %234, 3
  br i1 %235, label %236, label %353

; <label>:236:                                    ; preds = %233
  store i64 0, i64* %24, align 8
  br label %237

; <label>:237:                                    ; preds = %349, %236
  %238 = load i64, i64* %24, align 8
  %239 = load i64*, i64** %10, align 8
  %240 = getelementptr inbounds i64, i64* %239, i64 0
  %241 = load i64, i64* %240, align 8
  %242 = icmp ult i64 %238, %241
  br i1 %242, label %243, label %352

; <label>:243:                                    ; preds = %237
  store i64 0, i64* %25, align 8
  br label %244

; <label>:244:                                    ; preds = %345, %243
  %245 = load i64, i64* %25, align 8
  %246 = load i64*, i64** %10, align 8
  %247 = getelementptr inbounds i64, i64* %246, i64 1
  %248 = load i64, i64* %247, align 8
  %249 = icmp ult i64 %245, %248
  br i1 %249, label %250, label %348

; <label>:250:                                    ; preds = %244
  store i64 0, i64* %26, align 8
  br label %251

; <label>:251:                                    ; preds = %341, %250
  %252 = load i64, i64* %26, align 8
  %253 = load i64*, i64** %10, align 8
  %254 = getelementptr inbounds i64, i64* %253, i64 2
  %255 = load i64, i64* %254, align 8
  %256 = icmp ult i64 %252, %255
  br i1 %256, label %257, label %344

; <label>:257:                                    ; preds = %251
  %258 = load i64, i64* %25, align 8
  store i64 %258, i64* %27, align 8
  br label %259

; <label>:259:                                    ; preds = %337, %257
  %260 = load i64, i64* %27, align 8
  %261 = load i64, i64* %25, align 8
  %262 = add i64 %261, 64
  %263 = load i64*, i64** %10, align 8
  %264 = getelementptr inbounds i64, i64* %263, i64 1
  %265 = load i64, i64* %264, align 8
  %266 = icmp ult i64 %262, %265
  br i1 %266, label %267, label %270

; <label>:267:                                    ; preds = %259
  %268 = load i64, i64* %25, align 8
  %269 = add i64 %268, 64
  br label %274

; <label>:270:                                    ; preds = %259
  %271 = load i64*, i64** %10, align 8
  %272 = getelementptr inbounds i64, i64* %271, i64 1
  %273 = load i64, i64* %272, align 8
  br label %274

; <label>:274:                                    ; preds = %270, %267
  %275 = phi i64 [ %269, %267 ], [ %273, %270 ]
  %276 = icmp ult i64 %260, %275
  br i1 %276, label %277, label %340

; <label>:277:                                    ; preds = %274
  %278 = load i64, i64* %26, align 8
  store i64 %278, i64* %28, align 8
  br label %279

; <label>:279:                                    ; preds = %333, %277
  %280 = load i64, i64* %28, align 8
  %281 = load i64, i64* %26, align 8
  %282 = add i64 %281, 64
  %283 = load i64*, i64** %10, align 8
  %284 = getelementptr inbounds i64, i64* %283, i64 2
  %285 = load i64, i64* %284, align 8
  %286 = icmp ult i64 %282, %285
  br i1 %286, label %287, label %290

; <label>:287:                                    ; preds = %279
  %288 = load i64, i64* %26, align 8
  %289 = add i64 %288, 64
  br label %294

; <label>:290:                                    ; preds = %279
  %291 = load i64*, i64** %10, align 8
  %292 = getelementptr inbounds i64, i64* %291, i64 2
  %293 = load i64, i64* %292, align 8
  br label %294

; <label>:294:                                    ; preds = %290, %287
  %295 = phi i64 [ %289, %287 ], [ %293, %290 ]
  %296 = icmp ult i64 %280, %295
  br i1 %296, label %297, label %336

; <label>:297:                                    ; preds = %294
  %298 = load i64, i64* %24, align 8
  %299 = load i64*, i64** %11, align 8
  %300 = getelementptr inbounds i64, i64* %299, i64 0
  %301 = load i64, i64* %300, align 8
  %302 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %301
  store i64 %298, i64* %302, align 8
  %303 = load i64, i64* %27, align 8
  %304 = load i64*, i64** %11, align 8
  %305 = getelementptr inbounds i64, i64* %304, i64 1
  %306 = load i64, i64* %305, align 8
  %307 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %306
  store i64 %303, i64* %307, align 8
  %308 = load i64, i64* %28, align 8
  %309 = load i64*, i64** %11, align 8
  %310 = getelementptr inbounds i64, i64* %309, i64 2
  %311 = load i64, i64* %310, align 8
  %312 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %311
  store i64 %308, i64* %312, align 8
  %313 = load i8*, i8** %7, align 8
  %314 = load i64*, i64** %9, align 8
  %315 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 0
  %316 = load i64, i64* %315, align 16
  %317 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 1
  %318 = load i64, i64* %317, align 8
  %319 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 2
  %320 = load i64, i64* %319, align 16
  %321 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %314, i64 %316, i64 %318, i64 %320)
  %322 = getelementptr inbounds i8, i8* %313, i64 %321
  %323 = load i8, i8* %322, align 1
  %324 = trunc i8 %323 to i1
  %325 = load i8*, i8** %8, align 8
  %326 = load i64*, i64** %10, align 8
  %327 = load i64, i64* %24, align 8
  %328 = load i64, i64* %27, align 8
  %329 = load i64, i64* %28, align 8
  %330 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %326, i64 %327, i64 %328, i64 %329)
  %331 = getelementptr inbounds i8, i8* %325, i64 %330
  %332 = zext i1 %324 to i8
  store i8 %332, i8* %331, align 1
  br label %333

; <label>:333:                                    ; preds = %297
  %334 = load i64, i64* %28, align 8
  %335 = add i64 %334, 1
  store i64 %335, i64* %28, align 8
  br label %279

; <label>:336:                                    ; preds = %294
  br label %337

; <label>:337:                                    ; preds = %336
  %338 = load i64, i64* %27, align 8
  %339 = add i64 %338, 1
  store i64 %339, i64* %27, align 8
  br label %259

; <label>:340:                                    ; preds = %274
  br label %341

; <label>:341:                                    ; preds = %340
  %342 = load i64, i64* %26, align 8
  %343 = add i64 %342, 64
  store i64 %343, i64* %26, align 8
  br label %251

; <label>:344:                                    ; preds = %251
  br label %345

; <label>:345:                                    ; preds = %344
  %346 = load i64, i64* %25, align 8
  %347 = add i64 %346, 64
  store i64 %347, i64* %25, align 8
  br label %244

; <label>:348:                                    ; preds = %244
  br label %349

; <label>:349:                                    ; preds = %348
  %350 = load i64, i64* %24, align 8
  %351 = add i64 %350, 1
  store i64 %351, i64* %24, align 8
  br label %237

; <label>:352:                                    ; preds = %237
  br label %454

; <label>:353:                                    ; preds = %233
  %354 = load i64, i64* %12, align 8
  %355 = icmp eq i64 %354, 2
  br i1 %355, label %356, label %454

; <label>:356:                                    ; preds = %353
  store i64 0, i64* %29, align 8
  br label %357

; <label>:357:                                    ; preds = %450, %356
  %358 = load i64, i64* %29, align 8
  %359 = load i64*, i64** %10, align 8
  %360 = getelementptr inbounds i64, i64* %359, i64 0
  %361 = load i64, i64* %360, align 8
  %362 = icmp ult i64 %358, %361
  br i1 %362, label %363, label %453

; <label>:363:                                    ; preds = %357
  store i64 0, i64* %30, align 8
  br label %364

; <label>:364:                                    ; preds = %446, %363
  %365 = load i64, i64* %30, align 8
  %366 = load i64*, i64** %10, align 8
  %367 = getelementptr inbounds i64, i64* %366, i64 1
  %368 = load i64, i64* %367, align 8
  %369 = icmp ult i64 %365, %368
  br i1 %369, label %370, label %449

; <label>:370:                                    ; preds = %364
  %371 = load i64, i64* %29, align 8
  store i64 %371, i64* %31, align 8
  br label %372

; <label>:372:                                    ; preds = %442, %370
  %373 = load i64, i64* %31, align 8
  %374 = load i64, i64* %29, align 8
  %375 = add i64 %374, 64
  %376 = load i64*, i64** %10, align 8
  %377 = getelementptr inbounds i64, i64* %376, i64 0
  %378 = load i64, i64* %377, align 8
  %379 = icmp ult i64 %375, %378
  br i1 %379, label %380, label %383

; <label>:380:                                    ; preds = %372
  %381 = load i64, i64* %29, align 8
  %382 = add i64 %381, 64
  br label %387

; <label>:383:                                    ; preds = %372
  %384 = load i64*, i64** %10, align 8
  %385 = getelementptr inbounds i64, i64* %384, i64 0
  %386 = load i64, i64* %385, align 8
  br label %387

; <label>:387:                                    ; preds = %383, %380
  %388 = phi i64 [ %382, %380 ], [ %386, %383 ]
  %389 = icmp ult i64 %373, %388
  br i1 %389, label %390, label %445

; <label>:390:                                    ; preds = %387
  %391 = load i64, i64* %30, align 8
  store i64 %391, i64* %32, align 8
  br label %392

; <label>:392:                                    ; preds = %438, %390
  %393 = load i64, i64* %32, align 8
  %394 = load i64, i64* %30, align 8
  %395 = add i64 %394, 64
  %396 = load i64*, i64** %10, align 8
  %397 = getelementptr inbounds i64, i64* %396, i64 1
  %398 = load i64, i64* %397, align 8
  %399 = icmp ult i64 %395, %398
  br i1 %399, label %400, label %403

; <label>:400:                                    ; preds = %392
  %401 = load i64, i64* %30, align 8
  %402 = add i64 %401, 64
  br label %407

; <label>:403:                                    ; preds = %392
  %404 = load i64*, i64** %10, align 8
  %405 = getelementptr inbounds i64, i64* %404, i64 1
  %406 = load i64, i64* %405, align 8
  br label %407

; <label>:407:                                    ; preds = %403, %400
  %408 = phi i64 [ %402, %400 ], [ %406, %403 ]
  %409 = icmp ult i64 %393, %408
  br i1 %409, label %410, label %441

; <label>:410:                                    ; preds = %407
  %411 = load i64, i64* %31, align 8
  %412 = load i64*, i64** %11, align 8
  %413 = getelementptr inbounds i64, i64* %412, i64 0
  %414 = load i64, i64* %413, align 8
  %415 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %414
  store i64 %411, i64* %415, align 8
  %416 = load i64, i64* %32, align 8
  %417 = load i64*, i64** %11, align 8
  %418 = getelementptr inbounds i64, i64* %417, i64 1
  %419 = load i64, i64* %418, align 8
  %420 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %419
  store i64 %416, i64* %420, align 8
  %421 = load i8*, i8** %7, align 8
  %422 = load i64*, i64** %9, align 8
  %423 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 0
  %424 = load i64, i64* %423, align 16
  %425 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 1
  %426 = load i64, i64* %425, align 8
  %427 = call i64 @_Z12libjit_getXYPKmmm(i64* %422, i64 %424, i64 %426)
  %428 = getelementptr inbounds i8, i8* %421, i64 %427
  %429 = load i8, i8* %428, align 1
  %430 = trunc i8 %429 to i1
  %431 = load i8*, i8** %8, align 8
  %432 = load i64*, i64** %10, align 8
  %433 = load i64, i64* %31, align 8
  %434 = load i64, i64* %32, align 8
  %435 = call i64 @_Z12libjit_getXYPKmmm(i64* %432, i64 %433, i64 %434)
  %436 = getelementptr inbounds i8, i8* %431, i64 %435
  %437 = zext i1 %430 to i8
  store i8 %437, i8* %436, align 1
  br label %438

; <label>:438:                                    ; preds = %410
  %439 = load i64, i64* %32, align 8
  %440 = add i64 %439, 1
  store i64 %440, i64* %32, align 8
  br label %392

; <label>:441:                                    ; preds = %407
  br label %442

; <label>:442:                                    ; preds = %441
  %443 = load i64, i64* %31, align 8
  %444 = add i64 %443, 1
  store i64 %444, i64* %31, align 8
  br label %372

; <label>:445:                                    ; preds = %387
  br label %446

; <label>:446:                                    ; preds = %445
  %447 = load i64, i64* %30, align 8
  %448 = add i64 %447, 64
  store i64 %448, i64* %30, align 8
  br label %364

; <label>:449:                                    ; preds = %364
  br label %450

; <label>:450:                                    ; preds = %449
  %451 = load i64, i64* %29, align 8
  %452 = add i64 %451, 64
  store i64 %452, i64* %29, align 8
  br label %357

; <label>:453:                                    ; preds = %357
  br label %454

; <label>:454:                                    ; preds = %141, %232, %352, %453, %353
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_flip_i8(i8*, i8*, i64*, i64, i64) #2 {
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  store i8* %0, i8** %6, align 8
  store i8* %1, i8** %7, align 8
  store i64* %2, i64** %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  %11 = load i8*, i8** %6, align 8
  %12 = load i8*, i8** %7, align 8
  %13 = load i64*, i64** %8, align 8
  %14 = load i64, i64* %9, align 8
  %15 = load i64, i64* %10, align 8
  call void @_ZN12_GLOBAL__N_119libjit_flip_genericIaEEvPKT_PS1_PKmmm(i8* %11, i8* %12, i64* %13, i64 %14, i64 %15)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_119libjit_flip_genericIaEEvPKT_PS1_PKmmm(i8*, i8*, i64*, i64, i64) #0 {
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  store i8* %0, i8** %6, align 8
  store i8* %1, i8** %7, align 8
  store i64* %2, i64** %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  store i64 1, i64* %11, align 8
  store i64 0, i64* %12, align 8
  br label %21

; <label>:21:                                     ; preds = %32, %5
  %22 = load i64, i64* %12, align 8
  %23 = load i64, i64* %9, align 8
  %24 = icmp ult i64 %22, %23
  br i1 %24, label %25, label %35

; <label>:25:                                     ; preds = %21
  %26 = load i64*, i64** %8, align 8
  %27 = load i64, i64* %12, align 8
  %28 = getelementptr inbounds i64, i64* %26, i64 %27
  %29 = load i64, i64* %28, align 8
  %30 = load i64, i64* %11, align 8
  %31 = mul i64 %30, %29
  store i64 %31, i64* %11, align 8
  br label %32

; <label>:32:                                     ; preds = %25
  %33 = load i64, i64* %12, align 8
  %34 = add i64 %33, 1
  store i64 %34, i64* %12, align 8
  br label %21

; <label>:35:                                     ; preds = %21
  %36 = load i64*, i64** %8, align 8
  %37 = load i64, i64* %9, align 8
  %38 = getelementptr inbounds i64, i64* %36, i64 %37
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %13, align 8
  store i64 1, i64* %14, align 8
  %40 = load i64, i64* %9, align 8
  %41 = add i64 %40, 1
  store i64 %41, i64* %15, align 8
  br label %42

; <label>:42:                                     ; preds = %53, %35
  %43 = load i64, i64* %15, align 8
  %44 = load i64, i64* %10, align 8
  %45 = icmp ult i64 %43, %44
  br i1 %45, label %46, label %56

; <label>:46:                                     ; preds = %42
  %47 = load i64*, i64** %8, align 8
  %48 = load i64, i64* %15, align 8
  %49 = getelementptr inbounds i64, i64* %47, i64 %48
  %50 = load i64, i64* %49, align 8
  %51 = load i64, i64* %14, align 8
  %52 = mul i64 %51, %50
  store i64 %52, i64* %14, align 8
  br label %53

; <label>:53:                                     ; preds = %46
  %54 = load i64, i64* %15, align 8
  %55 = add i64 %54, 1
  store i64 %55, i64* %15, align 8
  br label %42

; <label>:56:                                     ; preds = %42
  %57 = load i8*, i8** %6, align 8
  store i8* %57, i8** %16, align 8
  %58 = load i8*, i8** %7, align 8
  %59 = load i64, i64* %13, align 8
  %60 = sub i64 %59, 1
  %61 = load i64, i64* %14, align 8
  %62 = mul i64 %60, %61
  %63 = getelementptr inbounds i8, i8* %58, i64 %62
  store i8* %63, i8** %17, align 8
  store i64 0, i64* %18, align 8
  br label %64

; <label>:64:                                     ; preds = %103, %56
  %65 = load i64, i64* %18, align 8
  %66 = load i64, i64* %11, align 8
  %67 = icmp ult i64 %65, %66
  br i1 %67, label %68, label %106

; <label>:68:                                     ; preds = %64
  store i64 0, i64* %19, align 8
  br label %69

; <label>:69:                                     ; preds = %93, %68
  %70 = load i64, i64* %19, align 8
  %71 = load i64, i64* %13, align 8
  %72 = icmp ult i64 %70, %71
  br i1 %72, label %73, label %96

; <label>:73:                                     ; preds = %69
  store i64 0, i64* %20, align 8
  br label %74

; <label>:74:                                     ; preds = %84, %73
  %75 = load i64, i64* %20, align 8
  %76 = load i64, i64* %14, align 8
  %77 = icmp ult i64 %75, %76
  br i1 %77, label %78, label %87

; <label>:78:                                     ; preds = %74
  %79 = load i8*, i8** %16, align 8
  %80 = getelementptr inbounds i8, i8* %79, i32 1
  store i8* %80, i8** %16, align 8
  %81 = load i8, i8* %79, align 1
  %82 = load i8*, i8** %17, align 8
  %83 = getelementptr inbounds i8, i8* %82, i32 1
  store i8* %83, i8** %17, align 8
  store i8 %81, i8* %82, align 1
  br label %84

; <label>:84:                                     ; preds = %78
  %85 = load i64, i64* %20, align 8
  %86 = add i64 %85, 1
  store i64 %86, i64* %20, align 8
  br label %74

; <label>:87:                                     ; preds = %74
  %88 = load i64, i64* %14, align 8
  %89 = mul i64 2, %88
  %90 = load i8*, i8** %17, align 8
  %91 = sub i64 0, %89
  %92 = getelementptr inbounds i8, i8* %90, i64 %91
  store i8* %92, i8** %17, align 8
  br label %93

; <label>:93:                                     ; preds = %87
  %94 = load i64, i64* %19, align 8
  %95 = add i64 %94, 1
  store i64 %95, i64* %19, align 8
  br label %69

; <label>:96:                                     ; preds = %69
  %97 = load i64, i64* %13, align 8
  %98 = mul i64 2, %97
  %99 = load i64, i64* %14, align 8
  %100 = mul i64 %98, %99
  %101 = load i8*, i8** %17, align 8
  %102 = getelementptr inbounds i8, i8* %101, i64 %100
  store i8* %102, i8** %17, align 8
  br label %103

; <label>:103:                                    ; preds = %96
  %104 = load i64, i64* %18, align 8
  %105 = add i64 %104, 1
  store i64 %105, i64* %18, align 8
  br label %64

; <label>:106:                                    ; preds = %64
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_flip_i16(i16*, i16*, i64*, i64, i64) #2 {
  %6 = alloca i16*, align 8
  %7 = alloca i16*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  store i16* %0, i16** %6, align 8
  store i16* %1, i16** %7, align 8
  store i64* %2, i64** %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  %11 = load i16*, i16** %6, align 8
  %12 = load i16*, i16** %7, align 8
  %13 = load i64*, i64** %8, align 8
  %14 = load i64, i64* %9, align 8
  %15 = load i64, i64* %10, align 8
  call void @_ZN12_GLOBAL__N_119libjit_flip_genericIsEEvPKT_PS1_PKmmm(i16* %11, i16* %12, i64* %13, i64 %14, i64 %15)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_119libjit_flip_genericIsEEvPKT_PS1_PKmmm(i16*, i16*, i64*, i64, i64) #0 {
  %6 = alloca i16*, align 8
  %7 = alloca i16*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i16*, align 8
  %17 = alloca i16*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  store i16* %0, i16** %6, align 8
  store i16* %1, i16** %7, align 8
  store i64* %2, i64** %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  store i64 1, i64* %11, align 8
  store i64 0, i64* %12, align 8
  br label %21

; <label>:21:                                     ; preds = %32, %5
  %22 = load i64, i64* %12, align 8
  %23 = load i64, i64* %9, align 8
  %24 = icmp ult i64 %22, %23
  br i1 %24, label %25, label %35

; <label>:25:                                     ; preds = %21
  %26 = load i64*, i64** %8, align 8
  %27 = load i64, i64* %12, align 8
  %28 = getelementptr inbounds i64, i64* %26, i64 %27
  %29 = load i64, i64* %28, align 8
  %30 = load i64, i64* %11, align 8
  %31 = mul i64 %30, %29
  store i64 %31, i64* %11, align 8
  br label %32

; <label>:32:                                     ; preds = %25
  %33 = load i64, i64* %12, align 8
  %34 = add i64 %33, 1
  store i64 %34, i64* %12, align 8
  br label %21

; <label>:35:                                     ; preds = %21
  %36 = load i64*, i64** %8, align 8
  %37 = load i64, i64* %9, align 8
  %38 = getelementptr inbounds i64, i64* %36, i64 %37
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %13, align 8
  store i64 1, i64* %14, align 8
  %40 = load i64, i64* %9, align 8
  %41 = add i64 %40, 1
  store i64 %41, i64* %15, align 8
  br label %42

; <label>:42:                                     ; preds = %53, %35
  %43 = load i64, i64* %15, align 8
  %44 = load i64, i64* %10, align 8
  %45 = icmp ult i64 %43, %44
  br i1 %45, label %46, label %56

; <label>:46:                                     ; preds = %42
  %47 = load i64*, i64** %8, align 8
  %48 = load i64, i64* %15, align 8
  %49 = getelementptr inbounds i64, i64* %47, i64 %48
  %50 = load i64, i64* %49, align 8
  %51 = load i64, i64* %14, align 8
  %52 = mul i64 %51, %50
  store i64 %52, i64* %14, align 8
  br label %53

; <label>:53:                                     ; preds = %46
  %54 = load i64, i64* %15, align 8
  %55 = add i64 %54, 1
  store i64 %55, i64* %15, align 8
  br label %42

; <label>:56:                                     ; preds = %42
  %57 = load i16*, i16** %6, align 8
  store i16* %57, i16** %16, align 8
  %58 = load i16*, i16** %7, align 8
  %59 = load i64, i64* %13, align 8
  %60 = sub i64 %59, 1
  %61 = load i64, i64* %14, align 8
  %62 = mul i64 %60, %61
  %63 = getelementptr inbounds i16, i16* %58, i64 %62
  store i16* %63, i16** %17, align 8
  store i64 0, i64* %18, align 8
  br label %64

; <label>:64:                                     ; preds = %103, %56
  %65 = load i64, i64* %18, align 8
  %66 = load i64, i64* %11, align 8
  %67 = icmp ult i64 %65, %66
  br i1 %67, label %68, label %106

; <label>:68:                                     ; preds = %64
  store i64 0, i64* %19, align 8
  br label %69

; <label>:69:                                     ; preds = %93, %68
  %70 = load i64, i64* %19, align 8
  %71 = load i64, i64* %13, align 8
  %72 = icmp ult i64 %70, %71
  br i1 %72, label %73, label %96

; <label>:73:                                     ; preds = %69
  store i64 0, i64* %20, align 8
  br label %74

; <label>:74:                                     ; preds = %84, %73
  %75 = load i64, i64* %20, align 8
  %76 = load i64, i64* %14, align 8
  %77 = icmp ult i64 %75, %76
  br i1 %77, label %78, label %87

; <label>:78:                                     ; preds = %74
  %79 = load i16*, i16** %16, align 8
  %80 = getelementptr inbounds i16, i16* %79, i32 1
  store i16* %80, i16** %16, align 8
  %81 = load i16, i16* %79, align 2
  %82 = load i16*, i16** %17, align 8
  %83 = getelementptr inbounds i16, i16* %82, i32 1
  store i16* %83, i16** %17, align 8
  store i16 %81, i16* %82, align 2
  br label %84

; <label>:84:                                     ; preds = %78
  %85 = load i64, i64* %20, align 8
  %86 = add i64 %85, 1
  store i64 %86, i64* %20, align 8
  br label %74

; <label>:87:                                     ; preds = %74
  %88 = load i64, i64* %14, align 8
  %89 = mul i64 2, %88
  %90 = load i16*, i16** %17, align 8
  %91 = sub i64 0, %89
  %92 = getelementptr inbounds i16, i16* %90, i64 %91
  store i16* %92, i16** %17, align 8
  br label %93

; <label>:93:                                     ; preds = %87
  %94 = load i64, i64* %19, align 8
  %95 = add i64 %94, 1
  store i64 %95, i64* %19, align 8
  br label %69

; <label>:96:                                     ; preds = %69
  %97 = load i64, i64* %13, align 8
  %98 = mul i64 2, %97
  %99 = load i64, i64* %14, align 8
  %100 = mul i64 %98, %99
  %101 = load i16*, i16** %17, align 8
  %102 = getelementptr inbounds i16, i16* %101, i64 %100
  store i16* %102, i16** %17, align 8
  br label %103

; <label>:103:                                    ; preds = %96
  %104 = load i64, i64* %18, align 8
  %105 = add i64 %104, 1
  store i64 %105, i64* %18, align 8
  br label %64

; <label>:106:                                    ; preds = %64
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_flip_i32(i32*, i32*, i64*, i64, i64) #2 {
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  store i32* %0, i32** %6, align 8
  store i32* %1, i32** %7, align 8
  store i64* %2, i64** %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  %11 = load i32*, i32** %6, align 8
  %12 = load i32*, i32** %7, align 8
  %13 = load i64*, i64** %8, align 8
  %14 = load i64, i64* %9, align 8
  %15 = load i64, i64* %10, align 8
  call void @_ZN12_GLOBAL__N_119libjit_flip_genericIiEEvPKT_PS1_PKmmm(i32* %11, i32* %12, i64* %13, i64 %14, i64 %15)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_119libjit_flip_genericIiEEvPKT_PS1_PKmmm(i32*, i32*, i64*, i64, i64) #0 {
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i32*, align 8
  %17 = alloca i32*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  store i32* %0, i32** %6, align 8
  store i32* %1, i32** %7, align 8
  store i64* %2, i64** %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  store i64 1, i64* %11, align 8
  store i64 0, i64* %12, align 8
  br label %21

; <label>:21:                                     ; preds = %32, %5
  %22 = load i64, i64* %12, align 8
  %23 = load i64, i64* %9, align 8
  %24 = icmp ult i64 %22, %23
  br i1 %24, label %25, label %35

; <label>:25:                                     ; preds = %21
  %26 = load i64*, i64** %8, align 8
  %27 = load i64, i64* %12, align 8
  %28 = getelementptr inbounds i64, i64* %26, i64 %27
  %29 = load i64, i64* %28, align 8
  %30 = load i64, i64* %11, align 8
  %31 = mul i64 %30, %29
  store i64 %31, i64* %11, align 8
  br label %32

; <label>:32:                                     ; preds = %25
  %33 = load i64, i64* %12, align 8
  %34 = add i64 %33, 1
  store i64 %34, i64* %12, align 8
  br label %21

; <label>:35:                                     ; preds = %21
  %36 = load i64*, i64** %8, align 8
  %37 = load i64, i64* %9, align 8
  %38 = getelementptr inbounds i64, i64* %36, i64 %37
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %13, align 8
  store i64 1, i64* %14, align 8
  %40 = load i64, i64* %9, align 8
  %41 = add i64 %40, 1
  store i64 %41, i64* %15, align 8
  br label %42

; <label>:42:                                     ; preds = %53, %35
  %43 = load i64, i64* %15, align 8
  %44 = load i64, i64* %10, align 8
  %45 = icmp ult i64 %43, %44
  br i1 %45, label %46, label %56

; <label>:46:                                     ; preds = %42
  %47 = load i64*, i64** %8, align 8
  %48 = load i64, i64* %15, align 8
  %49 = getelementptr inbounds i64, i64* %47, i64 %48
  %50 = load i64, i64* %49, align 8
  %51 = load i64, i64* %14, align 8
  %52 = mul i64 %51, %50
  store i64 %52, i64* %14, align 8
  br label %53

; <label>:53:                                     ; preds = %46
  %54 = load i64, i64* %15, align 8
  %55 = add i64 %54, 1
  store i64 %55, i64* %15, align 8
  br label %42

; <label>:56:                                     ; preds = %42
  %57 = load i32*, i32** %6, align 8
  store i32* %57, i32** %16, align 8
  %58 = load i32*, i32** %7, align 8
  %59 = load i64, i64* %13, align 8
  %60 = sub i64 %59, 1
  %61 = load i64, i64* %14, align 8
  %62 = mul i64 %60, %61
  %63 = getelementptr inbounds i32, i32* %58, i64 %62
  store i32* %63, i32** %17, align 8
  store i64 0, i64* %18, align 8
  br label %64

; <label>:64:                                     ; preds = %103, %56
  %65 = load i64, i64* %18, align 8
  %66 = load i64, i64* %11, align 8
  %67 = icmp ult i64 %65, %66
  br i1 %67, label %68, label %106

; <label>:68:                                     ; preds = %64
  store i64 0, i64* %19, align 8
  br label %69

; <label>:69:                                     ; preds = %93, %68
  %70 = load i64, i64* %19, align 8
  %71 = load i64, i64* %13, align 8
  %72 = icmp ult i64 %70, %71
  br i1 %72, label %73, label %96

; <label>:73:                                     ; preds = %69
  store i64 0, i64* %20, align 8
  br label %74

; <label>:74:                                     ; preds = %84, %73
  %75 = load i64, i64* %20, align 8
  %76 = load i64, i64* %14, align 8
  %77 = icmp ult i64 %75, %76
  br i1 %77, label %78, label %87

; <label>:78:                                     ; preds = %74
  %79 = load i32*, i32** %16, align 8
  %80 = getelementptr inbounds i32, i32* %79, i32 1
  store i32* %80, i32** %16, align 8
  %81 = load i32, i32* %79, align 4
  %82 = load i32*, i32** %17, align 8
  %83 = getelementptr inbounds i32, i32* %82, i32 1
  store i32* %83, i32** %17, align 8
  store i32 %81, i32* %82, align 4
  br label %84

; <label>:84:                                     ; preds = %78
  %85 = load i64, i64* %20, align 8
  %86 = add i64 %85, 1
  store i64 %86, i64* %20, align 8
  br label %74

; <label>:87:                                     ; preds = %74
  %88 = load i64, i64* %14, align 8
  %89 = mul i64 2, %88
  %90 = load i32*, i32** %17, align 8
  %91 = sub i64 0, %89
  %92 = getelementptr inbounds i32, i32* %90, i64 %91
  store i32* %92, i32** %17, align 8
  br label %93

; <label>:93:                                     ; preds = %87
  %94 = load i64, i64* %19, align 8
  %95 = add i64 %94, 1
  store i64 %95, i64* %19, align 8
  br label %69

; <label>:96:                                     ; preds = %69
  %97 = load i64, i64* %13, align 8
  %98 = mul i64 2, %97
  %99 = load i64, i64* %14, align 8
  %100 = mul i64 %98, %99
  %101 = load i32*, i32** %17, align 8
  %102 = getelementptr inbounds i32, i32* %101, i64 %100
  store i32* %102, i32** %17, align 8
  br label %103

; <label>:103:                                    ; preds = %96
  %104 = load i64, i64* %18, align 8
  %105 = add i64 %104, 1
  store i64 %105, i64* %18, align 8
  br label %64

; <label>:106:                                    ; preds = %64
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_flip_u(i64*, i64*, i64*, i64, i64) #2 {
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  store i64* %0, i64** %6, align 8
  store i64* %1, i64** %7, align 8
  store i64* %2, i64** %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  %11 = load i64*, i64** %6, align 8
  %12 = load i64*, i64** %7, align 8
  %13 = load i64*, i64** %8, align 8
  %14 = load i64, i64* %9, align 8
  %15 = load i64, i64* %10, align 8
  call void @_ZN12_GLOBAL__N_119libjit_flip_genericIlEEvPKT_PS1_PKmmm(i64* %11, i64* %12, i64* %13, i64 %14, i64 %15)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_119libjit_flip_genericIlEEvPKT_PS1_PKmmm(i64*, i64*, i64*, i64, i64) #0 {
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64*, align 8
  %17 = alloca i64*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  store i64* %0, i64** %6, align 8
  store i64* %1, i64** %7, align 8
  store i64* %2, i64** %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  store i64 1, i64* %11, align 8
  store i64 0, i64* %12, align 8
  br label %21

; <label>:21:                                     ; preds = %32, %5
  %22 = load i64, i64* %12, align 8
  %23 = load i64, i64* %9, align 8
  %24 = icmp ult i64 %22, %23
  br i1 %24, label %25, label %35

; <label>:25:                                     ; preds = %21
  %26 = load i64*, i64** %8, align 8
  %27 = load i64, i64* %12, align 8
  %28 = getelementptr inbounds i64, i64* %26, i64 %27
  %29 = load i64, i64* %28, align 8
  %30 = load i64, i64* %11, align 8
  %31 = mul i64 %30, %29
  store i64 %31, i64* %11, align 8
  br label %32

; <label>:32:                                     ; preds = %25
  %33 = load i64, i64* %12, align 8
  %34 = add i64 %33, 1
  store i64 %34, i64* %12, align 8
  br label %21

; <label>:35:                                     ; preds = %21
  %36 = load i64*, i64** %8, align 8
  %37 = load i64, i64* %9, align 8
  %38 = getelementptr inbounds i64, i64* %36, i64 %37
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %13, align 8
  store i64 1, i64* %14, align 8
  %40 = load i64, i64* %9, align 8
  %41 = add i64 %40, 1
  store i64 %41, i64* %15, align 8
  br label %42

; <label>:42:                                     ; preds = %53, %35
  %43 = load i64, i64* %15, align 8
  %44 = load i64, i64* %10, align 8
  %45 = icmp ult i64 %43, %44
  br i1 %45, label %46, label %56

; <label>:46:                                     ; preds = %42
  %47 = load i64*, i64** %8, align 8
  %48 = load i64, i64* %15, align 8
  %49 = getelementptr inbounds i64, i64* %47, i64 %48
  %50 = load i64, i64* %49, align 8
  %51 = load i64, i64* %14, align 8
  %52 = mul i64 %51, %50
  store i64 %52, i64* %14, align 8
  br label %53

; <label>:53:                                     ; preds = %46
  %54 = load i64, i64* %15, align 8
  %55 = add i64 %54, 1
  store i64 %55, i64* %15, align 8
  br label %42

; <label>:56:                                     ; preds = %42
  %57 = load i64*, i64** %6, align 8
  store i64* %57, i64** %16, align 8
  %58 = load i64*, i64** %7, align 8
  %59 = load i64, i64* %13, align 8
  %60 = sub i64 %59, 1
  %61 = load i64, i64* %14, align 8
  %62 = mul i64 %60, %61
  %63 = getelementptr inbounds i64, i64* %58, i64 %62
  store i64* %63, i64** %17, align 8
  store i64 0, i64* %18, align 8
  br label %64

; <label>:64:                                     ; preds = %103, %56
  %65 = load i64, i64* %18, align 8
  %66 = load i64, i64* %11, align 8
  %67 = icmp ult i64 %65, %66
  br i1 %67, label %68, label %106

; <label>:68:                                     ; preds = %64
  store i64 0, i64* %19, align 8
  br label %69

; <label>:69:                                     ; preds = %93, %68
  %70 = load i64, i64* %19, align 8
  %71 = load i64, i64* %13, align 8
  %72 = icmp ult i64 %70, %71
  br i1 %72, label %73, label %96

; <label>:73:                                     ; preds = %69
  store i64 0, i64* %20, align 8
  br label %74

; <label>:74:                                     ; preds = %84, %73
  %75 = load i64, i64* %20, align 8
  %76 = load i64, i64* %14, align 8
  %77 = icmp ult i64 %75, %76
  br i1 %77, label %78, label %87

; <label>:78:                                     ; preds = %74
  %79 = load i64*, i64** %16, align 8
  %80 = getelementptr inbounds i64, i64* %79, i32 1
  store i64* %80, i64** %16, align 8
  %81 = load i64, i64* %79, align 8
  %82 = load i64*, i64** %17, align 8
  %83 = getelementptr inbounds i64, i64* %82, i32 1
  store i64* %83, i64** %17, align 8
  store i64 %81, i64* %82, align 8
  br label %84

; <label>:84:                                     ; preds = %78
  %85 = load i64, i64* %20, align 8
  %86 = add i64 %85, 1
  store i64 %86, i64* %20, align 8
  br label %74

; <label>:87:                                     ; preds = %74
  %88 = load i64, i64* %14, align 8
  %89 = mul i64 2, %88
  %90 = load i64*, i64** %17, align 8
  %91 = sub i64 0, %89
  %92 = getelementptr inbounds i64, i64* %90, i64 %91
  store i64* %92, i64** %17, align 8
  br label %93

; <label>:93:                                     ; preds = %87
  %94 = load i64, i64* %19, align 8
  %95 = add i64 %94, 1
  store i64 %95, i64* %19, align 8
  br label %69

; <label>:96:                                     ; preds = %69
  %97 = load i64, i64* %13, align 8
  %98 = mul i64 2, %97
  %99 = load i64, i64* %14, align 8
  %100 = mul i64 %98, %99
  %101 = load i64*, i64** %17, align 8
  %102 = getelementptr inbounds i64, i64* %101, i64 %100
  store i64* %102, i64** %17, align 8
  br label %103

; <label>:103:                                    ; preds = %96
  %104 = load i64, i64* %18, align 8
  %105 = add i64 %104, 1
  store i64 %105, i64* %18, align 8
  br label %64

; <label>:106:                                    ; preds = %64
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_flip_f(float*, float*, i64*, i64, i64) #2 {
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  store float* %0, float** %6, align 8
  store float* %1, float** %7, align 8
  store i64* %2, i64** %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  %11 = load float*, float** %6, align 8
  %12 = load float*, float** %7, align 8
  %13 = load i64*, i64** %8, align 8
  %14 = load i64, i64* %9, align 8
  %15 = load i64, i64* %10, align 8
  call void @_ZN12_GLOBAL__N_119libjit_flip_genericIfEEvPKT_PS1_PKmmm(float* %11, float* %12, i64* %13, i64 %14, i64 %15)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_119libjit_flip_genericIfEEvPKT_PS1_PKmmm(float*, float*, i64*, i64, i64) #0 {
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca float*, align 8
  %17 = alloca float*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  store float* %0, float** %6, align 8
  store float* %1, float** %7, align 8
  store i64* %2, i64** %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  store i64 1, i64* %11, align 8
  store i64 0, i64* %12, align 8
  br label %21

; <label>:21:                                     ; preds = %32, %5
  %22 = load i64, i64* %12, align 8
  %23 = load i64, i64* %9, align 8
  %24 = icmp ult i64 %22, %23
  br i1 %24, label %25, label %35

; <label>:25:                                     ; preds = %21
  %26 = load i64*, i64** %8, align 8
  %27 = load i64, i64* %12, align 8
  %28 = getelementptr inbounds i64, i64* %26, i64 %27
  %29 = load i64, i64* %28, align 8
  %30 = load i64, i64* %11, align 8
  %31 = mul i64 %30, %29
  store i64 %31, i64* %11, align 8
  br label %32

; <label>:32:                                     ; preds = %25
  %33 = load i64, i64* %12, align 8
  %34 = add i64 %33, 1
  store i64 %34, i64* %12, align 8
  br label %21

; <label>:35:                                     ; preds = %21
  %36 = load i64*, i64** %8, align 8
  %37 = load i64, i64* %9, align 8
  %38 = getelementptr inbounds i64, i64* %36, i64 %37
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %13, align 8
  store i64 1, i64* %14, align 8
  %40 = load i64, i64* %9, align 8
  %41 = add i64 %40, 1
  store i64 %41, i64* %15, align 8
  br label %42

; <label>:42:                                     ; preds = %53, %35
  %43 = load i64, i64* %15, align 8
  %44 = load i64, i64* %10, align 8
  %45 = icmp ult i64 %43, %44
  br i1 %45, label %46, label %56

; <label>:46:                                     ; preds = %42
  %47 = load i64*, i64** %8, align 8
  %48 = load i64, i64* %15, align 8
  %49 = getelementptr inbounds i64, i64* %47, i64 %48
  %50 = load i64, i64* %49, align 8
  %51 = load i64, i64* %14, align 8
  %52 = mul i64 %51, %50
  store i64 %52, i64* %14, align 8
  br label %53

; <label>:53:                                     ; preds = %46
  %54 = load i64, i64* %15, align 8
  %55 = add i64 %54, 1
  store i64 %55, i64* %15, align 8
  br label %42

; <label>:56:                                     ; preds = %42
  %57 = load float*, float** %6, align 8
  store float* %57, float** %16, align 8
  %58 = load float*, float** %7, align 8
  %59 = load i64, i64* %13, align 8
  %60 = sub i64 %59, 1
  %61 = load i64, i64* %14, align 8
  %62 = mul i64 %60, %61
  %63 = getelementptr inbounds float, float* %58, i64 %62
  store float* %63, float** %17, align 8
  store i64 0, i64* %18, align 8
  br label %64

; <label>:64:                                     ; preds = %103, %56
  %65 = load i64, i64* %18, align 8
  %66 = load i64, i64* %11, align 8
  %67 = icmp ult i64 %65, %66
  br i1 %67, label %68, label %106

; <label>:68:                                     ; preds = %64
  store i64 0, i64* %19, align 8
  br label %69

; <label>:69:                                     ; preds = %93, %68
  %70 = load i64, i64* %19, align 8
  %71 = load i64, i64* %13, align 8
  %72 = icmp ult i64 %70, %71
  br i1 %72, label %73, label %96

; <label>:73:                                     ; preds = %69
  store i64 0, i64* %20, align 8
  br label %74

; <label>:74:                                     ; preds = %84, %73
  %75 = load i64, i64* %20, align 8
  %76 = load i64, i64* %14, align 8
  %77 = icmp ult i64 %75, %76
  br i1 %77, label %78, label %87

; <label>:78:                                     ; preds = %74
  %79 = load float*, float** %16, align 8
  %80 = getelementptr inbounds float, float* %79, i32 1
  store float* %80, float** %16, align 8
  %81 = load float, float* %79, align 4
  %82 = load float*, float** %17, align 8
  %83 = getelementptr inbounds float, float* %82, i32 1
  store float* %83, float** %17, align 8
  store float %81, float* %82, align 4
  br label %84

; <label>:84:                                     ; preds = %78
  %85 = load i64, i64* %20, align 8
  %86 = add i64 %85, 1
  store i64 %86, i64* %20, align 8
  br label %74

; <label>:87:                                     ; preds = %74
  %88 = load i64, i64* %14, align 8
  %89 = mul i64 2, %88
  %90 = load float*, float** %17, align 8
  %91 = sub i64 0, %89
  %92 = getelementptr inbounds float, float* %90, i64 %91
  store float* %92, float** %17, align 8
  br label %93

; <label>:93:                                     ; preds = %87
  %94 = load i64, i64* %19, align 8
  %95 = add i64 %94, 1
  store i64 %95, i64* %19, align 8
  br label %69

; <label>:96:                                     ; preds = %69
  %97 = load i64, i64* %13, align 8
  %98 = mul i64 2, %97
  %99 = load i64, i64* %14, align 8
  %100 = mul i64 %98, %99
  %101 = load float*, float** %17, align 8
  %102 = getelementptr inbounds float, float* %101, i64 %100
  store float* %102, float** %17, align 8
  br label %103

; <label>:103:                                    ; preds = %96
  %104 = load i64, i64* %18, align 8
  %105 = add i64 %104, 1
  store i64 %105, i64* %18, align 8
  br label %64

; <label>:106:                                    ; preds = %64
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_flip_b(i8*, i8*, i64*, i64, i64) #2 {
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  store i8* %0, i8** %6, align 8
  store i8* %1, i8** %7, align 8
  store i64* %2, i64** %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  %11 = load i8*, i8** %6, align 8
  %12 = load i8*, i8** %7, align 8
  %13 = load i64*, i64** %8, align 8
  %14 = load i64, i64* %9, align 8
  %15 = load i64, i64* %10, align 8
  call void @_ZN12_GLOBAL__N_119libjit_flip_genericIbEEvPKT_PS1_PKmmm(i8* %11, i8* %12, i64* %13, i64 %14, i64 %15)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_119libjit_flip_genericIbEEvPKT_PS1_PKmmm(i8*, i8*, i64*, i64, i64) #0 {
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  store i8* %0, i8** %6, align 8
  store i8* %1, i8** %7, align 8
  store i64* %2, i64** %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  store i64 1, i64* %11, align 8
  store i64 0, i64* %12, align 8
  br label %21

; <label>:21:                                     ; preds = %32, %5
  %22 = load i64, i64* %12, align 8
  %23 = load i64, i64* %9, align 8
  %24 = icmp ult i64 %22, %23
  br i1 %24, label %25, label %35

; <label>:25:                                     ; preds = %21
  %26 = load i64*, i64** %8, align 8
  %27 = load i64, i64* %12, align 8
  %28 = getelementptr inbounds i64, i64* %26, i64 %27
  %29 = load i64, i64* %28, align 8
  %30 = load i64, i64* %11, align 8
  %31 = mul i64 %30, %29
  store i64 %31, i64* %11, align 8
  br label %32

; <label>:32:                                     ; preds = %25
  %33 = load i64, i64* %12, align 8
  %34 = add i64 %33, 1
  store i64 %34, i64* %12, align 8
  br label %21

; <label>:35:                                     ; preds = %21
  %36 = load i64*, i64** %8, align 8
  %37 = load i64, i64* %9, align 8
  %38 = getelementptr inbounds i64, i64* %36, i64 %37
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %13, align 8
  store i64 1, i64* %14, align 8
  %40 = load i64, i64* %9, align 8
  %41 = add i64 %40, 1
  store i64 %41, i64* %15, align 8
  br label %42

; <label>:42:                                     ; preds = %53, %35
  %43 = load i64, i64* %15, align 8
  %44 = load i64, i64* %10, align 8
  %45 = icmp ult i64 %43, %44
  br i1 %45, label %46, label %56

; <label>:46:                                     ; preds = %42
  %47 = load i64*, i64** %8, align 8
  %48 = load i64, i64* %15, align 8
  %49 = getelementptr inbounds i64, i64* %47, i64 %48
  %50 = load i64, i64* %49, align 8
  %51 = load i64, i64* %14, align 8
  %52 = mul i64 %51, %50
  store i64 %52, i64* %14, align 8
  br label %53

; <label>:53:                                     ; preds = %46
  %54 = load i64, i64* %15, align 8
  %55 = add i64 %54, 1
  store i64 %55, i64* %15, align 8
  br label %42

; <label>:56:                                     ; preds = %42
  %57 = load i8*, i8** %6, align 8
  store i8* %57, i8** %16, align 8
  %58 = load i8*, i8** %7, align 8
  %59 = load i64, i64* %13, align 8
  %60 = sub i64 %59, 1
  %61 = load i64, i64* %14, align 8
  %62 = mul i64 %60, %61
  %63 = getelementptr inbounds i8, i8* %58, i64 %62
  store i8* %63, i8** %17, align 8
  store i64 0, i64* %18, align 8
  br label %64

; <label>:64:                                     ; preds = %105, %56
  %65 = load i64, i64* %18, align 8
  %66 = load i64, i64* %11, align 8
  %67 = icmp ult i64 %65, %66
  br i1 %67, label %68, label %108

; <label>:68:                                     ; preds = %64
  store i64 0, i64* %19, align 8
  br label %69

; <label>:69:                                     ; preds = %95, %68
  %70 = load i64, i64* %19, align 8
  %71 = load i64, i64* %13, align 8
  %72 = icmp ult i64 %70, %71
  br i1 %72, label %73, label %98

; <label>:73:                                     ; preds = %69
  store i64 0, i64* %20, align 8
  br label %74

; <label>:74:                                     ; preds = %86, %73
  %75 = load i64, i64* %20, align 8
  %76 = load i64, i64* %14, align 8
  %77 = icmp ult i64 %75, %76
  br i1 %77, label %78, label %89

; <label>:78:                                     ; preds = %74
  %79 = load i8*, i8** %16, align 8
  %80 = getelementptr inbounds i8, i8* %79, i32 1
  store i8* %80, i8** %16, align 8
  %81 = load i8, i8* %79, align 1
  %82 = trunc i8 %81 to i1
  %83 = load i8*, i8** %17, align 8
  %84 = getelementptr inbounds i8, i8* %83, i32 1
  store i8* %84, i8** %17, align 8
  %85 = zext i1 %82 to i8
  store i8 %85, i8* %83, align 1
  br label %86

; <label>:86:                                     ; preds = %78
  %87 = load i64, i64* %20, align 8
  %88 = add i64 %87, 1
  store i64 %88, i64* %20, align 8
  br label %74

; <label>:89:                                     ; preds = %74
  %90 = load i64, i64* %14, align 8
  %91 = mul i64 2, %90
  %92 = load i8*, i8** %17, align 8
  %93 = sub i64 0, %91
  %94 = getelementptr inbounds i8, i8* %92, i64 %93
  store i8* %94, i8** %17, align 8
  br label %95

; <label>:95:                                     ; preds = %89
  %96 = load i64, i64* %19, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %19, align 8
  br label %69

; <label>:98:                                     ; preds = %69
  %99 = load i64, i64* %13, align 8
  %100 = mul i64 2, %99
  %101 = load i64, i64* %14, align 8
  %102 = mul i64 %100, %101
  %103 = load i8*, i8** %17, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 %102
  store i8* %104, i8** %17, align 8
  br label %105

; <label>:105:                                    ; preds = %98
  %106 = load i64, i64* %18, align 8
  %107 = add i64 %106, 1
  store i64 %107, i64* %18, align 8
  br label %64

; <label>:108:                                    ; preds = %64
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_insert_tensor_f(float*, float*, i64*, i64*, i64*, i64, i64, i64, i64, i64) #2 {
  %11 = alloca float*, align 8
  %12 = alloca float*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  store float* %0, float** %11, align 8
  store float* %1, float** %12, align 8
  store i64* %2, i64** %13, align 8
  store i64* %3, i64** %14, align 8
  store i64* %4, i64** %15, align 8
  store i64 %5, i64* %16, align 8
  store i64 %6, i64* %17, align 8
  store i64 %7, i64* %18, align 8
  store i64 %8, i64* %19, align 8
  store i64 %9, i64* %20, align 8
  %21 = load float*, float** %11, align 8
  %22 = load float*, float** %12, align 8
  %23 = load i64*, i64** %13, align 8
  %24 = load i64*, i64** %14, align 8
  %25 = load i64*, i64** %15, align 8
  %26 = load i64, i64* %16, align 8
  %27 = load i64, i64* %17, align 8
  %28 = load i64, i64* %18, align 8
  %29 = load i64, i64* %19, align 8
  %30 = load i64, i64* %20, align 8
  call void @_ZN12_GLOBAL__N_120libjit_insert_tensorIfEEvPT_S2_PmS3_S3_mmmmm(float* %21, float* %22, i64* %23, i64* %24, i64* %25, i64 %26, i64 %27, i64 %28, i64 %29, i64 %30)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_120libjit_insert_tensorIfEEvPT_S2_PmS3_S3_mmmmm(float*, float*, i64*, i64*, i64*, i64, i64, i64, i64, i64) #0 {
  %11 = alloca float*, align 8
  %12 = alloca float*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca [5 x i64], align 16
  %22 = alloca [5 x i64], align 16
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca i64, align 8
  %38 = alloca i64, align 8
  %39 = alloca i64, align 8
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  %43 = alloca i64, align 8
  %44 = alloca i64, align 8
  %45 = alloca i64, align 8
  %46 = alloca i64, align 8
  %47 = alloca i64, align 8
  %48 = alloca i64, align 8
  store float* %0, float** %11, align 8
  store float* %1, float** %12, align 8
  store i64* %2, i64** %13, align 8
  store i64* %3, i64** %14, align 8
  store i64* %4, i64** %15, align 8
  store i64 %5, i64* %16, align 8
  store i64 %6, i64* %17, align 8
  store i64 %7, i64* %18, align 8
  store i64 %8, i64* %19, align 8
  store i64 %9, i64* %20, align 8
  store i64 0, i64* %23, align 8
  br label %49

; <label>:49:                                     ; preds = %60, %10
  %50 = load i64, i64* %23, align 8
  %51 = load i64, i64* %17, align 8
  %52 = icmp ult i64 %50, %51
  br i1 %52, label %53, label %63

; <label>:53:                                     ; preds = %49
  %54 = load i64*, i64** %13, align 8
  %55 = load i64, i64* %23, align 8
  %56 = getelementptr inbounds i64, i64* %54, i64 %55
  %57 = load i64, i64* %56, align 8
  %58 = load i64, i64* %23, align 8
  %59 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 %58
  store i64 %57, i64* %59, align 8
  br label %60

; <label>:60:                                     ; preds = %53
  %61 = load i64, i64* %23, align 8
  %62 = add i64 %61, 1
  store i64 %62, i64* %23, align 8
  br label %49

; <label>:63:                                     ; preds = %49
  %64 = load i64, i64* %17, align 8
  %65 = icmp eq i64 %64, 5
  br i1 %65, label %66, label %226

; <label>:66:                                     ; preds = %63
  store i64 0, i64* %24, align 8
  br label %67

; <label>:67:                                     ; preds = %222, %66
  %68 = load i64, i64* %24, align 8
  %69 = load i64, i64* %19, align 8
  %70 = icmp ult i64 %68, %69
  br i1 %70, label %71, label %225

; <label>:71:                                     ; preds = %67
  store i64 0, i64* %25, align 8
  br label %72

; <label>:72:                                     ; preds = %218, %71
  %73 = load i64, i64* %25, align 8
  %74 = load i64*, i64** %15, align 8
  %75 = getelementptr inbounds i64, i64* %74, i64 0
  %76 = load i64, i64* %75, align 8
  %77 = icmp ult i64 %73, %76
  br i1 %77, label %78, label %221

; <label>:78:                                     ; preds = %72
  store i64 0, i64* %26, align 8
  br label %79

; <label>:79:                                     ; preds = %214, %78
  %80 = load i64, i64* %26, align 8
  %81 = load i64*, i64** %15, align 8
  %82 = getelementptr inbounds i64, i64* %81, i64 1
  %83 = load i64, i64* %82, align 8
  %84 = icmp ult i64 %80, %83
  br i1 %84, label %85, label %217

; <label>:85:                                     ; preds = %79
  store i64 0, i64* %27, align 8
  br label %86

; <label>:86:                                     ; preds = %210, %85
  %87 = load i64, i64* %27, align 8
  %88 = load i64*, i64** %15, align 8
  %89 = getelementptr inbounds i64, i64* %88, i64 2
  %90 = load i64, i64* %89, align 8
  %91 = icmp ult i64 %87, %90
  br i1 %91, label %92, label %213

; <label>:92:                                     ; preds = %86
  store i64 0, i64* %28, align 8
  br label %93

; <label>:93:                                     ; preds = %206, %92
  %94 = load i64, i64* %28, align 8
  %95 = load i64*, i64** %15, align 8
  %96 = getelementptr inbounds i64, i64* %95, i64 3
  %97 = load i64, i64* %96, align 8
  %98 = icmp ult i64 %94, %97
  br i1 %98, label %99, label %209

; <label>:99:                                     ; preds = %93
  store i64 0, i64* %29, align 8
  br label %100

; <label>:100:                                    ; preds = %202, %99
  %101 = load i64, i64* %29, align 8
  %102 = load i64*, i64** %15, align 8
  %103 = getelementptr inbounds i64, i64* %102, i64 4
  %104 = load i64, i64* %103, align 8
  %105 = icmp ult i64 %101, %104
  br i1 %105, label %106, label %205

; <label>:106:                                    ; preds = %100
  %107 = load i64, i64* %24, align 8
  %108 = load i64*, i64** %15, align 8
  %109 = load i64, i64* %20, align 8
  %110 = getelementptr inbounds i64, i64* %108, i64 %109
  %111 = load i64, i64* %110, align 8
  %112 = mul i64 %107, %111
  store i64 %112, i64* %30, align 8
  %113 = load i64, i64* %25, align 8
  %114 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 0
  %115 = load i64, i64* %114, align 16
  %116 = add i64 %113, %115
  %117 = load i64, i64* %20, align 8
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %121

; <label>:119:                                    ; preds = %106
  %120 = load i64, i64* %30, align 8
  br label %122

; <label>:121:                                    ; preds = %106
  br label %122

; <label>:122:                                    ; preds = %121, %119
  %123 = phi i64 [ %120, %119 ], [ 0, %121 ]
  %124 = add i64 %116, %123
  %125 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  store i64 %124, i64* %125, align 16
  %126 = load i64, i64* %26, align 8
  %127 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 1
  %128 = load i64, i64* %127, align 8
  %129 = add i64 %126, %128
  %130 = load i64, i64* %20, align 8
  %131 = icmp eq i64 %130, 1
  br i1 %131, label %132, label %134

; <label>:132:                                    ; preds = %122
  %133 = load i64, i64* %30, align 8
  br label %135

; <label>:134:                                    ; preds = %122
  br label %135

; <label>:135:                                    ; preds = %134, %132
  %136 = phi i64 [ %133, %132 ], [ 0, %134 ]
  %137 = add i64 %129, %136
  %138 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  store i64 %137, i64* %138, align 8
  %139 = load i64, i64* %27, align 8
  %140 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 2
  %141 = load i64, i64* %140, align 16
  %142 = add i64 %139, %141
  %143 = load i64, i64* %20, align 8
  %144 = icmp eq i64 %143, 2
  br i1 %144, label %145, label %147

; <label>:145:                                    ; preds = %135
  %146 = load i64, i64* %30, align 8
  br label %148

; <label>:147:                                    ; preds = %135
  br label %148

; <label>:148:                                    ; preds = %147, %145
  %149 = phi i64 [ %146, %145 ], [ 0, %147 ]
  %150 = add i64 %142, %149
  %151 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 2
  store i64 %150, i64* %151, align 16
  %152 = load i64, i64* %28, align 8
  %153 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 3
  %154 = load i64, i64* %153, align 8
  %155 = add i64 %152, %154
  %156 = load i64, i64* %20, align 8
  %157 = icmp eq i64 %156, 3
  br i1 %157, label %158, label %160

; <label>:158:                                    ; preds = %148
  %159 = load i64, i64* %30, align 8
  br label %161

; <label>:160:                                    ; preds = %148
  br label %161

; <label>:161:                                    ; preds = %160, %158
  %162 = phi i64 [ %159, %158 ], [ 0, %160 ]
  %163 = add i64 %155, %162
  %164 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 3
  store i64 %163, i64* %164, align 8
  %165 = load i64, i64* %29, align 8
  %166 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 4
  %167 = load i64, i64* %166, align 16
  %168 = add i64 %165, %167
  %169 = load i64, i64* %20, align 8
  %170 = icmp eq i64 %169, 4
  br i1 %170, label %171, label %173

; <label>:171:                                    ; preds = %161
  %172 = load i64, i64* %30, align 8
  br label %174

; <label>:173:                                    ; preds = %161
  br label %174

; <label>:174:                                    ; preds = %173, %171
  %175 = phi i64 [ %172, %171 ], [ 0, %173 ]
  %176 = add i64 %168, %175
  %177 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 4
  store i64 %176, i64* %177, align 16
  %178 = load float*, float** %12, align 8
  %179 = load i64*, i64** %15, align 8
  %180 = load i64, i64* %25, align 8
  %181 = load i64, i64* %26, align 8
  %182 = load i64, i64* %27, align 8
  %183 = load i64, i64* %28, align 8
  %184 = load i64, i64* %29, align 8
  %185 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %179, i64 %180, i64 %181, i64 %182, i64 %183, i64 %184)
  %186 = getelementptr inbounds float, float* %178, i64 %185
  %187 = load float, float* %186, align 4
  %188 = load float*, float** %11, align 8
  %189 = load i64*, i64** %14, align 8
  %190 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  %191 = load i64, i64* %190, align 16
  %192 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  %193 = load i64, i64* %192, align 8
  %194 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 2
  %195 = load i64, i64* %194, align 16
  %196 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 3
  %197 = load i64, i64* %196, align 8
  %198 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 4
  %199 = load i64, i64* %198, align 16
  %200 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %189, i64 %191, i64 %193, i64 %195, i64 %197, i64 %199)
  %201 = getelementptr inbounds float, float* %188, i64 %200
  store float %187, float* %201, align 4
  br label %202

; <label>:202:                                    ; preds = %174
  %203 = load i64, i64* %29, align 8
  %204 = add i64 %203, 1
  store i64 %204, i64* %29, align 8
  br label %100

; <label>:205:                                    ; preds = %100
  br label %206

; <label>:206:                                    ; preds = %205
  %207 = load i64, i64* %28, align 8
  %208 = add i64 %207, 1
  store i64 %208, i64* %28, align 8
  br label %93

; <label>:209:                                    ; preds = %93
  br label %210

; <label>:210:                                    ; preds = %209
  %211 = load i64, i64* %27, align 8
  %212 = add i64 %211, 1
  store i64 %212, i64* %27, align 8
  br label %86

; <label>:213:                                    ; preds = %86
  br label %214

; <label>:214:                                    ; preds = %213
  %215 = load i64, i64* %26, align 8
  %216 = add i64 %215, 1
  store i64 %216, i64* %26, align 8
  br label %79

; <label>:217:                                    ; preds = %79
  br label %218

; <label>:218:                                    ; preds = %217
  %219 = load i64, i64* %25, align 8
  %220 = add i64 %219, 1
  store i64 %220, i64* %25, align 8
  br label %72

; <label>:221:                                    ; preds = %72
  br label %222

; <label>:222:                                    ; preds = %221
  %223 = load i64, i64* %24, align 8
  %224 = add i64 %223, 1
  store i64 %224, i64* %24, align 8
  br label %67

; <label>:225:                                    ; preds = %67
  br label %601

; <label>:226:                                    ; preds = %63
  %227 = load i64, i64* %17, align 8
  %228 = icmp eq i64 %227, 4
  br i1 %228, label %229, label %362

; <label>:229:                                    ; preds = %226
  store i64 0, i64* %31, align 8
  br label %230

; <label>:230:                                    ; preds = %358, %229
  %231 = load i64, i64* %31, align 8
  %232 = load i64, i64* %19, align 8
  %233 = icmp ult i64 %231, %232
  br i1 %233, label %234, label %361

; <label>:234:                                    ; preds = %230
  store i64 0, i64* %32, align 8
  br label %235

; <label>:235:                                    ; preds = %354, %234
  %236 = load i64, i64* %32, align 8
  %237 = load i64*, i64** %15, align 8
  %238 = getelementptr inbounds i64, i64* %237, i64 0
  %239 = load i64, i64* %238, align 8
  %240 = icmp ult i64 %236, %239
  br i1 %240, label %241, label %357

; <label>:241:                                    ; preds = %235
  store i64 0, i64* %33, align 8
  br label %242

; <label>:242:                                    ; preds = %350, %241
  %243 = load i64, i64* %33, align 8
  %244 = load i64*, i64** %15, align 8
  %245 = getelementptr inbounds i64, i64* %244, i64 1
  %246 = load i64, i64* %245, align 8
  %247 = icmp ult i64 %243, %246
  br i1 %247, label %248, label %353

; <label>:248:                                    ; preds = %242
  store i64 0, i64* %34, align 8
  br label %249

; <label>:249:                                    ; preds = %346, %248
  %250 = load i64, i64* %34, align 8
  %251 = load i64*, i64** %15, align 8
  %252 = getelementptr inbounds i64, i64* %251, i64 2
  %253 = load i64, i64* %252, align 8
  %254 = icmp ult i64 %250, %253
  br i1 %254, label %255, label %349

; <label>:255:                                    ; preds = %249
  store i64 0, i64* %35, align 8
  br label %256

; <label>:256:                                    ; preds = %342, %255
  %257 = load i64, i64* %35, align 8
  %258 = load i64*, i64** %15, align 8
  %259 = getelementptr inbounds i64, i64* %258, i64 3
  %260 = load i64, i64* %259, align 8
  %261 = icmp ult i64 %257, %260
  br i1 %261, label %262, label %345

; <label>:262:                                    ; preds = %256
  %263 = load i64, i64* %31, align 8
  %264 = load i64*, i64** %15, align 8
  %265 = load i64, i64* %20, align 8
  %266 = getelementptr inbounds i64, i64* %264, i64 %265
  %267 = load i64, i64* %266, align 8
  %268 = mul i64 %263, %267
  store i64 %268, i64* %36, align 8
  %269 = load i64, i64* %32, align 8
  %270 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 0
  %271 = load i64, i64* %270, align 16
  %272 = add i64 %269, %271
  %273 = load i64, i64* %20, align 8
  %274 = icmp eq i64 %273, 0
  br i1 %274, label %275, label %277

; <label>:275:                                    ; preds = %262
  %276 = load i64, i64* %36, align 8
  br label %278

; <label>:277:                                    ; preds = %262
  br label %278

; <label>:278:                                    ; preds = %277, %275
  %279 = phi i64 [ %276, %275 ], [ 0, %277 ]
  %280 = add i64 %272, %279
  %281 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  store i64 %280, i64* %281, align 16
  %282 = load i64, i64* %33, align 8
  %283 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 1
  %284 = load i64, i64* %283, align 8
  %285 = add i64 %282, %284
  %286 = load i64, i64* %20, align 8
  %287 = icmp eq i64 %286, 1
  br i1 %287, label %288, label %290

; <label>:288:                                    ; preds = %278
  %289 = load i64, i64* %36, align 8
  br label %291

; <label>:290:                                    ; preds = %278
  br label %291

; <label>:291:                                    ; preds = %290, %288
  %292 = phi i64 [ %289, %288 ], [ 0, %290 ]
  %293 = add i64 %285, %292
  %294 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  store i64 %293, i64* %294, align 8
  %295 = load i64, i64* %34, align 8
  %296 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 2
  %297 = load i64, i64* %296, align 16
  %298 = add i64 %295, %297
  %299 = load i64, i64* %20, align 8
  %300 = icmp eq i64 %299, 2
  br i1 %300, label %301, label %303

; <label>:301:                                    ; preds = %291
  %302 = load i64, i64* %36, align 8
  br label %304

; <label>:303:                                    ; preds = %291
  br label %304

; <label>:304:                                    ; preds = %303, %301
  %305 = phi i64 [ %302, %301 ], [ 0, %303 ]
  %306 = add i64 %298, %305
  %307 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 2
  store i64 %306, i64* %307, align 16
  %308 = load i64, i64* %35, align 8
  %309 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 3
  %310 = load i64, i64* %309, align 8
  %311 = add i64 %308, %310
  %312 = load i64, i64* %20, align 8
  %313 = icmp eq i64 %312, 3
  br i1 %313, label %314, label %316

; <label>:314:                                    ; preds = %304
  %315 = load i64, i64* %36, align 8
  br label %317

; <label>:316:                                    ; preds = %304
  br label %317

; <label>:317:                                    ; preds = %316, %314
  %318 = phi i64 [ %315, %314 ], [ 0, %316 ]
  %319 = add i64 %311, %318
  %320 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 3
  store i64 %319, i64* %320, align 8
  %321 = load float*, float** %12, align 8
  %322 = load i64*, i64** %15, align 8
  %323 = load i64, i64* %32, align 8
  %324 = load i64, i64* %33, align 8
  %325 = load i64, i64* %34, align 8
  %326 = load i64, i64* %35, align 8
  %327 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %322, i64 %323, i64 %324, i64 %325, i64 %326)
  %328 = getelementptr inbounds float, float* %321, i64 %327
  %329 = load float, float* %328, align 4
  %330 = load float*, float** %11, align 8
  %331 = load i64*, i64** %14, align 8
  %332 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  %333 = load i64, i64* %332, align 16
  %334 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  %335 = load i64, i64* %334, align 8
  %336 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 2
  %337 = load i64, i64* %336, align 16
  %338 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 3
  %339 = load i64, i64* %338, align 8
  %340 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %331, i64 %333, i64 %335, i64 %337, i64 %339)
  %341 = getelementptr inbounds float, float* %330, i64 %340
  store float %329, float* %341, align 4
  br label %342

; <label>:342:                                    ; preds = %317
  %343 = load i64, i64* %35, align 8
  %344 = add i64 %343, 1
  store i64 %344, i64* %35, align 8
  br label %256

; <label>:345:                                    ; preds = %256
  br label %346

; <label>:346:                                    ; preds = %345
  %347 = load i64, i64* %34, align 8
  %348 = add i64 %347, 1
  store i64 %348, i64* %34, align 8
  br label %249

; <label>:349:                                    ; preds = %249
  br label %350

; <label>:350:                                    ; preds = %349
  %351 = load i64, i64* %33, align 8
  %352 = add i64 %351, 1
  store i64 %352, i64* %33, align 8
  br label %242

; <label>:353:                                    ; preds = %242
  br label %354

; <label>:354:                                    ; preds = %353
  %355 = load i64, i64* %32, align 8
  %356 = add i64 %355, 1
  store i64 %356, i64* %32, align 8
  br label %235

; <label>:357:                                    ; preds = %235
  br label %358

; <label>:358:                                    ; preds = %357
  %359 = load i64, i64* %31, align 8
  %360 = add i64 %359, 1
  store i64 %360, i64* %31, align 8
  br label %230

; <label>:361:                                    ; preds = %230
  br label %601

; <label>:362:                                    ; preds = %226
  %363 = load i64, i64* %17, align 8
  %364 = icmp eq i64 %363, 3
  br i1 %364, label %365, label %471

; <label>:365:                                    ; preds = %362
  store i64 0, i64* %37, align 8
  br label %366

; <label>:366:                                    ; preds = %467, %365
  %367 = load i64, i64* %37, align 8
  %368 = load i64, i64* %19, align 8
  %369 = icmp ult i64 %367, %368
  br i1 %369, label %370, label %470

; <label>:370:                                    ; preds = %366
  store i64 0, i64* %38, align 8
  br label %371

; <label>:371:                                    ; preds = %463, %370
  %372 = load i64, i64* %38, align 8
  %373 = load i64*, i64** %15, align 8
  %374 = getelementptr inbounds i64, i64* %373, i64 0
  %375 = load i64, i64* %374, align 8
  %376 = icmp ult i64 %372, %375
  br i1 %376, label %377, label %466

; <label>:377:                                    ; preds = %371
  store i64 0, i64* %39, align 8
  br label %378

; <label>:378:                                    ; preds = %459, %377
  %379 = load i64, i64* %39, align 8
  %380 = load i64*, i64** %15, align 8
  %381 = getelementptr inbounds i64, i64* %380, i64 1
  %382 = load i64, i64* %381, align 8
  %383 = icmp ult i64 %379, %382
  br i1 %383, label %384, label %462

; <label>:384:                                    ; preds = %378
  store i64 0, i64* %40, align 8
  br label %385

; <label>:385:                                    ; preds = %455, %384
  %386 = load i64, i64* %40, align 8
  %387 = load i64*, i64** %15, align 8
  %388 = getelementptr inbounds i64, i64* %387, i64 2
  %389 = load i64, i64* %388, align 8
  %390 = icmp ult i64 %386, %389
  br i1 %390, label %391, label %458

; <label>:391:                                    ; preds = %385
  %392 = load i64, i64* %37, align 8
  %393 = load i64*, i64** %15, align 8
  %394 = load i64, i64* %20, align 8
  %395 = getelementptr inbounds i64, i64* %393, i64 %394
  %396 = load i64, i64* %395, align 8
  %397 = mul i64 %392, %396
  store i64 %397, i64* %41, align 8
  %398 = load i64, i64* %38, align 8
  %399 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 0
  %400 = load i64, i64* %399, align 16
  %401 = add i64 %398, %400
  %402 = load i64, i64* %20, align 8
  %403 = icmp eq i64 %402, 0
  br i1 %403, label %404, label %406

; <label>:404:                                    ; preds = %391
  %405 = load i64, i64* %41, align 8
  br label %407

; <label>:406:                                    ; preds = %391
  br label %407

; <label>:407:                                    ; preds = %406, %404
  %408 = phi i64 [ %405, %404 ], [ 0, %406 ]
  %409 = add i64 %401, %408
  %410 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  store i64 %409, i64* %410, align 16
  %411 = load i64, i64* %39, align 8
  %412 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 1
  %413 = load i64, i64* %412, align 8
  %414 = add i64 %411, %413
  %415 = load i64, i64* %20, align 8
  %416 = icmp eq i64 %415, 1
  br i1 %416, label %417, label %419

; <label>:417:                                    ; preds = %407
  %418 = load i64, i64* %41, align 8
  br label %420

; <label>:419:                                    ; preds = %407
  br label %420

; <label>:420:                                    ; preds = %419, %417
  %421 = phi i64 [ %418, %417 ], [ 0, %419 ]
  %422 = add i64 %414, %421
  %423 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  store i64 %422, i64* %423, align 8
  %424 = load i64, i64* %40, align 8
  %425 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 2
  %426 = load i64, i64* %425, align 16
  %427 = add i64 %424, %426
  %428 = load i64, i64* %20, align 8
  %429 = icmp eq i64 %428, 2
  br i1 %429, label %430, label %432

; <label>:430:                                    ; preds = %420
  %431 = load i64, i64* %41, align 8
  br label %433

; <label>:432:                                    ; preds = %420
  br label %433

; <label>:433:                                    ; preds = %432, %430
  %434 = phi i64 [ %431, %430 ], [ 0, %432 ]
  %435 = add i64 %427, %434
  %436 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 2
  store i64 %435, i64* %436, align 16
  %437 = load float*, float** %12, align 8
  %438 = load i64*, i64** %15, align 8
  %439 = load i64, i64* %38, align 8
  %440 = load i64, i64* %39, align 8
  %441 = load i64, i64* %40, align 8
  %442 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %438, i64 %439, i64 %440, i64 %441)
  %443 = getelementptr inbounds float, float* %437, i64 %442
  %444 = load float, float* %443, align 4
  %445 = load float*, float** %11, align 8
  %446 = load i64*, i64** %14, align 8
  %447 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  %448 = load i64, i64* %447, align 16
  %449 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  %450 = load i64, i64* %449, align 8
  %451 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 2
  %452 = load i64, i64* %451, align 16
  %453 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %446, i64 %448, i64 %450, i64 %452)
  %454 = getelementptr inbounds float, float* %445, i64 %453
  store float %444, float* %454, align 4
  br label %455

; <label>:455:                                    ; preds = %433
  %456 = load i64, i64* %40, align 8
  %457 = add i64 %456, 1
  store i64 %457, i64* %40, align 8
  br label %385

; <label>:458:                                    ; preds = %385
  br label %459

; <label>:459:                                    ; preds = %458
  %460 = load i64, i64* %39, align 8
  %461 = add i64 %460, 1
  store i64 %461, i64* %39, align 8
  br label %378

; <label>:462:                                    ; preds = %378
  br label %463

; <label>:463:                                    ; preds = %462
  %464 = load i64, i64* %38, align 8
  %465 = add i64 %464, 1
  store i64 %465, i64* %38, align 8
  br label %371

; <label>:466:                                    ; preds = %371
  br label %467

; <label>:467:                                    ; preds = %466
  %468 = load i64, i64* %37, align 8
  %469 = add i64 %468, 1
  store i64 %469, i64* %37, align 8
  br label %366

; <label>:470:                                    ; preds = %366
  br label %601

; <label>:471:                                    ; preds = %362
  %472 = load i64, i64* %17, align 8
  %473 = icmp eq i64 %472, 2
  br i1 %473, label %474, label %553

; <label>:474:                                    ; preds = %471
  store i64 0, i64* %42, align 8
  br label %475

; <label>:475:                                    ; preds = %549, %474
  %476 = load i64, i64* %42, align 8
  %477 = load i64, i64* %19, align 8
  %478 = icmp ult i64 %476, %477
  br i1 %478, label %479, label %552

; <label>:479:                                    ; preds = %475
  store i64 0, i64* %43, align 8
  br label %480

; <label>:480:                                    ; preds = %545, %479
  %481 = load i64, i64* %43, align 8
  %482 = load i64*, i64** %15, align 8
  %483 = getelementptr inbounds i64, i64* %482, i64 0
  %484 = load i64, i64* %483, align 8
  %485 = icmp ult i64 %481, %484
  br i1 %485, label %486, label %548

; <label>:486:                                    ; preds = %480
  store i64 0, i64* %44, align 8
  br label %487

; <label>:487:                                    ; preds = %541, %486
  %488 = load i64, i64* %44, align 8
  %489 = load i64*, i64** %15, align 8
  %490 = getelementptr inbounds i64, i64* %489, i64 1
  %491 = load i64, i64* %490, align 8
  %492 = icmp ult i64 %488, %491
  br i1 %492, label %493, label %544

; <label>:493:                                    ; preds = %487
  %494 = load i64, i64* %42, align 8
  %495 = load i64*, i64** %15, align 8
  %496 = load i64, i64* %20, align 8
  %497 = getelementptr inbounds i64, i64* %495, i64 %496
  %498 = load i64, i64* %497, align 8
  %499 = mul i64 %494, %498
  store i64 %499, i64* %45, align 8
  %500 = load i64, i64* %43, align 8
  %501 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 0
  %502 = load i64, i64* %501, align 16
  %503 = add i64 %500, %502
  %504 = load i64, i64* %20, align 8
  %505 = icmp eq i64 %504, 0
  br i1 %505, label %506, label %508

; <label>:506:                                    ; preds = %493
  %507 = load i64, i64* %45, align 8
  br label %509

; <label>:508:                                    ; preds = %493
  br label %509

; <label>:509:                                    ; preds = %508, %506
  %510 = phi i64 [ %507, %506 ], [ 0, %508 ]
  %511 = add i64 %503, %510
  %512 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  store i64 %511, i64* %512, align 16
  %513 = load i64, i64* %44, align 8
  %514 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 1
  %515 = load i64, i64* %514, align 8
  %516 = add i64 %513, %515
  %517 = load i64, i64* %20, align 8
  %518 = icmp eq i64 %517, 1
  br i1 %518, label %519, label %521

; <label>:519:                                    ; preds = %509
  %520 = load i64, i64* %45, align 8
  br label %522

; <label>:521:                                    ; preds = %509
  br label %522

; <label>:522:                                    ; preds = %521, %519
  %523 = phi i64 [ %520, %519 ], [ 0, %521 ]
  %524 = add i64 %516, %523
  %525 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  store i64 %524, i64* %525, align 8
  %526 = load float*, float** %12, align 8
  %527 = load i64*, i64** %15, align 8
  %528 = load i64, i64* %43, align 8
  %529 = load i64, i64* %44, align 8
  %530 = call i64 @_Z12libjit_getXYPKmmm(i64* %527, i64 %528, i64 %529)
  %531 = getelementptr inbounds float, float* %526, i64 %530
  %532 = load float, float* %531, align 4
  %533 = load float*, float** %11, align 8
  %534 = load i64*, i64** %14, align 8
  %535 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  %536 = load i64, i64* %535, align 16
  %537 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  %538 = load i64, i64* %537, align 8
  %539 = call i64 @_Z12libjit_getXYPKmmm(i64* %534, i64 %536, i64 %538)
  %540 = getelementptr inbounds float, float* %533, i64 %539
  store float %532, float* %540, align 4
  br label %541

; <label>:541:                                    ; preds = %522
  %542 = load i64, i64* %44, align 8
  %543 = add i64 %542, 1
  store i64 %543, i64* %44, align 8
  br label %487

; <label>:544:                                    ; preds = %487
  br label %545

; <label>:545:                                    ; preds = %544
  %546 = load i64, i64* %43, align 8
  %547 = add i64 %546, 1
  store i64 %547, i64* %43, align 8
  br label %480

; <label>:548:                                    ; preds = %480
  br label %549

; <label>:549:                                    ; preds = %548
  %550 = load i64, i64* %42, align 8
  %551 = add i64 %550, 1
  store i64 %551, i64* %42, align 8
  br label %475

; <label>:552:                                    ; preds = %475
  br label %601

; <label>:553:                                    ; preds = %471
  %554 = load i64, i64* %17, align 8
  %555 = icmp eq i64 %554, 1
  br i1 %555, label %556, label %601

; <label>:556:                                    ; preds = %553
  store i64 0, i64* %46, align 8
  br label %557

; <label>:557:                                    ; preds = %597, %556
  %558 = load i64, i64* %46, align 8
  %559 = load i64, i64* %19, align 8
  %560 = icmp ult i64 %558, %559
  br i1 %560, label %561, label %600

; <label>:561:                                    ; preds = %557
  store i64 0, i64* %47, align 8
  br label %562

; <label>:562:                                    ; preds = %593, %561
  %563 = load i64, i64* %47, align 8
  %564 = load i64*, i64** %15, align 8
  %565 = getelementptr inbounds i64, i64* %564, i64 0
  %566 = load i64, i64* %565, align 8
  %567 = icmp ult i64 %563, %566
  br i1 %567, label %568, label %596

; <label>:568:                                    ; preds = %562
  %569 = load i64, i64* %46, align 8
  %570 = load i64*, i64** %15, align 8
  %571 = load i64, i64* %20, align 8
  %572 = getelementptr inbounds i64, i64* %570, i64 %571
  %573 = load i64, i64* %572, align 8
  %574 = mul i64 %569, %573
  store i64 %574, i64* %48, align 8
  %575 = load float*, float** %12, align 8
  %576 = load i64, i64* %47, align 8
  %577 = getelementptr inbounds float, float* %575, i64 %576
  %578 = load float, float* %577, align 4
  %579 = load float*, float** %11, align 8
  %580 = load i64, i64* %47, align 8
  %581 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 0
  %582 = load i64, i64* %581, align 16
  %583 = add i64 %580, %582
  %584 = load i64, i64* %20, align 8
  %585 = icmp eq i64 %584, 0
  br i1 %585, label %586, label %588

; <label>:586:                                    ; preds = %568
  %587 = load i64, i64* %48, align 8
  br label %589

; <label>:588:                                    ; preds = %568
  br label %589

; <label>:589:                                    ; preds = %588, %586
  %590 = phi i64 [ %587, %586 ], [ 0, %588 ]
  %591 = add i64 %583, %590
  %592 = getelementptr inbounds float, float* %579, i64 %591
  store float %578, float* %592, align 4
  br label %593

; <label>:593:                                    ; preds = %589
  %594 = load i64, i64* %47, align 8
  %595 = add i64 %594, 1
  store i64 %595, i64* %47, align 8
  br label %562

; <label>:596:                                    ; preds = %562
  br label %597

; <label>:597:                                    ; preds = %596
  %598 = load i64, i64* %46, align 8
  %599 = add i64 %598, 1
  store i64 %599, i64* %46, align 8
  br label %557

; <label>:600:                                    ; preds = %557
  br label %601

; <label>:601:                                    ; preds = %225, %361, %470, %552, %600, %553
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_extract_tensor_f(float*, float*, i64*, i64*, i64*, i64, i64, i64) #2 {
  %9 = alloca float*, align 8
  %10 = alloca float*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  store float* %0, float** %9, align 8
  store float* %1, float** %10, align 8
  store i64* %2, i64** %11, align 8
  store i64* %3, i64** %12, align 8
  store i64* %4, i64** %13, align 8
  store i64 %5, i64* %14, align 8
  store i64 %6, i64* %15, align 8
  store i64 %7, i64* %16, align 8
  %17 = load float*, float** %9, align 8
  %18 = load float*, float** %10, align 8
  %19 = load i64*, i64** %11, align 8
  %20 = load i64*, i64** %12, align 8
  %21 = load i64*, i64** %13, align 8
  %22 = load i64, i64* %14, align 8
  %23 = load i64, i64* %15, align 8
  %24 = load i64, i64* %16, align 8
  call void @_ZN12_GLOBAL__N_121libjit_extract_tensorIfEEvPT_S2_PmS3_S3_mmm(float* %17, float* %18, i64* %19, i64* %20, i64* %21, i64 %22, i64 %23, i64 %24)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_121libjit_extract_tensorIfEEvPT_S2_PmS3_S3_mmm(float*, float*, i64*, i64*, i64*, i64, i64, i64) #0 {
  %9 = alloca float*, align 8
  %10 = alloca float*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca [5 x i64], align 16
  %18 = alloca [5 x i64], align 16
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  store float* %0, float** %9, align 8
  store float* %1, float** %10, align 8
  store i64* %2, i64** %11, align 8
  store i64* %3, i64** %12, align 8
  store i64* %4, i64** %13, align 8
  store i64 %5, i64* %14, align 8
  store i64 %6, i64* %15, align 8
  store i64 %7, i64* %16, align 8
  store i64 0, i64* %19, align 8
  br label %35

; <label>:35:                                     ; preds = %46, %8
  %36 = load i64, i64* %19, align 8
  %37 = load i64, i64* %15, align 8
  %38 = icmp ult i64 %36, %37
  br i1 %38, label %39, label %49

; <label>:39:                                     ; preds = %35
  %40 = load i64*, i64** %11, align 8
  %41 = load i64, i64* %19, align 8
  %42 = getelementptr inbounds i64, i64* %40, i64 %41
  %43 = load i64, i64* %42, align 8
  %44 = load i64, i64* %19, align 8
  %45 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 %44
  store i64 %43, i64* %45, align 8
  br label %46

; <label>:46:                                     ; preds = %39
  %47 = load i64, i64* %19, align 8
  %48 = add i64 %47, 1
  store i64 %48, i64* %19, align 8
  br label %35

; <label>:49:                                     ; preds = %35
  %50 = load i64, i64* %15, align 8
  %51 = icmp eq i64 %50, 5
  br i1 %51, label %52, label %157

; <label>:52:                                     ; preds = %49
  store i64 0, i64* %20, align 8
  br label %53

; <label>:53:                                     ; preds = %153, %52
  %54 = load i64, i64* %20, align 8
  %55 = load i64*, i64** %13, align 8
  %56 = getelementptr inbounds i64, i64* %55, i64 0
  %57 = load i64, i64* %56, align 8
  %58 = icmp ult i64 %54, %57
  br i1 %58, label %59, label %156

; <label>:59:                                     ; preds = %53
  store i64 0, i64* %21, align 8
  br label %60

; <label>:60:                                     ; preds = %149, %59
  %61 = load i64, i64* %21, align 8
  %62 = load i64*, i64** %13, align 8
  %63 = getelementptr inbounds i64, i64* %62, i64 1
  %64 = load i64, i64* %63, align 8
  %65 = icmp ult i64 %61, %64
  br i1 %65, label %66, label %152

; <label>:66:                                     ; preds = %60
  store i64 0, i64* %22, align 8
  br label %67

; <label>:67:                                     ; preds = %145, %66
  %68 = load i64, i64* %22, align 8
  %69 = load i64*, i64** %13, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 2
  %71 = load i64, i64* %70, align 8
  %72 = icmp ult i64 %68, %71
  br i1 %72, label %73, label %148

; <label>:73:                                     ; preds = %67
  store i64 0, i64* %23, align 8
  br label %74

; <label>:74:                                     ; preds = %141, %73
  %75 = load i64, i64* %23, align 8
  %76 = load i64*, i64** %13, align 8
  %77 = getelementptr inbounds i64, i64* %76, i64 3
  %78 = load i64, i64* %77, align 8
  %79 = icmp ult i64 %75, %78
  br i1 %79, label %80, label %144

; <label>:80:                                     ; preds = %74
  store i64 0, i64* %24, align 8
  br label %81

; <label>:81:                                     ; preds = %137, %80
  %82 = load i64, i64* %24, align 8
  %83 = load i64*, i64** %13, align 8
  %84 = getelementptr inbounds i64, i64* %83, i64 4
  %85 = load i64, i64* %84, align 8
  %86 = icmp ult i64 %82, %85
  br i1 %86, label %87, label %140

; <label>:87:                                     ; preds = %81
  %88 = load i64, i64* %20, align 8
  %89 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %90 = load i64, i64* %89, align 16
  %91 = add i64 %88, %90
  %92 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  store i64 %91, i64* %92, align 16
  %93 = load i64, i64* %21, align 8
  %94 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 1
  %95 = load i64, i64* %94, align 8
  %96 = add i64 %93, %95
  %97 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  store i64 %96, i64* %97, align 8
  %98 = load i64, i64* %22, align 8
  %99 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 2
  %100 = load i64, i64* %99, align 16
  %101 = add i64 %98, %100
  %102 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  store i64 %101, i64* %102, align 16
  %103 = load i64, i64* %23, align 8
  %104 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 3
  %105 = load i64, i64* %104, align 8
  %106 = add i64 %103, %105
  %107 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 3
  store i64 %106, i64* %107, align 8
  %108 = load i64, i64* %24, align 8
  %109 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 4
  %110 = load i64, i64* %109, align 16
  %111 = add i64 %108, %110
  %112 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 4
  store i64 %111, i64* %112, align 16
  %113 = load float*, float** %9, align 8
  %114 = load i64*, i64** %12, align 8
  %115 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  %116 = load i64, i64* %115, align 16
  %117 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  %120 = load i64, i64* %119, align 16
  %121 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 3
  %122 = load i64, i64* %121, align 8
  %123 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 4
  %124 = load i64, i64* %123, align 16
  %125 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %114, i64 %116, i64 %118, i64 %120, i64 %122, i64 %124)
  %126 = getelementptr inbounds float, float* %113, i64 %125
  %127 = load float, float* %126, align 4
  %128 = load float*, float** %10, align 8
  %129 = load i64*, i64** %13, align 8
  %130 = load i64, i64* %20, align 8
  %131 = load i64, i64* %21, align 8
  %132 = load i64, i64* %22, align 8
  %133 = load i64, i64* %23, align 8
  %134 = load i64, i64* %24, align 8
  %135 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %129, i64 %130, i64 %131, i64 %132, i64 %133, i64 %134)
  %136 = getelementptr inbounds float, float* %128, i64 %135
  store float %127, float* %136, align 4
  br label %137

; <label>:137:                                    ; preds = %87
  %138 = load i64, i64* %24, align 8
  %139 = add i64 %138, 1
  store i64 %139, i64* %24, align 8
  br label %81

; <label>:140:                                    ; preds = %81
  br label %141

; <label>:141:                                    ; preds = %140
  %142 = load i64, i64* %23, align 8
  %143 = add i64 %142, 1
  store i64 %143, i64* %23, align 8
  br label %74

; <label>:144:                                    ; preds = %74
  br label %145

; <label>:145:                                    ; preds = %144
  %146 = load i64, i64* %22, align 8
  %147 = add i64 %146, 1
  store i64 %147, i64* %22, align 8
  br label %67

; <label>:148:                                    ; preds = %67
  br label %149

; <label>:149:                                    ; preds = %148
  %150 = load i64, i64* %21, align 8
  %151 = add i64 %150, 1
  store i64 %151, i64* %21, align 8
  br label %60

; <label>:152:                                    ; preds = %60
  br label %153

; <label>:153:                                    ; preds = %152
  %154 = load i64, i64* %20, align 8
  %155 = add i64 %154, 1
  store i64 %155, i64* %20, align 8
  br label %53

; <label>:156:                                    ; preds = %53
  br label %392

; <label>:157:                                    ; preds = %49
  %158 = load i64, i64* %15, align 8
  %159 = icmp eq i64 %158, 4
  br i1 %159, label %160, label %246

; <label>:160:                                    ; preds = %157
  store i64 0, i64* %25, align 8
  br label %161

; <label>:161:                                    ; preds = %242, %160
  %162 = load i64, i64* %25, align 8
  %163 = load i64*, i64** %13, align 8
  %164 = getelementptr inbounds i64, i64* %163, i64 0
  %165 = load i64, i64* %164, align 8
  %166 = icmp ult i64 %162, %165
  br i1 %166, label %167, label %245

; <label>:167:                                    ; preds = %161
  store i64 0, i64* %26, align 8
  br label %168

; <label>:168:                                    ; preds = %238, %167
  %169 = load i64, i64* %26, align 8
  %170 = load i64*, i64** %13, align 8
  %171 = getelementptr inbounds i64, i64* %170, i64 1
  %172 = load i64, i64* %171, align 8
  %173 = icmp ult i64 %169, %172
  br i1 %173, label %174, label %241

; <label>:174:                                    ; preds = %168
  store i64 0, i64* %27, align 8
  br label %175

; <label>:175:                                    ; preds = %234, %174
  %176 = load i64, i64* %27, align 8
  %177 = load i64*, i64** %13, align 8
  %178 = getelementptr inbounds i64, i64* %177, i64 2
  %179 = load i64, i64* %178, align 8
  %180 = icmp ult i64 %176, %179
  br i1 %180, label %181, label %237

; <label>:181:                                    ; preds = %175
  store i64 0, i64* %28, align 8
  br label %182

; <label>:182:                                    ; preds = %230, %181
  %183 = load i64, i64* %28, align 8
  %184 = load i64*, i64** %13, align 8
  %185 = getelementptr inbounds i64, i64* %184, i64 3
  %186 = load i64, i64* %185, align 8
  %187 = icmp ult i64 %183, %186
  br i1 %187, label %188, label %233

; <label>:188:                                    ; preds = %182
  %189 = load i64, i64* %25, align 8
  %190 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %191 = load i64, i64* %190, align 16
  %192 = add i64 %189, %191
  %193 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  store i64 %192, i64* %193, align 16
  %194 = load i64, i64* %26, align 8
  %195 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 1
  %196 = load i64, i64* %195, align 8
  %197 = add i64 %194, %196
  %198 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  store i64 %197, i64* %198, align 8
  %199 = load i64, i64* %27, align 8
  %200 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 2
  %201 = load i64, i64* %200, align 16
  %202 = add i64 %199, %201
  %203 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  store i64 %202, i64* %203, align 16
  %204 = load i64, i64* %28, align 8
  %205 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 3
  %206 = load i64, i64* %205, align 8
  %207 = add i64 %204, %206
  %208 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 3
  store i64 %207, i64* %208, align 8
  %209 = load float*, float** %9, align 8
  %210 = load i64*, i64** %12, align 8
  %211 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  %212 = load i64, i64* %211, align 16
  %213 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  %214 = load i64, i64* %213, align 8
  %215 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  %216 = load i64, i64* %215, align 16
  %217 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 3
  %218 = load i64, i64* %217, align 8
  %219 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %210, i64 %212, i64 %214, i64 %216, i64 %218)
  %220 = getelementptr inbounds float, float* %209, i64 %219
  %221 = load float, float* %220, align 4
  %222 = load float*, float** %10, align 8
  %223 = load i64*, i64** %13, align 8
  %224 = load i64, i64* %25, align 8
  %225 = load i64, i64* %26, align 8
  %226 = load i64, i64* %27, align 8
  %227 = load i64, i64* %28, align 8
  %228 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %223, i64 %224, i64 %225, i64 %226, i64 %227)
  %229 = getelementptr inbounds float, float* %222, i64 %228
  store float %221, float* %229, align 4
  br label %230

; <label>:230:                                    ; preds = %188
  %231 = load i64, i64* %28, align 8
  %232 = add i64 %231, 1
  store i64 %232, i64* %28, align 8
  br label %182

; <label>:233:                                    ; preds = %182
  br label %234

; <label>:234:                                    ; preds = %233
  %235 = load i64, i64* %27, align 8
  %236 = add i64 %235, 1
  store i64 %236, i64* %27, align 8
  br label %175

; <label>:237:                                    ; preds = %175
  br label %238

; <label>:238:                                    ; preds = %237
  %239 = load i64, i64* %26, align 8
  %240 = add i64 %239, 1
  store i64 %240, i64* %26, align 8
  br label %168

; <label>:241:                                    ; preds = %168
  br label %242

; <label>:242:                                    ; preds = %241
  %243 = load i64, i64* %25, align 8
  %244 = add i64 %243, 1
  store i64 %244, i64* %25, align 8
  br label %161

; <label>:245:                                    ; preds = %161
  br label %392

; <label>:246:                                    ; preds = %157
  %247 = load i64, i64* %15, align 8
  %248 = icmp eq i64 %247, 3
  br i1 %248, label %249, label %316

; <label>:249:                                    ; preds = %246
  store i64 0, i64* %29, align 8
  br label %250

; <label>:250:                                    ; preds = %312, %249
  %251 = load i64, i64* %29, align 8
  %252 = load i64*, i64** %13, align 8
  %253 = getelementptr inbounds i64, i64* %252, i64 0
  %254 = load i64, i64* %253, align 8
  %255 = icmp ult i64 %251, %254
  br i1 %255, label %256, label %315

; <label>:256:                                    ; preds = %250
  store i64 0, i64* %30, align 8
  br label %257

; <label>:257:                                    ; preds = %308, %256
  %258 = load i64, i64* %30, align 8
  %259 = load i64*, i64** %13, align 8
  %260 = getelementptr inbounds i64, i64* %259, i64 1
  %261 = load i64, i64* %260, align 8
  %262 = icmp ult i64 %258, %261
  br i1 %262, label %263, label %311

; <label>:263:                                    ; preds = %257
  store i64 0, i64* %31, align 8
  br label %264

; <label>:264:                                    ; preds = %304, %263
  %265 = load i64, i64* %31, align 8
  %266 = load i64*, i64** %13, align 8
  %267 = getelementptr inbounds i64, i64* %266, i64 2
  %268 = load i64, i64* %267, align 8
  %269 = icmp ult i64 %265, %268
  br i1 %269, label %270, label %307

; <label>:270:                                    ; preds = %264
  %271 = load i64, i64* %29, align 8
  %272 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %273 = load i64, i64* %272, align 16
  %274 = add i64 %271, %273
  %275 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  store i64 %274, i64* %275, align 16
  %276 = load i64, i64* %30, align 8
  %277 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 1
  %278 = load i64, i64* %277, align 8
  %279 = add i64 %276, %278
  %280 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  store i64 %279, i64* %280, align 8
  %281 = load i64, i64* %31, align 8
  %282 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 2
  %283 = load i64, i64* %282, align 16
  %284 = add i64 %281, %283
  %285 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  store i64 %284, i64* %285, align 16
  %286 = load float*, float** %9, align 8
  %287 = load i64*, i64** %12, align 8
  %288 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  %289 = load i64, i64* %288, align 16
  %290 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  %291 = load i64, i64* %290, align 8
  %292 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  %293 = load i64, i64* %292, align 16
  %294 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %287, i64 %289, i64 %291, i64 %293)
  %295 = getelementptr inbounds float, float* %286, i64 %294
  %296 = load float, float* %295, align 4
  %297 = load float*, float** %10, align 8
  %298 = load i64*, i64** %13, align 8
  %299 = load i64, i64* %29, align 8
  %300 = load i64, i64* %30, align 8
  %301 = load i64, i64* %31, align 8
  %302 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %298, i64 %299, i64 %300, i64 %301)
  %303 = getelementptr inbounds float, float* %297, i64 %302
  store float %296, float* %303, align 4
  br label %304

; <label>:304:                                    ; preds = %270
  %305 = load i64, i64* %31, align 8
  %306 = add i64 %305, 1
  store i64 %306, i64* %31, align 8
  br label %264

; <label>:307:                                    ; preds = %264
  br label %308

; <label>:308:                                    ; preds = %307
  %309 = load i64, i64* %30, align 8
  %310 = add i64 %309, 1
  store i64 %310, i64* %30, align 8
  br label %257

; <label>:311:                                    ; preds = %257
  br label %312

; <label>:312:                                    ; preds = %311
  %313 = load i64, i64* %29, align 8
  %314 = add i64 %313, 1
  store i64 %314, i64* %29, align 8
  br label %250

; <label>:315:                                    ; preds = %250
  br label %392

; <label>:316:                                    ; preds = %246
  %317 = load i64, i64* %15, align 8
  %318 = icmp eq i64 %317, 2
  br i1 %318, label %319, label %367

; <label>:319:                                    ; preds = %316
  store i64 0, i64* %32, align 8
  br label %320

; <label>:320:                                    ; preds = %363, %319
  %321 = load i64, i64* %32, align 8
  %322 = load i64*, i64** %13, align 8
  %323 = getelementptr inbounds i64, i64* %322, i64 0
  %324 = load i64, i64* %323, align 8
  %325 = icmp ult i64 %321, %324
  br i1 %325, label %326, label %366

; <label>:326:                                    ; preds = %320
  store i64 0, i64* %33, align 8
  br label %327

; <label>:327:                                    ; preds = %359, %326
  %328 = load i64, i64* %33, align 8
  %329 = load i64*, i64** %13, align 8
  %330 = getelementptr inbounds i64, i64* %329, i64 1
  %331 = load i64, i64* %330, align 8
  %332 = icmp ult i64 %328, %331
  br i1 %332, label %333, label %362

; <label>:333:                                    ; preds = %327
  %334 = load i64, i64* %32, align 8
  %335 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %336 = load i64, i64* %335, align 16
  %337 = add i64 %334, %336
  %338 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  store i64 %337, i64* %338, align 16
  %339 = load i64, i64* %33, align 8
  %340 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 1
  %341 = load i64, i64* %340, align 8
  %342 = add i64 %339, %341
  %343 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  store i64 %342, i64* %343, align 8
  %344 = load float*, float** %9, align 8
  %345 = load i64*, i64** %12, align 8
  %346 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  %347 = load i64, i64* %346, align 16
  %348 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  %349 = load i64, i64* %348, align 8
  %350 = call i64 @_Z12libjit_getXYPKmmm(i64* %345, i64 %347, i64 %349)
  %351 = getelementptr inbounds float, float* %344, i64 %350
  %352 = load float, float* %351, align 4
  %353 = load float*, float** %10, align 8
  %354 = load i64*, i64** %13, align 8
  %355 = load i64, i64* %32, align 8
  %356 = load i64, i64* %33, align 8
  %357 = call i64 @_Z12libjit_getXYPKmmm(i64* %354, i64 %355, i64 %356)
  %358 = getelementptr inbounds float, float* %353, i64 %357
  store float %352, float* %358, align 4
  br label %359

; <label>:359:                                    ; preds = %333
  %360 = load i64, i64* %33, align 8
  %361 = add i64 %360, 1
  store i64 %361, i64* %33, align 8
  br label %327

; <label>:362:                                    ; preds = %327
  br label %363

; <label>:363:                                    ; preds = %362
  %364 = load i64, i64* %32, align 8
  %365 = add i64 %364, 1
  store i64 %365, i64* %32, align 8
  br label %320

; <label>:366:                                    ; preds = %320
  br label %392

; <label>:367:                                    ; preds = %316
  %368 = load i64, i64* %15, align 8
  %369 = icmp eq i64 %368, 1
  br i1 %369, label %370, label %392

; <label>:370:                                    ; preds = %367
  store i64 0, i64* %34, align 8
  br label %371

; <label>:371:                                    ; preds = %388, %370
  %372 = load i64, i64* %34, align 8
  %373 = load i64*, i64** %13, align 8
  %374 = getelementptr inbounds i64, i64* %373, i64 0
  %375 = load i64, i64* %374, align 8
  %376 = icmp ult i64 %372, %375
  br i1 %376, label %377, label %391

; <label>:377:                                    ; preds = %371
  %378 = load float*, float** %9, align 8
  %379 = load i64, i64* %34, align 8
  %380 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %381 = load i64, i64* %380, align 16
  %382 = add i64 %379, %381
  %383 = getelementptr inbounds float, float* %378, i64 %382
  %384 = load float, float* %383, align 4
  %385 = load float*, float** %10, align 8
  %386 = load i64, i64* %34, align 8
  %387 = getelementptr inbounds float, float* %385, i64 %386
  store float %384, float* %387, align 4
  br label %388

; <label>:388:                                    ; preds = %377
  %389 = load i64, i64* %34, align 8
  %390 = add i64 %389, 1
  store i64 %390, i64* %34, align 8
  br label %371

; <label>:391:                                    ; preds = %371
  br label %392

; <label>:392:                                    ; preds = %156, %245, %315, %366, %391, %367
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_extract_tensor_i8(i8*, i8*, i64*, i64*, i64*, i64, i64, i64) #2 {
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  store i8* %0, i8** %9, align 8
  store i8* %1, i8** %10, align 8
  store i64* %2, i64** %11, align 8
  store i64* %3, i64** %12, align 8
  store i64* %4, i64** %13, align 8
  store i64 %5, i64* %14, align 8
  store i64 %6, i64* %15, align 8
  store i64 %7, i64* %16, align 8
  %17 = load i8*, i8** %9, align 8
  %18 = load i8*, i8** %10, align 8
  %19 = load i64*, i64** %11, align 8
  %20 = load i64*, i64** %12, align 8
  %21 = load i64*, i64** %13, align 8
  %22 = load i64, i64* %14, align 8
  %23 = load i64, i64* %15, align 8
  %24 = load i64, i64* %16, align 8
  call void @_ZN12_GLOBAL__N_121libjit_extract_tensorIaEEvPT_S2_PmS3_S3_mmm(i8* %17, i8* %18, i64* %19, i64* %20, i64* %21, i64 %22, i64 %23, i64 %24)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_121libjit_extract_tensorIaEEvPT_S2_PmS3_S3_mmm(i8*, i8*, i64*, i64*, i64*, i64, i64, i64) #0 {
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca [5 x i64], align 16
  %18 = alloca [5 x i64], align 16
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  store i8* %0, i8** %9, align 8
  store i8* %1, i8** %10, align 8
  store i64* %2, i64** %11, align 8
  store i64* %3, i64** %12, align 8
  store i64* %4, i64** %13, align 8
  store i64 %5, i64* %14, align 8
  store i64 %6, i64* %15, align 8
  store i64 %7, i64* %16, align 8
  store i64 0, i64* %19, align 8
  br label %35

; <label>:35:                                     ; preds = %46, %8
  %36 = load i64, i64* %19, align 8
  %37 = load i64, i64* %15, align 8
  %38 = icmp ult i64 %36, %37
  br i1 %38, label %39, label %49

; <label>:39:                                     ; preds = %35
  %40 = load i64*, i64** %11, align 8
  %41 = load i64, i64* %19, align 8
  %42 = getelementptr inbounds i64, i64* %40, i64 %41
  %43 = load i64, i64* %42, align 8
  %44 = load i64, i64* %19, align 8
  %45 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 %44
  store i64 %43, i64* %45, align 8
  br label %46

; <label>:46:                                     ; preds = %39
  %47 = load i64, i64* %19, align 8
  %48 = add i64 %47, 1
  store i64 %48, i64* %19, align 8
  br label %35

; <label>:49:                                     ; preds = %35
  %50 = load i64, i64* %15, align 8
  %51 = icmp eq i64 %50, 5
  br i1 %51, label %52, label %157

; <label>:52:                                     ; preds = %49
  store i64 0, i64* %20, align 8
  br label %53

; <label>:53:                                     ; preds = %153, %52
  %54 = load i64, i64* %20, align 8
  %55 = load i64*, i64** %13, align 8
  %56 = getelementptr inbounds i64, i64* %55, i64 0
  %57 = load i64, i64* %56, align 8
  %58 = icmp ult i64 %54, %57
  br i1 %58, label %59, label %156

; <label>:59:                                     ; preds = %53
  store i64 0, i64* %21, align 8
  br label %60

; <label>:60:                                     ; preds = %149, %59
  %61 = load i64, i64* %21, align 8
  %62 = load i64*, i64** %13, align 8
  %63 = getelementptr inbounds i64, i64* %62, i64 1
  %64 = load i64, i64* %63, align 8
  %65 = icmp ult i64 %61, %64
  br i1 %65, label %66, label %152

; <label>:66:                                     ; preds = %60
  store i64 0, i64* %22, align 8
  br label %67

; <label>:67:                                     ; preds = %145, %66
  %68 = load i64, i64* %22, align 8
  %69 = load i64*, i64** %13, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 2
  %71 = load i64, i64* %70, align 8
  %72 = icmp ult i64 %68, %71
  br i1 %72, label %73, label %148

; <label>:73:                                     ; preds = %67
  store i64 0, i64* %23, align 8
  br label %74

; <label>:74:                                     ; preds = %141, %73
  %75 = load i64, i64* %23, align 8
  %76 = load i64*, i64** %13, align 8
  %77 = getelementptr inbounds i64, i64* %76, i64 3
  %78 = load i64, i64* %77, align 8
  %79 = icmp ult i64 %75, %78
  br i1 %79, label %80, label %144

; <label>:80:                                     ; preds = %74
  store i64 0, i64* %24, align 8
  br label %81

; <label>:81:                                     ; preds = %137, %80
  %82 = load i64, i64* %24, align 8
  %83 = load i64*, i64** %13, align 8
  %84 = getelementptr inbounds i64, i64* %83, i64 4
  %85 = load i64, i64* %84, align 8
  %86 = icmp ult i64 %82, %85
  br i1 %86, label %87, label %140

; <label>:87:                                     ; preds = %81
  %88 = load i64, i64* %20, align 8
  %89 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %90 = load i64, i64* %89, align 16
  %91 = add i64 %88, %90
  %92 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  store i64 %91, i64* %92, align 16
  %93 = load i64, i64* %21, align 8
  %94 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 1
  %95 = load i64, i64* %94, align 8
  %96 = add i64 %93, %95
  %97 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  store i64 %96, i64* %97, align 8
  %98 = load i64, i64* %22, align 8
  %99 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 2
  %100 = load i64, i64* %99, align 16
  %101 = add i64 %98, %100
  %102 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  store i64 %101, i64* %102, align 16
  %103 = load i64, i64* %23, align 8
  %104 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 3
  %105 = load i64, i64* %104, align 8
  %106 = add i64 %103, %105
  %107 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 3
  store i64 %106, i64* %107, align 8
  %108 = load i64, i64* %24, align 8
  %109 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 4
  %110 = load i64, i64* %109, align 16
  %111 = add i64 %108, %110
  %112 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 4
  store i64 %111, i64* %112, align 16
  %113 = load i8*, i8** %9, align 8
  %114 = load i64*, i64** %12, align 8
  %115 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  %116 = load i64, i64* %115, align 16
  %117 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  %120 = load i64, i64* %119, align 16
  %121 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 3
  %122 = load i64, i64* %121, align 8
  %123 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 4
  %124 = load i64, i64* %123, align 16
  %125 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %114, i64 %116, i64 %118, i64 %120, i64 %122, i64 %124)
  %126 = getelementptr inbounds i8, i8* %113, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = load i8*, i8** %10, align 8
  %129 = load i64*, i64** %13, align 8
  %130 = load i64, i64* %20, align 8
  %131 = load i64, i64* %21, align 8
  %132 = load i64, i64* %22, align 8
  %133 = load i64, i64* %23, align 8
  %134 = load i64, i64* %24, align 8
  %135 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %129, i64 %130, i64 %131, i64 %132, i64 %133, i64 %134)
  %136 = getelementptr inbounds i8, i8* %128, i64 %135
  store i8 %127, i8* %136, align 1
  br label %137

; <label>:137:                                    ; preds = %87
  %138 = load i64, i64* %24, align 8
  %139 = add i64 %138, 1
  store i64 %139, i64* %24, align 8
  br label %81

; <label>:140:                                    ; preds = %81
  br label %141

; <label>:141:                                    ; preds = %140
  %142 = load i64, i64* %23, align 8
  %143 = add i64 %142, 1
  store i64 %143, i64* %23, align 8
  br label %74

; <label>:144:                                    ; preds = %74
  br label %145

; <label>:145:                                    ; preds = %144
  %146 = load i64, i64* %22, align 8
  %147 = add i64 %146, 1
  store i64 %147, i64* %22, align 8
  br label %67

; <label>:148:                                    ; preds = %67
  br label %149

; <label>:149:                                    ; preds = %148
  %150 = load i64, i64* %21, align 8
  %151 = add i64 %150, 1
  store i64 %151, i64* %21, align 8
  br label %60

; <label>:152:                                    ; preds = %60
  br label %153

; <label>:153:                                    ; preds = %152
  %154 = load i64, i64* %20, align 8
  %155 = add i64 %154, 1
  store i64 %155, i64* %20, align 8
  br label %53

; <label>:156:                                    ; preds = %53
  br label %392

; <label>:157:                                    ; preds = %49
  %158 = load i64, i64* %15, align 8
  %159 = icmp eq i64 %158, 4
  br i1 %159, label %160, label %246

; <label>:160:                                    ; preds = %157
  store i64 0, i64* %25, align 8
  br label %161

; <label>:161:                                    ; preds = %242, %160
  %162 = load i64, i64* %25, align 8
  %163 = load i64*, i64** %13, align 8
  %164 = getelementptr inbounds i64, i64* %163, i64 0
  %165 = load i64, i64* %164, align 8
  %166 = icmp ult i64 %162, %165
  br i1 %166, label %167, label %245

; <label>:167:                                    ; preds = %161
  store i64 0, i64* %26, align 8
  br label %168

; <label>:168:                                    ; preds = %238, %167
  %169 = load i64, i64* %26, align 8
  %170 = load i64*, i64** %13, align 8
  %171 = getelementptr inbounds i64, i64* %170, i64 1
  %172 = load i64, i64* %171, align 8
  %173 = icmp ult i64 %169, %172
  br i1 %173, label %174, label %241

; <label>:174:                                    ; preds = %168
  store i64 0, i64* %27, align 8
  br label %175

; <label>:175:                                    ; preds = %234, %174
  %176 = load i64, i64* %27, align 8
  %177 = load i64*, i64** %13, align 8
  %178 = getelementptr inbounds i64, i64* %177, i64 2
  %179 = load i64, i64* %178, align 8
  %180 = icmp ult i64 %176, %179
  br i1 %180, label %181, label %237

; <label>:181:                                    ; preds = %175
  store i64 0, i64* %28, align 8
  br label %182

; <label>:182:                                    ; preds = %230, %181
  %183 = load i64, i64* %28, align 8
  %184 = load i64*, i64** %13, align 8
  %185 = getelementptr inbounds i64, i64* %184, i64 3
  %186 = load i64, i64* %185, align 8
  %187 = icmp ult i64 %183, %186
  br i1 %187, label %188, label %233

; <label>:188:                                    ; preds = %182
  %189 = load i64, i64* %25, align 8
  %190 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %191 = load i64, i64* %190, align 16
  %192 = add i64 %189, %191
  %193 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  store i64 %192, i64* %193, align 16
  %194 = load i64, i64* %26, align 8
  %195 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 1
  %196 = load i64, i64* %195, align 8
  %197 = add i64 %194, %196
  %198 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  store i64 %197, i64* %198, align 8
  %199 = load i64, i64* %27, align 8
  %200 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 2
  %201 = load i64, i64* %200, align 16
  %202 = add i64 %199, %201
  %203 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  store i64 %202, i64* %203, align 16
  %204 = load i64, i64* %28, align 8
  %205 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 3
  %206 = load i64, i64* %205, align 8
  %207 = add i64 %204, %206
  %208 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 3
  store i64 %207, i64* %208, align 8
  %209 = load i8*, i8** %9, align 8
  %210 = load i64*, i64** %12, align 8
  %211 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  %212 = load i64, i64* %211, align 16
  %213 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  %214 = load i64, i64* %213, align 8
  %215 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  %216 = load i64, i64* %215, align 16
  %217 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 3
  %218 = load i64, i64* %217, align 8
  %219 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %210, i64 %212, i64 %214, i64 %216, i64 %218)
  %220 = getelementptr inbounds i8, i8* %209, i64 %219
  %221 = load i8, i8* %220, align 1
  %222 = load i8*, i8** %10, align 8
  %223 = load i64*, i64** %13, align 8
  %224 = load i64, i64* %25, align 8
  %225 = load i64, i64* %26, align 8
  %226 = load i64, i64* %27, align 8
  %227 = load i64, i64* %28, align 8
  %228 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %223, i64 %224, i64 %225, i64 %226, i64 %227)
  %229 = getelementptr inbounds i8, i8* %222, i64 %228
  store i8 %221, i8* %229, align 1
  br label %230

; <label>:230:                                    ; preds = %188
  %231 = load i64, i64* %28, align 8
  %232 = add i64 %231, 1
  store i64 %232, i64* %28, align 8
  br label %182

; <label>:233:                                    ; preds = %182
  br label %234

; <label>:234:                                    ; preds = %233
  %235 = load i64, i64* %27, align 8
  %236 = add i64 %235, 1
  store i64 %236, i64* %27, align 8
  br label %175

; <label>:237:                                    ; preds = %175
  br label %238

; <label>:238:                                    ; preds = %237
  %239 = load i64, i64* %26, align 8
  %240 = add i64 %239, 1
  store i64 %240, i64* %26, align 8
  br label %168

; <label>:241:                                    ; preds = %168
  br label %242

; <label>:242:                                    ; preds = %241
  %243 = load i64, i64* %25, align 8
  %244 = add i64 %243, 1
  store i64 %244, i64* %25, align 8
  br label %161

; <label>:245:                                    ; preds = %161
  br label %392

; <label>:246:                                    ; preds = %157
  %247 = load i64, i64* %15, align 8
  %248 = icmp eq i64 %247, 3
  br i1 %248, label %249, label %316

; <label>:249:                                    ; preds = %246
  store i64 0, i64* %29, align 8
  br label %250

; <label>:250:                                    ; preds = %312, %249
  %251 = load i64, i64* %29, align 8
  %252 = load i64*, i64** %13, align 8
  %253 = getelementptr inbounds i64, i64* %252, i64 0
  %254 = load i64, i64* %253, align 8
  %255 = icmp ult i64 %251, %254
  br i1 %255, label %256, label %315

; <label>:256:                                    ; preds = %250
  store i64 0, i64* %30, align 8
  br label %257

; <label>:257:                                    ; preds = %308, %256
  %258 = load i64, i64* %30, align 8
  %259 = load i64*, i64** %13, align 8
  %260 = getelementptr inbounds i64, i64* %259, i64 1
  %261 = load i64, i64* %260, align 8
  %262 = icmp ult i64 %258, %261
  br i1 %262, label %263, label %311

; <label>:263:                                    ; preds = %257
  store i64 0, i64* %31, align 8
  br label %264

; <label>:264:                                    ; preds = %304, %263
  %265 = load i64, i64* %31, align 8
  %266 = load i64*, i64** %13, align 8
  %267 = getelementptr inbounds i64, i64* %266, i64 2
  %268 = load i64, i64* %267, align 8
  %269 = icmp ult i64 %265, %268
  br i1 %269, label %270, label %307

; <label>:270:                                    ; preds = %264
  %271 = load i64, i64* %29, align 8
  %272 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %273 = load i64, i64* %272, align 16
  %274 = add i64 %271, %273
  %275 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  store i64 %274, i64* %275, align 16
  %276 = load i64, i64* %30, align 8
  %277 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 1
  %278 = load i64, i64* %277, align 8
  %279 = add i64 %276, %278
  %280 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  store i64 %279, i64* %280, align 8
  %281 = load i64, i64* %31, align 8
  %282 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 2
  %283 = load i64, i64* %282, align 16
  %284 = add i64 %281, %283
  %285 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  store i64 %284, i64* %285, align 16
  %286 = load i8*, i8** %9, align 8
  %287 = load i64*, i64** %12, align 8
  %288 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  %289 = load i64, i64* %288, align 16
  %290 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  %291 = load i64, i64* %290, align 8
  %292 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  %293 = load i64, i64* %292, align 16
  %294 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %287, i64 %289, i64 %291, i64 %293)
  %295 = getelementptr inbounds i8, i8* %286, i64 %294
  %296 = load i8, i8* %295, align 1
  %297 = load i8*, i8** %10, align 8
  %298 = load i64*, i64** %13, align 8
  %299 = load i64, i64* %29, align 8
  %300 = load i64, i64* %30, align 8
  %301 = load i64, i64* %31, align 8
  %302 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %298, i64 %299, i64 %300, i64 %301)
  %303 = getelementptr inbounds i8, i8* %297, i64 %302
  store i8 %296, i8* %303, align 1
  br label %304

; <label>:304:                                    ; preds = %270
  %305 = load i64, i64* %31, align 8
  %306 = add i64 %305, 1
  store i64 %306, i64* %31, align 8
  br label %264

; <label>:307:                                    ; preds = %264
  br label %308

; <label>:308:                                    ; preds = %307
  %309 = load i64, i64* %30, align 8
  %310 = add i64 %309, 1
  store i64 %310, i64* %30, align 8
  br label %257

; <label>:311:                                    ; preds = %257
  br label %312

; <label>:312:                                    ; preds = %311
  %313 = load i64, i64* %29, align 8
  %314 = add i64 %313, 1
  store i64 %314, i64* %29, align 8
  br label %250

; <label>:315:                                    ; preds = %250
  br label %392

; <label>:316:                                    ; preds = %246
  %317 = load i64, i64* %15, align 8
  %318 = icmp eq i64 %317, 2
  br i1 %318, label %319, label %367

; <label>:319:                                    ; preds = %316
  store i64 0, i64* %32, align 8
  br label %320

; <label>:320:                                    ; preds = %363, %319
  %321 = load i64, i64* %32, align 8
  %322 = load i64*, i64** %13, align 8
  %323 = getelementptr inbounds i64, i64* %322, i64 0
  %324 = load i64, i64* %323, align 8
  %325 = icmp ult i64 %321, %324
  br i1 %325, label %326, label %366

; <label>:326:                                    ; preds = %320
  store i64 0, i64* %33, align 8
  br label %327

; <label>:327:                                    ; preds = %359, %326
  %328 = load i64, i64* %33, align 8
  %329 = load i64*, i64** %13, align 8
  %330 = getelementptr inbounds i64, i64* %329, i64 1
  %331 = load i64, i64* %330, align 8
  %332 = icmp ult i64 %328, %331
  br i1 %332, label %333, label %362

; <label>:333:                                    ; preds = %327
  %334 = load i64, i64* %32, align 8
  %335 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %336 = load i64, i64* %335, align 16
  %337 = add i64 %334, %336
  %338 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  store i64 %337, i64* %338, align 16
  %339 = load i64, i64* %33, align 8
  %340 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 1
  %341 = load i64, i64* %340, align 8
  %342 = add i64 %339, %341
  %343 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  store i64 %342, i64* %343, align 8
  %344 = load i8*, i8** %9, align 8
  %345 = load i64*, i64** %12, align 8
  %346 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  %347 = load i64, i64* %346, align 16
  %348 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  %349 = load i64, i64* %348, align 8
  %350 = call i64 @_Z12libjit_getXYPKmmm(i64* %345, i64 %347, i64 %349)
  %351 = getelementptr inbounds i8, i8* %344, i64 %350
  %352 = load i8, i8* %351, align 1
  %353 = load i8*, i8** %10, align 8
  %354 = load i64*, i64** %13, align 8
  %355 = load i64, i64* %32, align 8
  %356 = load i64, i64* %33, align 8
  %357 = call i64 @_Z12libjit_getXYPKmmm(i64* %354, i64 %355, i64 %356)
  %358 = getelementptr inbounds i8, i8* %353, i64 %357
  store i8 %352, i8* %358, align 1
  br label %359

; <label>:359:                                    ; preds = %333
  %360 = load i64, i64* %33, align 8
  %361 = add i64 %360, 1
  store i64 %361, i64* %33, align 8
  br label %327

; <label>:362:                                    ; preds = %327
  br label %363

; <label>:363:                                    ; preds = %362
  %364 = load i64, i64* %32, align 8
  %365 = add i64 %364, 1
  store i64 %365, i64* %32, align 8
  br label %320

; <label>:366:                                    ; preds = %320
  br label %392

; <label>:367:                                    ; preds = %316
  %368 = load i64, i64* %15, align 8
  %369 = icmp eq i64 %368, 1
  br i1 %369, label %370, label %392

; <label>:370:                                    ; preds = %367
  store i64 0, i64* %34, align 8
  br label %371

; <label>:371:                                    ; preds = %388, %370
  %372 = load i64, i64* %34, align 8
  %373 = load i64*, i64** %13, align 8
  %374 = getelementptr inbounds i64, i64* %373, i64 0
  %375 = load i64, i64* %374, align 8
  %376 = icmp ult i64 %372, %375
  br i1 %376, label %377, label %391

; <label>:377:                                    ; preds = %371
  %378 = load i8*, i8** %9, align 8
  %379 = load i64, i64* %34, align 8
  %380 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %381 = load i64, i64* %380, align 16
  %382 = add i64 %379, %381
  %383 = getelementptr inbounds i8, i8* %378, i64 %382
  %384 = load i8, i8* %383, align 1
  %385 = load i8*, i8** %10, align 8
  %386 = load i64, i64* %34, align 8
  %387 = getelementptr inbounds i8, i8* %385, i64 %386
  store i8 %384, i8* %387, align 1
  br label %388

; <label>:388:                                    ; preds = %377
  %389 = load i64, i64* %34, align 8
  %390 = add i64 %389, 1
  store i64 %390, i64* %34, align 8
  br label %371

; <label>:391:                                    ; preds = %371
  br label %392

; <label>:392:                                    ; preds = %156, %245, %315, %366, %391, %367
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_extract_tensor_i32(i32*, i32*, i64*, i64*, i64*, i64, i64, i64) #2 {
  %9 = alloca i32*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  store i32* %0, i32** %9, align 8
  store i32* %1, i32** %10, align 8
  store i64* %2, i64** %11, align 8
  store i64* %3, i64** %12, align 8
  store i64* %4, i64** %13, align 8
  store i64 %5, i64* %14, align 8
  store i64 %6, i64* %15, align 8
  store i64 %7, i64* %16, align 8
  %17 = load i32*, i32** %9, align 8
  %18 = load i32*, i32** %10, align 8
  %19 = load i64*, i64** %11, align 8
  %20 = load i64*, i64** %12, align 8
  %21 = load i64*, i64** %13, align 8
  %22 = load i64, i64* %14, align 8
  %23 = load i64, i64* %15, align 8
  %24 = load i64, i64* %16, align 8
  call void @_ZN12_GLOBAL__N_121libjit_extract_tensorIiEEvPT_S2_PmS3_S3_mmm(i32* %17, i32* %18, i64* %19, i64* %20, i64* %21, i64 %22, i64 %23, i64 %24)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_121libjit_extract_tensorIiEEvPT_S2_PmS3_S3_mmm(i32*, i32*, i64*, i64*, i64*, i64, i64, i64) #0 {
  %9 = alloca i32*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca [5 x i64], align 16
  %18 = alloca [5 x i64], align 16
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  store i32* %0, i32** %9, align 8
  store i32* %1, i32** %10, align 8
  store i64* %2, i64** %11, align 8
  store i64* %3, i64** %12, align 8
  store i64* %4, i64** %13, align 8
  store i64 %5, i64* %14, align 8
  store i64 %6, i64* %15, align 8
  store i64 %7, i64* %16, align 8
  store i64 0, i64* %19, align 8
  br label %35

; <label>:35:                                     ; preds = %46, %8
  %36 = load i64, i64* %19, align 8
  %37 = load i64, i64* %15, align 8
  %38 = icmp ult i64 %36, %37
  br i1 %38, label %39, label %49

; <label>:39:                                     ; preds = %35
  %40 = load i64*, i64** %11, align 8
  %41 = load i64, i64* %19, align 8
  %42 = getelementptr inbounds i64, i64* %40, i64 %41
  %43 = load i64, i64* %42, align 8
  %44 = load i64, i64* %19, align 8
  %45 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 %44
  store i64 %43, i64* %45, align 8
  br label %46

; <label>:46:                                     ; preds = %39
  %47 = load i64, i64* %19, align 8
  %48 = add i64 %47, 1
  store i64 %48, i64* %19, align 8
  br label %35

; <label>:49:                                     ; preds = %35
  %50 = load i64, i64* %15, align 8
  %51 = icmp eq i64 %50, 5
  br i1 %51, label %52, label %157

; <label>:52:                                     ; preds = %49
  store i64 0, i64* %20, align 8
  br label %53

; <label>:53:                                     ; preds = %153, %52
  %54 = load i64, i64* %20, align 8
  %55 = load i64*, i64** %13, align 8
  %56 = getelementptr inbounds i64, i64* %55, i64 0
  %57 = load i64, i64* %56, align 8
  %58 = icmp ult i64 %54, %57
  br i1 %58, label %59, label %156

; <label>:59:                                     ; preds = %53
  store i64 0, i64* %21, align 8
  br label %60

; <label>:60:                                     ; preds = %149, %59
  %61 = load i64, i64* %21, align 8
  %62 = load i64*, i64** %13, align 8
  %63 = getelementptr inbounds i64, i64* %62, i64 1
  %64 = load i64, i64* %63, align 8
  %65 = icmp ult i64 %61, %64
  br i1 %65, label %66, label %152

; <label>:66:                                     ; preds = %60
  store i64 0, i64* %22, align 8
  br label %67

; <label>:67:                                     ; preds = %145, %66
  %68 = load i64, i64* %22, align 8
  %69 = load i64*, i64** %13, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 2
  %71 = load i64, i64* %70, align 8
  %72 = icmp ult i64 %68, %71
  br i1 %72, label %73, label %148

; <label>:73:                                     ; preds = %67
  store i64 0, i64* %23, align 8
  br label %74

; <label>:74:                                     ; preds = %141, %73
  %75 = load i64, i64* %23, align 8
  %76 = load i64*, i64** %13, align 8
  %77 = getelementptr inbounds i64, i64* %76, i64 3
  %78 = load i64, i64* %77, align 8
  %79 = icmp ult i64 %75, %78
  br i1 %79, label %80, label %144

; <label>:80:                                     ; preds = %74
  store i64 0, i64* %24, align 8
  br label %81

; <label>:81:                                     ; preds = %137, %80
  %82 = load i64, i64* %24, align 8
  %83 = load i64*, i64** %13, align 8
  %84 = getelementptr inbounds i64, i64* %83, i64 4
  %85 = load i64, i64* %84, align 8
  %86 = icmp ult i64 %82, %85
  br i1 %86, label %87, label %140

; <label>:87:                                     ; preds = %81
  %88 = load i64, i64* %20, align 8
  %89 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %90 = load i64, i64* %89, align 16
  %91 = add i64 %88, %90
  %92 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  store i64 %91, i64* %92, align 16
  %93 = load i64, i64* %21, align 8
  %94 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 1
  %95 = load i64, i64* %94, align 8
  %96 = add i64 %93, %95
  %97 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  store i64 %96, i64* %97, align 8
  %98 = load i64, i64* %22, align 8
  %99 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 2
  %100 = load i64, i64* %99, align 16
  %101 = add i64 %98, %100
  %102 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  store i64 %101, i64* %102, align 16
  %103 = load i64, i64* %23, align 8
  %104 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 3
  %105 = load i64, i64* %104, align 8
  %106 = add i64 %103, %105
  %107 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 3
  store i64 %106, i64* %107, align 8
  %108 = load i64, i64* %24, align 8
  %109 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 4
  %110 = load i64, i64* %109, align 16
  %111 = add i64 %108, %110
  %112 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 4
  store i64 %111, i64* %112, align 16
  %113 = load i32*, i32** %9, align 8
  %114 = load i64*, i64** %12, align 8
  %115 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  %116 = load i64, i64* %115, align 16
  %117 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  %120 = load i64, i64* %119, align 16
  %121 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 3
  %122 = load i64, i64* %121, align 8
  %123 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 4
  %124 = load i64, i64* %123, align 16
  %125 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %114, i64 %116, i64 %118, i64 %120, i64 %122, i64 %124)
  %126 = getelementptr inbounds i32, i32* %113, i64 %125
  %127 = load i32, i32* %126, align 4
  %128 = load i32*, i32** %10, align 8
  %129 = load i64*, i64** %13, align 8
  %130 = load i64, i64* %20, align 8
  %131 = load i64, i64* %21, align 8
  %132 = load i64, i64* %22, align 8
  %133 = load i64, i64* %23, align 8
  %134 = load i64, i64* %24, align 8
  %135 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %129, i64 %130, i64 %131, i64 %132, i64 %133, i64 %134)
  %136 = getelementptr inbounds i32, i32* %128, i64 %135
  store i32 %127, i32* %136, align 4
  br label %137

; <label>:137:                                    ; preds = %87
  %138 = load i64, i64* %24, align 8
  %139 = add i64 %138, 1
  store i64 %139, i64* %24, align 8
  br label %81

; <label>:140:                                    ; preds = %81
  br label %141

; <label>:141:                                    ; preds = %140
  %142 = load i64, i64* %23, align 8
  %143 = add i64 %142, 1
  store i64 %143, i64* %23, align 8
  br label %74

; <label>:144:                                    ; preds = %74
  br label %145

; <label>:145:                                    ; preds = %144
  %146 = load i64, i64* %22, align 8
  %147 = add i64 %146, 1
  store i64 %147, i64* %22, align 8
  br label %67

; <label>:148:                                    ; preds = %67
  br label %149

; <label>:149:                                    ; preds = %148
  %150 = load i64, i64* %21, align 8
  %151 = add i64 %150, 1
  store i64 %151, i64* %21, align 8
  br label %60

; <label>:152:                                    ; preds = %60
  br label %153

; <label>:153:                                    ; preds = %152
  %154 = load i64, i64* %20, align 8
  %155 = add i64 %154, 1
  store i64 %155, i64* %20, align 8
  br label %53

; <label>:156:                                    ; preds = %53
  br label %392

; <label>:157:                                    ; preds = %49
  %158 = load i64, i64* %15, align 8
  %159 = icmp eq i64 %158, 4
  br i1 %159, label %160, label %246

; <label>:160:                                    ; preds = %157
  store i64 0, i64* %25, align 8
  br label %161

; <label>:161:                                    ; preds = %242, %160
  %162 = load i64, i64* %25, align 8
  %163 = load i64*, i64** %13, align 8
  %164 = getelementptr inbounds i64, i64* %163, i64 0
  %165 = load i64, i64* %164, align 8
  %166 = icmp ult i64 %162, %165
  br i1 %166, label %167, label %245

; <label>:167:                                    ; preds = %161
  store i64 0, i64* %26, align 8
  br label %168

; <label>:168:                                    ; preds = %238, %167
  %169 = load i64, i64* %26, align 8
  %170 = load i64*, i64** %13, align 8
  %171 = getelementptr inbounds i64, i64* %170, i64 1
  %172 = load i64, i64* %171, align 8
  %173 = icmp ult i64 %169, %172
  br i1 %173, label %174, label %241

; <label>:174:                                    ; preds = %168
  store i64 0, i64* %27, align 8
  br label %175

; <label>:175:                                    ; preds = %234, %174
  %176 = load i64, i64* %27, align 8
  %177 = load i64*, i64** %13, align 8
  %178 = getelementptr inbounds i64, i64* %177, i64 2
  %179 = load i64, i64* %178, align 8
  %180 = icmp ult i64 %176, %179
  br i1 %180, label %181, label %237

; <label>:181:                                    ; preds = %175
  store i64 0, i64* %28, align 8
  br label %182

; <label>:182:                                    ; preds = %230, %181
  %183 = load i64, i64* %28, align 8
  %184 = load i64*, i64** %13, align 8
  %185 = getelementptr inbounds i64, i64* %184, i64 3
  %186 = load i64, i64* %185, align 8
  %187 = icmp ult i64 %183, %186
  br i1 %187, label %188, label %233

; <label>:188:                                    ; preds = %182
  %189 = load i64, i64* %25, align 8
  %190 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %191 = load i64, i64* %190, align 16
  %192 = add i64 %189, %191
  %193 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  store i64 %192, i64* %193, align 16
  %194 = load i64, i64* %26, align 8
  %195 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 1
  %196 = load i64, i64* %195, align 8
  %197 = add i64 %194, %196
  %198 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  store i64 %197, i64* %198, align 8
  %199 = load i64, i64* %27, align 8
  %200 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 2
  %201 = load i64, i64* %200, align 16
  %202 = add i64 %199, %201
  %203 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  store i64 %202, i64* %203, align 16
  %204 = load i64, i64* %28, align 8
  %205 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 3
  %206 = load i64, i64* %205, align 8
  %207 = add i64 %204, %206
  %208 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 3
  store i64 %207, i64* %208, align 8
  %209 = load i32*, i32** %9, align 8
  %210 = load i64*, i64** %12, align 8
  %211 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  %212 = load i64, i64* %211, align 16
  %213 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  %214 = load i64, i64* %213, align 8
  %215 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  %216 = load i64, i64* %215, align 16
  %217 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 3
  %218 = load i64, i64* %217, align 8
  %219 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %210, i64 %212, i64 %214, i64 %216, i64 %218)
  %220 = getelementptr inbounds i32, i32* %209, i64 %219
  %221 = load i32, i32* %220, align 4
  %222 = load i32*, i32** %10, align 8
  %223 = load i64*, i64** %13, align 8
  %224 = load i64, i64* %25, align 8
  %225 = load i64, i64* %26, align 8
  %226 = load i64, i64* %27, align 8
  %227 = load i64, i64* %28, align 8
  %228 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %223, i64 %224, i64 %225, i64 %226, i64 %227)
  %229 = getelementptr inbounds i32, i32* %222, i64 %228
  store i32 %221, i32* %229, align 4
  br label %230

; <label>:230:                                    ; preds = %188
  %231 = load i64, i64* %28, align 8
  %232 = add i64 %231, 1
  store i64 %232, i64* %28, align 8
  br label %182

; <label>:233:                                    ; preds = %182
  br label %234

; <label>:234:                                    ; preds = %233
  %235 = load i64, i64* %27, align 8
  %236 = add i64 %235, 1
  store i64 %236, i64* %27, align 8
  br label %175

; <label>:237:                                    ; preds = %175
  br label %238

; <label>:238:                                    ; preds = %237
  %239 = load i64, i64* %26, align 8
  %240 = add i64 %239, 1
  store i64 %240, i64* %26, align 8
  br label %168

; <label>:241:                                    ; preds = %168
  br label %242

; <label>:242:                                    ; preds = %241
  %243 = load i64, i64* %25, align 8
  %244 = add i64 %243, 1
  store i64 %244, i64* %25, align 8
  br label %161

; <label>:245:                                    ; preds = %161
  br label %392

; <label>:246:                                    ; preds = %157
  %247 = load i64, i64* %15, align 8
  %248 = icmp eq i64 %247, 3
  br i1 %248, label %249, label %316

; <label>:249:                                    ; preds = %246
  store i64 0, i64* %29, align 8
  br label %250

; <label>:250:                                    ; preds = %312, %249
  %251 = load i64, i64* %29, align 8
  %252 = load i64*, i64** %13, align 8
  %253 = getelementptr inbounds i64, i64* %252, i64 0
  %254 = load i64, i64* %253, align 8
  %255 = icmp ult i64 %251, %254
  br i1 %255, label %256, label %315

; <label>:256:                                    ; preds = %250
  store i64 0, i64* %30, align 8
  br label %257

; <label>:257:                                    ; preds = %308, %256
  %258 = load i64, i64* %30, align 8
  %259 = load i64*, i64** %13, align 8
  %260 = getelementptr inbounds i64, i64* %259, i64 1
  %261 = load i64, i64* %260, align 8
  %262 = icmp ult i64 %258, %261
  br i1 %262, label %263, label %311

; <label>:263:                                    ; preds = %257
  store i64 0, i64* %31, align 8
  br label %264

; <label>:264:                                    ; preds = %304, %263
  %265 = load i64, i64* %31, align 8
  %266 = load i64*, i64** %13, align 8
  %267 = getelementptr inbounds i64, i64* %266, i64 2
  %268 = load i64, i64* %267, align 8
  %269 = icmp ult i64 %265, %268
  br i1 %269, label %270, label %307

; <label>:270:                                    ; preds = %264
  %271 = load i64, i64* %29, align 8
  %272 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %273 = load i64, i64* %272, align 16
  %274 = add i64 %271, %273
  %275 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  store i64 %274, i64* %275, align 16
  %276 = load i64, i64* %30, align 8
  %277 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 1
  %278 = load i64, i64* %277, align 8
  %279 = add i64 %276, %278
  %280 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  store i64 %279, i64* %280, align 8
  %281 = load i64, i64* %31, align 8
  %282 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 2
  %283 = load i64, i64* %282, align 16
  %284 = add i64 %281, %283
  %285 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  store i64 %284, i64* %285, align 16
  %286 = load i32*, i32** %9, align 8
  %287 = load i64*, i64** %12, align 8
  %288 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  %289 = load i64, i64* %288, align 16
  %290 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  %291 = load i64, i64* %290, align 8
  %292 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  %293 = load i64, i64* %292, align 16
  %294 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %287, i64 %289, i64 %291, i64 %293)
  %295 = getelementptr inbounds i32, i32* %286, i64 %294
  %296 = load i32, i32* %295, align 4
  %297 = load i32*, i32** %10, align 8
  %298 = load i64*, i64** %13, align 8
  %299 = load i64, i64* %29, align 8
  %300 = load i64, i64* %30, align 8
  %301 = load i64, i64* %31, align 8
  %302 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %298, i64 %299, i64 %300, i64 %301)
  %303 = getelementptr inbounds i32, i32* %297, i64 %302
  store i32 %296, i32* %303, align 4
  br label %304

; <label>:304:                                    ; preds = %270
  %305 = load i64, i64* %31, align 8
  %306 = add i64 %305, 1
  store i64 %306, i64* %31, align 8
  br label %264

; <label>:307:                                    ; preds = %264
  br label %308

; <label>:308:                                    ; preds = %307
  %309 = load i64, i64* %30, align 8
  %310 = add i64 %309, 1
  store i64 %310, i64* %30, align 8
  br label %257

; <label>:311:                                    ; preds = %257
  br label %312

; <label>:312:                                    ; preds = %311
  %313 = load i64, i64* %29, align 8
  %314 = add i64 %313, 1
  store i64 %314, i64* %29, align 8
  br label %250

; <label>:315:                                    ; preds = %250
  br label %392

; <label>:316:                                    ; preds = %246
  %317 = load i64, i64* %15, align 8
  %318 = icmp eq i64 %317, 2
  br i1 %318, label %319, label %367

; <label>:319:                                    ; preds = %316
  store i64 0, i64* %32, align 8
  br label %320

; <label>:320:                                    ; preds = %363, %319
  %321 = load i64, i64* %32, align 8
  %322 = load i64*, i64** %13, align 8
  %323 = getelementptr inbounds i64, i64* %322, i64 0
  %324 = load i64, i64* %323, align 8
  %325 = icmp ult i64 %321, %324
  br i1 %325, label %326, label %366

; <label>:326:                                    ; preds = %320
  store i64 0, i64* %33, align 8
  br label %327

; <label>:327:                                    ; preds = %359, %326
  %328 = load i64, i64* %33, align 8
  %329 = load i64*, i64** %13, align 8
  %330 = getelementptr inbounds i64, i64* %329, i64 1
  %331 = load i64, i64* %330, align 8
  %332 = icmp ult i64 %328, %331
  br i1 %332, label %333, label %362

; <label>:333:                                    ; preds = %327
  %334 = load i64, i64* %32, align 8
  %335 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %336 = load i64, i64* %335, align 16
  %337 = add i64 %334, %336
  %338 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  store i64 %337, i64* %338, align 16
  %339 = load i64, i64* %33, align 8
  %340 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 1
  %341 = load i64, i64* %340, align 8
  %342 = add i64 %339, %341
  %343 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  store i64 %342, i64* %343, align 8
  %344 = load i32*, i32** %9, align 8
  %345 = load i64*, i64** %12, align 8
  %346 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  %347 = load i64, i64* %346, align 16
  %348 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  %349 = load i64, i64* %348, align 8
  %350 = call i64 @_Z12libjit_getXYPKmmm(i64* %345, i64 %347, i64 %349)
  %351 = getelementptr inbounds i32, i32* %344, i64 %350
  %352 = load i32, i32* %351, align 4
  %353 = load i32*, i32** %10, align 8
  %354 = load i64*, i64** %13, align 8
  %355 = load i64, i64* %32, align 8
  %356 = load i64, i64* %33, align 8
  %357 = call i64 @_Z12libjit_getXYPKmmm(i64* %354, i64 %355, i64 %356)
  %358 = getelementptr inbounds i32, i32* %353, i64 %357
  store i32 %352, i32* %358, align 4
  br label %359

; <label>:359:                                    ; preds = %333
  %360 = load i64, i64* %33, align 8
  %361 = add i64 %360, 1
  store i64 %361, i64* %33, align 8
  br label %327

; <label>:362:                                    ; preds = %327
  br label %363

; <label>:363:                                    ; preds = %362
  %364 = load i64, i64* %32, align 8
  %365 = add i64 %364, 1
  store i64 %365, i64* %32, align 8
  br label %320

; <label>:366:                                    ; preds = %320
  br label %392

; <label>:367:                                    ; preds = %316
  %368 = load i64, i64* %15, align 8
  %369 = icmp eq i64 %368, 1
  br i1 %369, label %370, label %392

; <label>:370:                                    ; preds = %367
  store i64 0, i64* %34, align 8
  br label %371

; <label>:371:                                    ; preds = %388, %370
  %372 = load i64, i64* %34, align 8
  %373 = load i64*, i64** %13, align 8
  %374 = getelementptr inbounds i64, i64* %373, i64 0
  %375 = load i64, i64* %374, align 8
  %376 = icmp ult i64 %372, %375
  br i1 %376, label %377, label %391

; <label>:377:                                    ; preds = %371
  %378 = load i32*, i32** %9, align 8
  %379 = load i64, i64* %34, align 8
  %380 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %381 = load i64, i64* %380, align 16
  %382 = add i64 %379, %381
  %383 = getelementptr inbounds i32, i32* %378, i64 %382
  %384 = load i32, i32* %383, align 4
  %385 = load i32*, i32** %10, align 8
  %386 = load i64, i64* %34, align 8
  %387 = getelementptr inbounds i32, i32* %385, i64 %386
  store i32 %384, i32* %387, align 4
  br label %388

; <label>:388:                                    ; preds = %377
  %389 = load i64, i64* %34, align 8
  %390 = add i64 %389, 1
  store i64 %390, i64* %34, align 8
  br label %371

; <label>:391:                                    ; preds = %371
  br label %392

; <label>:392:                                    ; preds = %156, %245, %315, %366, %391, %367
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_insert_tensor_u(i64*, i64*, i64*, i64*, i64*, i64, i64, i64, i64, i64) #2 {
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  store i64* %0, i64** %11, align 8
  store i64* %1, i64** %12, align 8
  store i64* %2, i64** %13, align 8
  store i64* %3, i64** %14, align 8
  store i64* %4, i64** %15, align 8
  store i64 %5, i64* %16, align 8
  store i64 %6, i64* %17, align 8
  store i64 %7, i64* %18, align 8
  store i64 %8, i64* %19, align 8
  store i64 %9, i64* %20, align 8
  %21 = load i64*, i64** %11, align 8
  %22 = load i64*, i64** %12, align 8
  %23 = load i64*, i64** %13, align 8
  %24 = load i64*, i64** %14, align 8
  %25 = load i64*, i64** %15, align 8
  %26 = load i64, i64* %16, align 8
  %27 = load i64, i64* %17, align 8
  %28 = load i64, i64* %18, align 8
  %29 = load i64, i64* %19, align 8
  %30 = load i64, i64* %20, align 8
  call void @_ZN12_GLOBAL__N_120libjit_insert_tensorIlEEvPT_S2_PmS3_S3_mmmmm(i64* %21, i64* %22, i64* %23, i64* %24, i64* %25, i64 %26, i64 %27, i64 %28, i64 %29, i64 %30)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_120libjit_insert_tensorIlEEvPT_S2_PmS3_S3_mmmmm(i64*, i64*, i64*, i64*, i64*, i64, i64, i64, i64, i64) #0 {
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca [5 x i64], align 16
  %22 = alloca [5 x i64], align 16
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca i64, align 8
  %38 = alloca i64, align 8
  %39 = alloca i64, align 8
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  %43 = alloca i64, align 8
  %44 = alloca i64, align 8
  %45 = alloca i64, align 8
  %46 = alloca i64, align 8
  %47 = alloca i64, align 8
  %48 = alloca i64, align 8
  store i64* %0, i64** %11, align 8
  store i64* %1, i64** %12, align 8
  store i64* %2, i64** %13, align 8
  store i64* %3, i64** %14, align 8
  store i64* %4, i64** %15, align 8
  store i64 %5, i64* %16, align 8
  store i64 %6, i64* %17, align 8
  store i64 %7, i64* %18, align 8
  store i64 %8, i64* %19, align 8
  store i64 %9, i64* %20, align 8
  store i64 0, i64* %23, align 8
  br label %49

; <label>:49:                                     ; preds = %60, %10
  %50 = load i64, i64* %23, align 8
  %51 = load i64, i64* %17, align 8
  %52 = icmp ult i64 %50, %51
  br i1 %52, label %53, label %63

; <label>:53:                                     ; preds = %49
  %54 = load i64*, i64** %13, align 8
  %55 = load i64, i64* %23, align 8
  %56 = getelementptr inbounds i64, i64* %54, i64 %55
  %57 = load i64, i64* %56, align 8
  %58 = load i64, i64* %23, align 8
  %59 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 %58
  store i64 %57, i64* %59, align 8
  br label %60

; <label>:60:                                     ; preds = %53
  %61 = load i64, i64* %23, align 8
  %62 = add i64 %61, 1
  store i64 %62, i64* %23, align 8
  br label %49

; <label>:63:                                     ; preds = %49
  %64 = load i64, i64* %17, align 8
  %65 = icmp eq i64 %64, 5
  br i1 %65, label %66, label %226

; <label>:66:                                     ; preds = %63
  store i64 0, i64* %24, align 8
  br label %67

; <label>:67:                                     ; preds = %222, %66
  %68 = load i64, i64* %24, align 8
  %69 = load i64, i64* %19, align 8
  %70 = icmp ult i64 %68, %69
  br i1 %70, label %71, label %225

; <label>:71:                                     ; preds = %67
  store i64 0, i64* %25, align 8
  br label %72

; <label>:72:                                     ; preds = %218, %71
  %73 = load i64, i64* %25, align 8
  %74 = load i64*, i64** %15, align 8
  %75 = getelementptr inbounds i64, i64* %74, i64 0
  %76 = load i64, i64* %75, align 8
  %77 = icmp ult i64 %73, %76
  br i1 %77, label %78, label %221

; <label>:78:                                     ; preds = %72
  store i64 0, i64* %26, align 8
  br label %79

; <label>:79:                                     ; preds = %214, %78
  %80 = load i64, i64* %26, align 8
  %81 = load i64*, i64** %15, align 8
  %82 = getelementptr inbounds i64, i64* %81, i64 1
  %83 = load i64, i64* %82, align 8
  %84 = icmp ult i64 %80, %83
  br i1 %84, label %85, label %217

; <label>:85:                                     ; preds = %79
  store i64 0, i64* %27, align 8
  br label %86

; <label>:86:                                     ; preds = %210, %85
  %87 = load i64, i64* %27, align 8
  %88 = load i64*, i64** %15, align 8
  %89 = getelementptr inbounds i64, i64* %88, i64 2
  %90 = load i64, i64* %89, align 8
  %91 = icmp ult i64 %87, %90
  br i1 %91, label %92, label %213

; <label>:92:                                     ; preds = %86
  store i64 0, i64* %28, align 8
  br label %93

; <label>:93:                                     ; preds = %206, %92
  %94 = load i64, i64* %28, align 8
  %95 = load i64*, i64** %15, align 8
  %96 = getelementptr inbounds i64, i64* %95, i64 3
  %97 = load i64, i64* %96, align 8
  %98 = icmp ult i64 %94, %97
  br i1 %98, label %99, label %209

; <label>:99:                                     ; preds = %93
  store i64 0, i64* %29, align 8
  br label %100

; <label>:100:                                    ; preds = %202, %99
  %101 = load i64, i64* %29, align 8
  %102 = load i64*, i64** %15, align 8
  %103 = getelementptr inbounds i64, i64* %102, i64 4
  %104 = load i64, i64* %103, align 8
  %105 = icmp ult i64 %101, %104
  br i1 %105, label %106, label %205

; <label>:106:                                    ; preds = %100
  %107 = load i64, i64* %24, align 8
  %108 = load i64*, i64** %15, align 8
  %109 = load i64, i64* %20, align 8
  %110 = getelementptr inbounds i64, i64* %108, i64 %109
  %111 = load i64, i64* %110, align 8
  %112 = mul i64 %107, %111
  store i64 %112, i64* %30, align 8
  %113 = load i64, i64* %25, align 8
  %114 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 0
  %115 = load i64, i64* %114, align 16
  %116 = add i64 %113, %115
  %117 = load i64, i64* %20, align 8
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %121

; <label>:119:                                    ; preds = %106
  %120 = load i64, i64* %30, align 8
  br label %122

; <label>:121:                                    ; preds = %106
  br label %122

; <label>:122:                                    ; preds = %121, %119
  %123 = phi i64 [ %120, %119 ], [ 0, %121 ]
  %124 = add i64 %116, %123
  %125 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  store i64 %124, i64* %125, align 16
  %126 = load i64, i64* %26, align 8
  %127 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 1
  %128 = load i64, i64* %127, align 8
  %129 = add i64 %126, %128
  %130 = load i64, i64* %20, align 8
  %131 = icmp eq i64 %130, 1
  br i1 %131, label %132, label %134

; <label>:132:                                    ; preds = %122
  %133 = load i64, i64* %30, align 8
  br label %135

; <label>:134:                                    ; preds = %122
  br label %135

; <label>:135:                                    ; preds = %134, %132
  %136 = phi i64 [ %133, %132 ], [ 0, %134 ]
  %137 = add i64 %129, %136
  %138 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  store i64 %137, i64* %138, align 8
  %139 = load i64, i64* %27, align 8
  %140 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 2
  %141 = load i64, i64* %140, align 16
  %142 = add i64 %139, %141
  %143 = load i64, i64* %20, align 8
  %144 = icmp eq i64 %143, 2
  br i1 %144, label %145, label %147

; <label>:145:                                    ; preds = %135
  %146 = load i64, i64* %30, align 8
  br label %148

; <label>:147:                                    ; preds = %135
  br label %148

; <label>:148:                                    ; preds = %147, %145
  %149 = phi i64 [ %146, %145 ], [ 0, %147 ]
  %150 = add i64 %142, %149
  %151 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 2
  store i64 %150, i64* %151, align 16
  %152 = load i64, i64* %28, align 8
  %153 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 3
  %154 = load i64, i64* %153, align 8
  %155 = add i64 %152, %154
  %156 = load i64, i64* %20, align 8
  %157 = icmp eq i64 %156, 3
  br i1 %157, label %158, label %160

; <label>:158:                                    ; preds = %148
  %159 = load i64, i64* %30, align 8
  br label %161

; <label>:160:                                    ; preds = %148
  br label %161

; <label>:161:                                    ; preds = %160, %158
  %162 = phi i64 [ %159, %158 ], [ 0, %160 ]
  %163 = add i64 %155, %162
  %164 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 3
  store i64 %163, i64* %164, align 8
  %165 = load i64, i64* %29, align 8
  %166 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 4
  %167 = load i64, i64* %166, align 16
  %168 = add i64 %165, %167
  %169 = load i64, i64* %20, align 8
  %170 = icmp eq i64 %169, 4
  br i1 %170, label %171, label %173

; <label>:171:                                    ; preds = %161
  %172 = load i64, i64* %30, align 8
  br label %174

; <label>:173:                                    ; preds = %161
  br label %174

; <label>:174:                                    ; preds = %173, %171
  %175 = phi i64 [ %172, %171 ], [ 0, %173 ]
  %176 = add i64 %168, %175
  %177 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 4
  store i64 %176, i64* %177, align 16
  %178 = load i64*, i64** %12, align 8
  %179 = load i64*, i64** %15, align 8
  %180 = load i64, i64* %25, align 8
  %181 = load i64, i64* %26, align 8
  %182 = load i64, i64* %27, align 8
  %183 = load i64, i64* %28, align 8
  %184 = load i64, i64* %29, align 8
  %185 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %179, i64 %180, i64 %181, i64 %182, i64 %183, i64 %184)
  %186 = getelementptr inbounds i64, i64* %178, i64 %185
  %187 = load i64, i64* %186, align 8
  %188 = load i64*, i64** %11, align 8
  %189 = load i64*, i64** %14, align 8
  %190 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  %191 = load i64, i64* %190, align 16
  %192 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  %193 = load i64, i64* %192, align 8
  %194 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 2
  %195 = load i64, i64* %194, align 16
  %196 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 3
  %197 = load i64, i64* %196, align 8
  %198 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 4
  %199 = load i64, i64* %198, align 16
  %200 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %189, i64 %191, i64 %193, i64 %195, i64 %197, i64 %199)
  %201 = getelementptr inbounds i64, i64* %188, i64 %200
  store i64 %187, i64* %201, align 8
  br label %202

; <label>:202:                                    ; preds = %174
  %203 = load i64, i64* %29, align 8
  %204 = add i64 %203, 1
  store i64 %204, i64* %29, align 8
  br label %100

; <label>:205:                                    ; preds = %100
  br label %206

; <label>:206:                                    ; preds = %205
  %207 = load i64, i64* %28, align 8
  %208 = add i64 %207, 1
  store i64 %208, i64* %28, align 8
  br label %93

; <label>:209:                                    ; preds = %93
  br label %210

; <label>:210:                                    ; preds = %209
  %211 = load i64, i64* %27, align 8
  %212 = add i64 %211, 1
  store i64 %212, i64* %27, align 8
  br label %86

; <label>:213:                                    ; preds = %86
  br label %214

; <label>:214:                                    ; preds = %213
  %215 = load i64, i64* %26, align 8
  %216 = add i64 %215, 1
  store i64 %216, i64* %26, align 8
  br label %79

; <label>:217:                                    ; preds = %79
  br label %218

; <label>:218:                                    ; preds = %217
  %219 = load i64, i64* %25, align 8
  %220 = add i64 %219, 1
  store i64 %220, i64* %25, align 8
  br label %72

; <label>:221:                                    ; preds = %72
  br label %222

; <label>:222:                                    ; preds = %221
  %223 = load i64, i64* %24, align 8
  %224 = add i64 %223, 1
  store i64 %224, i64* %24, align 8
  br label %67

; <label>:225:                                    ; preds = %67
  br label %601

; <label>:226:                                    ; preds = %63
  %227 = load i64, i64* %17, align 8
  %228 = icmp eq i64 %227, 4
  br i1 %228, label %229, label %362

; <label>:229:                                    ; preds = %226
  store i64 0, i64* %31, align 8
  br label %230

; <label>:230:                                    ; preds = %358, %229
  %231 = load i64, i64* %31, align 8
  %232 = load i64, i64* %19, align 8
  %233 = icmp ult i64 %231, %232
  br i1 %233, label %234, label %361

; <label>:234:                                    ; preds = %230
  store i64 0, i64* %32, align 8
  br label %235

; <label>:235:                                    ; preds = %354, %234
  %236 = load i64, i64* %32, align 8
  %237 = load i64*, i64** %15, align 8
  %238 = getelementptr inbounds i64, i64* %237, i64 0
  %239 = load i64, i64* %238, align 8
  %240 = icmp ult i64 %236, %239
  br i1 %240, label %241, label %357

; <label>:241:                                    ; preds = %235
  store i64 0, i64* %33, align 8
  br label %242

; <label>:242:                                    ; preds = %350, %241
  %243 = load i64, i64* %33, align 8
  %244 = load i64*, i64** %15, align 8
  %245 = getelementptr inbounds i64, i64* %244, i64 1
  %246 = load i64, i64* %245, align 8
  %247 = icmp ult i64 %243, %246
  br i1 %247, label %248, label %353

; <label>:248:                                    ; preds = %242
  store i64 0, i64* %34, align 8
  br label %249

; <label>:249:                                    ; preds = %346, %248
  %250 = load i64, i64* %34, align 8
  %251 = load i64*, i64** %15, align 8
  %252 = getelementptr inbounds i64, i64* %251, i64 2
  %253 = load i64, i64* %252, align 8
  %254 = icmp ult i64 %250, %253
  br i1 %254, label %255, label %349

; <label>:255:                                    ; preds = %249
  store i64 0, i64* %35, align 8
  br label %256

; <label>:256:                                    ; preds = %342, %255
  %257 = load i64, i64* %35, align 8
  %258 = load i64*, i64** %15, align 8
  %259 = getelementptr inbounds i64, i64* %258, i64 3
  %260 = load i64, i64* %259, align 8
  %261 = icmp ult i64 %257, %260
  br i1 %261, label %262, label %345

; <label>:262:                                    ; preds = %256
  %263 = load i64, i64* %31, align 8
  %264 = load i64*, i64** %15, align 8
  %265 = load i64, i64* %20, align 8
  %266 = getelementptr inbounds i64, i64* %264, i64 %265
  %267 = load i64, i64* %266, align 8
  %268 = mul i64 %263, %267
  store i64 %268, i64* %36, align 8
  %269 = load i64, i64* %32, align 8
  %270 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 0
  %271 = load i64, i64* %270, align 16
  %272 = add i64 %269, %271
  %273 = load i64, i64* %20, align 8
  %274 = icmp eq i64 %273, 0
  br i1 %274, label %275, label %277

; <label>:275:                                    ; preds = %262
  %276 = load i64, i64* %36, align 8
  br label %278

; <label>:277:                                    ; preds = %262
  br label %278

; <label>:278:                                    ; preds = %277, %275
  %279 = phi i64 [ %276, %275 ], [ 0, %277 ]
  %280 = add i64 %272, %279
  %281 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  store i64 %280, i64* %281, align 16
  %282 = load i64, i64* %33, align 8
  %283 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 1
  %284 = load i64, i64* %283, align 8
  %285 = add i64 %282, %284
  %286 = load i64, i64* %20, align 8
  %287 = icmp eq i64 %286, 1
  br i1 %287, label %288, label %290

; <label>:288:                                    ; preds = %278
  %289 = load i64, i64* %36, align 8
  br label %291

; <label>:290:                                    ; preds = %278
  br label %291

; <label>:291:                                    ; preds = %290, %288
  %292 = phi i64 [ %289, %288 ], [ 0, %290 ]
  %293 = add i64 %285, %292
  %294 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  store i64 %293, i64* %294, align 8
  %295 = load i64, i64* %34, align 8
  %296 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 2
  %297 = load i64, i64* %296, align 16
  %298 = add i64 %295, %297
  %299 = load i64, i64* %20, align 8
  %300 = icmp eq i64 %299, 2
  br i1 %300, label %301, label %303

; <label>:301:                                    ; preds = %291
  %302 = load i64, i64* %36, align 8
  br label %304

; <label>:303:                                    ; preds = %291
  br label %304

; <label>:304:                                    ; preds = %303, %301
  %305 = phi i64 [ %302, %301 ], [ 0, %303 ]
  %306 = add i64 %298, %305
  %307 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 2
  store i64 %306, i64* %307, align 16
  %308 = load i64, i64* %35, align 8
  %309 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 3
  %310 = load i64, i64* %309, align 8
  %311 = add i64 %308, %310
  %312 = load i64, i64* %20, align 8
  %313 = icmp eq i64 %312, 3
  br i1 %313, label %314, label %316

; <label>:314:                                    ; preds = %304
  %315 = load i64, i64* %36, align 8
  br label %317

; <label>:316:                                    ; preds = %304
  br label %317

; <label>:317:                                    ; preds = %316, %314
  %318 = phi i64 [ %315, %314 ], [ 0, %316 ]
  %319 = add i64 %311, %318
  %320 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 3
  store i64 %319, i64* %320, align 8
  %321 = load i64*, i64** %12, align 8
  %322 = load i64*, i64** %15, align 8
  %323 = load i64, i64* %32, align 8
  %324 = load i64, i64* %33, align 8
  %325 = load i64, i64* %34, align 8
  %326 = load i64, i64* %35, align 8
  %327 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %322, i64 %323, i64 %324, i64 %325, i64 %326)
  %328 = getelementptr inbounds i64, i64* %321, i64 %327
  %329 = load i64, i64* %328, align 8
  %330 = load i64*, i64** %11, align 8
  %331 = load i64*, i64** %14, align 8
  %332 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  %333 = load i64, i64* %332, align 16
  %334 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  %335 = load i64, i64* %334, align 8
  %336 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 2
  %337 = load i64, i64* %336, align 16
  %338 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 3
  %339 = load i64, i64* %338, align 8
  %340 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %331, i64 %333, i64 %335, i64 %337, i64 %339)
  %341 = getelementptr inbounds i64, i64* %330, i64 %340
  store i64 %329, i64* %341, align 8
  br label %342

; <label>:342:                                    ; preds = %317
  %343 = load i64, i64* %35, align 8
  %344 = add i64 %343, 1
  store i64 %344, i64* %35, align 8
  br label %256

; <label>:345:                                    ; preds = %256
  br label %346

; <label>:346:                                    ; preds = %345
  %347 = load i64, i64* %34, align 8
  %348 = add i64 %347, 1
  store i64 %348, i64* %34, align 8
  br label %249

; <label>:349:                                    ; preds = %249
  br label %350

; <label>:350:                                    ; preds = %349
  %351 = load i64, i64* %33, align 8
  %352 = add i64 %351, 1
  store i64 %352, i64* %33, align 8
  br label %242

; <label>:353:                                    ; preds = %242
  br label %354

; <label>:354:                                    ; preds = %353
  %355 = load i64, i64* %32, align 8
  %356 = add i64 %355, 1
  store i64 %356, i64* %32, align 8
  br label %235

; <label>:357:                                    ; preds = %235
  br label %358

; <label>:358:                                    ; preds = %357
  %359 = load i64, i64* %31, align 8
  %360 = add i64 %359, 1
  store i64 %360, i64* %31, align 8
  br label %230

; <label>:361:                                    ; preds = %230
  br label %601

; <label>:362:                                    ; preds = %226
  %363 = load i64, i64* %17, align 8
  %364 = icmp eq i64 %363, 3
  br i1 %364, label %365, label %471

; <label>:365:                                    ; preds = %362
  store i64 0, i64* %37, align 8
  br label %366

; <label>:366:                                    ; preds = %467, %365
  %367 = load i64, i64* %37, align 8
  %368 = load i64, i64* %19, align 8
  %369 = icmp ult i64 %367, %368
  br i1 %369, label %370, label %470

; <label>:370:                                    ; preds = %366
  store i64 0, i64* %38, align 8
  br label %371

; <label>:371:                                    ; preds = %463, %370
  %372 = load i64, i64* %38, align 8
  %373 = load i64*, i64** %15, align 8
  %374 = getelementptr inbounds i64, i64* %373, i64 0
  %375 = load i64, i64* %374, align 8
  %376 = icmp ult i64 %372, %375
  br i1 %376, label %377, label %466

; <label>:377:                                    ; preds = %371
  store i64 0, i64* %39, align 8
  br label %378

; <label>:378:                                    ; preds = %459, %377
  %379 = load i64, i64* %39, align 8
  %380 = load i64*, i64** %15, align 8
  %381 = getelementptr inbounds i64, i64* %380, i64 1
  %382 = load i64, i64* %381, align 8
  %383 = icmp ult i64 %379, %382
  br i1 %383, label %384, label %462

; <label>:384:                                    ; preds = %378
  store i64 0, i64* %40, align 8
  br label %385

; <label>:385:                                    ; preds = %455, %384
  %386 = load i64, i64* %40, align 8
  %387 = load i64*, i64** %15, align 8
  %388 = getelementptr inbounds i64, i64* %387, i64 2
  %389 = load i64, i64* %388, align 8
  %390 = icmp ult i64 %386, %389
  br i1 %390, label %391, label %458

; <label>:391:                                    ; preds = %385
  %392 = load i64, i64* %37, align 8
  %393 = load i64*, i64** %15, align 8
  %394 = load i64, i64* %20, align 8
  %395 = getelementptr inbounds i64, i64* %393, i64 %394
  %396 = load i64, i64* %395, align 8
  %397 = mul i64 %392, %396
  store i64 %397, i64* %41, align 8
  %398 = load i64, i64* %38, align 8
  %399 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 0
  %400 = load i64, i64* %399, align 16
  %401 = add i64 %398, %400
  %402 = load i64, i64* %20, align 8
  %403 = icmp eq i64 %402, 0
  br i1 %403, label %404, label %406

; <label>:404:                                    ; preds = %391
  %405 = load i64, i64* %41, align 8
  br label %407

; <label>:406:                                    ; preds = %391
  br label %407

; <label>:407:                                    ; preds = %406, %404
  %408 = phi i64 [ %405, %404 ], [ 0, %406 ]
  %409 = add i64 %401, %408
  %410 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  store i64 %409, i64* %410, align 16
  %411 = load i64, i64* %39, align 8
  %412 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 1
  %413 = load i64, i64* %412, align 8
  %414 = add i64 %411, %413
  %415 = load i64, i64* %20, align 8
  %416 = icmp eq i64 %415, 1
  br i1 %416, label %417, label %419

; <label>:417:                                    ; preds = %407
  %418 = load i64, i64* %41, align 8
  br label %420

; <label>:419:                                    ; preds = %407
  br label %420

; <label>:420:                                    ; preds = %419, %417
  %421 = phi i64 [ %418, %417 ], [ 0, %419 ]
  %422 = add i64 %414, %421
  %423 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  store i64 %422, i64* %423, align 8
  %424 = load i64, i64* %40, align 8
  %425 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 2
  %426 = load i64, i64* %425, align 16
  %427 = add i64 %424, %426
  %428 = load i64, i64* %20, align 8
  %429 = icmp eq i64 %428, 2
  br i1 %429, label %430, label %432

; <label>:430:                                    ; preds = %420
  %431 = load i64, i64* %41, align 8
  br label %433

; <label>:432:                                    ; preds = %420
  br label %433

; <label>:433:                                    ; preds = %432, %430
  %434 = phi i64 [ %431, %430 ], [ 0, %432 ]
  %435 = add i64 %427, %434
  %436 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 2
  store i64 %435, i64* %436, align 16
  %437 = load i64*, i64** %12, align 8
  %438 = load i64*, i64** %15, align 8
  %439 = load i64, i64* %38, align 8
  %440 = load i64, i64* %39, align 8
  %441 = load i64, i64* %40, align 8
  %442 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %438, i64 %439, i64 %440, i64 %441)
  %443 = getelementptr inbounds i64, i64* %437, i64 %442
  %444 = load i64, i64* %443, align 8
  %445 = load i64*, i64** %11, align 8
  %446 = load i64*, i64** %14, align 8
  %447 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  %448 = load i64, i64* %447, align 16
  %449 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  %450 = load i64, i64* %449, align 8
  %451 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 2
  %452 = load i64, i64* %451, align 16
  %453 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %446, i64 %448, i64 %450, i64 %452)
  %454 = getelementptr inbounds i64, i64* %445, i64 %453
  store i64 %444, i64* %454, align 8
  br label %455

; <label>:455:                                    ; preds = %433
  %456 = load i64, i64* %40, align 8
  %457 = add i64 %456, 1
  store i64 %457, i64* %40, align 8
  br label %385

; <label>:458:                                    ; preds = %385
  br label %459

; <label>:459:                                    ; preds = %458
  %460 = load i64, i64* %39, align 8
  %461 = add i64 %460, 1
  store i64 %461, i64* %39, align 8
  br label %378

; <label>:462:                                    ; preds = %378
  br label %463

; <label>:463:                                    ; preds = %462
  %464 = load i64, i64* %38, align 8
  %465 = add i64 %464, 1
  store i64 %465, i64* %38, align 8
  br label %371

; <label>:466:                                    ; preds = %371
  br label %467

; <label>:467:                                    ; preds = %466
  %468 = load i64, i64* %37, align 8
  %469 = add i64 %468, 1
  store i64 %469, i64* %37, align 8
  br label %366

; <label>:470:                                    ; preds = %366
  br label %601

; <label>:471:                                    ; preds = %362
  %472 = load i64, i64* %17, align 8
  %473 = icmp eq i64 %472, 2
  br i1 %473, label %474, label %553

; <label>:474:                                    ; preds = %471
  store i64 0, i64* %42, align 8
  br label %475

; <label>:475:                                    ; preds = %549, %474
  %476 = load i64, i64* %42, align 8
  %477 = load i64, i64* %19, align 8
  %478 = icmp ult i64 %476, %477
  br i1 %478, label %479, label %552

; <label>:479:                                    ; preds = %475
  store i64 0, i64* %43, align 8
  br label %480

; <label>:480:                                    ; preds = %545, %479
  %481 = load i64, i64* %43, align 8
  %482 = load i64*, i64** %15, align 8
  %483 = getelementptr inbounds i64, i64* %482, i64 0
  %484 = load i64, i64* %483, align 8
  %485 = icmp ult i64 %481, %484
  br i1 %485, label %486, label %548

; <label>:486:                                    ; preds = %480
  store i64 0, i64* %44, align 8
  br label %487

; <label>:487:                                    ; preds = %541, %486
  %488 = load i64, i64* %44, align 8
  %489 = load i64*, i64** %15, align 8
  %490 = getelementptr inbounds i64, i64* %489, i64 1
  %491 = load i64, i64* %490, align 8
  %492 = icmp ult i64 %488, %491
  br i1 %492, label %493, label %544

; <label>:493:                                    ; preds = %487
  %494 = load i64, i64* %42, align 8
  %495 = load i64*, i64** %15, align 8
  %496 = load i64, i64* %20, align 8
  %497 = getelementptr inbounds i64, i64* %495, i64 %496
  %498 = load i64, i64* %497, align 8
  %499 = mul i64 %494, %498
  store i64 %499, i64* %45, align 8
  %500 = load i64, i64* %43, align 8
  %501 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 0
  %502 = load i64, i64* %501, align 16
  %503 = add i64 %500, %502
  %504 = load i64, i64* %20, align 8
  %505 = icmp eq i64 %504, 0
  br i1 %505, label %506, label %508

; <label>:506:                                    ; preds = %493
  %507 = load i64, i64* %45, align 8
  br label %509

; <label>:508:                                    ; preds = %493
  br label %509

; <label>:509:                                    ; preds = %508, %506
  %510 = phi i64 [ %507, %506 ], [ 0, %508 ]
  %511 = add i64 %503, %510
  %512 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  store i64 %511, i64* %512, align 16
  %513 = load i64, i64* %44, align 8
  %514 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 1
  %515 = load i64, i64* %514, align 8
  %516 = add i64 %513, %515
  %517 = load i64, i64* %20, align 8
  %518 = icmp eq i64 %517, 1
  br i1 %518, label %519, label %521

; <label>:519:                                    ; preds = %509
  %520 = load i64, i64* %45, align 8
  br label %522

; <label>:521:                                    ; preds = %509
  br label %522

; <label>:522:                                    ; preds = %521, %519
  %523 = phi i64 [ %520, %519 ], [ 0, %521 ]
  %524 = add i64 %516, %523
  %525 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  store i64 %524, i64* %525, align 8
  %526 = load i64*, i64** %12, align 8
  %527 = load i64*, i64** %15, align 8
  %528 = load i64, i64* %43, align 8
  %529 = load i64, i64* %44, align 8
  %530 = call i64 @_Z12libjit_getXYPKmmm(i64* %527, i64 %528, i64 %529)
  %531 = getelementptr inbounds i64, i64* %526, i64 %530
  %532 = load i64, i64* %531, align 8
  %533 = load i64*, i64** %11, align 8
  %534 = load i64*, i64** %14, align 8
  %535 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  %536 = load i64, i64* %535, align 16
  %537 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  %538 = load i64, i64* %537, align 8
  %539 = call i64 @_Z12libjit_getXYPKmmm(i64* %534, i64 %536, i64 %538)
  %540 = getelementptr inbounds i64, i64* %533, i64 %539
  store i64 %532, i64* %540, align 8
  br label %541

; <label>:541:                                    ; preds = %522
  %542 = load i64, i64* %44, align 8
  %543 = add i64 %542, 1
  store i64 %543, i64* %44, align 8
  br label %487

; <label>:544:                                    ; preds = %487
  br label %545

; <label>:545:                                    ; preds = %544
  %546 = load i64, i64* %43, align 8
  %547 = add i64 %546, 1
  store i64 %547, i64* %43, align 8
  br label %480

; <label>:548:                                    ; preds = %480
  br label %549

; <label>:549:                                    ; preds = %548
  %550 = load i64, i64* %42, align 8
  %551 = add i64 %550, 1
  store i64 %551, i64* %42, align 8
  br label %475

; <label>:552:                                    ; preds = %475
  br label %601

; <label>:553:                                    ; preds = %471
  %554 = load i64, i64* %17, align 8
  %555 = icmp eq i64 %554, 1
  br i1 %555, label %556, label %601

; <label>:556:                                    ; preds = %553
  store i64 0, i64* %46, align 8
  br label %557

; <label>:557:                                    ; preds = %597, %556
  %558 = load i64, i64* %46, align 8
  %559 = load i64, i64* %19, align 8
  %560 = icmp ult i64 %558, %559
  br i1 %560, label %561, label %600

; <label>:561:                                    ; preds = %557
  store i64 0, i64* %47, align 8
  br label %562

; <label>:562:                                    ; preds = %593, %561
  %563 = load i64, i64* %47, align 8
  %564 = load i64*, i64** %15, align 8
  %565 = getelementptr inbounds i64, i64* %564, i64 0
  %566 = load i64, i64* %565, align 8
  %567 = icmp ult i64 %563, %566
  br i1 %567, label %568, label %596

; <label>:568:                                    ; preds = %562
  %569 = load i64, i64* %46, align 8
  %570 = load i64*, i64** %15, align 8
  %571 = load i64, i64* %20, align 8
  %572 = getelementptr inbounds i64, i64* %570, i64 %571
  %573 = load i64, i64* %572, align 8
  %574 = mul i64 %569, %573
  store i64 %574, i64* %48, align 8
  %575 = load i64*, i64** %12, align 8
  %576 = load i64, i64* %47, align 8
  %577 = getelementptr inbounds i64, i64* %575, i64 %576
  %578 = load i64, i64* %577, align 8
  %579 = load i64*, i64** %11, align 8
  %580 = load i64, i64* %47, align 8
  %581 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 0
  %582 = load i64, i64* %581, align 16
  %583 = add i64 %580, %582
  %584 = load i64, i64* %20, align 8
  %585 = icmp eq i64 %584, 0
  br i1 %585, label %586, label %588

; <label>:586:                                    ; preds = %568
  %587 = load i64, i64* %48, align 8
  br label %589

; <label>:588:                                    ; preds = %568
  br label %589

; <label>:589:                                    ; preds = %588, %586
  %590 = phi i64 [ %587, %586 ], [ 0, %588 ]
  %591 = add i64 %583, %590
  %592 = getelementptr inbounds i64, i64* %579, i64 %591
  store i64 %578, i64* %592, align 8
  br label %593

; <label>:593:                                    ; preds = %589
  %594 = load i64, i64* %47, align 8
  %595 = add i64 %594, 1
  store i64 %595, i64* %47, align 8
  br label %562

; <label>:596:                                    ; preds = %562
  br label %597

; <label>:597:                                    ; preds = %596
  %598 = load i64, i64* %46, align 8
  %599 = add i64 %598, 1
  store i64 %599, i64* %46, align 8
  br label %557

; <label>:600:                                    ; preds = %557
  br label %601

; <label>:601:                                    ; preds = %225, %361, %470, %552, %600, %553
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_extract_tensor_u(i64*, i64*, i64*, i64*, i64*, i64, i64, i64) #2 {
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  store i64* %0, i64** %9, align 8
  store i64* %1, i64** %10, align 8
  store i64* %2, i64** %11, align 8
  store i64* %3, i64** %12, align 8
  store i64* %4, i64** %13, align 8
  store i64 %5, i64* %14, align 8
  store i64 %6, i64* %15, align 8
  store i64 %7, i64* %16, align 8
  %17 = load i64*, i64** %9, align 8
  %18 = load i64*, i64** %10, align 8
  %19 = load i64*, i64** %11, align 8
  %20 = load i64*, i64** %12, align 8
  %21 = load i64*, i64** %13, align 8
  %22 = load i64, i64* %14, align 8
  %23 = load i64, i64* %15, align 8
  %24 = load i64, i64* %16, align 8
  call void @_ZN12_GLOBAL__N_121libjit_extract_tensorIlEEvPT_S2_PmS3_S3_mmm(i64* %17, i64* %18, i64* %19, i64* %20, i64* %21, i64 %22, i64 %23, i64 %24)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_121libjit_extract_tensorIlEEvPT_S2_PmS3_S3_mmm(i64*, i64*, i64*, i64*, i64*, i64, i64, i64) #0 {
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca [5 x i64], align 16
  %18 = alloca [5 x i64], align 16
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  store i64* %0, i64** %9, align 8
  store i64* %1, i64** %10, align 8
  store i64* %2, i64** %11, align 8
  store i64* %3, i64** %12, align 8
  store i64* %4, i64** %13, align 8
  store i64 %5, i64* %14, align 8
  store i64 %6, i64* %15, align 8
  store i64 %7, i64* %16, align 8
  store i64 0, i64* %19, align 8
  br label %35

; <label>:35:                                     ; preds = %46, %8
  %36 = load i64, i64* %19, align 8
  %37 = load i64, i64* %15, align 8
  %38 = icmp ult i64 %36, %37
  br i1 %38, label %39, label %49

; <label>:39:                                     ; preds = %35
  %40 = load i64*, i64** %11, align 8
  %41 = load i64, i64* %19, align 8
  %42 = getelementptr inbounds i64, i64* %40, i64 %41
  %43 = load i64, i64* %42, align 8
  %44 = load i64, i64* %19, align 8
  %45 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 %44
  store i64 %43, i64* %45, align 8
  br label %46

; <label>:46:                                     ; preds = %39
  %47 = load i64, i64* %19, align 8
  %48 = add i64 %47, 1
  store i64 %48, i64* %19, align 8
  br label %35

; <label>:49:                                     ; preds = %35
  %50 = load i64, i64* %15, align 8
  %51 = icmp eq i64 %50, 5
  br i1 %51, label %52, label %157

; <label>:52:                                     ; preds = %49
  store i64 0, i64* %20, align 8
  br label %53

; <label>:53:                                     ; preds = %153, %52
  %54 = load i64, i64* %20, align 8
  %55 = load i64*, i64** %13, align 8
  %56 = getelementptr inbounds i64, i64* %55, i64 0
  %57 = load i64, i64* %56, align 8
  %58 = icmp ult i64 %54, %57
  br i1 %58, label %59, label %156

; <label>:59:                                     ; preds = %53
  store i64 0, i64* %21, align 8
  br label %60

; <label>:60:                                     ; preds = %149, %59
  %61 = load i64, i64* %21, align 8
  %62 = load i64*, i64** %13, align 8
  %63 = getelementptr inbounds i64, i64* %62, i64 1
  %64 = load i64, i64* %63, align 8
  %65 = icmp ult i64 %61, %64
  br i1 %65, label %66, label %152

; <label>:66:                                     ; preds = %60
  store i64 0, i64* %22, align 8
  br label %67

; <label>:67:                                     ; preds = %145, %66
  %68 = load i64, i64* %22, align 8
  %69 = load i64*, i64** %13, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 2
  %71 = load i64, i64* %70, align 8
  %72 = icmp ult i64 %68, %71
  br i1 %72, label %73, label %148

; <label>:73:                                     ; preds = %67
  store i64 0, i64* %23, align 8
  br label %74

; <label>:74:                                     ; preds = %141, %73
  %75 = load i64, i64* %23, align 8
  %76 = load i64*, i64** %13, align 8
  %77 = getelementptr inbounds i64, i64* %76, i64 3
  %78 = load i64, i64* %77, align 8
  %79 = icmp ult i64 %75, %78
  br i1 %79, label %80, label %144

; <label>:80:                                     ; preds = %74
  store i64 0, i64* %24, align 8
  br label %81

; <label>:81:                                     ; preds = %137, %80
  %82 = load i64, i64* %24, align 8
  %83 = load i64*, i64** %13, align 8
  %84 = getelementptr inbounds i64, i64* %83, i64 4
  %85 = load i64, i64* %84, align 8
  %86 = icmp ult i64 %82, %85
  br i1 %86, label %87, label %140

; <label>:87:                                     ; preds = %81
  %88 = load i64, i64* %20, align 8
  %89 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %90 = load i64, i64* %89, align 16
  %91 = add i64 %88, %90
  %92 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  store i64 %91, i64* %92, align 16
  %93 = load i64, i64* %21, align 8
  %94 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 1
  %95 = load i64, i64* %94, align 8
  %96 = add i64 %93, %95
  %97 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  store i64 %96, i64* %97, align 8
  %98 = load i64, i64* %22, align 8
  %99 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 2
  %100 = load i64, i64* %99, align 16
  %101 = add i64 %98, %100
  %102 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  store i64 %101, i64* %102, align 16
  %103 = load i64, i64* %23, align 8
  %104 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 3
  %105 = load i64, i64* %104, align 8
  %106 = add i64 %103, %105
  %107 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 3
  store i64 %106, i64* %107, align 8
  %108 = load i64, i64* %24, align 8
  %109 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 4
  %110 = load i64, i64* %109, align 16
  %111 = add i64 %108, %110
  %112 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 4
  store i64 %111, i64* %112, align 16
  %113 = load i64*, i64** %9, align 8
  %114 = load i64*, i64** %12, align 8
  %115 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  %116 = load i64, i64* %115, align 16
  %117 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  %120 = load i64, i64* %119, align 16
  %121 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 3
  %122 = load i64, i64* %121, align 8
  %123 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 4
  %124 = load i64, i64* %123, align 16
  %125 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %114, i64 %116, i64 %118, i64 %120, i64 %122, i64 %124)
  %126 = getelementptr inbounds i64, i64* %113, i64 %125
  %127 = load i64, i64* %126, align 8
  %128 = load i64*, i64** %10, align 8
  %129 = load i64*, i64** %13, align 8
  %130 = load i64, i64* %20, align 8
  %131 = load i64, i64* %21, align 8
  %132 = load i64, i64* %22, align 8
  %133 = load i64, i64* %23, align 8
  %134 = load i64, i64* %24, align 8
  %135 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %129, i64 %130, i64 %131, i64 %132, i64 %133, i64 %134)
  %136 = getelementptr inbounds i64, i64* %128, i64 %135
  store i64 %127, i64* %136, align 8
  br label %137

; <label>:137:                                    ; preds = %87
  %138 = load i64, i64* %24, align 8
  %139 = add i64 %138, 1
  store i64 %139, i64* %24, align 8
  br label %81

; <label>:140:                                    ; preds = %81
  br label %141

; <label>:141:                                    ; preds = %140
  %142 = load i64, i64* %23, align 8
  %143 = add i64 %142, 1
  store i64 %143, i64* %23, align 8
  br label %74

; <label>:144:                                    ; preds = %74
  br label %145

; <label>:145:                                    ; preds = %144
  %146 = load i64, i64* %22, align 8
  %147 = add i64 %146, 1
  store i64 %147, i64* %22, align 8
  br label %67

; <label>:148:                                    ; preds = %67
  br label %149

; <label>:149:                                    ; preds = %148
  %150 = load i64, i64* %21, align 8
  %151 = add i64 %150, 1
  store i64 %151, i64* %21, align 8
  br label %60

; <label>:152:                                    ; preds = %60
  br label %153

; <label>:153:                                    ; preds = %152
  %154 = load i64, i64* %20, align 8
  %155 = add i64 %154, 1
  store i64 %155, i64* %20, align 8
  br label %53

; <label>:156:                                    ; preds = %53
  br label %392

; <label>:157:                                    ; preds = %49
  %158 = load i64, i64* %15, align 8
  %159 = icmp eq i64 %158, 4
  br i1 %159, label %160, label %246

; <label>:160:                                    ; preds = %157
  store i64 0, i64* %25, align 8
  br label %161

; <label>:161:                                    ; preds = %242, %160
  %162 = load i64, i64* %25, align 8
  %163 = load i64*, i64** %13, align 8
  %164 = getelementptr inbounds i64, i64* %163, i64 0
  %165 = load i64, i64* %164, align 8
  %166 = icmp ult i64 %162, %165
  br i1 %166, label %167, label %245

; <label>:167:                                    ; preds = %161
  store i64 0, i64* %26, align 8
  br label %168

; <label>:168:                                    ; preds = %238, %167
  %169 = load i64, i64* %26, align 8
  %170 = load i64*, i64** %13, align 8
  %171 = getelementptr inbounds i64, i64* %170, i64 1
  %172 = load i64, i64* %171, align 8
  %173 = icmp ult i64 %169, %172
  br i1 %173, label %174, label %241

; <label>:174:                                    ; preds = %168
  store i64 0, i64* %27, align 8
  br label %175

; <label>:175:                                    ; preds = %234, %174
  %176 = load i64, i64* %27, align 8
  %177 = load i64*, i64** %13, align 8
  %178 = getelementptr inbounds i64, i64* %177, i64 2
  %179 = load i64, i64* %178, align 8
  %180 = icmp ult i64 %176, %179
  br i1 %180, label %181, label %237

; <label>:181:                                    ; preds = %175
  store i64 0, i64* %28, align 8
  br label %182

; <label>:182:                                    ; preds = %230, %181
  %183 = load i64, i64* %28, align 8
  %184 = load i64*, i64** %13, align 8
  %185 = getelementptr inbounds i64, i64* %184, i64 3
  %186 = load i64, i64* %185, align 8
  %187 = icmp ult i64 %183, %186
  br i1 %187, label %188, label %233

; <label>:188:                                    ; preds = %182
  %189 = load i64, i64* %25, align 8
  %190 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %191 = load i64, i64* %190, align 16
  %192 = add i64 %189, %191
  %193 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  store i64 %192, i64* %193, align 16
  %194 = load i64, i64* %26, align 8
  %195 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 1
  %196 = load i64, i64* %195, align 8
  %197 = add i64 %194, %196
  %198 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  store i64 %197, i64* %198, align 8
  %199 = load i64, i64* %27, align 8
  %200 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 2
  %201 = load i64, i64* %200, align 16
  %202 = add i64 %199, %201
  %203 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  store i64 %202, i64* %203, align 16
  %204 = load i64, i64* %28, align 8
  %205 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 3
  %206 = load i64, i64* %205, align 8
  %207 = add i64 %204, %206
  %208 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 3
  store i64 %207, i64* %208, align 8
  %209 = load i64*, i64** %9, align 8
  %210 = load i64*, i64** %12, align 8
  %211 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  %212 = load i64, i64* %211, align 16
  %213 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  %214 = load i64, i64* %213, align 8
  %215 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  %216 = load i64, i64* %215, align 16
  %217 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 3
  %218 = load i64, i64* %217, align 8
  %219 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %210, i64 %212, i64 %214, i64 %216, i64 %218)
  %220 = getelementptr inbounds i64, i64* %209, i64 %219
  %221 = load i64, i64* %220, align 8
  %222 = load i64*, i64** %10, align 8
  %223 = load i64*, i64** %13, align 8
  %224 = load i64, i64* %25, align 8
  %225 = load i64, i64* %26, align 8
  %226 = load i64, i64* %27, align 8
  %227 = load i64, i64* %28, align 8
  %228 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %223, i64 %224, i64 %225, i64 %226, i64 %227)
  %229 = getelementptr inbounds i64, i64* %222, i64 %228
  store i64 %221, i64* %229, align 8
  br label %230

; <label>:230:                                    ; preds = %188
  %231 = load i64, i64* %28, align 8
  %232 = add i64 %231, 1
  store i64 %232, i64* %28, align 8
  br label %182

; <label>:233:                                    ; preds = %182
  br label %234

; <label>:234:                                    ; preds = %233
  %235 = load i64, i64* %27, align 8
  %236 = add i64 %235, 1
  store i64 %236, i64* %27, align 8
  br label %175

; <label>:237:                                    ; preds = %175
  br label %238

; <label>:238:                                    ; preds = %237
  %239 = load i64, i64* %26, align 8
  %240 = add i64 %239, 1
  store i64 %240, i64* %26, align 8
  br label %168

; <label>:241:                                    ; preds = %168
  br label %242

; <label>:242:                                    ; preds = %241
  %243 = load i64, i64* %25, align 8
  %244 = add i64 %243, 1
  store i64 %244, i64* %25, align 8
  br label %161

; <label>:245:                                    ; preds = %161
  br label %392

; <label>:246:                                    ; preds = %157
  %247 = load i64, i64* %15, align 8
  %248 = icmp eq i64 %247, 3
  br i1 %248, label %249, label %316

; <label>:249:                                    ; preds = %246
  store i64 0, i64* %29, align 8
  br label %250

; <label>:250:                                    ; preds = %312, %249
  %251 = load i64, i64* %29, align 8
  %252 = load i64*, i64** %13, align 8
  %253 = getelementptr inbounds i64, i64* %252, i64 0
  %254 = load i64, i64* %253, align 8
  %255 = icmp ult i64 %251, %254
  br i1 %255, label %256, label %315

; <label>:256:                                    ; preds = %250
  store i64 0, i64* %30, align 8
  br label %257

; <label>:257:                                    ; preds = %308, %256
  %258 = load i64, i64* %30, align 8
  %259 = load i64*, i64** %13, align 8
  %260 = getelementptr inbounds i64, i64* %259, i64 1
  %261 = load i64, i64* %260, align 8
  %262 = icmp ult i64 %258, %261
  br i1 %262, label %263, label %311

; <label>:263:                                    ; preds = %257
  store i64 0, i64* %31, align 8
  br label %264

; <label>:264:                                    ; preds = %304, %263
  %265 = load i64, i64* %31, align 8
  %266 = load i64*, i64** %13, align 8
  %267 = getelementptr inbounds i64, i64* %266, i64 2
  %268 = load i64, i64* %267, align 8
  %269 = icmp ult i64 %265, %268
  br i1 %269, label %270, label %307

; <label>:270:                                    ; preds = %264
  %271 = load i64, i64* %29, align 8
  %272 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %273 = load i64, i64* %272, align 16
  %274 = add i64 %271, %273
  %275 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  store i64 %274, i64* %275, align 16
  %276 = load i64, i64* %30, align 8
  %277 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 1
  %278 = load i64, i64* %277, align 8
  %279 = add i64 %276, %278
  %280 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  store i64 %279, i64* %280, align 8
  %281 = load i64, i64* %31, align 8
  %282 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 2
  %283 = load i64, i64* %282, align 16
  %284 = add i64 %281, %283
  %285 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  store i64 %284, i64* %285, align 16
  %286 = load i64*, i64** %9, align 8
  %287 = load i64*, i64** %12, align 8
  %288 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  %289 = load i64, i64* %288, align 16
  %290 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  %291 = load i64, i64* %290, align 8
  %292 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 2
  %293 = load i64, i64* %292, align 16
  %294 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %287, i64 %289, i64 %291, i64 %293)
  %295 = getelementptr inbounds i64, i64* %286, i64 %294
  %296 = load i64, i64* %295, align 8
  %297 = load i64*, i64** %10, align 8
  %298 = load i64*, i64** %13, align 8
  %299 = load i64, i64* %29, align 8
  %300 = load i64, i64* %30, align 8
  %301 = load i64, i64* %31, align 8
  %302 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %298, i64 %299, i64 %300, i64 %301)
  %303 = getelementptr inbounds i64, i64* %297, i64 %302
  store i64 %296, i64* %303, align 8
  br label %304

; <label>:304:                                    ; preds = %270
  %305 = load i64, i64* %31, align 8
  %306 = add i64 %305, 1
  store i64 %306, i64* %31, align 8
  br label %264

; <label>:307:                                    ; preds = %264
  br label %308

; <label>:308:                                    ; preds = %307
  %309 = load i64, i64* %30, align 8
  %310 = add i64 %309, 1
  store i64 %310, i64* %30, align 8
  br label %257

; <label>:311:                                    ; preds = %257
  br label %312

; <label>:312:                                    ; preds = %311
  %313 = load i64, i64* %29, align 8
  %314 = add i64 %313, 1
  store i64 %314, i64* %29, align 8
  br label %250

; <label>:315:                                    ; preds = %250
  br label %392

; <label>:316:                                    ; preds = %246
  %317 = load i64, i64* %15, align 8
  %318 = icmp eq i64 %317, 2
  br i1 %318, label %319, label %367

; <label>:319:                                    ; preds = %316
  store i64 0, i64* %32, align 8
  br label %320

; <label>:320:                                    ; preds = %363, %319
  %321 = load i64, i64* %32, align 8
  %322 = load i64*, i64** %13, align 8
  %323 = getelementptr inbounds i64, i64* %322, i64 0
  %324 = load i64, i64* %323, align 8
  %325 = icmp ult i64 %321, %324
  br i1 %325, label %326, label %366

; <label>:326:                                    ; preds = %320
  store i64 0, i64* %33, align 8
  br label %327

; <label>:327:                                    ; preds = %359, %326
  %328 = load i64, i64* %33, align 8
  %329 = load i64*, i64** %13, align 8
  %330 = getelementptr inbounds i64, i64* %329, i64 1
  %331 = load i64, i64* %330, align 8
  %332 = icmp ult i64 %328, %331
  br i1 %332, label %333, label %362

; <label>:333:                                    ; preds = %327
  %334 = load i64, i64* %32, align 8
  %335 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %336 = load i64, i64* %335, align 16
  %337 = add i64 %334, %336
  %338 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  store i64 %337, i64* %338, align 16
  %339 = load i64, i64* %33, align 8
  %340 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 1
  %341 = load i64, i64* %340, align 8
  %342 = add i64 %339, %341
  %343 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  store i64 %342, i64* %343, align 8
  %344 = load i64*, i64** %9, align 8
  %345 = load i64*, i64** %12, align 8
  %346 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 0
  %347 = load i64, i64* %346, align 16
  %348 = getelementptr inbounds [5 x i64], [5 x i64]* %17, i64 0, i64 1
  %349 = load i64, i64* %348, align 8
  %350 = call i64 @_Z12libjit_getXYPKmmm(i64* %345, i64 %347, i64 %349)
  %351 = getelementptr inbounds i64, i64* %344, i64 %350
  %352 = load i64, i64* %351, align 8
  %353 = load i64*, i64** %10, align 8
  %354 = load i64*, i64** %13, align 8
  %355 = load i64, i64* %32, align 8
  %356 = load i64, i64* %33, align 8
  %357 = call i64 @_Z12libjit_getXYPKmmm(i64* %354, i64 %355, i64 %356)
  %358 = getelementptr inbounds i64, i64* %353, i64 %357
  store i64 %352, i64* %358, align 8
  br label %359

; <label>:359:                                    ; preds = %333
  %360 = load i64, i64* %33, align 8
  %361 = add i64 %360, 1
  store i64 %361, i64* %33, align 8
  br label %327

; <label>:362:                                    ; preds = %327
  br label %363

; <label>:363:                                    ; preds = %362
  %364 = load i64, i64* %32, align 8
  %365 = add i64 %364, 1
  store i64 %365, i64* %32, align 8
  br label %320

; <label>:366:                                    ; preds = %320
  br label %392

; <label>:367:                                    ; preds = %316
  %368 = load i64, i64* %15, align 8
  %369 = icmp eq i64 %368, 1
  br i1 %369, label %370, label %392

; <label>:370:                                    ; preds = %367
  store i64 0, i64* %34, align 8
  br label %371

; <label>:371:                                    ; preds = %388, %370
  %372 = load i64, i64* %34, align 8
  %373 = load i64*, i64** %13, align 8
  %374 = getelementptr inbounds i64, i64* %373, i64 0
  %375 = load i64, i64* %374, align 8
  %376 = icmp ult i64 %372, %375
  br i1 %376, label %377, label %391

; <label>:377:                                    ; preds = %371
  %378 = load i64*, i64** %9, align 8
  %379 = load i64, i64* %34, align 8
  %380 = getelementptr inbounds [5 x i64], [5 x i64]* %18, i64 0, i64 0
  %381 = load i64, i64* %380, align 16
  %382 = add i64 %379, %381
  %383 = getelementptr inbounds i64, i64* %378, i64 %382
  %384 = load i64, i64* %383, align 8
  %385 = load i64*, i64** %10, align 8
  %386 = load i64, i64* %34, align 8
  %387 = getelementptr inbounds i64, i64* %385, i64 %386
  store i64 %384, i64* %387, align 8
  br label %388

; <label>:388:                                    ; preds = %377
  %389 = load i64, i64* %34, align 8
  %390 = add i64 %389, 1
  store i64 %390, i64* %34, align 8
  br label %371

; <label>:391:                                    ; preds = %371
  br label %392

; <label>:392:                                    ; preds = %156, %245, %315, %366, %391, %367
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_insert_tensor_i8(i8*, i8*, i64*, i64*, i64*, i64, i64, i64, i64, i64) #2 {
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  store i8* %0, i8** %11, align 8
  store i8* %1, i8** %12, align 8
  store i64* %2, i64** %13, align 8
  store i64* %3, i64** %14, align 8
  store i64* %4, i64** %15, align 8
  store i64 %5, i64* %16, align 8
  store i64 %6, i64* %17, align 8
  store i64 %7, i64* %18, align 8
  store i64 %8, i64* %19, align 8
  store i64 %9, i64* %20, align 8
  %21 = load i8*, i8** %11, align 8
  %22 = load i8*, i8** %12, align 8
  %23 = load i64*, i64** %13, align 8
  %24 = load i64*, i64** %14, align 8
  %25 = load i64*, i64** %15, align 8
  %26 = load i64, i64* %16, align 8
  %27 = load i64, i64* %17, align 8
  %28 = load i64, i64* %18, align 8
  %29 = load i64, i64* %19, align 8
  %30 = load i64, i64* %20, align 8
  call void @_ZN12_GLOBAL__N_120libjit_insert_tensorIaEEvPT_S2_PmS3_S3_mmmmm(i8* %21, i8* %22, i64* %23, i64* %24, i64* %25, i64 %26, i64 %27, i64 %28, i64 %29, i64 %30)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_120libjit_insert_tensorIaEEvPT_S2_PmS3_S3_mmmmm(i8*, i8*, i64*, i64*, i64*, i64, i64, i64, i64, i64) #0 {
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca [5 x i64], align 16
  %22 = alloca [5 x i64], align 16
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca i64, align 8
  %38 = alloca i64, align 8
  %39 = alloca i64, align 8
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  %43 = alloca i64, align 8
  %44 = alloca i64, align 8
  %45 = alloca i64, align 8
  %46 = alloca i64, align 8
  %47 = alloca i64, align 8
  %48 = alloca i64, align 8
  store i8* %0, i8** %11, align 8
  store i8* %1, i8** %12, align 8
  store i64* %2, i64** %13, align 8
  store i64* %3, i64** %14, align 8
  store i64* %4, i64** %15, align 8
  store i64 %5, i64* %16, align 8
  store i64 %6, i64* %17, align 8
  store i64 %7, i64* %18, align 8
  store i64 %8, i64* %19, align 8
  store i64 %9, i64* %20, align 8
  store i64 0, i64* %23, align 8
  br label %49

; <label>:49:                                     ; preds = %60, %10
  %50 = load i64, i64* %23, align 8
  %51 = load i64, i64* %17, align 8
  %52 = icmp ult i64 %50, %51
  br i1 %52, label %53, label %63

; <label>:53:                                     ; preds = %49
  %54 = load i64*, i64** %13, align 8
  %55 = load i64, i64* %23, align 8
  %56 = getelementptr inbounds i64, i64* %54, i64 %55
  %57 = load i64, i64* %56, align 8
  %58 = load i64, i64* %23, align 8
  %59 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 %58
  store i64 %57, i64* %59, align 8
  br label %60

; <label>:60:                                     ; preds = %53
  %61 = load i64, i64* %23, align 8
  %62 = add i64 %61, 1
  store i64 %62, i64* %23, align 8
  br label %49

; <label>:63:                                     ; preds = %49
  %64 = load i64, i64* %17, align 8
  %65 = icmp eq i64 %64, 5
  br i1 %65, label %66, label %226

; <label>:66:                                     ; preds = %63
  store i64 0, i64* %24, align 8
  br label %67

; <label>:67:                                     ; preds = %222, %66
  %68 = load i64, i64* %24, align 8
  %69 = load i64, i64* %19, align 8
  %70 = icmp ult i64 %68, %69
  br i1 %70, label %71, label %225

; <label>:71:                                     ; preds = %67
  store i64 0, i64* %25, align 8
  br label %72

; <label>:72:                                     ; preds = %218, %71
  %73 = load i64, i64* %25, align 8
  %74 = load i64*, i64** %15, align 8
  %75 = getelementptr inbounds i64, i64* %74, i64 0
  %76 = load i64, i64* %75, align 8
  %77 = icmp ult i64 %73, %76
  br i1 %77, label %78, label %221

; <label>:78:                                     ; preds = %72
  store i64 0, i64* %26, align 8
  br label %79

; <label>:79:                                     ; preds = %214, %78
  %80 = load i64, i64* %26, align 8
  %81 = load i64*, i64** %15, align 8
  %82 = getelementptr inbounds i64, i64* %81, i64 1
  %83 = load i64, i64* %82, align 8
  %84 = icmp ult i64 %80, %83
  br i1 %84, label %85, label %217

; <label>:85:                                     ; preds = %79
  store i64 0, i64* %27, align 8
  br label %86

; <label>:86:                                     ; preds = %210, %85
  %87 = load i64, i64* %27, align 8
  %88 = load i64*, i64** %15, align 8
  %89 = getelementptr inbounds i64, i64* %88, i64 2
  %90 = load i64, i64* %89, align 8
  %91 = icmp ult i64 %87, %90
  br i1 %91, label %92, label %213

; <label>:92:                                     ; preds = %86
  store i64 0, i64* %28, align 8
  br label %93

; <label>:93:                                     ; preds = %206, %92
  %94 = load i64, i64* %28, align 8
  %95 = load i64*, i64** %15, align 8
  %96 = getelementptr inbounds i64, i64* %95, i64 3
  %97 = load i64, i64* %96, align 8
  %98 = icmp ult i64 %94, %97
  br i1 %98, label %99, label %209

; <label>:99:                                     ; preds = %93
  store i64 0, i64* %29, align 8
  br label %100

; <label>:100:                                    ; preds = %202, %99
  %101 = load i64, i64* %29, align 8
  %102 = load i64*, i64** %15, align 8
  %103 = getelementptr inbounds i64, i64* %102, i64 4
  %104 = load i64, i64* %103, align 8
  %105 = icmp ult i64 %101, %104
  br i1 %105, label %106, label %205

; <label>:106:                                    ; preds = %100
  %107 = load i64, i64* %24, align 8
  %108 = load i64*, i64** %15, align 8
  %109 = load i64, i64* %20, align 8
  %110 = getelementptr inbounds i64, i64* %108, i64 %109
  %111 = load i64, i64* %110, align 8
  %112 = mul i64 %107, %111
  store i64 %112, i64* %30, align 8
  %113 = load i64, i64* %25, align 8
  %114 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 0
  %115 = load i64, i64* %114, align 16
  %116 = add i64 %113, %115
  %117 = load i64, i64* %20, align 8
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %121

; <label>:119:                                    ; preds = %106
  %120 = load i64, i64* %30, align 8
  br label %122

; <label>:121:                                    ; preds = %106
  br label %122

; <label>:122:                                    ; preds = %121, %119
  %123 = phi i64 [ %120, %119 ], [ 0, %121 ]
  %124 = add i64 %116, %123
  %125 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  store i64 %124, i64* %125, align 16
  %126 = load i64, i64* %26, align 8
  %127 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 1
  %128 = load i64, i64* %127, align 8
  %129 = add i64 %126, %128
  %130 = load i64, i64* %20, align 8
  %131 = icmp eq i64 %130, 1
  br i1 %131, label %132, label %134

; <label>:132:                                    ; preds = %122
  %133 = load i64, i64* %30, align 8
  br label %135

; <label>:134:                                    ; preds = %122
  br label %135

; <label>:135:                                    ; preds = %134, %132
  %136 = phi i64 [ %133, %132 ], [ 0, %134 ]
  %137 = add i64 %129, %136
  %138 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  store i64 %137, i64* %138, align 8
  %139 = load i64, i64* %27, align 8
  %140 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 2
  %141 = load i64, i64* %140, align 16
  %142 = add i64 %139, %141
  %143 = load i64, i64* %20, align 8
  %144 = icmp eq i64 %143, 2
  br i1 %144, label %145, label %147

; <label>:145:                                    ; preds = %135
  %146 = load i64, i64* %30, align 8
  br label %148

; <label>:147:                                    ; preds = %135
  br label %148

; <label>:148:                                    ; preds = %147, %145
  %149 = phi i64 [ %146, %145 ], [ 0, %147 ]
  %150 = add i64 %142, %149
  %151 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 2
  store i64 %150, i64* %151, align 16
  %152 = load i64, i64* %28, align 8
  %153 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 3
  %154 = load i64, i64* %153, align 8
  %155 = add i64 %152, %154
  %156 = load i64, i64* %20, align 8
  %157 = icmp eq i64 %156, 3
  br i1 %157, label %158, label %160

; <label>:158:                                    ; preds = %148
  %159 = load i64, i64* %30, align 8
  br label %161

; <label>:160:                                    ; preds = %148
  br label %161

; <label>:161:                                    ; preds = %160, %158
  %162 = phi i64 [ %159, %158 ], [ 0, %160 ]
  %163 = add i64 %155, %162
  %164 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 3
  store i64 %163, i64* %164, align 8
  %165 = load i64, i64* %29, align 8
  %166 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 4
  %167 = load i64, i64* %166, align 16
  %168 = add i64 %165, %167
  %169 = load i64, i64* %20, align 8
  %170 = icmp eq i64 %169, 4
  br i1 %170, label %171, label %173

; <label>:171:                                    ; preds = %161
  %172 = load i64, i64* %30, align 8
  br label %174

; <label>:173:                                    ; preds = %161
  br label %174

; <label>:174:                                    ; preds = %173, %171
  %175 = phi i64 [ %172, %171 ], [ 0, %173 ]
  %176 = add i64 %168, %175
  %177 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 4
  store i64 %176, i64* %177, align 16
  %178 = load i8*, i8** %12, align 8
  %179 = load i64*, i64** %15, align 8
  %180 = load i64, i64* %25, align 8
  %181 = load i64, i64* %26, align 8
  %182 = load i64, i64* %27, align 8
  %183 = load i64, i64* %28, align 8
  %184 = load i64, i64* %29, align 8
  %185 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %179, i64 %180, i64 %181, i64 %182, i64 %183, i64 %184)
  %186 = getelementptr inbounds i8, i8* %178, i64 %185
  %187 = load i8, i8* %186, align 1
  %188 = load i8*, i8** %11, align 8
  %189 = load i64*, i64** %14, align 8
  %190 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  %191 = load i64, i64* %190, align 16
  %192 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  %193 = load i64, i64* %192, align 8
  %194 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 2
  %195 = load i64, i64* %194, align 16
  %196 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 3
  %197 = load i64, i64* %196, align 8
  %198 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 4
  %199 = load i64, i64* %198, align 16
  %200 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %189, i64 %191, i64 %193, i64 %195, i64 %197, i64 %199)
  %201 = getelementptr inbounds i8, i8* %188, i64 %200
  store i8 %187, i8* %201, align 1
  br label %202

; <label>:202:                                    ; preds = %174
  %203 = load i64, i64* %29, align 8
  %204 = add i64 %203, 1
  store i64 %204, i64* %29, align 8
  br label %100

; <label>:205:                                    ; preds = %100
  br label %206

; <label>:206:                                    ; preds = %205
  %207 = load i64, i64* %28, align 8
  %208 = add i64 %207, 1
  store i64 %208, i64* %28, align 8
  br label %93

; <label>:209:                                    ; preds = %93
  br label %210

; <label>:210:                                    ; preds = %209
  %211 = load i64, i64* %27, align 8
  %212 = add i64 %211, 1
  store i64 %212, i64* %27, align 8
  br label %86

; <label>:213:                                    ; preds = %86
  br label %214

; <label>:214:                                    ; preds = %213
  %215 = load i64, i64* %26, align 8
  %216 = add i64 %215, 1
  store i64 %216, i64* %26, align 8
  br label %79

; <label>:217:                                    ; preds = %79
  br label %218

; <label>:218:                                    ; preds = %217
  %219 = load i64, i64* %25, align 8
  %220 = add i64 %219, 1
  store i64 %220, i64* %25, align 8
  br label %72

; <label>:221:                                    ; preds = %72
  br label %222

; <label>:222:                                    ; preds = %221
  %223 = load i64, i64* %24, align 8
  %224 = add i64 %223, 1
  store i64 %224, i64* %24, align 8
  br label %67

; <label>:225:                                    ; preds = %67
  br label %601

; <label>:226:                                    ; preds = %63
  %227 = load i64, i64* %17, align 8
  %228 = icmp eq i64 %227, 4
  br i1 %228, label %229, label %362

; <label>:229:                                    ; preds = %226
  store i64 0, i64* %31, align 8
  br label %230

; <label>:230:                                    ; preds = %358, %229
  %231 = load i64, i64* %31, align 8
  %232 = load i64, i64* %19, align 8
  %233 = icmp ult i64 %231, %232
  br i1 %233, label %234, label %361

; <label>:234:                                    ; preds = %230
  store i64 0, i64* %32, align 8
  br label %235

; <label>:235:                                    ; preds = %354, %234
  %236 = load i64, i64* %32, align 8
  %237 = load i64*, i64** %15, align 8
  %238 = getelementptr inbounds i64, i64* %237, i64 0
  %239 = load i64, i64* %238, align 8
  %240 = icmp ult i64 %236, %239
  br i1 %240, label %241, label %357

; <label>:241:                                    ; preds = %235
  store i64 0, i64* %33, align 8
  br label %242

; <label>:242:                                    ; preds = %350, %241
  %243 = load i64, i64* %33, align 8
  %244 = load i64*, i64** %15, align 8
  %245 = getelementptr inbounds i64, i64* %244, i64 1
  %246 = load i64, i64* %245, align 8
  %247 = icmp ult i64 %243, %246
  br i1 %247, label %248, label %353

; <label>:248:                                    ; preds = %242
  store i64 0, i64* %34, align 8
  br label %249

; <label>:249:                                    ; preds = %346, %248
  %250 = load i64, i64* %34, align 8
  %251 = load i64*, i64** %15, align 8
  %252 = getelementptr inbounds i64, i64* %251, i64 2
  %253 = load i64, i64* %252, align 8
  %254 = icmp ult i64 %250, %253
  br i1 %254, label %255, label %349

; <label>:255:                                    ; preds = %249
  store i64 0, i64* %35, align 8
  br label %256

; <label>:256:                                    ; preds = %342, %255
  %257 = load i64, i64* %35, align 8
  %258 = load i64*, i64** %15, align 8
  %259 = getelementptr inbounds i64, i64* %258, i64 3
  %260 = load i64, i64* %259, align 8
  %261 = icmp ult i64 %257, %260
  br i1 %261, label %262, label %345

; <label>:262:                                    ; preds = %256
  %263 = load i64, i64* %31, align 8
  %264 = load i64*, i64** %15, align 8
  %265 = load i64, i64* %20, align 8
  %266 = getelementptr inbounds i64, i64* %264, i64 %265
  %267 = load i64, i64* %266, align 8
  %268 = mul i64 %263, %267
  store i64 %268, i64* %36, align 8
  %269 = load i64, i64* %32, align 8
  %270 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 0
  %271 = load i64, i64* %270, align 16
  %272 = add i64 %269, %271
  %273 = load i64, i64* %20, align 8
  %274 = icmp eq i64 %273, 0
  br i1 %274, label %275, label %277

; <label>:275:                                    ; preds = %262
  %276 = load i64, i64* %36, align 8
  br label %278

; <label>:277:                                    ; preds = %262
  br label %278

; <label>:278:                                    ; preds = %277, %275
  %279 = phi i64 [ %276, %275 ], [ 0, %277 ]
  %280 = add i64 %272, %279
  %281 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  store i64 %280, i64* %281, align 16
  %282 = load i64, i64* %33, align 8
  %283 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 1
  %284 = load i64, i64* %283, align 8
  %285 = add i64 %282, %284
  %286 = load i64, i64* %20, align 8
  %287 = icmp eq i64 %286, 1
  br i1 %287, label %288, label %290

; <label>:288:                                    ; preds = %278
  %289 = load i64, i64* %36, align 8
  br label %291

; <label>:290:                                    ; preds = %278
  br label %291

; <label>:291:                                    ; preds = %290, %288
  %292 = phi i64 [ %289, %288 ], [ 0, %290 ]
  %293 = add i64 %285, %292
  %294 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  store i64 %293, i64* %294, align 8
  %295 = load i64, i64* %34, align 8
  %296 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 2
  %297 = load i64, i64* %296, align 16
  %298 = add i64 %295, %297
  %299 = load i64, i64* %20, align 8
  %300 = icmp eq i64 %299, 2
  br i1 %300, label %301, label %303

; <label>:301:                                    ; preds = %291
  %302 = load i64, i64* %36, align 8
  br label %304

; <label>:303:                                    ; preds = %291
  br label %304

; <label>:304:                                    ; preds = %303, %301
  %305 = phi i64 [ %302, %301 ], [ 0, %303 ]
  %306 = add i64 %298, %305
  %307 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 2
  store i64 %306, i64* %307, align 16
  %308 = load i64, i64* %35, align 8
  %309 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 3
  %310 = load i64, i64* %309, align 8
  %311 = add i64 %308, %310
  %312 = load i64, i64* %20, align 8
  %313 = icmp eq i64 %312, 3
  br i1 %313, label %314, label %316

; <label>:314:                                    ; preds = %304
  %315 = load i64, i64* %36, align 8
  br label %317

; <label>:316:                                    ; preds = %304
  br label %317

; <label>:317:                                    ; preds = %316, %314
  %318 = phi i64 [ %315, %314 ], [ 0, %316 ]
  %319 = add i64 %311, %318
  %320 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 3
  store i64 %319, i64* %320, align 8
  %321 = load i8*, i8** %12, align 8
  %322 = load i64*, i64** %15, align 8
  %323 = load i64, i64* %32, align 8
  %324 = load i64, i64* %33, align 8
  %325 = load i64, i64* %34, align 8
  %326 = load i64, i64* %35, align 8
  %327 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %322, i64 %323, i64 %324, i64 %325, i64 %326)
  %328 = getelementptr inbounds i8, i8* %321, i64 %327
  %329 = load i8, i8* %328, align 1
  %330 = load i8*, i8** %11, align 8
  %331 = load i64*, i64** %14, align 8
  %332 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  %333 = load i64, i64* %332, align 16
  %334 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  %335 = load i64, i64* %334, align 8
  %336 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 2
  %337 = load i64, i64* %336, align 16
  %338 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 3
  %339 = load i64, i64* %338, align 8
  %340 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %331, i64 %333, i64 %335, i64 %337, i64 %339)
  %341 = getelementptr inbounds i8, i8* %330, i64 %340
  store i8 %329, i8* %341, align 1
  br label %342

; <label>:342:                                    ; preds = %317
  %343 = load i64, i64* %35, align 8
  %344 = add i64 %343, 1
  store i64 %344, i64* %35, align 8
  br label %256

; <label>:345:                                    ; preds = %256
  br label %346

; <label>:346:                                    ; preds = %345
  %347 = load i64, i64* %34, align 8
  %348 = add i64 %347, 1
  store i64 %348, i64* %34, align 8
  br label %249

; <label>:349:                                    ; preds = %249
  br label %350

; <label>:350:                                    ; preds = %349
  %351 = load i64, i64* %33, align 8
  %352 = add i64 %351, 1
  store i64 %352, i64* %33, align 8
  br label %242

; <label>:353:                                    ; preds = %242
  br label %354

; <label>:354:                                    ; preds = %353
  %355 = load i64, i64* %32, align 8
  %356 = add i64 %355, 1
  store i64 %356, i64* %32, align 8
  br label %235

; <label>:357:                                    ; preds = %235
  br label %358

; <label>:358:                                    ; preds = %357
  %359 = load i64, i64* %31, align 8
  %360 = add i64 %359, 1
  store i64 %360, i64* %31, align 8
  br label %230

; <label>:361:                                    ; preds = %230
  br label %601

; <label>:362:                                    ; preds = %226
  %363 = load i64, i64* %17, align 8
  %364 = icmp eq i64 %363, 3
  br i1 %364, label %365, label %471

; <label>:365:                                    ; preds = %362
  store i64 0, i64* %37, align 8
  br label %366

; <label>:366:                                    ; preds = %467, %365
  %367 = load i64, i64* %37, align 8
  %368 = load i64, i64* %19, align 8
  %369 = icmp ult i64 %367, %368
  br i1 %369, label %370, label %470

; <label>:370:                                    ; preds = %366
  store i64 0, i64* %38, align 8
  br label %371

; <label>:371:                                    ; preds = %463, %370
  %372 = load i64, i64* %38, align 8
  %373 = load i64*, i64** %15, align 8
  %374 = getelementptr inbounds i64, i64* %373, i64 0
  %375 = load i64, i64* %374, align 8
  %376 = icmp ult i64 %372, %375
  br i1 %376, label %377, label %466

; <label>:377:                                    ; preds = %371
  store i64 0, i64* %39, align 8
  br label %378

; <label>:378:                                    ; preds = %459, %377
  %379 = load i64, i64* %39, align 8
  %380 = load i64*, i64** %15, align 8
  %381 = getelementptr inbounds i64, i64* %380, i64 1
  %382 = load i64, i64* %381, align 8
  %383 = icmp ult i64 %379, %382
  br i1 %383, label %384, label %462

; <label>:384:                                    ; preds = %378
  store i64 0, i64* %40, align 8
  br label %385

; <label>:385:                                    ; preds = %455, %384
  %386 = load i64, i64* %40, align 8
  %387 = load i64*, i64** %15, align 8
  %388 = getelementptr inbounds i64, i64* %387, i64 2
  %389 = load i64, i64* %388, align 8
  %390 = icmp ult i64 %386, %389
  br i1 %390, label %391, label %458

; <label>:391:                                    ; preds = %385
  %392 = load i64, i64* %37, align 8
  %393 = load i64*, i64** %15, align 8
  %394 = load i64, i64* %20, align 8
  %395 = getelementptr inbounds i64, i64* %393, i64 %394
  %396 = load i64, i64* %395, align 8
  %397 = mul i64 %392, %396
  store i64 %397, i64* %41, align 8
  %398 = load i64, i64* %38, align 8
  %399 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 0
  %400 = load i64, i64* %399, align 16
  %401 = add i64 %398, %400
  %402 = load i64, i64* %20, align 8
  %403 = icmp eq i64 %402, 0
  br i1 %403, label %404, label %406

; <label>:404:                                    ; preds = %391
  %405 = load i64, i64* %41, align 8
  br label %407

; <label>:406:                                    ; preds = %391
  br label %407

; <label>:407:                                    ; preds = %406, %404
  %408 = phi i64 [ %405, %404 ], [ 0, %406 ]
  %409 = add i64 %401, %408
  %410 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  store i64 %409, i64* %410, align 16
  %411 = load i64, i64* %39, align 8
  %412 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 1
  %413 = load i64, i64* %412, align 8
  %414 = add i64 %411, %413
  %415 = load i64, i64* %20, align 8
  %416 = icmp eq i64 %415, 1
  br i1 %416, label %417, label %419

; <label>:417:                                    ; preds = %407
  %418 = load i64, i64* %41, align 8
  br label %420

; <label>:419:                                    ; preds = %407
  br label %420

; <label>:420:                                    ; preds = %419, %417
  %421 = phi i64 [ %418, %417 ], [ 0, %419 ]
  %422 = add i64 %414, %421
  %423 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  store i64 %422, i64* %423, align 8
  %424 = load i64, i64* %40, align 8
  %425 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 2
  %426 = load i64, i64* %425, align 16
  %427 = add i64 %424, %426
  %428 = load i64, i64* %20, align 8
  %429 = icmp eq i64 %428, 2
  br i1 %429, label %430, label %432

; <label>:430:                                    ; preds = %420
  %431 = load i64, i64* %41, align 8
  br label %433

; <label>:432:                                    ; preds = %420
  br label %433

; <label>:433:                                    ; preds = %432, %430
  %434 = phi i64 [ %431, %430 ], [ 0, %432 ]
  %435 = add i64 %427, %434
  %436 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 2
  store i64 %435, i64* %436, align 16
  %437 = load i8*, i8** %12, align 8
  %438 = load i64*, i64** %15, align 8
  %439 = load i64, i64* %38, align 8
  %440 = load i64, i64* %39, align 8
  %441 = load i64, i64* %40, align 8
  %442 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %438, i64 %439, i64 %440, i64 %441)
  %443 = getelementptr inbounds i8, i8* %437, i64 %442
  %444 = load i8, i8* %443, align 1
  %445 = load i8*, i8** %11, align 8
  %446 = load i64*, i64** %14, align 8
  %447 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  %448 = load i64, i64* %447, align 16
  %449 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  %450 = load i64, i64* %449, align 8
  %451 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 2
  %452 = load i64, i64* %451, align 16
  %453 = call i64 @_Z13libjit_getXYZPKmmmm(i64* %446, i64 %448, i64 %450, i64 %452)
  %454 = getelementptr inbounds i8, i8* %445, i64 %453
  store i8 %444, i8* %454, align 1
  br label %455

; <label>:455:                                    ; preds = %433
  %456 = load i64, i64* %40, align 8
  %457 = add i64 %456, 1
  store i64 %457, i64* %40, align 8
  br label %385

; <label>:458:                                    ; preds = %385
  br label %459

; <label>:459:                                    ; preds = %458
  %460 = load i64, i64* %39, align 8
  %461 = add i64 %460, 1
  store i64 %461, i64* %39, align 8
  br label %378

; <label>:462:                                    ; preds = %378
  br label %463

; <label>:463:                                    ; preds = %462
  %464 = load i64, i64* %38, align 8
  %465 = add i64 %464, 1
  store i64 %465, i64* %38, align 8
  br label %371

; <label>:466:                                    ; preds = %371
  br label %467

; <label>:467:                                    ; preds = %466
  %468 = load i64, i64* %37, align 8
  %469 = add i64 %468, 1
  store i64 %469, i64* %37, align 8
  br label %366

; <label>:470:                                    ; preds = %366
  br label %601

; <label>:471:                                    ; preds = %362
  %472 = load i64, i64* %17, align 8
  %473 = icmp eq i64 %472, 2
  br i1 %473, label %474, label %553

; <label>:474:                                    ; preds = %471
  store i64 0, i64* %42, align 8
  br label %475

; <label>:475:                                    ; preds = %549, %474
  %476 = load i64, i64* %42, align 8
  %477 = load i64, i64* %19, align 8
  %478 = icmp ult i64 %476, %477
  br i1 %478, label %479, label %552

; <label>:479:                                    ; preds = %475
  store i64 0, i64* %43, align 8
  br label %480

; <label>:480:                                    ; preds = %545, %479
  %481 = load i64, i64* %43, align 8
  %482 = load i64*, i64** %15, align 8
  %483 = getelementptr inbounds i64, i64* %482, i64 0
  %484 = load i64, i64* %483, align 8
  %485 = icmp ult i64 %481, %484
  br i1 %485, label %486, label %548

; <label>:486:                                    ; preds = %480
  store i64 0, i64* %44, align 8
  br label %487

; <label>:487:                                    ; preds = %541, %486
  %488 = load i64, i64* %44, align 8
  %489 = load i64*, i64** %15, align 8
  %490 = getelementptr inbounds i64, i64* %489, i64 1
  %491 = load i64, i64* %490, align 8
  %492 = icmp ult i64 %488, %491
  br i1 %492, label %493, label %544

; <label>:493:                                    ; preds = %487
  %494 = load i64, i64* %42, align 8
  %495 = load i64*, i64** %15, align 8
  %496 = load i64, i64* %20, align 8
  %497 = getelementptr inbounds i64, i64* %495, i64 %496
  %498 = load i64, i64* %497, align 8
  %499 = mul i64 %494, %498
  store i64 %499, i64* %45, align 8
  %500 = load i64, i64* %43, align 8
  %501 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 0
  %502 = load i64, i64* %501, align 16
  %503 = add i64 %500, %502
  %504 = load i64, i64* %20, align 8
  %505 = icmp eq i64 %504, 0
  br i1 %505, label %506, label %508

; <label>:506:                                    ; preds = %493
  %507 = load i64, i64* %45, align 8
  br label %509

; <label>:508:                                    ; preds = %493
  br label %509

; <label>:509:                                    ; preds = %508, %506
  %510 = phi i64 [ %507, %506 ], [ 0, %508 ]
  %511 = add i64 %503, %510
  %512 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  store i64 %511, i64* %512, align 16
  %513 = load i64, i64* %44, align 8
  %514 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 1
  %515 = load i64, i64* %514, align 8
  %516 = add i64 %513, %515
  %517 = load i64, i64* %20, align 8
  %518 = icmp eq i64 %517, 1
  br i1 %518, label %519, label %521

; <label>:519:                                    ; preds = %509
  %520 = load i64, i64* %45, align 8
  br label %522

; <label>:521:                                    ; preds = %509
  br label %522

; <label>:522:                                    ; preds = %521, %519
  %523 = phi i64 [ %520, %519 ], [ 0, %521 ]
  %524 = add i64 %516, %523
  %525 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  store i64 %524, i64* %525, align 8
  %526 = load i8*, i8** %12, align 8
  %527 = load i64*, i64** %15, align 8
  %528 = load i64, i64* %43, align 8
  %529 = load i64, i64* %44, align 8
  %530 = call i64 @_Z12libjit_getXYPKmmm(i64* %527, i64 %528, i64 %529)
  %531 = getelementptr inbounds i8, i8* %526, i64 %530
  %532 = load i8, i8* %531, align 1
  %533 = load i8*, i8** %11, align 8
  %534 = load i64*, i64** %14, align 8
  %535 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 0
  %536 = load i64, i64* %535, align 16
  %537 = getelementptr inbounds [5 x i64], [5 x i64]* %21, i64 0, i64 1
  %538 = load i64, i64* %537, align 8
  %539 = call i64 @_Z12libjit_getXYPKmmm(i64* %534, i64 %536, i64 %538)
  %540 = getelementptr inbounds i8, i8* %533, i64 %539
  store i8 %532, i8* %540, align 1
  br label %541

; <label>:541:                                    ; preds = %522
  %542 = load i64, i64* %44, align 8
  %543 = add i64 %542, 1
  store i64 %543, i64* %44, align 8
  br label %487

; <label>:544:                                    ; preds = %487
  br label %545

; <label>:545:                                    ; preds = %544
  %546 = load i64, i64* %43, align 8
  %547 = add i64 %546, 1
  store i64 %547, i64* %43, align 8
  br label %480

; <label>:548:                                    ; preds = %480
  br label %549

; <label>:549:                                    ; preds = %548
  %550 = load i64, i64* %42, align 8
  %551 = add i64 %550, 1
  store i64 %551, i64* %42, align 8
  br label %475

; <label>:552:                                    ; preds = %475
  br label %601

; <label>:553:                                    ; preds = %471
  %554 = load i64, i64* %17, align 8
  %555 = icmp eq i64 %554, 1
  br i1 %555, label %556, label %601

; <label>:556:                                    ; preds = %553
  store i64 0, i64* %46, align 8
  br label %557

; <label>:557:                                    ; preds = %597, %556
  %558 = load i64, i64* %46, align 8
  %559 = load i64, i64* %19, align 8
  %560 = icmp ult i64 %558, %559
  br i1 %560, label %561, label %600

; <label>:561:                                    ; preds = %557
  store i64 0, i64* %47, align 8
  br label %562

; <label>:562:                                    ; preds = %593, %561
  %563 = load i64, i64* %47, align 8
  %564 = load i64*, i64** %15, align 8
  %565 = getelementptr inbounds i64, i64* %564, i64 0
  %566 = load i64, i64* %565, align 8
  %567 = icmp ult i64 %563, %566
  br i1 %567, label %568, label %596

; <label>:568:                                    ; preds = %562
  %569 = load i64, i64* %46, align 8
  %570 = load i64*, i64** %15, align 8
  %571 = load i64, i64* %20, align 8
  %572 = getelementptr inbounds i64, i64* %570, i64 %571
  %573 = load i64, i64* %572, align 8
  %574 = mul i64 %569, %573
  store i64 %574, i64* %48, align 8
  %575 = load i8*, i8** %12, align 8
  %576 = load i64, i64* %47, align 8
  %577 = getelementptr inbounds i8, i8* %575, i64 %576
  %578 = load i8, i8* %577, align 1
  %579 = load i8*, i8** %11, align 8
  %580 = load i64, i64* %47, align 8
  %581 = getelementptr inbounds [5 x i64], [5 x i64]* %22, i64 0, i64 0
  %582 = load i64, i64* %581, align 16
  %583 = add i64 %580, %582
  %584 = load i64, i64* %20, align 8
  %585 = icmp eq i64 %584, 0
  br i1 %585, label %586, label %588

; <label>:586:                                    ; preds = %568
  %587 = load i64, i64* %48, align 8
  br label %589

; <label>:588:                                    ; preds = %568
  br label %589

; <label>:589:                                    ; preds = %588, %586
  %590 = phi i64 [ %587, %586 ], [ 0, %588 ]
  %591 = add i64 %583, %590
  %592 = getelementptr inbounds i8, i8* %579, i64 %591
  store i8 %578, i8* %592, align 1
  br label %593

; <label>:593:                                    ; preds = %589
  %594 = load i64, i64* %47, align 8
  %595 = add i64 %594, 1
  store i64 %595, i64* %47, align 8
  br label %562

; <label>:596:                                    ; preds = %562
  br label %597

; <label>:597:                                    ; preds = %596
  %598 = load i64, i64* %46, align 8
  %599 = add i64 %598, 1
  store i64 %599, i64* %46, align 8
  br label %557

; <label>:600:                                    ; preds = %557
  br label %601

; <label>:601:                                    ; preds = %225, %361, %470, %552, %600, %553
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_insert_tensor_b(i8*, i8*, i64*, i64*, i64*, i64, i64, i64, i64, i64) #2 {
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  store i8* %0, i8** %11, align 8
  store i8* %1, i8** %12, align 8
  store i64* %2, i64** %13, align 8
  store i64* %3, i64** %14, align 8
  store i64* %4, i64** %15, align 8
  store i64 %5, i64* %16, align 8
  store i64 %6, i64* %17, align 8
  store i64 %7, i64* %18, align 8
  store i64 %8, i64* %19, align 8
  store i64 %9, i64* %20, align 8
  %21 = load i8*, i8** %11, align 8
  %22 = load i8*, i8** %12, align 8
  %23 = load i64*, i64** %13, align 8
  %24 = load i64*, i64** %14, align 8
  %25 = load i64*, i64** %15, align 8
  %26 = load i64, i64* %16, align 8
  %27 = load i64, i64* %17, align 8
  %28 = load i64, i64* %18, align 8
  %29 = load i64, i64* %19, align 8
  %30 = load i64, i64* %20, align 8
  call void @_ZN12_GLOBAL__N_120libjit_insert_tensorIaEEvPT_S2_PmS3_S3_mmmmm(i8* %21, i8* %22, i64* %23, i64* %24, i64* %25, i64 %26, i64 %27, i64 %28, i64 %29, i64 %30)
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_space_to_depth_f(float*, float*, i64, i64*, i64*) #2 {
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  store float* %0, float** %6, align 8
  store float* %1, float** %7, align 8
  store i64 %2, i64* %8, align 8
  store i64* %3, i64** %9, align 8
  store i64* %4, i64** %10, align 8
  %11 = load float*, float** %6, align 8
  %12 = load float*, float** %7, align 8
  %13 = load i64, i64* %8, align 8
  %14 = load i64*, i64** %9, align 8
  %15 = load i64*, i64** %10, align 8
  call void @_ZN12_GLOBAL__N_129libjit_space_to_depth_genericIfEEvPKT_PS1_mPKmS6_(float* %11, float* %12, i64 %13, i64* %14, i64* %15)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_129libjit_space_to_depth_genericIfEEvPKT_PS1_mPKmS6_(float*, float*, i64, i64*, i64*) #0 {
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  store float* %0, float** %6, align 8
  store float* %1, float** %7, align 8
  store i64 %2, i64* %8, align 8
  store i64* %3, i64** %9, align 8
  store i64* %4, i64** %10, align 8
  %28 = load i64*, i64** %9, align 8
  %29 = getelementptr inbounds i64, i64* %28, i64 1
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %11, align 8
  %31 = load i64*, i64** %9, align 8
  %32 = getelementptr inbounds i64, i64* %31, i64 2
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %12, align 8
  %34 = load i64*, i64** %9, align 8
  %35 = getelementptr inbounds i64, i64* %34, i64 3
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %13, align 8
  %37 = load i64*, i64** %10, align 8
  %38 = getelementptr inbounds i64, i64* %37, i64 0
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %14, align 8
  %40 = load i64*, i64** %10, align 8
  %41 = getelementptr inbounds i64, i64* %40, i64 1
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %15, align 8
  %43 = load i64*, i64** %10, align 8
  %44 = getelementptr inbounds i64, i64* %43, i64 2
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %16, align 8
  %46 = load i64*, i64** %10, align 8
  %47 = getelementptr inbounds i64, i64* %46, i64 3
  %48 = load i64, i64* %47, align 8
  store i64 %48, i64* %17, align 8
  store i64 0, i64* %18, align 8
  br label %49

; <label>:49:                                     ; preds = %134, %5
  %50 = load i64, i64* %18, align 8
  %51 = load i64, i64* %14, align 8
  %52 = icmp ult i64 %50, %51
  br i1 %52, label %53, label %137

; <label>:53:                                     ; preds = %49
  store i64 0, i64* %19, align 8
  br label %54

; <label>:54:                                     ; preds = %130, %53
  %55 = load i64, i64* %19, align 8
  %56 = load i64, i64* %15, align 8
  %57 = icmp ult i64 %55, %56
  br i1 %57, label %58, label %133

; <label>:58:                                     ; preds = %54
  store i64 0, i64* %20, align 8
  br label %59

; <label>:59:                                     ; preds = %126, %58
  %60 = load i64, i64* %20, align 8
  %61 = load i64, i64* %16, align 8
  %62 = icmp ult i64 %60, %61
  br i1 %62, label %63, label %129

; <label>:63:                                     ; preds = %59
  store i64 0, i64* %21, align 8
  br label %64

; <label>:64:                                     ; preds = %122, %63
  %65 = load i64, i64* %21, align 8
  %66 = load i64, i64* %17, align 8
  %67 = icmp ult i64 %65, %66
  br i1 %67, label %68, label %125

; <label>:68:                                     ; preds = %64
  %69 = load i64, i64* %21, align 8
  %70 = load i64, i64* %17, align 8
  %71 = load i64, i64* %20, align 8
  %72 = load i64, i64* %16, align 8
  %73 = load i64, i64* %19, align 8
  %74 = load i64, i64* %18, align 8
  %75 = load i64, i64* %15, align 8
  %76 = mul i64 %74, %75
  %77 = add i64 %73, %76
  %78 = mul i64 %72, %77
  %79 = add i64 %71, %78
  %80 = mul i64 %70, %79
  %81 = add i64 %69, %80
  store i64 %81, i64* %22, align 8
  %82 = load i64, i64* %21, align 8
  %83 = load i64, i64* %13, align 8
  %84 = udiv i64 %82, %83
  store i64 %84, i64* %23, align 8
  %85 = load i64, i64* %20, align 8
  %86 = load i64, i64* %8, align 8
  %87 = mul i64 %85, %86
  %88 = load i64, i64* %23, align 8
  %89 = load i64, i64* %8, align 8
  %90 = urem i64 %88, %89
  %91 = add i64 %87, %90
  store i64 %91, i64* %24, align 8
  %92 = load i64, i64* %19, align 8
  %93 = load i64, i64* %8, align 8
  %94 = mul i64 %92, %93
  %95 = load i64, i64* %23, align 8
  %96 = load i64, i64* %8, align 8
  %97 = udiv i64 %95, %96
  %98 = add i64 %94, %97
  store i64 %98, i64* %25, align 8
  %99 = load i64, i64* %21, align 8
  %100 = load i64, i64* %13, align 8
  %101 = urem i64 %99, %100
  store i64 %101, i64* %26, align 8
  %102 = load i64, i64* %26, align 8
  %103 = load i64, i64* %13, align 8
  %104 = load i64, i64* %24, align 8
  %105 = load i64, i64* %12, align 8
  %106 = load i64, i64* %25, align 8
  %107 = load i64, i64* %18, align 8
  %108 = load i64, i64* %11, align 8
  %109 = mul i64 %107, %108
  %110 = add i64 %106, %109
  %111 = mul i64 %105, %110
  %112 = add i64 %104, %111
  %113 = mul i64 %103, %112
  %114 = add i64 %102, %113
  store i64 %114, i64* %27, align 8
  %115 = load float*, float** %6, align 8
  %116 = load i64, i64* %27, align 8
  %117 = getelementptr inbounds float, float* %115, i64 %116
  %118 = load float, float* %117, align 4
  %119 = load float*, float** %7, align 8
  %120 = load i64, i64* %22, align 8
  %121 = getelementptr inbounds float, float* %119, i64 %120
  store float %118, float* %121, align 4
  br label %122

; <label>:122:                                    ; preds = %68
  %123 = load i64, i64* %21, align 8
  %124 = add i64 %123, 1
  store i64 %124, i64* %21, align 8
  br label %64

; <label>:125:                                    ; preds = %64
  br label %126

; <label>:126:                                    ; preds = %125
  %127 = load i64, i64* %20, align 8
  %128 = add i64 %127, 1
  store i64 %128, i64* %20, align 8
  br label %59

; <label>:129:                                    ; preds = %59
  br label %130

; <label>:130:                                    ; preds = %129
  %131 = load i64, i64* %19, align 8
  %132 = add i64 %131, 1
  store i64 %132, i64* %19, align 8
  br label %54

; <label>:133:                                    ; preds = %54
  br label %134

; <label>:134:                                    ; preds = %133
  %135 = load i64, i64* %18, align 8
  %136 = add i64 %135, 1
  store i64 %136, i64* %18, align 8
  br label %49

; <label>:137:                                    ; preds = %49
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_space_to_depth_i8(i8*, i8*, i64, i64*, i64*) #2 {
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  store i8* %0, i8** %6, align 8
  store i8* %1, i8** %7, align 8
  store i64 %2, i64* %8, align 8
  store i64* %3, i64** %9, align 8
  store i64* %4, i64** %10, align 8
  %11 = load i8*, i8** %6, align 8
  %12 = load i8*, i8** %7, align 8
  %13 = load i64, i64* %8, align 8
  %14 = load i64*, i64** %9, align 8
  %15 = load i64*, i64** %10, align 8
  call void @_ZN12_GLOBAL__N_129libjit_space_to_depth_genericIaEEvPKT_PS1_mPKmS6_(i8* %11, i8* %12, i64 %13, i64* %14, i64* %15)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_129libjit_space_to_depth_genericIaEEvPKT_PS1_mPKmS6_(i8*, i8*, i64, i64*, i64*) #0 {
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  store i8* %0, i8** %6, align 8
  store i8* %1, i8** %7, align 8
  store i64 %2, i64* %8, align 8
  store i64* %3, i64** %9, align 8
  store i64* %4, i64** %10, align 8
  %28 = load i64*, i64** %9, align 8
  %29 = getelementptr inbounds i64, i64* %28, i64 1
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %11, align 8
  %31 = load i64*, i64** %9, align 8
  %32 = getelementptr inbounds i64, i64* %31, i64 2
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %12, align 8
  %34 = load i64*, i64** %9, align 8
  %35 = getelementptr inbounds i64, i64* %34, i64 3
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %13, align 8
  %37 = load i64*, i64** %10, align 8
  %38 = getelementptr inbounds i64, i64* %37, i64 0
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %14, align 8
  %40 = load i64*, i64** %10, align 8
  %41 = getelementptr inbounds i64, i64* %40, i64 1
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %15, align 8
  %43 = load i64*, i64** %10, align 8
  %44 = getelementptr inbounds i64, i64* %43, i64 2
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %16, align 8
  %46 = load i64*, i64** %10, align 8
  %47 = getelementptr inbounds i64, i64* %46, i64 3
  %48 = load i64, i64* %47, align 8
  store i64 %48, i64* %17, align 8
  store i64 0, i64* %18, align 8
  br label %49

; <label>:49:                                     ; preds = %134, %5
  %50 = load i64, i64* %18, align 8
  %51 = load i64, i64* %14, align 8
  %52 = icmp ult i64 %50, %51
  br i1 %52, label %53, label %137

; <label>:53:                                     ; preds = %49
  store i64 0, i64* %19, align 8
  br label %54

; <label>:54:                                     ; preds = %130, %53
  %55 = load i64, i64* %19, align 8
  %56 = load i64, i64* %15, align 8
  %57 = icmp ult i64 %55, %56
  br i1 %57, label %58, label %133

; <label>:58:                                     ; preds = %54
  store i64 0, i64* %20, align 8
  br label %59

; <label>:59:                                     ; preds = %126, %58
  %60 = load i64, i64* %20, align 8
  %61 = load i64, i64* %16, align 8
  %62 = icmp ult i64 %60, %61
  br i1 %62, label %63, label %129

; <label>:63:                                     ; preds = %59
  store i64 0, i64* %21, align 8
  br label %64

; <label>:64:                                     ; preds = %122, %63
  %65 = load i64, i64* %21, align 8
  %66 = load i64, i64* %17, align 8
  %67 = icmp ult i64 %65, %66
  br i1 %67, label %68, label %125

; <label>:68:                                     ; preds = %64
  %69 = load i64, i64* %21, align 8
  %70 = load i64, i64* %17, align 8
  %71 = load i64, i64* %20, align 8
  %72 = load i64, i64* %16, align 8
  %73 = load i64, i64* %19, align 8
  %74 = load i64, i64* %18, align 8
  %75 = load i64, i64* %15, align 8
  %76 = mul i64 %74, %75
  %77 = add i64 %73, %76
  %78 = mul i64 %72, %77
  %79 = add i64 %71, %78
  %80 = mul i64 %70, %79
  %81 = add i64 %69, %80
  store i64 %81, i64* %22, align 8
  %82 = load i64, i64* %21, align 8
  %83 = load i64, i64* %13, align 8
  %84 = udiv i64 %82, %83
  store i64 %84, i64* %23, align 8
  %85 = load i64, i64* %20, align 8
  %86 = load i64, i64* %8, align 8
  %87 = mul i64 %85, %86
  %88 = load i64, i64* %23, align 8
  %89 = load i64, i64* %8, align 8
  %90 = urem i64 %88, %89
  %91 = add i64 %87, %90
  store i64 %91, i64* %24, align 8
  %92 = load i64, i64* %19, align 8
  %93 = load i64, i64* %8, align 8
  %94 = mul i64 %92, %93
  %95 = load i64, i64* %23, align 8
  %96 = load i64, i64* %8, align 8
  %97 = udiv i64 %95, %96
  %98 = add i64 %94, %97
  store i64 %98, i64* %25, align 8
  %99 = load i64, i64* %21, align 8
  %100 = load i64, i64* %13, align 8
  %101 = urem i64 %99, %100
  store i64 %101, i64* %26, align 8
  %102 = load i64, i64* %26, align 8
  %103 = load i64, i64* %13, align 8
  %104 = load i64, i64* %24, align 8
  %105 = load i64, i64* %12, align 8
  %106 = load i64, i64* %25, align 8
  %107 = load i64, i64* %18, align 8
  %108 = load i64, i64* %11, align 8
  %109 = mul i64 %107, %108
  %110 = add i64 %106, %109
  %111 = mul i64 %105, %110
  %112 = add i64 %104, %111
  %113 = mul i64 %103, %112
  %114 = add i64 %102, %113
  store i64 %114, i64* %27, align 8
  %115 = load i8*, i8** %6, align 8
  %116 = load i64, i64* %27, align 8
  %117 = getelementptr inbounds i8, i8* %115, i64 %116
  %118 = load i8, i8* %117, align 1
  %119 = load i8*, i8** %7, align 8
  %120 = load i64, i64* %22, align 8
  %121 = getelementptr inbounds i8, i8* %119, i64 %120
  store i8 %118, i8* %121, align 1
  br label %122

; <label>:122:                                    ; preds = %68
  %123 = load i64, i64* %21, align 8
  %124 = add i64 %123, 1
  store i64 %124, i64* %21, align 8
  br label %64

; <label>:125:                                    ; preds = %64
  br label %126

; <label>:126:                                    ; preds = %125
  %127 = load i64, i64* %20, align 8
  %128 = add i64 %127, 1
  store i64 %128, i64* %20, align 8
  br label %59

; <label>:129:                                    ; preds = %59
  br label %130

; <label>:130:                                    ; preds = %129
  %131 = load i64, i64* %19, align 8
  %132 = add i64 %131, 1
  store i64 %132, i64* %19, align 8
  br label %54

; <label>:133:                                    ; preds = %54
  br label %134

; <label>:134:                                    ; preds = %133
  %135 = load i64, i64* %18, align 8
  %136 = add i64 %135, 1
  store i64 %136, i64* %18, align 8
  br label %49

; <label>:137:                                    ; preds = %49
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_dump_tensor(i8*, i64*, i64, i64, i8*) #2 {
  %6 = alloca i8*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  store i8* %0, i8** %6, align 8
  store i64* %1, i64** %7, align 8
  store i64 %2, i64* %8, align 8
  store i64 %3, i64* %9, align 8
  store i8* %4, i8** %10, align 8
  %11 = load i8*, i8** %10, align 8
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %11)
  %13 = load i64, i64* %9, align 8
  %14 = trunc i64 %13 to i8
  switch i8 %14, label %34 [
    i8 0, label %15
    i8 7, label %20
    i8 2, label %25
    i8 5, label %29
  ]

; <label>:15:                                     ; preds = %5
  %16 = load i8*, i8** %6, align 8
  %17 = bitcast i8* %16 to float*
  %18 = load i64*, i64** %7, align 8
  %19 = load i64, i64* %8, align 8
  call void @_ZN12_GLOBAL__N_123libjit_dump_tensor_implIfEEvPT_Pmm(float* %17, i64* %18, i64 %19)
  br label %37

; <label>:20:                                     ; preds = %5
  %21 = load i8*, i8** %6, align 8
  %22 = bitcast i8* %21 to i64*
  %23 = load i64*, i64** %7, align 8
  %24 = load i64, i64* %8, align 8
  call void @_ZN12_GLOBAL__N_123libjit_dump_tensor_implImEEvPT_Pmm(i64* %22, i64* %23, i64 %24)
  br label %37

; <label>:25:                                     ; preds = %5
  %26 = load i8*, i8** %6, align 8
  %27 = load i64*, i64** %7, align 8
  %28 = load i64, i64* %8, align 8
  call void @_ZN12_GLOBAL__N_123libjit_dump_tensor_implIaEEvPT_Pmm(i8* %26, i64* %27, i64 %28)
  br label %37

; <label>:29:                                     ; preds = %5
  %30 = load i8*, i8** %6, align 8
  %31 = bitcast i8* %30 to i32*
  %32 = load i64*, i64** %7, align 8
  %33 = load i64, i64* %8, align 8
  call void @_ZN12_GLOBAL__N_123libjit_dump_tensor_implIiEEvPT_Pmm(i32* %31, i64* %32, i64 %33)
  br label %37

; <label>:34:                                     ; preds = %5
  %35 = load i64, i64* %9, align 8
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.1, i32 0, i32 0), i64 %35)
  br label %37

; <label>:37:                                     ; preds = %34, %29, %25, %20, %15
  %38 = call i32 @puts(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

declare dso_local i32 @printf(i8*, ...) #4

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_123libjit_dump_tensor_implIfEEvPT_Pmm(float*, i64*, i64) #2 {
  %4 = alloca float*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  store float* %0, float** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64 %2, i64* %6, align 8
  %30 = load i64, i64* %6, align 8
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %38, label %32

; <label>:32:                                     ; preds = %3
  %33 = load float*, float** %4, align 8
  %34 = getelementptr inbounds float, float* %33, i64 0
  %35 = load float, float* %34, align 4
  %36 = fpext float %35 to double
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i32 0, i32 0), double %36)
  br label %265

; <label>:38:                                     ; preds = %3
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0))
  store i64 0, i64* %7, align 8
  br label %40

; <label>:40:                                     ; preds = %50, %38
  %41 = load i64, i64* %7, align 8
  %42 = load i64, i64* %6, align 8
  %43 = icmp ult i64 %41, %42
  br i1 %43, label %44, label %53

; <label>:44:                                     ; preds = %40
  %45 = load i64*, i64** %5, align 8
  %46 = load i64, i64* %7, align 8
  %47 = getelementptr inbounds i64, i64* %45, i64 %46
  %48 = load i64, i64* %47, align 8
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i64 %48)
  br label %50

; <label>:50:                                     ; preds = %44
  %51 = load i64, i64* %7, align 8
  %52 = add i64 %51, 1
  store i64 %52, i64* %7, align 8
  br label %40

; <label>:53:                                     ; preds = %40
  %54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0))
  %55 = load float*, float** %4, align 8
  %56 = getelementptr inbounds float, float* %55, i64 0
  %57 = load float, float* %56, align 4
  store float %57, float* %8, align 4
  %58 = load float*, float** %4, align 8
  %59 = getelementptr inbounds float, float* %58, i64 0
  %60 = load float, float* %59, align 4
  store float %60, float* %9, align 4
  store i64 1, i64* %10, align 8
  %61 = load i64, i64* %6, align 8
  %62 = call i8* @llvm.stacksave()
  store i8* %62, i8** %11, align 8
  %63 = alloca i64, i64 %61, align 16
  store i64 %61, i64* %12, align 8
  store i64 0, i64* %13, align 8
  br label %64

; <label>:64:                                     ; preds = %75, %53
  %65 = load i64, i64* %13, align 8
  %66 = load i64, i64* %6, align 8
  %67 = icmp ult i64 %65, %66
  br i1 %67, label %68, label %78

; <label>:68:                                     ; preds = %64
  %69 = load i64*, i64** %5, align 8
  %70 = load i64, i64* %13, align 8
  %71 = getelementptr inbounds i64, i64* %69, i64 %70
  %72 = load i64, i64* %71, align 8
  %73 = load i64, i64* %10, align 8
  %74 = mul i64 %73, %72
  store i64 %74, i64* %10, align 8
  br label %75

; <label>:75:                                     ; preds = %68
  %76 = load i64, i64* %13, align 8
  %77 = add i64 %76, 1
  store i64 %77, i64* %13, align 8
  br label %64

; <label>:78:                                     ; preds = %64
  %79 = load i64, i64* %6, align 8
  %80 = sub i64 %79, 1
  store i64 %80, i64* %14, align 8
  store i64 1, i64* %15, align 8
  br label %81

; <label>:81:                                     ; preds = %94, %78
  %82 = load i64, i64* %14, align 8
  %83 = icmp sge i64 %82, 0
  br i1 %83, label %84, label %97

; <label>:84:                                     ; preds = %81
  %85 = load i64, i64* %15, align 8
  %86 = load i64, i64* %14, align 8
  %87 = getelementptr inbounds i64, i64* %63, i64 %86
  store i64 %85, i64* %87, align 8
  %88 = load i64*, i64** %5, align 8
  %89 = load i64, i64* %14, align 8
  %90 = getelementptr inbounds i64, i64* %88, i64 %89
  %91 = load i64, i64* %90, align 8
  %92 = load i64, i64* %15, align 8
  %93 = mul i64 %92, %91
  store i64 %93, i64* %15, align 8
  br label %94

; <label>:94:                                     ; preds = %84
  %95 = load i64, i64* %14, align 8
  %96 = add nsw i64 %95, -1
  store i64 %96, i64* %14, align 8
  br label %81

; <label>:97:                                     ; preds = %81
  store i64 0, i64* %16, align 8
  %98 = load i64, i64* %10, align 8
  store i64 %98, i64* %17, align 8
  br label %99

; <label>:99:                                     ; preds = %134, %97
  %100 = load i64, i64* %16, align 8
  %101 = load i64, i64* %17, align 8
  %102 = icmp ult i64 %100, %101
  br i1 %102, label %103, label %137

; <label>:103:                                    ; preds = %99
  %104 = load float, float* %8, align 4
  %105 = load float*, float** %4, align 8
  %106 = load i64, i64* %16, align 8
  %107 = getelementptr inbounds float, float* %105, i64 %106
  %108 = load float, float* %107, align 4
  %109 = fcmp reassoc nsz arcp ogt float %104, %108
  br i1 %109, label %110, label %112

; <label>:110:                                    ; preds = %103
  %111 = load float, float* %8, align 4
  br label %117

; <label>:112:                                    ; preds = %103
  %113 = load float*, float** %4, align 8
  %114 = load i64, i64* %16, align 8
  %115 = getelementptr inbounds float, float* %113, i64 %114
  %116 = load float, float* %115, align 4
  br label %117

; <label>:117:                                    ; preds = %112, %110
  %118 = phi float [ %111, %110 ], [ %116, %112 ]
  store float %118, float* %8, align 4
  %119 = load float, float* %9, align 4
  %120 = load float*, float** %4, align 8
  %121 = load i64, i64* %16, align 8
  %122 = getelementptr inbounds float, float* %120, i64 %121
  %123 = load float, float* %122, align 4
  %124 = fcmp reassoc nsz arcp olt float %119, %123
  br i1 %124, label %125, label %127

; <label>:125:                                    ; preds = %117
  %126 = load float, float* %9, align 4
  br label %132

; <label>:127:                                    ; preds = %117
  %128 = load float*, float** %4, align 8
  %129 = load i64, i64* %16, align 8
  %130 = getelementptr inbounds float, float* %128, i64 %129
  %131 = load float, float* %130, align 4
  br label %132

; <label>:132:                                    ; preds = %127, %125
  %133 = phi float [ %126, %125 ], [ %131, %127 ]
  store float %133, float* %9, align 4
  br label %134

; <label>:134:                                    ; preds = %132
  %135 = load i64, i64* %16, align 8
  %136 = add i64 %135, 1
  store i64 %136, i64* %16, align 8
  br label %99

; <label>:137:                                    ; preds = %99
  %138 = load float, float* %9, align 4
  %139 = fpext float %138 to double
  %140 = fcmp reassoc nsz arcp oeq double %139, 0.000000e+00
  br i1 %140, label %141, label %147

; <label>:141:                                    ; preds = %137
  %142 = load float, float* %8, align 4
  %143 = fpext float %142 to double
  %144 = fcmp reassoc nsz arcp oeq double %143, 0.000000e+00
  br i1 %144, label %145, label %147

; <label>:145:                                    ; preds = %141
  %146 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i32 0, i32 0))
  store i32 1, i32* %18, align 4
  br label %262

; <label>:147:                                    ; preds = %141, %137
  %148 = load float, float* %8, align 4
  %149 = fpext float %148 to double
  %150 = load float, float* %9, align 4
  %151 = fpext float %150 to double
  %152 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i32 0, i32 0), double %149, double %151)
  store i32 100, i32* %19, align 4
  %153 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0))
  store i64 0, i64* %20, align 8
  %154 = load i64, i64* %10, align 8
  %155 = icmp ult i64 100, %154
  br i1 %155, label %156, label %157

; <label>:156:                                    ; preds = %147
  br label %159

; <label>:157:                                    ; preds = %147
  %158 = load i64, i64* %10, align 8
  br label %159

; <label>:159:                                    ; preds = %157, %156
  %160 = phi i64 [ 100, %156 ], [ %158, %157 ]
  store i64 %160, i64* %21, align 8
  br label %161

; <label>:161:                                    ; preds = %252, %159
  %162 = load i64, i64* %20, align 8
  %163 = load i64, i64* %21, align 8
  %164 = icmp ult i64 %162, %163
  br i1 %164, label %165, label %255

; <label>:165:                                    ; preds = %161
  store i64 0, i64* %22, align 8
  %166 = load i64, i64* %6, align 8
  %167 = sub i64 %166, 1
  store i64 %167, i64* %23, align 8
  br label %168

; <label>:168:                                    ; preds = %187, %165
  %169 = load i64, i64* %6, align 8
  %170 = icmp ugt i64 %169, 1
  br i1 %170, label %171, label %175

; <label>:171:                                    ; preds = %168
  %172 = load i64, i64* %22, align 8
  %173 = load i64, i64* %23, align 8
  %174 = icmp ult i64 %172, %173
  br label %175

; <label>:175:                                    ; preds = %171, %168
  %176 = phi i1 [ false, %168 ], [ %174, %171 ]
  br i1 %176, label %177, label %190

; <label>:177:                                    ; preds = %175
  %178 = load i64, i64* %20, align 8
  %179 = load i64, i64* %22, align 8
  %180 = getelementptr inbounds i64, i64* %63, i64 %179
  %181 = load i64, i64* %180, align 8
  %182 = urem i64 %178, %181
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %186

; <label>:184:                                    ; preds = %177
  %185 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0))
  br label %186

; <label>:186:                                    ; preds = %184, %177
  br label %187

; <label>:187:                                    ; preds = %186
  %188 = load i64, i64* %22, align 8
  %189 = add i64 %188, 1
  store i64 %189, i64* %22, align 8
  br label %168

; <label>:190:                                    ; preds = %175
  %191 = load float*, float** %4, align 8
  %192 = load i64, i64* %20, align 8
  %193 = getelementptr inbounds float, float* %191, i64 %192
  %194 = load float, float* %193, align 4
  %195 = fpext float %194 to double
  %196 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), double %195)
  store i64 0, i64* %24, align 8
  %197 = load i64, i64* %6, align 8
  %198 = sub i64 %197, 1
  store i64 %198, i64* %25, align 8
  br label %199

; <label>:199:                                    ; preds = %220, %190
  %200 = load i64, i64* %6, align 8
  %201 = icmp ugt i64 %200, 1
  br i1 %201, label %202, label %206

; <label>:202:                                    ; preds = %199
  %203 = load i64, i64* %24, align 8
  %204 = load i64, i64* %25, align 8
  %205 = icmp ult i64 %203, %204
  br label %206

; <label>:206:                                    ; preds = %202, %199
  %207 = phi i1 [ false, %199 ], [ %205, %202 ]
  br i1 %207, label %208, label %223

; <label>:208:                                    ; preds = %206
  %209 = load i64, i64* %20, align 8
  %210 = add i64 %209, 1
  store i64 %210, i64* %26, align 8
  %211 = load i64, i64* %26, align 8
  %212 = load i64, i64* %24, align 8
  %213 = getelementptr inbounds i64, i64* %63, i64 %212
  %214 = load i64, i64* %213, align 8
  %215 = urem i64 %211, %214
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %219

; <label>:217:                                    ; preds = %208
  %218 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0))
  br label %219

; <label>:219:                                    ; preds = %217, %208
  br label %220

; <label>:220:                                    ; preds = %219
  %221 = load i64, i64* %24, align 8
  %222 = add i64 %221, 1
  store i64 %222, i64* %24, align 8
  br label %199

; <label>:223:                                    ; preds = %206
  %224 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0))
  store i64 0, i64* %27, align 8
  %225 = load i64, i64* %6, align 8
  %226 = sub i64 %225, 1
  store i64 %226, i64* %28, align 8
  br label %227

; <label>:227:                                    ; preds = %248, %223
  %228 = load i64, i64* %6, align 8
  %229 = icmp ugt i64 %228, 1
  br i1 %229, label %230, label %234

; <label>:230:                                    ; preds = %227
  %231 = load i64, i64* %27, align 8
  %232 = load i64, i64* %28, align 8
  %233 = icmp ult i64 %231, %232
  br label %234

; <label>:234:                                    ; preds = %230, %227
  %235 = phi i1 [ false, %227 ], [ %233, %230 ]
  br i1 %235, label %236, label %251

; <label>:236:                                    ; preds = %234
  %237 = load i64, i64* %20, align 8
  %238 = add i64 %237, 1
  store i64 %238, i64* %29, align 8
  %239 = load i64, i64* %29, align 8
  %240 = load i64, i64* %27, align 8
  %241 = getelementptr inbounds i64, i64* %63, i64 %240
  %242 = load i64, i64* %241, align 8
  %243 = urem i64 %239, %242
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %247

; <label>:245:                                    ; preds = %236
  %246 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i32 0, i32 0))
  br label %247

; <label>:247:                                    ; preds = %245, %236
  br label %248

; <label>:248:                                    ; preds = %247
  %249 = load i64, i64* %27, align 8
  %250 = add i64 %249, 1
  store i64 %250, i64* %27, align 8
  br label %227

; <label>:251:                                    ; preds = %234
  br label %252

; <label>:252:                                    ; preds = %251
  %253 = load i64, i64* %20, align 8
  %254 = add i64 %253, 1
  store i64 %254, i64* %20, align 8
  br label %161

; <label>:255:                                    ; preds = %161
  %256 = load i64, i64* %10, align 8
  %257 = icmp ugt i64 %256, 100
  br i1 %257, label %258, label %260

; <label>:258:                                    ; preds = %255
  %259 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0))
  br label %260

; <label>:260:                                    ; preds = %258, %255
  %261 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0))
  store i32 0, i32* %18, align 4
  br label %262

; <label>:262:                                    ; preds = %260, %145
  %263 = load i8*, i8** %11, align 8
  call void @llvm.stackrestore(i8* %263)
  %264 = load i32, i32* %18, align 4
  switch i32 %264, label %266 [
    i32 0, label %265
    i32 1, label %265
  ]

; <label>:265:                                    ; preds = %32, %262, %262
  ret void

; <label>:266:                                    ; preds = %262
  unreachable
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_123libjit_dump_tensor_implImEEvPT_Pmm(i64*, i64*, i64) #2 {
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  store i64* %0, i64** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64 %2, i64* %6, align 8
  %30 = load i64, i64* %6, align 8
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %39, label %32

; <label>:32:                                     ; preds = %3
  %33 = load i64*, i64** %4, align 8
  %34 = getelementptr inbounds i64, i64* %33, i64 0
  %35 = load i64, i64* %34, align 8
  %36 = uitofp i64 %35 to float
  %37 = fpext float %36 to double
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i32 0, i32 0), double %37)
  br label %269

; <label>:39:                                     ; preds = %3
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0))
  store i64 0, i64* %7, align 8
  br label %41

; <label>:41:                                     ; preds = %51, %39
  %42 = load i64, i64* %7, align 8
  %43 = load i64, i64* %6, align 8
  %44 = icmp ult i64 %42, %43
  br i1 %44, label %45, label %54

; <label>:45:                                     ; preds = %41
  %46 = load i64*, i64** %5, align 8
  %47 = load i64, i64* %7, align 8
  %48 = getelementptr inbounds i64, i64* %46, i64 %47
  %49 = load i64, i64* %48, align 8
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i64 %49)
  br label %51

; <label>:51:                                     ; preds = %45
  %52 = load i64, i64* %7, align 8
  %53 = add i64 %52, 1
  store i64 %53, i64* %7, align 8
  br label %41

; <label>:54:                                     ; preds = %41
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0))
  %56 = load i64*, i64** %4, align 8
  %57 = getelementptr inbounds i64, i64* %56, i64 0
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %8, align 8
  %59 = load i64*, i64** %4, align 8
  %60 = getelementptr inbounds i64, i64* %59, i64 0
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %9, align 8
  store i64 1, i64* %10, align 8
  %62 = load i64, i64* %6, align 8
  %63 = call i8* @llvm.stacksave()
  store i8* %63, i8** %11, align 8
  %64 = alloca i64, i64 %62, align 16
  store i64 %62, i64* %12, align 8
  store i64 0, i64* %13, align 8
  br label %65

; <label>:65:                                     ; preds = %76, %54
  %66 = load i64, i64* %13, align 8
  %67 = load i64, i64* %6, align 8
  %68 = icmp ult i64 %66, %67
  br i1 %68, label %69, label %79

; <label>:69:                                     ; preds = %65
  %70 = load i64*, i64** %5, align 8
  %71 = load i64, i64* %13, align 8
  %72 = getelementptr inbounds i64, i64* %70, i64 %71
  %73 = load i64, i64* %72, align 8
  %74 = load i64, i64* %10, align 8
  %75 = mul i64 %74, %73
  store i64 %75, i64* %10, align 8
  br label %76

; <label>:76:                                     ; preds = %69
  %77 = load i64, i64* %13, align 8
  %78 = add i64 %77, 1
  store i64 %78, i64* %13, align 8
  br label %65

; <label>:79:                                     ; preds = %65
  %80 = load i64, i64* %6, align 8
  %81 = sub i64 %80, 1
  store i64 %81, i64* %14, align 8
  store i64 1, i64* %15, align 8
  br label %82

; <label>:82:                                     ; preds = %95, %79
  %83 = load i64, i64* %14, align 8
  %84 = icmp sge i64 %83, 0
  br i1 %84, label %85, label %98

; <label>:85:                                     ; preds = %82
  %86 = load i64, i64* %15, align 8
  %87 = load i64, i64* %14, align 8
  %88 = getelementptr inbounds i64, i64* %64, i64 %87
  store i64 %86, i64* %88, align 8
  %89 = load i64*, i64** %5, align 8
  %90 = load i64, i64* %14, align 8
  %91 = getelementptr inbounds i64, i64* %89, i64 %90
  %92 = load i64, i64* %91, align 8
  %93 = load i64, i64* %15, align 8
  %94 = mul i64 %93, %92
  store i64 %94, i64* %15, align 8
  br label %95

; <label>:95:                                     ; preds = %85
  %96 = load i64, i64* %14, align 8
  %97 = add nsw i64 %96, -1
  store i64 %97, i64* %14, align 8
  br label %82

; <label>:98:                                     ; preds = %82
  store i64 0, i64* %16, align 8
  %99 = load i64, i64* %10, align 8
  store i64 %99, i64* %17, align 8
  br label %100

; <label>:100:                                    ; preds = %135, %98
  %101 = load i64, i64* %16, align 8
  %102 = load i64, i64* %17, align 8
  %103 = icmp ult i64 %101, %102
  br i1 %103, label %104, label %138

; <label>:104:                                    ; preds = %100
  %105 = load i64, i64* %8, align 8
  %106 = load i64*, i64** %4, align 8
  %107 = load i64, i64* %16, align 8
  %108 = getelementptr inbounds i64, i64* %106, i64 %107
  %109 = load i64, i64* %108, align 8
  %110 = icmp ugt i64 %105, %109
  br i1 %110, label %111, label %113

; <label>:111:                                    ; preds = %104
  %112 = load i64, i64* %8, align 8
  br label %118

; <label>:113:                                    ; preds = %104
  %114 = load i64*, i64** %4, align 8
  %115 = load i64, i64* %16, align 8
  %116 = getelementptr inbounds i64, i64* %114, i64 %115
  %117 = load i64, i64* %116, align 8
  br label %118

; <label>:118:                                    ; preds = %113, %111
  %119 = phi i64 [ %112, %111 ], [ %117, %113 ]
  store i64 %119, i64* %8, align 8
  %120 = load i64, i64* %9, align 8
  %121 = load i64*, i64** %4, align 8
  %122 = load i64, i64* %16, align 8
  %123 = getelementptr inbounds i64, i64* %121, i64 %122
  %124 = load i64, i64* %123, align 8
  %125 = icmp ult i64 %120, %124
  br i1 %125, label %126, label %128

; <label>:126:                                    ; preds = %118
  %127 = load i64, i64* %9, align 8
  br label %133

; <label>:128:                                    ; preds = %118
  %129 = load i64*, i64** %4, align 8
  %130 = load i64, i64* %16, align 8
  %131 = getelementptr inbounds i64, i64* %129, i64 %130
  %132 = load i64, i64* %131, align 8
  br label %133

; <label>:133:                                    ; preds = %128, %126
  %134 = phi i64 [ %127, %126 ], [ %132, %128 ]
  store i64 %134, i64* %9, align 8
  br label %135

; <label>:135:                                    ; preds = %133
  %136 = load i64, i64* %16, align 8
  %137 = add i64 %136, 1
  store i64 %137, i64* %16, align 8
  br label %100

; <label>:138:                                    ; preds = %100
  %139 = load i64, i64* %9, align 8
  %140 = uitofp i64 %139 to double
  %141 = fcmp reassoc nsz arcp oeq double %140, 0.000000e+00
  br i1 %141, label %142, label %148

; <label>:142:                                    ; preds = %138
  %143 = load i64, i64* %8, align 8
  %144 = uitofp i64 %143 to double
  %145 = fcmp reassoc nsz arcp oeq double %144, 0.000000e+00
  br i1 %145, label %146, label %148

; <label>:146:                                    ; preds = %142
  %147 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i32 0, i32 0))
  store i32 1, i32* %18, align 4
  br label %266

; <label>:148:                                    ; preds = %142, %138
  %149 = load i64, i64* %8, align 8
  %150 = uitofp i64 %149 to float
  %151 = fpext float %150 to double
  %152 = load i64, i64* %9, align 8
  %153 = uitofp i64 %152 to float
  %154 = fpext float %153 to double
  %155 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i32 0, i32 0), double %151, double %154)
  store i32 100, i32* %19, align 4
  %156 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0))
  store i64 0, i64* %20, align 8
  %157 = load i64, i64* %10, align 8
  %158 = icmp ult i64 100, %157
  br i1 %158, label %159, label %160

; <label>:159:                                    ; preds = %148
  br label %162

; <label>:160:                                    ; preds = %148
  %161 = load i64, i64* %10, align 8
  br label %162

; <label>:162:                                    ; preds = %160, %159
  %163 = phi i64 [ 100, %159 ], [ %161, %160 ]
  store i64 %163, i64* %21, align 8
  br label %164

; <label>:164:                                    ; preds = %256, %162
  %165 = load i64, i64* %20, align 8
  %166 = load i64, i64* %21, align 8
  %167 = icmp ult i64 %165, %166
  br i1 %167, label %168, label %259

; <label>:168:                                    ; preds = %164
  store i64 0, i64* %22, align 8
  %169 = load i64, i64* %6, align 8
  %170 = sub i64 %169, 1
  store i64 %170, i64* %23, align 8
  br label %171

; <label>:171:                                    ; preds = %190, %168
  %172 = load i64, i64* %6, align 8
  %173 = icmp ugt i64 %172, 1
  br i1 %173, label %174, label %178

; <label>:174:                                    ; preds = %171
  %175 = load i64, i64* %22, align 8
  %176 = load i64, i64* %23, align 8
  %177 = icmp ult i64 %175, %176
  br label %178

; <label>:178:                                    ; preds = %174, %171
  %179 = phi i1 [ false, %171 ], [ %177, %174 ]
  br i1 %179, label %180, label %193

; <label>:180:                                    ; preds = %178
  %181 = load i64, i64* %20, align 8
  %182 = load i64, i64* %22, align 8
  %183 = getelementptr inbounds i64, i64* %64, i64 %182
  %184 = load i64, i64* %183, align 8
  %185 = urem i64 %181, %184
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %189

; <label>:187:                                    ; preds = %180
  %188 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0))
  br label %189

; <label>:189:                                    ; preds = %187, %180
  br label %190

; <label>:190:                                    ; preds = %189
  %191 = load i64, i64* %22, align 8
  %192 = add i64 %191, 1
  store i64 %192, i64* %22, align 8
  br label %171

; <label>:193:                                    ; preds = %178
  %194 = load i64*, i64** %4, align 8
  %195 = load i64, i64* %20, align 8
  %196 = getelementptr inbounds i64, i64* %194, i64 %195
  %197 = load i64, i64* %196, align 8
  %198 = uitofp i64 %197 to float
  %199 = fpext float %198 to double
  %200 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), double %199)
  store i64 0, i64* %24, align 8
  %201 = load i64, i64* %6, align 8
  %202 = sub i64 %201, 1
  store i64 %202, i64* %25, align 8
  br label %203

; <label>:203:                                    ; preds = %224, %193
  %204 = load i64, i64* %6, align 8
  %205 = icmp ugt i64 %204, 1
  br i1 %205, label %206, label %210

; <label>:206:                                    ; preds = %203
  %207 = load i64, i64* %24, align 8
  %208 = load i64, i64* %25, align 8
  %209 = icmp ult i64 %207, %208
  br label %210

; <label>:210:                                    ; preds = %206, %203
  %211 = phi i1 [ false, %203 ], [ %209, %206 ]
  br i1 %211, label %212, label %227

; <label>:212:                                    ; preds = %210
  %213 = load i64, i64* %20, align 8
  %214 = add i64 %213, 1
  store i64 %214, i64* %26, align 8
  %215 = load i64, i64* %26, align 8
  %216 = load i64, i64* %24, align 8
  %217 = getelementptr inbounds i64, i64* %64, i64 %216
  %218 = load i64, i64* %217, align 8
  %219 = urem i64 %215, %218
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %221, label %223

; <label>:221:                                    ; preds = %212
  %222 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0))
  br label %223

; <label>:223:                                    ; preds = %221, %212
  br label %224

; <label>:224:                                    ; preds = %223
  %225 = load i64, i64* %24, align 8
  %226 = add i64 %225, 1
  store i64 %226, i64* %24, align 8
  br label %203

; <label>:227:                                    ; preds = %210
  %228 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0))
  store i64 0, i64* %27, align 8
  %229 = load i64, i64* %6, align 8
  %230 = sub i64 %229, 1
  store i64 %230, i64* %28, align 8
  br label %231

; <label>:231:                                    ; preds = %252, %227
  %232 = load i64, i64* %6, align 8
  %233 = icmp ugt i64 %232, 1
  br i1 %233, label %234, label %238

; <label>:234:                                    ; preds = %231
  %235 = load i64, i64* %27, align 8
  %236 = load i64, i64* %28, align 8
  %237 = icmp ult i64 %235, %236
  br label %238

; <label>:238:                                    ; preds = %234, %231
  %239 = phi i1 [ false, %231 ], [ %237, %234 ]
  br i1 %239, label %240, label %255

; <label>:240:                                    ; preds = %238
  %241 = load i64, i64* %20, align 8
  %242 = add i64 %241, 1
  store i64 %242, i64* %29, align 8
  %243 = load i64, i64* %29, align 8
  %244 = load i64, i64* %27, align 8
  %245 = getelementptr inbounds i64, i64* %64, i64 %244
  %246 = load i64, i64* %245, align 8
  %247 = urem i64 %243, %246
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %249, label %251

; <label>:249:                                    ; preds = %240
  %250 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i32 0, i32 0))
  br label %251

; <label>:251:                                    ; preds = %249, %240
  br label %252

; <label>:252:                                    ; preds = %251
  %253 = load i64, i64* %27, align 8
  %254 = add i64 %253, 1
  store i64 %254, i64* %27, align 8
  br label %231

; <label>:255:                                    ; preds = %238
  br label %256

; <label>:256:                                    ; preds = %255
  %257 = load i64, i64* %20, align 8
  %258 = add i64 %257, 1
  store i64 %258, i64* %20, align 8
  br label %164

; <label>:259:                                    ; preds = %164
  %260 = load i64, i64* %10, align 8
  %261 = icmp ugt i64 %260, 100
  br i1 %261, label %262, label %264

; <label>:262:                                    ; preds = %259
  %263 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0))
  br label %264

; <label>:264:                                    ; preds = %262, %259
  %265 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0))
  store i32 0, i32* %18, align 4
  br label %266

; <label>:266:                                    ; preds = %264, %146
  %267 = load i8*, i8** %11, align 8
  call void @llvm.stackrestore(i8* %267)
  %268 = load i32, i32* %18, align 4
  switch i32 %268, label %270 [
    i32 0, label %269
    i32 1, label %269
  ]

; <label>:269:                                    ; preds = %32, %266, %266
  ret void

; <label>:270:                                    ; preds = %266
  unreachable
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_123libjit_dump_tensor_implIaEEvPT_Pmm(i8*, i64*, i64) #2 {
  %4 = alloca i8*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64 %2, i64* %6, align 8
  %30 = load i64, i64* %6, align 8
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %39, label %32

; <label>:32:                                     ; preds = %3
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 0
  %35 = load i8, i8* %34, align 1
  %36 = sitofp i8 %35 to float
  %37 = fpext float %36 to double
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i32 0, i32 0), double %37)
  br label %275

; <label>:39:                                     ; preds = %3
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0))
  store i64 0, i64* %7, align 8
  br label %41

; <label>:41:                                     ; preds = %51, %39
  %42 = load i64, i64* %7, align 8
  %43 = load i64, i64* %6, align 8
  %44 = icmp ult i64 %42, %43
  br i1 %44, label %45, label %54

; <label>:45:                                     ; preds = %41
  %46 = load i64*, i64** %5, align 8
  %47 = load i64, i64* %7, align 8
  %48 = getelementptr inbounds i64, i64* %46, i64 %47
  %49 = load i64, i64* %48, align 8
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i64 %49)
  br label %51

; <label>:51:                                     ; preds = %45
  %52 = load i64, i64* %7, align 8
  %53 = add i64 %52, 1
  store i64 %53, i64* %7, align 8
  br label %41

; <label>:54:                                     ; preds = %41
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0))
  %56 = load i8*, i8** %4, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 0
  %58 = load i8, i8* %57, align 1
  store i8 %58, i8* %8, align 1
  %59 = load i8*, i8** %4, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 0
  %61 = load i8, i8* %60, align 1
  store i8 %61, i8* %9, align 1
  store i64 1, i64* %10, align 8
  %62 = load i64, i64* %6, align 8
  %63 = call i8* @llvm.stacksave()
  store i8* %63, i8** %11, align 8
  %64 = alloca i64, i64 %62, align 16
  store i64 %62, i64* %12, align 8
  store i64 0, i64* %13, align 8
  br label %65

; <label>:65:                                     ; preds = %76, %54
  %66 = load i64, i64* %13, align 8
  %67 = load i64, i64* %6, align 8
  %68 = icmp ult i64 %66, %67
  br i1 %68, label %69, label %79

; <label>:69:                                     ; preds = %65
  %70 = load i64*, i64** %5, align 8
  %71 = load i64, i64* %13, align 8
  %72 = getelementptr inbounds i64, i64* %70, i64 %71
  %73 = load i64, i64* %72, align 8
  %74 = load i64, i64* %10, align 8
  %75 = mul i64 %74, %73
  store i64 %75, i64* %10, align 8
  br label %76

; <label>:76:                                     ; preds = %69
  %77 = load i64, i64* %13, align 8
  %78 = add i64 %77, 1
  store i64 %78, i64* %13, align 8
  br label %65

; <label>:79:                                     ; preds = %65
  %80 = load i64, i64* %6, align 8
  %81 = sub i64 %80, 1
  store i64 %81, i64* %14, align 8
  store i64 1, i64* %15, align 8
  br label %82

; <label>:82:                                     ; preds = %95, %79
  %83 = load i64, i64* %14, align 8
  %84 = icmp sge i64 %83, 0
  br i1 %84, label %85, label %98

; <label>:85:                                     ; preds = %82
  %86 = load i64, i64* %15, align 8
  %87 = load i64, i64* %14, align 8
  %88 = getelementptr inbounds i64, i64* %64, i64 %87
  store i64 %86, i64* %88, align 8
  %89 = load i64*, i64** %5, align 8
  %90 = load i64, i64* %14, align 8
  %91 = getelementptr inbounds i64, i64* %89, i64 %90
  %92 = load i64, i64* %91, align 8
  %93 = load i64, i64* %15, align 8
  %94 = mul i64 %93, %92
  store i64 %94, i64* %15, align 8
  br label %95

; <label>:95:                                     ; preds = %85
  %96 = load i64, i64* %14, align 8
  %97 = add nsw i64 %96, -1
  store i64 %97, i64* %14, align 8
  br label %82

; <label>:98:                                     ; preds = %82
  store i64 0, i64* %16, align 8
  %99 = load i64, i64* %10, align 8
  store i64 %99, i64* %17, align 8
  br label %100

; <label>:100:                                    ; preds = %139, %98
  %101 = load i64, i64* %16, align 8
  %102 = load i64, i64* %17, align 8
  %103 = icmp ult i64 %101, %102
  br i1 %103, label %104, label %142

; <label>:104:                                    ; preds = %100
  %105 = load i8, i8* %8, align 1
  %106 = sext i8 %105 to i32
  %107 = load i8*, i8** %4, align 8
  %108 = load i64, i64* %16, align 8
  %109 = getelementptr inbounds i8, i8* %107, i64 %108
  %110 = load i8, i8* %109, align 1
  %111 = sext i8 %110 to i32
  %112 = icmp sgt i32 %106, %111
  br i1 %112, label %113, label %115

; <label>:113:                                    ; preds = %104
  %114 = load i8, i8* %8, align 1
  br label %120

; <label>:115:                                    ; preds = %104
  %116 = load i8*, i8** %4, align 8
  %117 = load i64, i64* %16, align 8
  %118 = getelementptr inbounds i8, i8* %116, i64 %117
  %119 = load i8, i8* %118, align 1
  br label %120

; <label>:120:                                    ; preds = %115, %113
  %121 = phi i8 [ %114, %113 ], [ %119, %115 ]
  store i8 %121, i8* %8, align 1
  %122 = load i8, i8* %9, align 1
  %123 = sext i8 %122 to i32
  %124 = load i8*, i8** %4, align 8
  %125 = load i64, i64* %16, align 8
  %126 = getelementptr inbounds i8, i8* %124, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = sext i8 %127 to i32
  %129 = icmp slt i32 %123, %128
  br i1 %129, label %130, label %132

; <label>:130:                                    ; preds = %120
  %131 = load i8, i8* %9, align 1
  br label %137

; <label>:132:                                    ; preds = %120
  %133 = load i8*, i8** %4, align 8
  %134 = load i64, i64* %16, align 8
  %135 = getelementptr inbounds i8, i8* %133, i64 %134
  %136 = load i8, i8* %135, align 1
  br label %137

; <label>:137:                                    ; preds = %132, %130
  %138 = phi i8 [ %131, %130 ], [ %136, %132 ]
  store i8 %138, i8* %9, align 1
  br label %139

; <label>:139:                                    ; preds = %137
  %140 = load i64, i64* %16, align 8
  %141 = add i64 %140, 1
  store i64 %141, i64* %16, align 8
  br label %100

; <label>:142:                                    ; preds = %100
  %143 = load i8, i8* %9, align 1
  %144 = sext i8 %143 to i32
  %145 = sitofp i32 %144 to double
  %146 = fcmp reassoc nsz arcp oeq double %145, 0.000000e+00
  br i1 %146, label %147, label %154

; <label>:147:                                    ; preds = %142
  %148 = load i8, i8* %8, align 1
  %149 = sext i8 %148 to i32
  %150 = sitofp i32 %149 to double
  %151 = fcmp reassoc nsz arcp oeq double %150, 0.000000e+00
  br i1 %151, label %152, label %154

; <label>:152:                                    ; preds = %147
  %153 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i32 0, i32 0))
  store i32 1, i32* %18, align 4
  br label %272

; <label>:154:                                    ; preds = %147, %142
  %155 = load i8, i8* %8, align 1
  %156 = sitofp i8 %155 to float
  %157 = fpext float %156 to double
  %158 = load i8, i8* %9, align 1
  %159 = sitofp i8 %158 to float
  %160 = fpext float %159 to double
  %161 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i32 0, i32 0), double %157, double %160)
  store i32 100, i32* %19, align 4
  %162 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0))
  store i64 0, i64* %20, align 8
  %163 = load i64, i64* %10, align 8
  %164 = icmp ult i64 100, %163
  br i1 %164, label %165, label %166

; <label>:165:                                    ; preds = %154
  br label %168

; <label>:166:                                    ; preds = %154
  %167 = load i64, i64* %10, align 8
  br label %168

; <label>:168:                                    ; preds = %166, %165
  %169 = phi i64 [ 100, %165 ], [ %167, %166 ]
  store i64 %169, i64* %21, align 8
  br label %170

; <label>:170:                                    ; preds = %262, %168
  %171 = load i64, i64* %20, align 8
  %172 = load i64, i64* %21, align 8
  %173 = icmp ult i64 %171, %172
  br i1 %173, label %174, label %265

; <label>:174:                                    ; preds = %170
  store i64 0, i64* %22, align 8
  %175 = load i64, i64* %6, align 8
  %176 = sub i64 %175, 1
  store i64 %176, i64* %23, align 8
  br label %177

; <label>:177:                                    ; preds = %196, %174
  %178 = load i64, i64* %6, align 8
  %179 = icmp ugt i64 %178, 1
  br i1 %179, label %180, label %184

; <label>:180:                                    ; preds = %177
  %181 = load i64, i64* %22, align 8
  %182 = load i64, i64* %23, align 8
  %183 = icmp ult i64 %181, %182
  br label %184

; <label>:184:                                    ; preds = %180, %177
  %185 = phi i1 [ false, %177 ], [ %183, %180 ]
  br i1 %185, label %186, label %199

; <label>:186:                                    ; preds = %184
  %187 = load i64, i64* %20, align 8
  %188 = load i64, i64* %22, align 8
  %189 = getelementptr inbounds i64, i64* %64, i64 %188
  %190 = load i64, i64* %189, align 8
  %191 = urem i64 %187, %190
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %195

; <label>:193:                                    ; preds = %186
  %194 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0))
  br label %195

; <label>:195:                                    ; preds = %193, %186
  br label %196

; <label>:196:                                    ; preds = %195
  %197 = load i64, i64* %22, align 8
  %198 = add i64 %197, 1
  store i64 %198, i64* %22, align 8
  br label %177

; <label>:199:                                    ; preds = %184
  %200 = load i8*, i8** %4, align 8
  %201 = load i64, i64* %20, align 8
  %202 = getelementptr inbounds i8, i8* %200, i64 %201
  %203 = load i8, i8* %202, align 1
  %204 = sitofp i8 %203 to float
  %205 = fpext float %204 to double
  %206 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), double %205)
  store i64 0, i64* %24, align 8
  %207 = load i64, i64* %6, align 8
  %208 = sub i64 %207, 1
  store i64 %208, i64* %25, align 8
  br label %209

; <label>:209:                                    ; preds = %230, %199
  %210 = load i64, i64* %6, align 8
  %211 = icmp ugt i64 %210, 1
  br i1 %211, label %212, label %216

; <label>:212:                                    ; preds = %209
  %213 = load i64, i64* %24, align 8
  %214 = load i64, i64* %25, align 8
  %215 = icmp ult i64 %213, %214
  br label %216

; <label>:216:                                    ; preds = %212, %209
  %217 = phi i1 [ false, %209 ], [ %215, %212 ]
  br i1 %217, label %218, label %233

; <label>:218:                                    ; preds = %216
  %219 = load i64, i64* %20, align 8
  %220 = add i64 %219, 1
  store i64 %220, i64* %26, align 8
  %221 = load i64, i64* %26, align 8
  %222 = load i64, i64* %24, align 8
  %223 = getelementptr inbounds i64, i64* %64, i64 %222
  %224 = load i64, i64* %223, align 8
  %225 = urem i64 %221, %224
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %227, label %229

; <label>:227:                                    ; preds = %218
  %228 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0))
  br label %229

; <label>:229:                                    ; preds = %227, %218
  br label %230

; <label>:230:                                    ; preds = %229
  %231 = load i64, i64* %24, align 8
  %232 = add i64 %231, 1
  store i64 %232, i64* %24, align 8
  br label %209

; <label>:233:                                    ; preds = %216
  %234 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0))
  store i64 0, i64* %27, align 8
  %235 = load i64, i64* %6, align 8
  %236 = sub i64 %235, 1
  store i64 %236, i64* %28, align 8
  br label %237

; <label>:237:                                    ; preds = %258, %233
  %238 = load i64, i64* %6, align 8
  %239 = icmp ugt i64 %238, 1
  br i1 %239, label %240, label %244

; <label>:240:                                    ; preds = %237
  %241 = load i64, i64* %27, align 8
  %242 = load i64, i64* %28, align 8
  %243 = icmp ult i64 %241, %242
  br label %244

; <label>:244:                                    ; preds = %240, %237
  %245 = phi i1 [ false, %237 ], [ %243, %240 ]
  br i1 %245, label %246, label %261

; <label>:246:                                    ; preds = %244
  %247 = load i64, i64* %20, align 8
  %248 = add i64 %247, 1
  store i64 %248, i64* %29, align 8
  %249 = load i64, i64* %29, align 8
  %250 = load i64, i64* %27, align 8
  %251 = getelementptr inbounds i64, i64* %64, i64 %250
  %252 = load i64, i64* %251, align 8
  %253 = urem i64 %249, %252
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %257

; <label>:255:                                    ; preds = %246
  %256 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i32 0, i32 0))
  br label %257

; <label>:257:                                    ; preds = %255, %246
  br label %258

; <label>:258:                                    ; preds = %257
  %259 = load i64, i64* %27, align 8
  %260 = add i64 %259, 1
  store i64 %260, i64* %27, align 8
  br label %237

; <label>:261:                                    ; preds = %244
  br label %262

; <label>:262:                                    ; preds = %261
  %263 = load i64, i64* %20, align 8
  %264 = add i64 %263, 1
  store i64 %264, i64* %20, align 8
  br label %170

; <label>:265:                                    ; preds = %170
  %266 = load i64, i64* %10, align 8
  %267 = icmp ugt i64 %266, 100
  br i1 %267, label %268, label %270

; <label>:268:                                    ; preds = %265
  %269 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0))
  br label %270

; <label>:270:                                    ; preds = %268, %265
  %271 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0))
  store i32 0, i32* %18, align 4
  br label %272

; <label>:272:                                    ; preds = %270, %152
  %273 = load i8*, i8** %11, align 8
  call void @llvm.stackrestore(i8* %273)
  %274 = load i32, i32* %18, align 4
  switch i32 %274, label %276 [
    i32 0, label %275
    i32 1, label %275
  ]

; <label>:275:                                    ; preds = %32, %272, %272
  ret void

; <label>:276:                                    ; preds = %272
  unreachable
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_123libjit_dump_tensor_implIiEEvPT_Pmm(i32*, i64*, i64) #2 {
  %4 = alloca i32*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  store i32* %0, i32** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64 %2, i64* %6, align 8
  %30 = load i64, i64* %6, align 8
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %39, label %32

; <label>:32:                                     ; preds = %3
  %33 = load i32*, i32** %4, align 8
  %34 = getelementptr inbounds i32, i32* %33, i64 0
  %35 = load i32, i32* %34, align 4
  %36 = sitofp i32 %35 to float
  %37 = fpext float %36 to double
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i32 0, i32 0), double %37)
  br label %269

; <label>:39:                                     ; preds = %3
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0))
  store i64 0, i64* %7, align 8
  br label %41

; <label>:41:                                     ; preds = %51, %39
  %42 = load i64, i64* %7, align 8
  %43 = load i64, i64* %6, align 8
  %44 = icmp ult i64 %42, %43
  br i1 %44, label %45, label %54

; <label>:45:                                     ; preds = %41
  %46 = load i64*, i64** %5, align 8
  %47 = load i64, i64* %7, align 8
  %48 = getelementptr inbounds i64, i64* %46, i64 %47
  %49 = load i64, i64* %48, align 8
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i64 %49)
  br label %51

; <label>:51:                                     ; preds = %45
  %52 = load i64, i64* %7, align 8
  %53 = add i64 %52, 1
  store i64 %53, i64* %7, align 8
  br label %41

; <label>:54:                                     ; preds = %41
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0))
  %56 = load i32*, i32** %4, align 8
  %57 = getelementptr inbounds i32, i32* %56, i64 0
  %58 = load i32, i32* %57, align 4
  store i32 %58, i32* %8, align 4
  %59 = load i32*, i32** %4, align 8
  %60 = getelementptr inbounds i32, i32* %59, i64 0
  %61 = load i32, i32* %60, align 4
  store i32 %61, i32* %9, align 4
  store i64 1, i64* %10, align 8
  %62 = load i64, i64* %6, align 8
  %63 = call i8* @llvm.stacksave()
  store i8* %63, i8** %11, align 8
  %64 = alloca i64, i64 %62, align 16
  store i64 %62, i64* %12, align 8
  store i64 0, i64* %13, align 8
  br label %65

; <label>:65:                                     ; preds = %76, %54
  %66 = load i64, i64* %13, align 8
  %67 = load i64, i64* %6, align 8
  %68 = icmp ult i64 %66, %67
  br i1 %68, label %69, label %79

; <label>:69:                                     ; preds = %65
  %70 = load i64*, i64** %5, align 8
  %71 = load i64, i64* %13, align 8
  %72 = getelementptr inbounds i64, i64* %70, i64 %71
  %73 = load i64, i64* %72, align 8
  %74 = load i64, i64* %10, align 8
  %75 = mul i64 %74, %73
  store i64 %75, i64* %10, align 8
  br label %76

; <label>:76:                                     ; preds = %69
  %77 = load i64, i64* %13, align 8
  %78 = add i64 %77, 1
  store i64 %78, i64* %13, align 8
  br label %65

; <label>:79:                                     ; preds = %65
  %80 = load i64, i64* %6, align 8
  %81 = sub i64 %80, 1
  store i64 %81, i64* %14, align 8
  store i64 1, i64* %15, align 8
  br label %82

; <label>:82:                                     ; preds = %95, %79
  %83 = load i64, i64* %14, align 8
  %84 = icmp sge i64 %83, 0
  br i1 %84, label %85, label %98

; <label>:85:                                     ; preds = %82
  %86 = load i64, i64* %15, align 8
  %87 = load i64, i64* %14, align 8
  %88 = getelementptr inbounds i64, i64* %64, i64 %87
  store i64 %86, i64* %88, align 8
  %89 = load i64*, i64** %5, align 8
  %90 = load i64, i64* %14, align 8
  %91 = getelementptr inbounds i64, i64* %89, i64 %90
  %92 = load i64, i64* %91, align 8
  %93 = load i64, i64* %15, align 8
  %94 = mul i64 %93, %92
  store i64 %94, i64* %15, align 8
  br label %95

; <label>:95:                                     ; preds = %85
  %96 = load i64, i64* %14, align 8
  %97 = add nsw i64 %96, -1
  store i64 %97, i64* %14, align 8
  br label %82

; <label>:98:                                     ; preds = %82
  store i64 0, i64* %16, align 8
  %99 = load i64, i64* %10, align 8
  store i64 %99, i64* %17, align 8
  br label %100

; <label>:100:                                    ; preds = %135, %98
  %101 = load i64, i64* %16, align 8
  %102 = load i64, i64* %17, align 8
  %103 = icmp ult i64 %101, %102
  br i1 %103, label %104, label %138

; <label>:104:                                    ; preds = %100
  %105 = load i32, i32* %8, align 4
  %106 = load i32*, i32** %4, align 8
  %107 = load i64, i64* %16, align 8
  %108 = getelementptr inbounds i32, i32* %106, i64 %107
  %109 = load i32, i32* %108, align 4
  %110 = icmp sgt i32 %105, %109
  br i1 %110, label %111, label %113

; <label>:111:                                    ; preds = %104
  %112 = load i32, i32* %8, align 4
  br label %118

; <label>:113:                                    ; preds = %104
  %114 = load i32*, i32** %4, align 8
  %115 = load i64, i64* %16, align 8
  %116 = getelementptr inbounds i32, i32* %114, i64 %115
  %117 = load i32, i32* %116, align 4
  br label %118

; <label>:118:                                    ; preds = %113, %111
  %119 = phi i32 [ %112, %111 ], [ %117, %113 ]
  store i32 %119, i32* %8, align 4
  %120 = load i32, i32* %9, align 4
  %121 = load i32*, i32** %4, align 8
  %122 = load i64, i64* %16, align 8
  %123 = getelementptr inbounds i32, i32* %121, i64 %122
  %124 = load i32, i32* %123, align 4
  %125 = icmp slt i32 %120, %124
  br i1 %125, label %126, label %128

; <label>:126:                                    ; preds = %118
  %127 = load i32, i32* %9, align 4
  br label %133

; <label>:128:                                    ; preds = %118
  %129 = load i32*, i32** %4, align 8
  %130 = load i64, i64* %16, align 8
  %131 = getelementptr inbounds i32, i32* %129, i64 %130
  %132 = load i32, i32* %131, align 4
  br label %133

; <label>:133:                                    ; preds = %128, %126
  %134 = phi i32 [ %127, %126 ], [ %132, %128 ]
  store i32 %134, i32* %9, align 4
  br label %135

; <label>:135:                                    ; preds = %133
  %136 = load i64, i64* %16, align 8
  %137 = add i64 %136, 1
  store i64 %137, i64* %16, align 8
  br label %100

; <label>:138:                                    ; preds = %100
  %139 = load i32, i32* %9, align 4
  %140 = sitofp i32 %139 to double
  %141 = fcmp reassoc nsz arcp oeq double %140, 0.000000e+00
  br i1 %141, label %142, label %148

; <label>:142:                                    ; preds = %138
  %143 = load i32, i32* %8, align 4
  %144 = sitofp i32 %143 to double
  %145 = fcmp reassoc nsz arcp oeq double %144, 0.000000e+00
  br i1 %145, label %146, label %148

; <label>:146:                                    ; preds = %142
  %147 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i32 0, i32 0))
  store i32 1, i32* %18, align 4
  br label %266

; <label>:148:                                    ; preds = %142, %138
  %149 = load i32, i32* %8, align 4
  %150 = sitofp i32 %149 to float
  %151 = fpext float %150 to double
  %152 = load i32, i32* %9, align 4
  %153 = sitofp i32 %152 to float
  %154 = fpext float %153 to double
  %155 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i32 0, i32 0), double %151, double %154)
  store i32 100, i32* %19, align 4
  %156 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0))
  store i64 0, i64* %20, align 8
  %157 = load i64, i64* %10, align 8
  %158 = icmp ult i64 100, %157
  br i1 %158, label %159, label %160

; <label>:159:                                    ; preds = %148
  br label %162

; <label>:160:                                    ; preds = %148
  %161 = load i64, i64* %10, align 8
  br label %162

; <label>:162:                                    ; preds = %160, %159
  %163 = phi i64 [ 100, %159 ], [ %161, %160 ]
  store i64 %163, i64* %21, align 8
  br label %164

; <label>:164:                                    ; preds = %256, %162
  %165 = load i64, i64* %20, align 8
  %166 = load i64, i64* %21, align 8
  %167 = icmp ult i64 %165, %166
  br i1 %167, label %168, label %259

; <label>:168:                                    ; preds = %164
  store i64 0, i64* %22, align 8
  %169 = load i64, i64* %6, align 8
  %170 = sub i64 %169, 1
  store i64 %170, i64* %23, align 8
  br label %171

; <label>:171:                                    ; preds = %190, %168
  %172 = load i64, i64* %6, align 8
  %173 = icmp ugt i64 %172, 1
  br i1 %173, label %174, label %178

; <label>:174:                                    ; preds = %171
  %175 = load i64, i64* %22, align 8
  %176 = load i64, i64* %23, align 8
  %177 = icmp ult i64 %175, %176
  br label %178

; <label>:178:                                    ; preds = %174, %171
  %179 = phi i1 [ false, %171 ], [ %177, %174 ]
  br i1 %179, label %180, label %193

; <label>:180:                                    ; preds = %178
  %181 = load i64, i64* %20, align 8
  %182 = load i64, i64* %22, align 8
  %183 = getelementptr inbounds i64, i64* %64, i64 %182
  %184 = load i64, i64* %183, align 8
  %185 = urem i64 %181, %184
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %189

; <label>:187:                                    ; preds = %180
  %188 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0))
  br label %189

; <label>:189:                                    ; preds = %187, %180
  br label %190

; <label>:190:                                    ; preds = %189
  %191 = load i64, i64* %22, align 8
  %192 = add i64 %191, 1
  store i64 %192, i64* %22, align 8
  br label %171

; <label>:193:                                    ; preds = %178
  %194 = load i32*, i32** %4, align 8
  %195 = load i64, i64* %20, align 8
  %196 = getelementptr inbounds i32, i32* %194, i64 %195
  %197 = load i32, i32* %196, align 4
  %198 = sitofp i32 %197 to float
  %199 = fpext float %198 to double
  %200 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), double %199)
  store i64 0, i64* %24, align 8
  %201 = load i64, i64* %6, align 8
  %202 = sub i64 %201, 1
  store i64 %202, i64* %25, align 8
  br label %203

; <label>:203:                                    ; preds = %224, %193
  %204 = load i64, i64* %6, align 8
  %205 = icmp ugt i64 %204, 1
  br i1 %205, label %206, label %210

; <label>:206:                                    ; preds = %203
  %207 = load i64, i64* %24, align 8
  %208 = load i64, i64* %25, align 8
  %209 = icmp ult i64 %207, %208
  br label %210

; <label>:210:                                    ; preds = %206, %203
  %211 = phi i1 [ false, %203 ], [ %209, %206 ]
  br i1 %211, label %212, label %227

; <label>:212:                                    ; preds = %210
  %213 = load i64, i64* %20, align 8
  %214 = add i64 %213, 1
  store i64 %214, i64* %26, align 8
  %215 = load i64, i64* %26, align 8
  %216 = load i64, i64* %24, align 8
  %217 = getelementptr inbounds i64, i64* %64, i64 %216
  %218 = load i64, i64* %217, align 8
  %219 = urem i64 %215, %218
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %221, label %223

; <label>:221:                                    ; preds = %212
  %222 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0))
  br label %223

; <label>:223:                                    ; preds = %221, %212
  br label %224

; <label>:224:                                    ; preds = %223
  %225 = load i64, i64* %24, align 8
  %226 = add i64 %225, 1
  store i64 %226, i64* %24, align 8
  br label %203

; <label>:227:                                    ; preds = %210
  %228 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0))
  store i64 0, i64* %27, align 8
  %229 = load i64, i64* %6, align 8
  %230 = sub i64 %229, 1
  store i64 %230, i64* %28, align 8
  br label %231

; <label>:231:                                    ; preds = %252, %227
  %232 = load i64, i64* %6, align 8
  %233 = icmp ugt i64 %232, 1
  br i1 %233, label %234, label %238

; <label>:234:                                    ; preds = %231
  %235 = load i64, i64* %27, align 8
  %236 = load i64, i64* %28, align 8
  %237 = icmp ult i64 %235, %236
  br label %238

; <label>:238:                                    ; preds = %234, %231
  %239 = phi i1 [ false, %231 ], [ %237, %234 ]
  br i1 %239, label %240, label %255

; <label>:240:                                    ; preds = %238
  %241 = load i64, i64* %20, align 8
  %242 = add i64 %241, 1
  store i64 %242, i64* %29, align 8
  %243 = load i64, i64* %29, align 8
  %244 = load i64, i64* %27, align 8
  %245 = getelementptr inbounds i64, i64* %64, i64 %244
  %246 = load i64, i64* %245, align 8
  %247 = urem i64 %243, %246
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %249, label %251

; <label>:249:                                    ; preds = %240
  %250 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i32 0, i32 0))
  br label %251

; <label>:251:                                    ; preds = %249, %240
  br label %252

; <label>:252:                                    ; preds = %251
  %253 = load i64, i64* %27, align 8
  %254 = add i64 %253, 1
  store i64 %254, i64* %27, align 8
  br label %231

; <label>:255:                                    ; preds = %238
  br label %256

; <label>:256:                                    ; preds = %255
  %257 = load i64, i64* %20, align 8
  %258 = add i64 %257, 1
  store i64 %258, i64* %20, align 8
  br label %164

; <label>:259:                                    ; preds = %164
  %260 = load i64, i64* %10, align 8
  %261 = icmp ugt i64 %260, 100
  br i1 %261, label %262, label %264

; <label>:262:                                    ; preds = %259
  %263 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0))
  br label %264

; <label>:264:                                    ; preds = %262, %259
  %265 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0))
  store i32 0, i32* %18, align 4
  br label %266

; <label>:266:                                    ; preds = %264, %146
  %267 = load i8*, i8** %11, align 8
  call void @llvm.stackrestore(i8* %267)
  %268 = load i32, i32* %18, align 4
  switch i32 %268, label %270 [
    i32 0, label %269
    i32 1, label %269
  ]

; <label>:269:                                    ; preds = %32, %266, %266
  ret void

; <label>:270:                                    ; preds = %266
  unreachable
}

declare dso_local i32 @puts(i8*) #4

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #5

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #5

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_write_timestamp(i64*, i64) #2 {
  %3 = alloca i64*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca %"struct.std::chrono::duration", align 8
  %7 = alloca %"struct.std::chrono::duration", align 8
  %8 = alloca %"struct.std::chrono::time_point", align 8
  store i64* %0, i64** %3, align 8
  store i64 %1, i64* %4, align 8
  %9 = call i64 @_ZNSt6chrono3_V212steady_clock3nowEv() #5
  %10 = getelementptr inbounds %"struct.std::chrono::time_point", %"struct.std::chrono::time_point"* %8, i32 0, i32 0
  %11 = getelementptr inbounds %"struct.std::chrono::duration", %"struct.std::chrono::duration"* %10, i32 0, i32 0
  store i64 %9, i64* %11, align 8
  %12 = call i64 @_ZNKSt6chrono10time_pointINS_3_V212steady_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEE16time_since_epochEv(%"struct.std::chrono::time_point"* %8)
  %13 = getelementptr inbounds %"struct.std::chrono::duration", %"struct.std::chrono::duration"* %7, i32 0, i32 0
  store i64 %12, i64* %13, align 8
  %14 = call i64 @_ZNSt6chrono13duration_castINS_8durationIlSt5ratioILl1ELl1000000EEEElS2_ILl1ELl1000000000EEEENSt9enable_ifIXsr13__is_durationIT_EE5valueES7_E4typeERKNS1_IT0_T1_EE(%"struct.std::chrono::duration"* dereferenceable(8) %7)
  %15 = getelementptr inbounds %"struct.std::chrono::duration", %"struct.std::chrono::duration"* %6, i32 0, i32 0
  store i64 %14, i64* %15, align 8
  %16 = call i64 @_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000EEE5countEv(%"struct.std::chrono::duration"* %6)
  store i64 %16, i64* %5, align 8
  %17 = load i64*, i64** %3, align 8
  %18 = load i64, i64* %4, align 8
  %19 = getelementptr inbounds i64, i64* %17, i64 %18
  %20 = bitcast i64* %19 to i8*
  %21 = bitcast i64* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 8, i1 false)
  ret void
}

; Function Attrs: nounwind
declare dso_local i64 @_ZNSt6chrono3_V212steady_clock3nowEv() #6

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local i64 @_ZNKSt6chrono10time_pointINS_3_V212steady_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEE16time_since_epochEv(%"struct.std::chrono::time_point"*) #0 comdat align 2 {
  %2 = alloca %"struct.std::chrono::duration", align 8
  %3 = alloca %"struct.std::chrono::time_point"*, align 8
  store %"struct.std::chrono::time_point"* %0, %"struct.std::chrono::time_point"** %3, align 8
  %4 = load %"struct.std::chrono::time_point"*, %"struct.std::chrono::time_point"** %3, align 8
  %5 = getelementptr inbounds %"struct.std::chrono::time_point", %"struct.std::chrono::time_point"* %4, i32 0, i32 0
  %6 = bitcast %"struct.std::chrono::duration"* %2 to i8*
  %7 = bitcast %"struct.std::chrono::duration"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 8, i1 false)
  %8 = getelementptr inbounds %"struct.std::chrono::duration", %"struct.std::chrono::duration"* %2, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  ret i64 %9
}

; Function Attrs: noinline optnone uwtable
define linkonce_odr dso_local i64 @_ZNSt6chrono13duration_castINS_8durationIlSt5ratioILl1ELl1000000EEEElS2_ILl1ELl1000000000EEEENSt9enable_ifIXsr13__is_durationIT_EE5valueES7_E4typeERKNS1_IT0_T1_EE(%"struct.std::chrono::duration"* dereferenceable(8)) #2 comdat {
  %2 = alloca %"struct.std::chrono::duration", align 8
  %3 = alloca %"struct.std::chrono::duration"*, align 8
  store %"struct.std::chrono::duration"* %0, %"struct.std::chrono::duration"** %3, align 8
  %4 = load %"struct.std::chrono::duration"*, %"struct.std::chrono::duration"** %3, align 8
  %5 = call i64 @_ZNSt6chrono20__duration_cast_implINS_8durationIlSt5ratioILl1ELl1000000EEEES2_ILl1ELl1000EElLb1ELb0EE6__castIlS2_ILl1ELl1000000000EEEES4_RKNS1_IT_T0_EE(%"struct.std::chrono::duration"* dereferenceable(8) %4)
  %6 = getelementptr inbounds %"struct.std::chrono::duration", %"struct.std::chrono::duration"* %2, i32 0, i32 0
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"struct.std::chrono::duration", %"struct.std::chrono::duration"* %2, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  ret i64 %8
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local i64 @_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000EEE5countEv(%"struct.std::chrono::duration"*) #0 comdat align 2 {
  %2 = alloca %"struct.std::chrono::duration"*, align 8
  store %"struct.std::chrono::duration"* %0, %"struct.std::chrono::duration"** %2, align 8
  %3 = load %"struct.std::chrono::duration"*, %"struct.std::chrono::duration"** %2, align 8
  %4 = getelementptr inbounds %"struct.std::chrono::duration", %"struct.std::chrono::duration"* %3, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  ret i64 %5
}

; Function Attrs: noinline optnone uwtable
define linkonce_odr dso_local i64 @_ZNSt6chrono20__duration_cast_implINS_8durationIlSt5ratioILl1ELl1000000EEEES2_ILl1ELl1000EElLb1ELb0EE6__castIlS2_ILl1ELl1000000000EEEES4_RKNS1_IT_T0_EE(%"struct.std::chrono::duration"* dereferenceable(8)) #2 comdat align 2 {
  %2 = alloca %"struct.std::chrono::duration", align 8
  %3 = alloca %"struct.std::chrono::duration"*, align 8
  %4 = alloca i64, align 8
  store %"struct.std::chrono::duration"* %0, %"struct.std::chrono::duration"** %3, align 8
  %5 = load %"struct.std::chrono::duration"*, %"struct.std::chrono::duration"** %3, align 8
  %6 = call i64 @_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv(%"struct.std::chrono::duration"* %5)
  %7 = sdiv i64 %6, 1000
  store i64 %7, i64* %4, align 8
  call void @_ZNSt6chrono8durationIlSt5ratioILl1ELl1000000EEEC2IlvEERKT_(%"struct.std::chrono::duration"* %2, i64* dereferenceable(8) %4)
  %8 = getelementptr inbounds %"struct.std::chrono::duration", %"struct.std::chrono::duration"* %2, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  ret i64 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local i64 @_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv(%"struct.std::chrono::duration"*) #0 comdat align 2 {
  %2 = alloca %"struct.std::chrono::duration"*, align 8
  store %"struct.std::chrono::duration"* %0, %"struct.std::chrono::duration"** %2, align 8
  %3 = load %"struct.std::chrono::duration"*, %"struct.std::chrono::duration"** %2, align 8
  %4 = getelementptr inbounds %"struct.std::chrono::duration", %"struct.std::chrono::duration"* %3, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  ret i64 %5
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZNSt6chrono8durationIlSt5ratioILl1ELl1000000EEEC2IlvEERKT_(%"struct.std::chrono::duration"*, i64* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"struct.std::chrono::duration"*, align 8
  %4 = alloca i64*, align 8
  store %"struct.std::chrono::duration"* %0, %"struct.std::chrono::duration"** %3, align 8
  store i64* %1, i64** %4, align 8
  %5 = load %"struct.std::chrono::duration"*, %"struct.std::chrono::duration"** %3, align 8
  %6 = getelementptr inbounds %"struct.std::chrono::duration", %"struct.std::chrono::duration"* %5, i32 0, i32 0
  %7 = load i64*, i64** %4, align 8
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %6, align 8
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_convertTo_f_i32(float*, i32*, i64*, i64) #2 {
  %5 = alloca float*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  store float* %0, float** %5, align 8
  store i32* %1, i32** %6, align 8
  store i64* %2, i64** %7, align 8
  store i64 %3, i64* %8, align 8
  %9 = load float*, float** %5, align 8
  %10 = load i32*, i32** %6, align 8
  %11 = load i64*, i64** %7, align 8
  %12 = load i64, i64* %8, align 8
  call void @_ZN12_GLOBAL__N_134libjit_copy_kernel_with_conversionIfiEEvPT_PKT0_PKmm(float* %9, i32* %10, i64* %11, i64 %12)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_134libjit_copy_kernel_with_conversionIfiEEvPT_PKT0_PKmm(float*, i32*, i64*, i64) #0 {
  %5 = alloca float*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  store float* %0, float** %5, align 8
  store i32* %1, i32** %6, align 8
  store i64* %2, i64** %7, align 8
  store i64 %3, i64* %8, align 8
  store i64 1, i64* %9, align 8
  store i64 0, i64* %10, align 8
  br label %12

; <label>:12:                                     ; preds = %23, %4
  %13 = load i64, i64* %10, align 8
  %14 = load i64, i64* %8, align 8
  %15 = icmp ult i64 %13, %14
  br i1 %15, label %16, label %26

; <label>:16:                                     ; preds = %12
  %17 = load i64*, i64** %7, align 8
  %18 = load i64, i64* %10, align 8
  %19 = getelementptr inbounds i64, i64* %17, i64 %18
  %20 = load i64, i64* %19, align 8
  %21 = load i64, i64* %9, align 8
  %22 = mul i64 %21, %20
  store i64 %22, i64* %9, align 8
  br label %23

; <label>:23:                                     ; preds = %16
  %24 = load i64, i64* %10, align 8
  %25 = add i64 %24, 1
  store i64 %25, i64* %10, align 8
  br label %12

; <label>:26:                                     ; preds = %12
  store i64 0, i64* %11, align 8
  br label %27

; <label>:27:                                     ; preds = %40, %26
  %28 = load i64, i64* %11, align 8
  %29 = load i64, i64* %9, align 8
  %30 = icmp ult i64 %28, %29
  br i1 %30, label %31, label %43

; <label>:31:                                     ; preds = %27
  %32 = load i32*, i32** %6, align 8
  %33 = load i64, i64* %11, align 8
  %34 = getelementptr inbounds i32, i32* %32, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = sitofp i32 %35 to float
  %37 = load float*, float** %5, align 8
  %38 = load i64, i64* %11, align 8
  %39 = getelementptr inbounds float, float* %37, i64 %38
  store float %36, float* %39, align 4
  br label %40

; <label>:40:                                     ; preds = %31
  %41 = load i64, i64* %11, align 8
  %42 = add i64 %41, 1
  store i64 %42, i64* %11, align 8
  br label %27

; <label>:43:                                     ; preds = %27
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_convertTo_i32_u(i32*, i64*, i64*, i64) #2 {
  %5 = alloca i32*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  store i32* %0, i32** %5, align 8
  store i64* %1, i64** %6, align 8
  store i64* %2, i64** %7, align 8
  store i64 %3, i64* %8, align 8
  %9 = load i32*, i32** %5, align 8
  %10 = load i64*, i64** %6, align 8
  %11 = load i64*, i64** %7, align 8
  %12 = load i64, i64* %8, align 8
  call void @_ZN12_GLOBAL__N_134libjit_copy_kernel_with_conversionIilEEvPT_PKT0_PKmm(i32* %9, i64* %10, i64* %11, i64 %12)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_134libjit_copy_kernel_with_conversionIilEEvPT_PKT0_PKmm(i32*, i64*, i64*, i64) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  store i32* %0, i32** %5, align 8
  store i64* %1, i64** %6, align 8
  store i64* %2, i64** %7, align 8
  store i64 %3, i64* %8, align 8
  store i64 1, i64* %9, align 8
  store i64 0, i64* %10, align 8
  br label %12

; <label>:12:                                     ; preds = %23, %4
  %13 = load i64, i64* %10, align 8
  %14 = load i64, i64* %8, align 8
  %15 = icmp ult i64 %13, %14
  br i1 %15, label %16, label %26

; <label>:16:                                     ; preds = %12
  %17 = load i64*, i64** %7, align 8
  %18 = load i64, i64* %10, align 8
  %19 = getelementptr inbounds i64, i64* %17, i64 %18
  %20 = load i64, i64* %19, align 8
  %21 = load i64, i64* %9, align 8
  %22 = mul i64 %21, %20
  store i64 %22, i64* %9, align 8
  br label %23

; <label>:23:                                     ; preds = %16
  %24 = load i64, i64* %10, align 8
  %25 = add i64 %24, 1
  store i64 %25, i64* %10, align 8
  br label %12

; <label>:26:                                     ; preds = %12
  store i64 0, i64* %11, align 8
  br label %27

; <label>:27:                                     ; preds = %40, %26
  %28 = load i64, i64* %11, align 8
  %29 = load i64, i64* %9, align 8
  %30 = icmp ult i64 %28, %29
  br i1 %30, label %31, label %43

; <label>:31:                                     ; preds = %27
  %32 = load i64*, i64** %6, align 8
  %33 = load i64, i64* %11, align 8
  %34 = getelementptr inbounds i64, i64* %32, i64 %33
  %35 = load i64, i64* %34, align 8
  %36 = trunc i64 %35 to i32
  %37 = load i32*, i32** %5, align 8
  %38 = load i64, i64* %11, align 8
  %39 = getelementptr inbounds i32, i32* %37, i64 %38
  store i32 %36, i32* %39, align 4
  br label %40

; <label>:40:                                     ; preds = %31
  %41 = load i64, i64* %11, align 8
  %42 = add i64 %41, 1
  store i64 %42, i64* %11, align 8
  br label %27

; <label>:43:                                     ; preds = %27
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_convertTo_u_i32(i64*, i32*, i64*, i64) #2 {
  %5 = alloca i64*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  store i64* %0, i64** %5, align 8
  store i32* %1, i32** %6, align 8
  store i64* %2, i64** %7, align 8
  store i64 %3, i64* %8, align 8
  %9 = load i64*, i64** %5, align 8
  %10 = load i32*, i32** %6, align 8
  %11 = load i64*, i64** %7, align 8
  %12 = load i64, i64* %8, align 8
  call void @_ZN12_GLOBAL__N_134libjit_copy_kernel_with_conversionIliEEvPT_PKT0_PKmm(i64* %9, i32* %10, i64* %11, i64 %12)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_134libjit_copy_kernel_with_conversionIliEEvPT_PKT0_PKmm(i64*, i32*, i64*, i64) #0 {
  %5 = alloca i64*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  store i64* %0, i64** %5, align 8
  store i32* %1, i32** %6, align 8
  store i64* %2, i64** %7, align 8
  store i64 %3, i64* %8, align 8
  store i64 1, i64* %9, align 8
  store i64 0, i64* %10, align 8
  br label %12

; <label>:12:                                     ; preds = %23, %4
  %13 = load i64, i64* %10, align 8
  %14 = load i64, i64* %8, align 8
  %15 = icmp ult i64 %13, %14
  br i1 %15, label %16, label %26

; <label>:16:                                     ; preds = %12
  %17 = load i64*, i64** %7, align 8
  %18 = load i64, i64* %10, align 8
  %19 = getelementptr inbounds i64, i64* %17, i64 %18
  %20 = load i64, i64* %19, align 8
  %21 = load i64, i64* %9, align 8
  %22 = mul i64 %21, %20
  store i64 %22, i64* %9, align 8
  br label %23

; <label>:23:                                     ; preds = %16
  %24 = load i64, i64* %10, align 8
  %25 = add i64 %24, 1
  store i64 %25, i64* %10, align 8
  br label %12

; <label>:26:                                     ; preds = %12
  store i64 0, i64* %11, align 8
  br label %27

; <label>:27:                                     ; preds = %40, %26
  %28 = load i64, i64* %11, align 8
  %29 = load i64, i64* %9, align 8
  %30 = icmp ult i64 %28, %29
  br i1 %30, label %31, label %43

; <label>:31:                                     ; preds = %27
  %32 = load i32*, i32** %6, align 8
  %33 = load i64, i64* %11, align 8
  %34 = getelementptr inbounds i32, i32* %32, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = sext i32 %35 to i64
  %37 = load i64*, i64** %5, align 8
  %38 = load i64, i64* %11, align 8
  %39 = getelementptr inbounds i64, i64* %37, i64 %38
  store i64 %36, i64* %39, align 8
  br label %40

; <label>:40:                                     ; preds = %31
  %41 = load i64, i64* %11, align 8
  %42 = add i64 %41, 1
  store i64 %42, i64* %11, align 8
  br label %27

; <label>:43:                                     ; preds = %27
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_quantization_profile(float*, i64, float*, float*, i64*) #2 {
  %6 = alloca float*, align 8
  %7 = alloca i64, align 8
  %8 = alloca float*, align 8
  %9 = alloca float*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  %19 = alloca float, align 4
  %20 = alloca i8*, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca float, align 4
  %25 = alloca i64, align 8
  %26 = alloca float, align 4
  %27 = alloca float, align 4
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca float, align 4
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca i64, align 8
  store float* %0, float** %6, align 8
  store i64 %1, i64* %7, align 8
  store float* %2, float** %8, align 8
  store float* %3, float** %9, align 8
  store i64* %4, i64** %10, align 8
  %38 = load i64*, i64** %10, align 8
  %39 = getelementptr inbounds i64, i64* %38, i64 0
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %11, align 8
  %41 = load float*, float** %8, align 8
  %42 = getelementptr inbounds float, float* %41, i64 0
  %43 = load float, float* %42, align 4
  store float %43, float* %12, align 4
  %44 = load float*, float** %8, align 8
  %45 = getelementptr inbounds float, float* %44, i64 1
  %46 = load float, float* %45, align 4
  store float %46, float* %13, align 4
  %47 = load float*, float** %6, align 8
  %48 = load i64, i64* %7, align 8
  call void @_ZN12_GLOBAL__N_114find_min_max_fEPfmRfS1_(float* %47, i64 %48, float* dereferenceable(4) %14, float* dereferenceable(4) %15)
  %49 = load float, float* %14, align 4
  %50 = load float, float* %12, align 4
  %51 = fcmp reassoc nsz arcp olt float %49, %50
  br i1 %51, label %52, label %54

; <label>:52:                                     ; preds = %5
  %53 = load float, float* %14, align 4
  br label %56

; <label>:54:                                     ; preds = %5
  %55 = load float, float* %12, align 4
  br label %56

; <label>:56:                                     ; preds = %54, %52
  %57 = phi float [ %53, %52 ], [ %55, %54 ]
  store float %57, float* %16, align 4
  %58 = load float, float* %15, align 4
  %59 = load float, float* %13, align 4
  %60 = fcmp reassoc nsz arcp ogt float %58, %59
  br i1 %60, label %61, label %63

; <label>:61:                                     ; preds = %56
  %62 = load float, float* %15, align 4
  br label %65

; <label>:63:                                     ; preds = %56
  %64 = load float, float* %13, align 4
  br label %65

; <label>:65:                                     ; preds = %63, %61
  %66 = phi float [ %62, %61 ], [ %64, %63 ]
  store float %66, float* %17, align 4
  %67 = load float, float* %16, align 4
  %68 = load float*, float** %8, align 8
  %69 = getelementptr inbounds float, float* %68, i64 0
  store float %67, float* %69, align 4
  %70 = load float, float* %17, align 4
  %71 = load float*, float** %8, align 8
  %72 = getelementptr inbounds float, float* %71, i64 1
  store float %70, float* %72, align 4
  %73 = load float*, float** %9, align 8
  %74 = load i64, i64* %11, align 8
  %75 = call i32 @_ZN12_GLOBAL__N_115check_all_zerosEPfm(float* %73, i64 %74)
  %76 = icmp eq i32 %75, 1
  br i1 %76, label %77, label %80

; <label>:77:                                     ; preds = %65
  %78 = load float, float* %14, align 4
  store float %78, float* %12, align 4
  %79 = load float, float* %15, align 4
  store float %79, float* %13, align 4
  br label %80

; <label>:80:                                     ; preds = %77, %65
  %81 = load float, float* %16, align 4
  %82 = load float, float* %12, align 4
  %83 = fcmp reassoc nsz arcp olt float %81, %82
  br i1 %83, label %88, label %84

; <label>:84:                                     ; preds = %80
  %85 = load float, float* %17, align 4
  %86 = load float, float* %13, align 4
  %87 = fcmp reassoc nsz arcp ogt float %85, %86
  br i1 %87, label %88, label %260

; <label>:88:                                     ; preds = %84, %80
  %89 = load float, float* %17, align 4
  %90 = load float, float* %16, align 4
  %91 = fsub reassoc nsz arcp contract float %89, %90
  %92 = load i64, i64* %11, align 8
  %93 = uitofp i64 %92 to float
  %94 = fdiv reassoc nsz arcp float %91, %93
  store float %94, float* %18, align 4
  %95 = load float, float* %13, align 4
  %96 = load float, float* %12, align 4
  %97 = fsub reassoc nsz arcp contract float %95, %96
  %98 = load i64, i64* %11, align 8
  %99 = uitofp i64 %98 to float
  %100 = fdiv reassoc nsz arcp float %97, %99
  store float %100, float* %19, align 4
  %101 = load i64, i64* %11, align 8
  %102 = call i8* @llvm.stacksave()
  store i8* %102, i8** %20, align 8
  %103 = alloca float, i64 %101, align 16
  store i64 %101, i64* %21, align 8
  store i64 0, i64* %22, align 8
  br label %104

; <label>:104:                                    ; preds = %111, %88
  %105 = load i64, i64* %22, align 8
  %106 = load i64, i64* %11, align 8
  %107 = icmp ult i64 %105, %106
  br i1 %107, label %108, label %114

; <label>:108:                                    ; preds = %104
  %109 = load i64, i64* %22, align 8
  %110 = getelementptr inbounds float, float* %103, i64 %109
  store float 0.000000e+00, float* %110, align 4
  br label %111

; <label>:111:                                    ; preds = %108
  %112 = load i64, i64* %22, align 8
  %113 = add i64 %112, 1
  store i64 %113, i64* %22, align 8
  br label %104

; <label>:114:                                    ; preds = %104
  store i64 0, i64* %23, align 8
  br label %115

; <label>:115:                                    ; preds = %237, %114
  %116 = load i64, i64* %23, align 8
  %117 = load i64, i64* %11, align 8
  %118 = icmp ult i64 %116, %117
  br i1 %118, label %119, label %240

; <label>:119:                                    ; preds = %115
  %120 = load float*, float** %9, align 8
  %121 = load i64, i64* %23, align 8
  %122 = getelementptr inbounds float, float* %120, i64 %121
  %123 = load float, float* %122, align 4
  %124 = fcmp reassoc nsz arcp oeq float %123, 0.000000e+00
  br i1 %124, label %125, label %126

; <label>:125:                                    ; preds = %119
  br label %237

; <label>:126:                                    ; preds = %119
  %127 = load float, float* %12, align 4
  %128 = load float, float* %19, align 4
  %129 = load i64, i64* %23, align 8
  %130 = uitofp i64 %129 to float
  %131 = fmul reassoc nsz arcp contract float %128, %130
  %132 = fadd reassoc nsz arcp contract float %127, %131
  store float %132, float* %24, align 4
  %133 = load float, float* %24, align 4
  %134 = load float, float* %16, align 4
  %135 = fsub reassoc nsz arcp contract float %133, %134
  %136 = load float, float* %18, align 4
  %137 = fdiv reassoc nsz arcp float %135, %136
  %138 = fptoui float %137 to i64
  store i64 %138, i64* %25, align 8
  %139 = load float, float* %16, align 4
  %140 = load float, float* %18, align 4
  %141 = load i64, i64* %25, align 8
  %142 = add i64 %141, 1
  %143 = uitofp i64 %142 to float
  %144 = fmul reassoc nsz arcp contract float %140, %143
  %145 = fadd reassoc nsz arcp contract float %139, %144
  store float %145, float* %26, align 4
  %146 = load float, float* %24, align 4
  %147 = load float, float* %19, align 4
  %148 = fadd reassoc nsz arcp contract float %146, %147
  store float %148, float* %27, align 4
  %149 = load float, float* %27, align 4
  %150 = load float, float* %16, align 4
  %151 = fsub reassoc nsz arcp contract float %149, %150
  %152 = load float, float* %18, align 4
  %153 = fdiv reassoc nsz arcp float %151, %152
  %154 = fptoui float %153 to i64
  store i64 %154, i64* %28, align 8
  %155 = load i64, i64* %28, align 8
  %156 = load i64, i64* %25, align 8
  %157 = add i64 %156, 2
  %158 = icmp ule i64 %155, %157
  br i1 %158, label %159, label %160

; <label>:159:                                    ; preds = %126
  br label %162

; <label>:160:                                    ; preds = %126
  call void @__assert_fail(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i32 0, i32 0), i32 2446, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @__PRETTY_FUNCTION__.libjit_quantization_profile, i32 0, i32 0)) #10
  unreachable
                                                  ; No predecessors!
  br label %162

; <label>:162:                                    ; preds = %161, %159
  %163 = load float, float* %26, align 4
  %164 = load float, float* %24, align 4
  %165 = fsub reassoc nsz arcp contract float %163, %164
  %166 = load float, float* %19, align 4
  %167 = fdiv reassoc nsz arcp float %165, %166
  %168 = load float*, float** %9, align 8
  %169 = load i64, i64* %23, align 8
  %170 = getelementptr inbounds float, float* %168, i64 %169
  %171 = load float, float* %170, align 4
  %172 = fmul reassoc nsz arcp contract float %167, %171
  %173 = call reassoc nsz arcp float @_ZSt5roundf(float %172)
  %174 = load float*, float** %9, align 8
  %175 = load i64, i64* %23, align 8
  %176 = getelementptr inbounds float, float* %174, i64 %175
  %177 = load float, float* %176, align 4
  %178 = fcmp reassoc nsz arcp olt float %173, %177
  br i1 %178, label %179, label %191

; <label>:179:                                    ; preds = %162
  %180 = load float, float* %26, align 4
  %181 = load float, float* %24, align 4
  %182 = fsub reassoc nsz arcp contract float %180, %181
  %183 = load float, float* %19, align 4
  %184 = fdiv reassoc nsz arcp float %182, %183
  %185 = load float*, float** %9, align 8
  %186 = load i64, i64* %23, align 8
  %187 = getelementptr inbounds float, float* %185, i64 %186
  %188 = load float, float* %187, align 4
  %189 = fmul reassoc nsz arcp contract float %184, %188
  %190 = call reassoc nsz arcp float @_ZSt5roundf(float %189)
  br label %196

; <label>:191:                                    ; preds = %162
  %192 = load float*, float** %9, align 8
  %193 = load i64, i64* %23, align 8
  %194 = getelementptr inbounds float, float* %192, i64 %193
  %195 = load float, float* %194, align 4
  br label %196

; <label>:196:                                    ; preds = %191, %179
  %197 = phi float [ %190, %179 ], [ %195, %191 ]
  %198 = fptoui float %197 to i64
  store i64 %198, i64* %29, align 8
  %199 = load i64, i64* %11, align 8
  %200 = load float, float* %18, align 4
  %201 = load float, float* %16, align 4
  %202 = load float, float* %24, align 4
  %203 = call i64 @_ZN12_GLOBAL__N_17get_binEmfff(i64 %199, float %200, float %201, float %202)
  store i64 %203, i64* %30, align 8
  %204 = load i64, i64* %29, align 8
  %205 = uitofp i64 %204 to float
  %206 = load i64, i64* %30, align 8
  %207 = getelementptr inbounds float, float* %103, i64 %206
  %208 = load float, float* %207, align 4
  %209 = fadd reassoc nsz arcp contract float %208, %205
  store float %209, float* %207, align 4
  %210 = load i64, i64* %29, align 8
  %211 = uitofp i64 %210 to float
  %212 = load float*, float** %9, align 8
  %213 = load i64, i64* %23, align 8
  %214 = getelementptr inbounds float, float* %212, i64 %213
  %215 = load float, float* %214, align 4
  %216 = fcmp reassoc nsz arcp olt float %211, %215
  br i1 %216, label %217, label %236

; <label>:217:                                    ; preds = %196
  %218 = load i64, i64* %11, align 8
  %219 = load float, float* %18, align 4
  %220 = load float, float* %16, align 4
  %221 = load float, float* %24, align 4
  %222 = load float, float* %18, align 4
  %223 = fadd reassoc nsz arcp contract float %221, %222
  %224 = call i64 @_ZN12_GLOBAL__N_17get_binEmfff(i64 %218, float %219, float %220, float %223)
  store i64 %224, i64* %31, align 8
  %225 = load float*, float** %9, align 8
  %226 = load i64, i64* %23, align 8
  %227 = getelementptr inbounds float, float* %225, i64 %226
  %228 = load float, float* %227, align 4
  %229 = load i64, i64* %29, align 8
  %230 = uitofp i64 %229 to float
  %231 = fsub reassoc nsz arcp contract float %228, %230
  %232 = load i64, i64* %31, align 8
  %233 = getelementptr inbounds float, float* %103, i64 %232
  %234 = load float, float* %233, align 4
  %235 = fadd reassoc nsz arcp contract float %234, %231
  store float %235, float* %233, align 4
  br label %236

; <label>:236:                                    ; preds = %217, %196
  br label %237

; <label>:237:                                    ; preds = %236, %125
  %238 = load i64, i64* %23, align 8
  %239 = add i64 %238, 1
  store i64 %239, i64* %23, align 8
  br label %115

; <label>:240:                                    ; preds = %115
  store i64 0, i64* %32, align 8
  %241 = load i64, i64* %11, align 8
  store i64 %241, i64* %33, align 8
  br label %242

; <label>:242:                                    ; preds = %253, %240
  %243 = load i64, i64* %32, align 8
  %244 = load i64, i64* %33, align 8
  %245 = icmp ult i64 %243, %244
  br i1 %245, label %246, label %256

; <label>:246:                                    ; preds = %242
  %247 = load i64, i64* %32, align 8
  %248 = getelementptr inbounds float, float* %103, i64 %247
  %249 = load float, float* %248, align 4
  %250 = load float*, float** %9, align 8
  %251 = load i64, i64* %32, align 8
  %252 = getelementptr inbounds float, float* %250, i64 %251
  store float %249, float* %252, align 4
  br label %253

; <label>:253:                                    ; preds = %246
  %254 = load i64, i64* %32, align 8
  %255 = add i64 %254, 1
  store i64 %255, i64* %32, align 8
  br label %242

; <label>:256:                                    ; preds = %242
  %257 = load float, float* %16, align 4
  store float %257, float* %12, align 4
  %258 = load float, float* %17, align 4
  store float %258, float* %13, align 4
  %259 = load i8*, i8** %20, align 8
  call void @llvm.stackrestore(i8* %259)
  br label %260

; <label>:260:                                    ; preds = %256, %84
  %261 = load float, float* %13, align 4
  %262 = load float, float* %12, align 4
  %263 = fsub reassoc nsz arcp contract float %261, %262
  %264 = load i64, i64* %11, align 8
  %265 = uitofp i64 %264 to float
  %266 = fdiv reassoc nsz arcp float %263, %265
  store float %266, float* %34, align 4
  store i64 0, i64* %35, align 8
  %267 = load i64, i64* %7, align 8
  store i64 %267, i64* %36, align 8
  br label %268

; <label>:268:                                    ; preds = %286, %260
  %269 = load i64, i64* %35, align 8
  %270 = load i64, i64* %36, align 8
  %271 = icmp ult i64 %269, %270
  br i1 %271, label %272, label %289

; <label>:272:                                    ; preds = %268
  %273 = load i64, i64* %11, align 8
  %274 = load float, float* %34, align 4
  %275 = load float, float* %12, align 4
  %276 = load float*, float** %6, align 8
  %277 = load i64, i64* %35, align 8
  %278 = getelementptr inbounds float, float* %276, i64 %277
  %279 = load float, float* %278, align 4
  %280 = call i64 @_ZN12_GLOBAL__N_17get_binEmfff(i64 %273, float %274, float %275, float %279)
  store i64 %280, i64* %37, align 8
  %281 = load float*, float** %9, align 8
  %282 = load i64, i64* %37, align 8
  %283 = getelementptr inbounds float, float* %281, i64 %282
  %284 = load float, float* %283, align 4
  %285 = fadd reassoc nsz arcp float %284, 1.000000e+00
  store float %285, float* %283, align 4
  br label %286

; <label>:286:                                    ; preds = %272
  %287 = load i64, i64* %35, align 8
  %288 = add i64 %287, 1
  store i64 %288, i64* %35, align 8
  br label %268

; <label>:289:                                    ; preds = %268
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_114find_min_max_fEPfmRfS1_(float*, i64, float* dereferenceable(4), float* dereferenceable(4)) #0 {
  %5 = alloca float*, align 8
  %6 = alloca i64, align 8
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  %9 = alloca i64, align 8
  %10 = alloca float, align 4
  store float* %0, float** %5, align 8
  store i64 %1, i64* %6, align 8
  store float* %2, float** %7, align 8
  store float* %3, float** %8, align 8
  %11 = load float*, float** %5, align 8
  %12 = getelementptr inbounds float, float* %11, i64 0
  %13 = load float, float* %12, align 4
  %14 = load float*, float** %7, align 8
  store float %13, float* %14, align 4
  %15 = load float*, float** %5, align 8
  %16 = getelementptr inbounds float, float* %15, i64 0
  %17 = load float, float* %16, align 4
  %18 = load float*, float** %8, align 8
  store float %17, float* %18, align 4
  store i64 1, i64* %9, align 8
  br label %19

; <label>:19:                                     ; preds = %44, %4
  %20 = load i64, i64* %9, align 8
  %21 = load i64, i64* %6, align 8
  %22 = icmp ult i64 %20, %21
  br i1 %22, label %23, label %47

; <label>:23:                                     ; preds = %19
  %24 = load float*, float** %5, align 8
  %25 = load i64, i64* %9, align 8
  %26 = getelementptr inbounds float, float* %24, i64 %25
  %27 = load float, float* %26, align 4
  store float %27, float* %10, align 4
  %28 = load float, float* %10, align 4
  %29 = load float*, float** %7, align 8
  %30 = load float, float* %29, align 4
  %31 = fcmp reassoc nsz arcp olt float %28, %30
  br i1 %31, label %32, label %35

; <label>:32:                                     ; preds = %23
  %33 = load float, float* %10, align 4
  %34 = load float*, float** %7, align 8
  store float %33, float* %34, align 4
  br label %35

; <label>:35:                                     ; preds = %32, %23
  %36 = load float, float* %10, align 4
  %37 = load float*, float** %8, align 8
  %38 = load float, float* %37, align 4
  %39 = fcmp reassoc nsz arcp ogt float %36, %38
  br i1 %39, label %40, label %43

; <label>:40:                                     ; preds = %35
  %41 = load float, float* %10, align 4
  %42 = load float*, float** %8, align 8
  store float %41, float* %42, align 4
  br label %43

; <label>:43:                                     ; preds = %40, %35
  br label %44

; <label>:44:                                     ; preds = %43
  %45 = load i64, i64* %9, align 8
  %46 = add i64 %45, 1
  store i64 %46, i64* %9, align 8
  br label %19

; <label>:47:                                     ; preds = %19
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @_ZN12_GLOBAL__N_115check_all_zerosEPfm(float*, i64) #0 {
  %3 = alloca i32, align 4
  %4 = alloca float*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store float* %0, float** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 0, i64* %6, align 8
  br label %7

; <label>:7:                                      ; preds = %19, %2
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %5, align 8
  %10 = icmp ult i64 %8, %9
  br i1 %10, label %11, label %22

; <label>:11:                                     ; preds = %7
  %12 = load float*, float** %4, align 8
  %13 = load i64, i64* %6, align 8
  %14 = getelementptr inbounds float, float* %12, i64 %13
  %15 = load float, float* %14, align 4
  %16 = fcmp reassoc nsz arcp une float %15, 0.000000e+00
  br i1 %16, label %17, label %18

; <label>:17:                                     ; preds = %11
  store i32 0, i32* %3, align 4
  br label %23

; <label>:18:                                     ; preds = %11
  br label %19

; <label>:19:                                     ; preds = %18
  %20 = load i64, i64* %6, align 8
  %21 = add i64 %20, 1
  store i64 %21, i64* %6, align 8
  br label %7

; <label>:22:                                     ; preds = %7
  store i32 1, i32* %3, align 4
  br label %23

; <label>:23:                                     ; preds = %22, %17
  %24 = load i32, i32* %3, align 4
  ret i32 %24
}

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #7

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZSt5roundf(float) #0 comdat {
  %2 = alloca float, align 4
  store float %0, float* %2, align 4
  %3 = load float, float* %2, align 4
  %4 = call reassoc nsz arcp float @llvm.round.f32(float %3)
  ret float %4
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @_ZN12_GLOBAL__N_17get_binEmfff(i64, float, float, float) #0 {
  %5 = alloca i64, align 8
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca i64, align 8
  store i64 %0, i64* %5, align 8
  store float %1, float* %6, align 4
  store float %2, float* %7, align 4
  store float %3, float* %8, align 4
  %10 = load float, float* %6, align 4
  %11 = fcmp reassoc nsz arcp oeq float %10, 0.000000e+00
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %4
  br label %35

; <label>:13:                                     ; preds = %4
  %14 = load float, float* %8, align 4
  %15 = load float, float* %7, align 4
  %16 = fsub reassoc nsz arcp contract float %14, %15
  %17 = load float, float* %6, align 4
  %18 = fdiv reassoc nsz arcp float %16, %17
  %19 = fptoui float %18 to i64
  %20 = load i64, i64* %5, align 8
  %21 = sub i64 %20, 1
  %22 = icmp ult i64 %19, %21
  br i1 %22, label %23, label %30

; <label>:23:                                     ; preds = %13
  %24 = load float, float* %8, align 4
  %25 = load float, float* %7, align 4
  %26 = fsub reassoc nsz arcp contract float %24, %25
  %27 = load float, float* %6, align 4
  %28 = fdiv reassoc nsz arcp float %26, %27
  %29 = fptoui float %28 to i64
  br label %33

; <label>:30:                                     ; preds = %13
  %31 = load i64, i64* %5, align 8
  %32 = sub i64 %31, 1
  br label %33

; <label>:33:                                     ; preds = %30, %23
  %34 = phi i64 [ %29, %23 ], [ %32, %30 ]
  br label %35

; <label>:35:                                     ; preds = %33, %12
  %36 = phi i64 [ 0, %12 ], [ %34, %33 ]
  store i64 %36, i64* %9, align 8
  %37 = load i64, i64* %9, align 8
  ret i64 %37
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #1

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_nms_u(i64*, i64*, float*, i64*, i64, float*, i64*, i64, i64*, i64, i32, i32, float, float, i1 zeroext) #2 {
  %16 = alloca i64*, align 8
  %17 = alloca i64*, align 8
  %18 = alloca float*, align 8
  %19 = alloca i64*, align 8
  %20 = alloca i64, align 8
  %21 = alloca float*, align 8
  %22 = alloca i64*, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64*, align 8
  %25 = alloca i64, align 8
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca float, align 4
  %29 = alloca float, align 4
  %30 = alloca i8, align 1
  store i64* %0, i64** %16, align 8
  store i64* %1, i64** %17, align 8
  store float* %2, float** %18, align 8
  store i64* %3, i64** %19, align 8
  store i64 %4, i64* %20, align 8
  store float* %5, float** %21, align 8
  store i64* %6, i64** %22, align 8
  store i64 %7, i64* %23, align 8
  store i64* %8, i64** %24, align 8
  store i64 %9, i64* %25, align 8
  store i32 %10, i32* %26, align 4
  store i32 %11, i32* %27, align 4
  store float %12, float* %28, align 4
  store float %13, float* %29, align 4
  %31 = zext i1 %14 to i8
  store i8 %31, i8* %30, align 1
  %32 = load i64*, i64** %16, align 8
  %33 = load i64*, i64** %17, align 8
  %34 = load float*, float** %18, align 8
  %35 = load i64*, i64** %19, align 8
  %36 = load i64, i64* %20, align 8
  %37 = load float*, float** %21, align 8
  %38 = load i64*, i64** %22, align 8
  %39 = load i64, i64* %23, align 8
  %40 = load i64*, i64** %24, align 8
  %41 = load i64, i64* %25, align 8
  %42 = load i32, i32* %26, align 4
  %43 = load i32, i32* %27, align 4
  %44 = load float, float* %28, align 4
  %45 = load float, float* %29, align 4
  %46 = load i8, i8* %30, align 1
  %47 = trunc i8 %46 to i1
  call void @_ZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S2_PKfPKmmS4_S6_mS6_mjjffb(i64* %32, i64* %33, float* %34, i64* %35, i64 %36, float* %37, i64* %38, i64 %39, i64* %40, i64 %41, i32 %42, i32 %43, float %44, float %45, i1 zeroext %47)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S2_PKfPKmmS4_S6_mS6_mjjffb(i64*, i64*, float*, i64*, i64, float*, i64*, i64, i64*, i64, i32, i32, float, float, i1 zeroext) #2 {
  %16 = alloca i64*, align 8
  %17 = alloca i64*, align 8
  %18 = alloca float*, align 8
  %19 = alloca i64*, align 8
  %20 = alloca i64, align 8
  %21 = alloca float*, align 8
  %22 = alloca i64*, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64*, align 8
  %25 = alloca i64, align 8
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca float, align 4
  %29 = alloca float, align 4
  %30 = alloca i8, align 1
  %31 = alloca i32, align 4
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca i64, align 8
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca %"struct.(anonymous namespace)::Box"*, align 8
  %41 = alloca %class.anon, align 1
  %42 = alloca i64, align 8
  %43 = alloca i64, align 8
  %44 = alloca i32, align 4
  %45 = alloca %"struct.(anonymous namespace)::OutBox", align 8
  %46 = alloca i64, align 8
  %47 = alloca i8*, align 8
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  %51 = alloca float*, align 8
  %52 = alloca i64, align 8
  %53 = alloca float, align 4
  %54 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %55 = alloca %class.anon, align 1
  %56 = alloca i64, align 8
  %57 = alloca i64, align 8
  %58 = alloca float, align 4
  %59 = alloca i32, align 4
  %60 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %61 = alloca %"struct.(anonymous namespace)::Box"*, align 8
  %62 = alloca i8, align 1
  %63 = alloca i32, align 4
  %64 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %65 = alloca %"struct.(anonymous namespace)::Box"*, align 8
  %66 = alloca i64, align 8
  %67 = alloca i64, align 8
  store i64* %0, i64** %16, align 8
  store i64* %1, i64** %17, align 8
  store float* %2, float** %18, align 8
  store i64* %3, i64** %19, align 8
  store i64 %4, i64* %20, align 8
  store float* %5, float** %21, align 8
  store i64* %6, i64** %22, align 8
  store i64 %7, i64* %23, align 8
  store i64* %8, i64** %24, align 8
  store i64 %9, i64* %25, align 8
  store i32 %10, i32* %26, align 4
  store i32 %11, i32* %27, align 4
  store float %12, float* %28, align 4
  store float %13, float* %29, align 4
  %68 = zext i1 %14 to i8
  store i8 %68, i8* %30, align 1
  %69 = load i64, i64* %20, align 8
  %70 = sub i64 %69, 2
  %71 = trunc i64 %70 to i32
  store i32 %71, i32* %31, align 4
  store i64 1, i64* %32, align 8
  store i64 1, i64* %33, align 8
  %72 = load i64*, i64** %19, align 8
  %73 = load i32, i32* %31, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i64, i64* %72, i64 %74
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %34, align 8
  store i64 0, i64* %35, align 8
  %77 = load i8, i8* %30, align 1
  %78 = trunc i8 %77 to i1
  br i1 %78, label %150, label %79

; <label>:79:                                     ; preds = %15
  %80 = load i64, i64* %20, align 8
  %81 = sub i64 %80, 3
  %82 = trunc i64 %81 to i32
  store i32 %82, i32* %36, align 4
  %83 = load i64, i64* %23, align 8
  %84 = sub i64 %83, 3
  %85 = trunc i64 %84 to i32
  store i32 %85, i32* %37, align 4
  %86 = load i64, i64* %23, align 8
  %87 = sub i64 %86, 1
  %88 = trunc i64 %87 to i32
  store i32 %88, i32* %38, align 4
  %89 = load i64, i64* %23, align 8
  %90 = sub i64 %89, 2
  %91 = trunc i64 %90 to i32
  store i32 %91, i32* %39, align 4
  %92 = load i64*, i64** %22, align 8
  %93 = load i32, i32* %38, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i64, i64* %92, i64 %94
  %96 = load i64, i64* %95, align 8
  %97 = load i64*, i64** %19, align 8
  %98 = load i32, i32* %31, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i64, i64* %97, i64 %99
  %101 = load i64, i64* %100, align 8
  %102 = icmp eq i64 %96, %101
  br i1 %102, label %103, label %104

; <label>:103:                                    ; preds = %79
  br label %104

; <label>:104:                                    ; preds = %103, %79
  %105 = phi i1 [ false, %79 ], [ true, %103 ]
  br i1 %105, label %106, label %107

; <label>:106:                                    ; preds = %104
  br label %109

; <label>:107:                                    ; preds = %104
  call void @__assert_fail(i8* getelementptr inbounds ([121 x i8], [121 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i32 0, i32 0), i32 1007, i8* getelementptr inbounds ([227 x i8], [227 x i8]* @__PRETTY_FUNCTION__._ZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S2_PKfPKmmS4_S6_mS6_mjjffb, i32 0, i32 0)) #10
  unreachable
                                                  ; No predecessors!
  br label %109

; <label>:109:                                    ; preds = %108, %106
  %110 = load i64*, i64** %22, align 8
  %111 = load i32, i32* %37, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i64, i64* %110, i64 %112
  %114 = load i64, i64* %113, align 8
  %115 = load i64*, i64** %19, align 8
  %116 = load i32, i32* %36, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i64, i64* %115, i64 %117
  %119 = load i64, i64* %118, align 8
  %120 = icmp eq i64 %114, %119
  br i1 %120, label %121, label %122

; <label>:121:                                    ; preds = %109
  br label %122

; <label>:122:                                    ; preds = %121, %109
  %123 = phi i1 [ false, %109 ], [ true, %121 ]
  br i1 %123, label %124, label %125

; <label>:124:                                    ; preds = %122
  br label %127

; <label>:125:                                    ; preds = %122
  call void @__assert_fail(i8* getelementptr inbounds ([115 x i8], [115 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i32 0, i32 0), i32 1009, i8* getelementptr inbounds ([227 x i8], [227 x i8]* @__PRETTY_FUNCTION__._ZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S2_PKfPKmmS4_S6_mS6_mjjffb, i32 0, i32 0)) #10
  unreachable
                                                  ; No predecessors!
  br label %127

; <label>:127:                                    ; preds = %126, %124
  %128 = load i64*, i64** %22, align 8
  %129 = load i32, i32* %37, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i64, i64* %128, i64 %130
  %132 = load i64, i64* %131, align 8
  store i64 %132, i64* %32, align 8
  %133 = load i64*, i64** %22, align 8
  %134 = load i32, i32* %39, align 4
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds i64, i64* %133, i64 %135
  %137 = load i64, i64* %136, align 8
  store i64 %137, i64* %33, align 8
  %138 = load i64*, i64** %19, align 8
  %139 = load i32, i32* %31, align 4
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds i64, i64* %138, i64 %140
  %142 = load i64, i64* %141, align 8
  store i64 %142, i64* %34, align 8
  %143 = load i64*, i64** %24, align 8
  %144 = load i64, i64* %25, align 8
  %145 = sub i64 %144, 2
  %146 = getelementptr inbounds i64, i64* %143, i64 %145
  %147 = load i64, i64* %146, align 8
  %148 = load i64, i64* %32, align 8
  %149 = udiv i64 %147, %148
  store i64 %149, i64* %35, align 8
  br label %158

; <label>:150:                                    ; preds = %15
  %151 = load i64*, i64** %24, align 8
  %152 = load i64, i64* %25, align 8
  %153 = sub i64 %152, 1
  %154 = getelementptr inbounds i64, i64* %151, i64 %153
  %155 = load i64, i64* %154, align 8
  %156 = load i64, i64* %32, align 8
  %157 = udiv i64 %155, %156
  store i64 %157, i64* %35, align 8
  br label %158

; <label>:158:                                    ; preds = %150, %127
  %159 = load float*, float** %18, align 8
  %160 = bitcast float* %159 to %"struct.(anonymous namespace)::Box"*
  store %"struct.(anonymous namespace)::Box"* %160, %"struct.(anonymous namespace)::Box"** %40, align 8
  store i64 0, i64* %42, align 8
  store i64 0, i64* %43, align 8
  br label %161

; <label>:161:                                    ; preds = %454, %158
  %162 = load i64, i64* %43, align 8
  %163 = load i64, i64* %32, align 8
  %164 = icmp ult i64 %162, %163
  br i1 %164, label %165, label %457

; <label>:165:                                    ; preds = %161
  store i32 0, i32* %44, align 4
  %166 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 0
  %167 = load float*, float** %21, align 8
  %168 = load i64, i64* %43, align 8
  %169 = load i64, i64* %33, align 8
  %170 = mul i64 %168, %169
  %171 = getelementptr inbounds float, float* %167, i64 %170
  %172 = load float, float* %171, align 4
  store float %172, float* %166, align 8
  %173 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 1
  %174 = load i64, i64* %43, align 8
  store i64 %174, i64* %173, align 8
  %175 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 2
  store i64 0, i64* %175, align 8
  %176 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 3
  store i64 0, i64* %176, align 8
  store i64 0, i64* %46, align 8
  br label %177

; <label>:177:                                    ; preds = %386, %165
  %178 = load i64, i64* %46, align 8
  %179 = load i64, i64* %33, align 8
  %180 = icmp ult i64 %178, %179
  br i1 %180, label %181, label %389

; <label>:181:                                    ; preds = %177
  %182 = load i64, i64* %34, align 8
  %183 = call i8* @llvm.stacksave()
  store i8* %183, i8** %47, align 8
  %184 = alloca %"struct.(anonymous namespace)::ClassBox", i64 %182, align 16
  store i64 %182, i64* %48, align 8
  %185 = icmp eq i64 %182, 0
  br i1 %185, label %192, label %186

; <label>:186:                                    ; preds = %181
  %187 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %184, i64 %182
  br label %188

; <label>:188:                                    ; preds = %188, %186
  %189 = phi %"struct.(anonymous namespace)::ClassBox"* [ %184, %186 ], [ %190, %188 ]
  call void @_ZN12_GLOBAL__N_18ClassBoxC2Ev(%"struct.(anonymous namespace)::ClassBox"* %189) #5
  %190 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %189, i64 1
  %191 = icmp eq %"struct.(anonymous namespace)::ClassBox"* %190, %187
  br i1 %191, label %192, label %188

; <label>:192:                                    ; preds = %181, %188
  %193 = load i64, i64* %34, align 8
  %194 = alloca %"struct.(anonymous namespace)::ClassBox", i64 %193, align 16
  store i64 %193, i64* %49, align 8
  %195 = icmp eq i64 %193, 0
  br i1 %195, label %202, label %196

; <label>:196:                                    ; preds = %192
  %197 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %194, i64 %193
  br label %198

; <label>:198:                                    ; preds = %198, %196
  %199 = phi %"struct.(anonymous namespace)::ClassBox"* [ %194, %196 ], [ %200, %198 ]
  call void @_ZN12_GLOBAL__N_18ClassBoxC2Ev(%"struct.(anonymous namespace)::ClassBox"* %199) #5
  %200 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %199, i64 1
  %201 = icmp eq %"struct.(anonymous namespace)::ClassBox"* %200, %197
  br i1 %201, label %202, label %198

; <label>:202:                                    ; preds = %192, %198
  store i64 0, i64* %50, align 8
  %203 = load float*, float** %21, align 8
  %204 = load i64, i64* %43, align 8
  %205 = load i64, i64* %33, align 8
  %206 = mul i64 %204, %205
  %207 = load i64, i64* %46, align 8
  %208 = add i64 %206, %207
  %209 = load i64, i64* %34, align 8
  %210 = mul i64 %208, %209
  %211 = getelementptr inbounds float, float* %203, i64 %210
  store float* %211, float** %51, align 8
  store i64 0, i64* %52, align 8
  br label %212

; <label>:212:                                    ; preds = %235, %202
  %213 = load i64, i64* %52, align 8
  %214 = load i64, i64* %34, align 8
  %215 = icmp ult i64 %213, %214
  br i1 %215, label %216, label %238

; <label>:216:                                    ; preds = %212
  %217 = load float*, float** %51, align 8
  %218 = load i64, i64* %52, align 8
  %219 = getelementptr inbounds float, float* %217, i64 %218
  %220 = load float, float* %219, align 4
  store float %220, float* %53, align 4
  %221 = load float, float* %53, align 4
  %222 = load float, float* %29, align 4
  %223 = fcmp reassoc nsz arcp ogt float %221, %222
  br i1 %223, label %224, label %234

; <label>:224:                                    ; preds = %216
  %225 = load i64, i64* %50, align 8
  %226 = add i64 %225, 1
  store i64 %226, i64* %50, align 8
  %227 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %194, i64 %225
  store %"struct.(anonymous namespace)::ClassBox"* %227, %"struct.(anonymous namespace)::ClassBox"** %54, align 8
  %228 = load float, float* %53, align 4
  %229 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %54, align 8
  %230 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %229, i32 0, i32 0
  store float %228, float* %230, align 8
  %231 = load i64, i64* %52, align 8
  %232 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %54, align 8
  %233 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %232, i32 0, i32 1
  store i64 %231, i64* %233, align 8
  br label %234

; <label>:234:                                    ; preds = %224, %216
  br label %235

; <label>:235:                                    ; preds = %234
  %236 = load i64, i64* %52, align 8
  %237 = add i64 %236, 1
  store i64 %237, i64* %52, align 8
  br label %212

; <label>:238:                                    ; preds = %212
  %239 = load i64, i64* %50, align 8
  %240 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %194, i64 %239
  call void @_ZSt4sortIPN12_GLOBAL__N_18ClassBoxEZNS0_18libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKS1_SB_E_EvS4_S4_T0_(%"struct.(anonymous namespace)::ClassBox"* %194, %"struct.(anonymous namespace)::ClassBox"* %240)
  store i64 0, i64* %56, align 8
  store i64 0, i64* %57, align 8
  %241 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 0
  %242 = load float, float* %241, align 8
  store float %242, float* %58, align 4
  store i32 0, i32* %59, align 4
  br label %243

; <label>:243:                                    ; preds = %352, %238
  %244 = load i32, i32* %59, align 4
  %245 = zext i32 %244 to i64
  %246 = load i64, i64* %50, align 8
  %247 = icmp ult i64 %245, %246
  br i1 %247, label %248, label %355

; <label>:248:                                    ; preds = %243
  %249 = load i32, i32* %59, align 4
  %250 = zext i32 %249 to i64
  %251 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %194, i64 %250
  store %"struct.(anonymous namespace)::ClassBox"* %251, %"struct.(anonymous namespace)::ClassBox"** %60, align 8
  %252 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %40, align 8
  %253 = load i64, i64* %43, align 8
  %254 = load i64, i64* %34, align 8
  %255 = mul i64 %253, %254
  %256 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %60, align 8
  %257 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %256, i32 0, i32 1
  %258 = load i64, i64* %257, align 8
  %259 = add i64 %255, %258
  %260 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %252, i64 %259
  store %"struct.(anonymous namespace)::Box"* %260, %"struct.(anonymous namespace)::Box"** %61, align 8
  store i8 1, i8* %62, align 1
  store i32 0, i32* %63, align 4
  br label %261

; <label>:261:                                    ; preds = %292, %248
  %262 = load i32, i32* %63, align 4
  %263 = zext i32 %262 to i64
  %264 = load i64, i64* %56, align 8
  %265 = icmp ult i64 %263, %264
  br i1 %265, label %266, label %269

; <label>:266:                                    ; preds = %261
  %267 = load i8, i8* %62, align 1
  %268 = trunc i8 %267 to i1
  br label %269

; <label>:269:                                    ; preds = %266, %261
  %270 = phi i1 [ false, %261 ], [ %268, %266 ]
  br i1 %270, label %271, label %295

; <label>:271:                                    ; preds = %269
  %272 = load i32, i32* %63, align 4
  %273 = zext i32 %272 to i64
  %274 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %184, i64 %273
  store %"struct.(anonymous namespace)::ClassBox"* %274, %"struct.(anonymous namespace)::ClassBox"** %64, align 8
  %275 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %40, align 8
  %276 = load i64, i64* %43, align 8
  %277 = load i64, i64* %34, align 8
  %278 = mul i64 %276, %277
  %279 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %64, align 8
  %280 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %279, i32 0, i32 1
  %281 = load i64, i64* %280, align 8
  %282 = add i64 %278, %281
  %283 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %275, i64 %282
  store %"struct.(anonymous namespace)::Box"* %283, %"struct.(anonymous namespace)::Box"** %65, align 8
  %284 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %65, align 8
  %285 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %61, align 8
  %286 = load float, float* %28, align 4
  %287 = load i32, i32* %26, align 4
  %288 = zext i32 %287 to i64
  %289 = call zeroext i1 @_ZN12_GLOBAL__N_18checkIOUERKNS_3BoxES2_fm(%"struct.(anonymous namespace)::Box"* dereferenceable(16) %284, %"struct.(anonymous namespace)::Box"* dereferenceable(16) %285, float %286, i64 %288)
  %290 = xor i1 %289, true
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %62, align 1
  br label %292

; <label>:292:                                    ; preds = %271
  %293 = load i32, i32* %63, align 4
  %294 = add i32 %293, 1
  store i32 %294, i32* %63, align 4
  br label %261

; <label>:295:                                    ; preds = %269
  %296 = load i8, i8* %62, align 1
  %297 = trunc i8 %296 to i1
  br i1 %297, label %298, label %345

; <label>:298:                                    ; preds = %295
  %299 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %60, align 8
  %300 = load i64, i64* %56, align 8
  %301 = add i64 %300, 1
  store i64 %301, i64* %56, align 8
  %302 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %184, i64 %300
  %303 = bitcast %"struct.(anonymous namespace)::ClassBox"* %302 to i8*
  %304 = bitcast %"struct.(anonymous namespace)::ClassBox"* %299 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %303, i8* align 8 %304, i64 16, i1 false)
  %305 = load i8, i8* %30, align 1
  %306 = trunc i8 %305 to i1
  br i1 %306, label %307, label %314

; <label>:307:                                    ; preds = %298
  %308 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %60, align 8
  %309 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %308, i32 0, i32 1
  %310 = load i64, i64* %309, align 8
  %311 = load i64*, i64** %16, align 8
  %312 = load i64, i64* %42, align 8
  %313 = getelementptr inbounds i64, i64* %311, i64 %312
  store i64 %310, i64* %313, align 8
  br label %335

; <label>:314:                                    ; preds = %298
  %315 = load i64, i64* %43, align 8
  %316 = load i64*, i64** %16, align 8
  %317 = load i64, i64* %42, align 8
  %318 = mul i64 %317, 3
  %319 = add i64 %318, 0
  %320 = getelementptr inbounds i64, i64* %316, i64 %319
  store i64 %315, i64* %320, align 8
  %321 = load i64, i64* %46, align 8
  %322 = load i64*, i64** %16, align 8
  %323 = load i64, i64* %42, align 8
  %324 = mul i64 %323, 3
  %325 = add i64 %324, 1
  %326 = getelementptr inbounds i64, i64* %322, i64 %325
  store i64 %321, i64* %326, align 8
  %327 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %60, align 8
  %328 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %327, i32 0, i32 1
  %329 = load i64, i64* %328, align 8
  %330 = load i64*, i64** %16, align 8
  %331 = load i64, i64* %42, align 8
  %332 = mul i64 %331, 3
  %333 = add i64 %332, 2
  %334 = getelementptr inbounds i64, i64* %330, i64 %333
  store i64 %329, i64* %334, align 8
  br label %335

; <label>:335:                                    ; preds = %314, %307
  %336 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %60, align 8
  %337 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %336, i32 0, i32 0
  %338 = load float, float* %337, align 8
  store float %338, float* %58, align 4
  %339 = load i64, i64* %42, align 8
  %340 = add i64 %339, 1
  store i64 %340, i64* %42, align 8
  %341 = load i64, i64* %57, align 8
  %342 = add i64 %341, 1
  store i64 %342, i64* %57, align 8
  %343 = load i32, i32* %44, align 4
  %344 = add nsw i32 %343, 1
  store i32 %344, i32* %44, align 4
  br label %345

; <label>:345:                                    ; preds = %335, %295
  %346 = load i64, i64* %57, align 8
  %347 = load i32, i32* %27, align 4
  %348 = zext i32 %347 to i64
  %349 = icmp eq i64 %346, %348
  br i1 %349, label %350, label %351

; <label>:350:                                    ; preds = %345
  br label %355

; <label>:351:                                    ; preds = %345
  br label %352

; <label>:352:                                    ; preds = %351
  %353 = load i32, i32* %59, align 4
  %354 = add i32 %353, 1
  store i32 %354, i32* %59, align 4
  br label %243

; <label>:355:                                    ; preds = %350, %243
  %356 = load float, float* %58, align 4
  %357 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 0
  %358 = load float, float* %357, align 8
  %359 = fcmp reassoc nsz arcp olt float %356, %358
  br i1 %359, label %360, label %384

; <label>:360:                                    ; preds = %355
  %361 = load float, float* %58, align 4
  %362 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 0
  store float %361, float* %362, align 8
  %363 = load i8, i8* %30, align 1
  %364 = trunc i8 %363 to i1
  br i1 %364, label %365, label %372

; <label>:365:                                    ; preds = %360
  %366 = load i64*, i64** %16, align 8
  %367 = load i64, i64* %42, align 8
  %368 = sub i64 %367, 1
  %369 = getelementptr inbounds i64, i64* %366, i64 %368
  %370 = load i64, i64* %369, align 8
  %371 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 3
  store i64 %370, i64* %371, align 8
  br label %381

; <label>:372:                                    ; preds = %360
  %373 = load i64*, i64** %16, align 8
  %374 = load i64, i64* %42, align 8
  %375 = sub i64 %374, 1
  %376 = mul i64 %375, 3
  %377 = add i64 %376, 2
  %378 = getelementptr inbounds i64, i64* %373, i64 %377
  %379 = load i64, i64* %378, align 8
  %380 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 3
  store i64 %379, i64* %380, align 8
  br label %381

; <label>:381:                                    ; preds = %372, %365
  %382 = load i64, i64* %46, align 8
  %383 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 2
  store i64 %382, i64* %383, align 8
  br label %384

; <label>:384:                                    ; preds = %381, %355
  %385 = load i8*, i8** %47, align 8
  call void @llvm.stackrestore(i8* %385)
  br label %386

; <label>:386:                                    ; preds = %384
  %387 = load i64, i64* %46, align 8
  %388 = add i64 %387, 1
  store i64 %388, i64* %46, align 8
  br label %177

; <label>:389:                                    ; preds = %177
  %390 = load i32, i32* %44, align 4
  %391 = sext i32 %390 to i64
  store i64 %391, i64* %66, align 8
  br label %392

; <label>:392:                                    ; preds = %430, %389
  %393 = load i64, i64* %66, align 8
  %394 = load i64, i64* %35, align 8
  %395 = icmp ult i64 %393, %394
  br i1 %395, label %396, label %433

; <label>:396:                                    ; preds = %392
  %397 = load i8, i8* %30, align 1
  %398 = trunc i8 %397 to i1
  br i1 %398, label %399, label %405

; <label>:399:                                    ; preds = %396
  %400 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 3
  %401 = load i64, i64* %400, align 8
  %402 = load i64*, i64** %16, align 8
  %403 = load i64, i64* %42, align 8
  %404 = getelementptr inbounds i64, i64* %402, i64 %403
  store i64 %401, i64* %404, align 8
  br label %427

; <label>:405:                                    ; preds = %396
  %406 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 1
  %407 = load i64, i64* %406, align 8
  %408 = load i64*, i64** %16, align 8
  %409 = load i64, i64* %42, align 8
  %410 = mul i64 %409, 3
  %411 = add i64 %410, 0
  %412 = getelementptr inbounds i64, i64* %408, i64 %411
  store i64 %407, i64* %412, align 8
  %413 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 2
  %414 = load i64, i64* %413, align 8
  %415 = load i64*, i64** %16, align 8
  %416 = load i64, i64* %42, align 8
  %417 = mul i64 %416, 3
  %418 = add i64 %417, 1
  %419 = getelementptr inbounds i64, i64* %415, i64 %418
  store i64 %414, i64* %419, align 8
  %420 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 3
  %421 = load i64, i64* %420, align 8
  %422 = load i64*, i64** %16, align 8
  %423 = load i64, i64* %42, align 8
  %424 = mul i64 %423, 3
  %425 = add i64 %424, 2
  %426 = getelementptr inbounds i64, i64* %422, i64 %425
  store i64 %421, i64* %426, align 8
  br label %427

; <label>:427:                                    ; preds = %405, %399
  %428 = load i64, i64* %42, align 8
  %429 = add i64 %428, 1
  store i64 %429, i64* %42, align 8
  br label %430

; <label>:430:                                    ; preds = %427
  %431 = load i64, i64* %66, align 8
  %432 = add i64 %431, 1
  store i64 %432, i64* %66, align 8
  br label %392

; <label>:433:                                    ; preds = %392
  store i64 0, i64* %67, align 8
  br label %434

; <label>:434:                                    ; preds = %450, %433
  %435 = load i64, i64* %67, align 8
  %436 = load i32, i32* %27, align 4
  %437 = zext i32 %436 to i64
  %438 = icmp ult i64 %435, %437
  br i1 %438, label %439, label %453

; <label>:439:                                    ; preds = %434
  %440 = load i32, i32* %44, align 4
  %441 = sext i32 %440 to i64
  %442 = load i64*, i64** %17, align 8
  %443 = load i64, i64* %43, align 8
  %444 = load i32, i32* %27, align 4
  %445 = zext i32 %444 to i64
  %446 = mul i64 %443, %445
  %447 = load i64, i64* %67, align 8
  %448 = add i64 %446, %447
  %449 = getelementptr inbounds i64, i64* %442, i64 %448
  store i64 %441, i64* %449, align 8
  br label %450

; <label>:450:                                    ; preds = %439
  %451 = load i64, i64* %67, align 8
  %452 = add i64 %451, 1
  store i64 %452, i64* %67, align 8
  br label %434

; <label>:453:                                    ; preds = %434
  br label %454

; <label>:454:                                    ; preds = %453
  %455 = load i64, i64* %43, align 8
  %456 = add i64 %455, 1
  store i64 %456, i64* %43, align 8
  br label %161

; <label>:457:                                    ; preds = %161
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_18ClassBoxC2Ev(%"struct.(anonymous namespace)::ClassBox"*) unnamed_addr #0 align 2 {
  %2 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %2, align 8
  %3 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %2, align 8
  %4 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %3, i32 0, i32 0
  store float 0.000000e+00, float* %4, align 8
  %5 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %3, i32 0, i32 1
  store i64 0, i64* %5, align 8
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt4sortIPN12_GLOBAL__N_18ClassBoxEZNS0_18libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKS1_SB_E_EvS4_S4_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %3 = alloca %class.anon, align 1
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %7 = alloca %class.anon, align 1
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  call void @_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EENS0_15_Iter_comp_iterIS4_EES4_()
  call void @_ZSt6__sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %9, %"struct.(anonymous namespace)::ClassBox"* %10)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal zeroext i1 @_ZN12_GLOBAL__N_18checkIOUERKNS_3BoxES2_fm(%"struct.(anonymous namespace)::Box"* dereferenceable(16), %"struct.(anonymous namespace)::Box"* dereferenceable(16), float, i64) #2 {
  %5 = alloca i1, align 1
  %6 = alloca %"struct.(anonymous namespace)::Box"*, align 8
  %7 = alloca %"struct.(anonymous namespace)::Box"*, align 8
  %8 = alloca float, align 4
  %9 = alloca i64, align 8
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  %19 = alloca float, align 4
  %20 = alloca float, align 4
  %21 = alloca float, align 4
  %22 = alloca float, align 4
  %23 = alloca float, align 4
  %24 = alloca float, align 4
  %25 = alloca float, align 4
  %26 = alloca float, align 4
  %27 = alloca float, align 4
  %28 = alloca float, align 4
  %29 = alloca float, align 4
  store %"struct.(anonymous namespace)::Box"* %0, %"struct.(anonymous namespace)::Box"** %6, align 8
  store %"struct.(anonymous namespace)::Box"* %1, %"struct.(anonymous namespace)::Box"** %7, align 8
  store float %2, float* %8, align 4
  store i64 %3, i64* %9, align 8
  store float 0.000000e+00, float* %10, align 4
  store float 0.000000e+00, float* %11, align 4
  store float 0.000000e+00, float* %12, align 4
  store float 0.000000e+00, float* %13, align 4
  store float 0.000000e+00, float* %14, align 4
  store float 0.000000e+00, float* %15, align 4
  store float 0.000000e+00, float* %16, align 4
  store float 0.000000e+00, float* %17, align 4
  %30 = load i64, i64* %9, align 8
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %57, label %32

; <label>:32:                                     ; preds = %4
  %33 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %6, align 8
  %34 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %33, i32 0, i32 0
  %35 = load float, float* %34, align 4
  %36 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %6, align 8
  %37 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %36, i32 0, i32 2
  %38 = load float, float* %37, align 4
  call void @_ZN12_GLOBAL__N_16maxMinEffRfS0_(float %35, float %38, float* dereferenceable(4) %10, float* dereferenceable(4) %12)
  %39 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %6, align 8
  %40 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %39, i32 0, i32 1
  %41 = load float, float* %40, align 4
  %42 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %6, align 8
  %43 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %42, i32 0, i32 3
  %44 = load float, float* %43, align 4
  call void @_ZN12_GLOBAL__N_16maxMinEffRfS0_(float %41, float %44, float* dereferenceable(4) %11, float* dereferenceable(4) %13)
  %45 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %7, align 8
  %46 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %45, i32 0, i32 0
  %47 = load float, float* %46, align 4
  %48 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %7, align 8
  %49 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %48, i32 0, i32 2
  %50 = load float, float* %49, align 4
  call void @_ZN12_GLOBAL__N_16maxMinEffRfS0_(float %47, float %50, float* dereferenceable(4) %14, float* dereferenceable(4) %16)
  %51 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %7, align 8
  %52 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %51, i32 0, i32 1
  %53 = load float, float* %52, align 4
  %54 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %7, align 8
  %55 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %54, i32 0, i32 3
  %56 = load float, float* %55, align 4
  call void @_ZN12_GLOBAL__N_16maxMinEffRfS0_(float %53, float %56, float* dereferenceable(4) %15, float* dereferenceable(4) %17)
  br label %114

; <label>:57:                                     ; preds = %4
  %58 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %6, align 8
  %59 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %58, i32 0, i32 2
  %60 = load float, float* %59, align 4
  %61 = fdiv reassoc nsz arcp float %60, 2.000000e+00
  store float %61, float* %18, align 4
  %62 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %6, align 8
  %63 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %62, i32 0, i32 3
  %64 = load float, float* %63, align 4
  %65 = fdiv reassoc nsz arcp float %64, 2.000000e+00
  store float %65, float* %19, align 4
  %66 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %7, align 8
  %67 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %66, i32 0, i32 2
  %68 = load float, float* %67, align 4
  %69 = fdiv reassoc nsz arcp float %68, 2.000000e+00
  store float %69, float* %20, align 4
  %70 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %7, align 8
  %71 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %70, i32 0, i32 3
  %72 = load float, float* %71, align 4
  %73 = fdiv reassoc nsz arcp float %72, 2.000000e+00
  store float %73, float* %21, align 4
  %74 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %6, align 8
  %75 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %74, i32 0, i32 0
  %76 = load float, float* %75, align 4
  %77 = load float, float* %18, align 4
  %78 = fsub reassoc nsz arcp contract float %76, %77
  store float %78, float* %10, align 4
  %79 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %6, align 8
  %80 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %79, i32 0, i32 1
  %81 = load float, float* %80, align 4
  %82 = load float, float* %19, align 4
  %83 = fsub reassoc nsz arcp contract float %81, %82
  store float %83, float* %11, align 4
  %84 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %6, align 8
  %85 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %84, i32 0, i32 0
  %86 = load float, float* %85, align 4
  %87 = load float, float* %18, align 4
  %88 = fadd reassoc nsz arcp contract float %86, %87
  store float %88, float* %12, align 4
  %89 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %6, align 8
  %90 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %89, i32 0, i32 1
  %91 = load float, float* %90, align 4
  %92 = load float, float* %19, align 4
  %93 = fadd reassoc nsz arcp contract float %91, %92
  store float %93, float* %13, align 4
  %94 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %7, align 8
  %95 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %94, i32 0, i32 0
  %96 = load float, float* %95, align 4
  %97 = load float, float* %20, align 4
  %98 = fsub reassoc nsz arcp contract float %96, %97
  store float %98, float* %14, align 4
  %99 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %7, align 8
  %100 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %99, i32 0, i32 1
  %101 = load float, float* %100, align 4
  %102 = load float, float* %21, align 4
  %103 = fsub reassoc nsz arcp contract float %101, %102
  store float %103, float* %15, align 4
  %104 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %7, align 8
  %105 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %104, i32 0, i32 0
  %106 = load float, float* %105, align 4
  %107 = load float, float* %20, align 4
  %108 = fadd reassoc nsz arcp contract float %106, %107
  store float %108, float* %16, align 4
  %109 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %7, align 8
  %110 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %109, i32 0, i32 1
  %111 = load float, float* %110, align 4
  %112 = load float, float* %21, align 4
  %113 = fadd reassoc nsz arcp contract float %111, %112
  store float %113, float* %17, align 4
  br label %114

; <label>:114:                                    ; preds = %57, %32
  %115 = load float, float* %10, align 4
  %116 = load float, float* %14, align 4
  %117 = fcmp reassoc nsz arcp ogt float %115, %116
  br i1 %117, label %118, label %120

; <label>:118:                                    ; preds = %114
  %119 = load float, float* %10, align 4
  br label %122

; <label>:120:                                    ; preds = %114
  %121 = load float, float* %14, align 4
  br label %122

; <label>:122:                                    ; preds = %120, %118
  %123 = phi float [ %119, %118 ], [ %121, %120 ]
  store float %123, float* %22, align 4
  %124 = load float, float* %11, align 4
  %125 = load float, float* %15, align 4
  %126 = fcmp reassoc nsz arcp ogt float %124, %125
  br i1 %126, label %127, label %129

; <label>:127:                                    ; preds = %122
  %128 = load float, float* %11, align 4
  br label %131

; <label>:129:                                    ; preds = %122
  %130 = load float, float* %15, align 4
  br label %131

; <label>:131:                                    ; preds = %129, %127
  %132 = phi float [ %128, %127 ], [ %130, %129 ]
  store float %132, float* %23, align 4
  %133 = load float, float* %12, align 4
  %134 = load float, float* %16, align 4
  %135 = fcmp reassoc nsz arcp olt float %133, %134
  br i1 %135, label %136, label %138

; <label>:136:                                    ; preds = %131
  %137 = load float, float* %12, align 4
  br label %140

; <label>:138:                                    ; preds = %131
  %139 = load float, float* %16, align 4
  br label %140

; <label>:140:                                    ; preds = %138, %136
  %141 = phi float [ %137, %136 ], [ %139, %138 ]
  store float %141, float* %24, align 4
  %142 = load float, float* %13, align 4
  %143 = load float, float* %17, align 4
  %144 = fcmp reassoc nsz arcp olt float %142, %143
  br i1 %144, label %145, label %147

; <label>:145:                                    ; preds = %140
  %146 = load float, float* %13, align 4
  br label %149

; <label>:147:                                    ; preds = %140
  %148 = load float, float* %17, align 4
  br label %149

; <label>:149:                                    ; preds = %147, %145
  %150 = phi float [ %146, %145 ], [ %148, %147 ]
  store float %150, float* %25, align 4
  %151 = load float, float* %24, align 4
  %152 = load float, float* %22, align 4
  %153 = fsub reassoc nsz arcp contract float %151, %152
  %154 = fcmp reassoc nsz arcp ogt float 0.000000e+00, %153
  br i1 %154, label %155, label %156

; <label>:155:                                    ; preds = %149
  br label %160

; <label>:156:                                    ; preds = %149
  %157 = load float, float* %24, align 4
  %158 = load float, float* %22, align 4
  %159 = fsub reassoc nsz arcp contract float %157, %158
  br label %160

; <label>:160:                                    ; preds = %156, %155
  %161 = phi float [ 0.000000e+00, %155 ], [ %159, %156 ]
  %162 = load float, float* %25, align 4
  %163 = load float, float* %23, align 4
  %164 = fsub reassoc nsz arcp contract float %162, %163
  %165 = fcmp reassoc nsz arcp ogt float 0.000000e+00, %164
  br i1 %165, label %166, label %167

; <label>:166:                                    ; preds = %160
  br label %171

; <label>:167:                                    ; preds = %160
  %168 = load float, float* %25, align 4
  %169 = load float, float* %23, align 4
  %170 = fsub reassoc nsz arcp contract float %168, %169
  br label %171

; <label>:171:                                    ; preds = %167, %166
  %172 = phi float [ 0.000000e+00, %166 ], [ %170, %167 ]
  %173 = fmul reassoc nsz arcp contract float %161, %172
  store float %173, float* %26, align 4
  %174 = load float, float* %26, align 4
  %175 = fcmp reassoc nsz arcp oeq float %174, 0.000000e+00
  br i1 %175, label %176, label %177

; <label>:176:                                    ; preds = %171
  store i1 false, i1* %5, align 1
  br label %202

; <label>:177:                                    ; preds = %171
  %178 = load float, float* %12, align 4
  %179 = load float, float* %10, align 4
  %180 = fsub reassoc nsz arcp contract float %178, %179
  %181 = load float, float* %13, align 4
  %182 = load float, float* %11, align 4
  %183 = fsub reassoc nsz arcp contract float %181, %182
  %184 = fmul reassoc nsz arcp contract float %180, %183
  store float %184, float* %27, align 4
  %185 = load float, float* %16, align 4
  %186 = load float, float* %14, align 4
  %187 = fsub reassoc nsz arcp contract float %185, %186
  %188 = load float, float* %17, align 4
  %189 = load float, float* %15, align 4
  %190 = fsub reassoc nsz arcp contract float %188, %189
  %191 = fmul reassoc nsz arcp contract float %187, %190
  store float %191, float* %28, align 4
  %192 = load float, float* %27, align 4
  %193 = load float, float* %28, align 4
  %194 = fadd reassoc nsz arcp contract float %192, %193
  %195 = load float, float* %26, align 4
  %196 = fsub reassoc nsz arcp contract float %194, %195
  store float %196, float* %29, align 4
  %197 = load float, float* %26, align 4
  %198 = load float, float* %8, align 4
  %199 = load float, float* %29, align 4
  %200 = fmul reassoc nsz arcp contract float %198, %199
  %201 = fcmp reassoc nsz arcp ogt float %197, %200
  store i1 %201, i1* %5, align 1
  br label %202

; <label>:202:                                    ; preds = %177, %176
  %203 = load i1, i1* %5, align 1
  ret i1 %203
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_16maxMinEffRfS0_(float, float, float* dereferenceable(4), float* dereferenceable(4)) #0 {
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  store float %0, float* %5, align 4
  store float %1, float* %6, align 4
  store float* %2, float** %7, align 8
  store float* %3, float** %8, align 8
  %9 = load float, float* %5, align 4
  %10 = load float, float* %6, align 4
  %11 = fcmp reassoc nsz arcp oge float %9, %10
  br i1 %11, label %12, label %17

; <label>:12:                                     ; preds = %4
  %13 = load float, float* %6, align 4
  %14 = load float*, float** %7, align 8
  store float %13, float* %14, align 4
  %15 = load float, float* %5, align 4
  %16 = load float*, float** %8, align 8
  store float %15, float* %16, align 4
  br label %22

; <label>:17:                                     ; preds = %4
  %18 = load float, float* %5, align 4
  %19 = load float*, float** %7, align 8
  store float %18, float* %19, align 4
  %20 = load float, float* %6, align 4
  %21 = load float*, float** %8, align 8
  store float %20, float* %21, align 4
  br label %22

; <label>:22:                                     ; preds = %17, %12
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EENS0_15_Iter_comp_iterIS4_EES4_() #2 {
  %1 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %2 = alloca %class.anon, align 1
  %3 = alloca %class.anon, align 1
  %4 = call dereferenceable(1) %class.anon* @_ZSt4moveIRZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S3_PKfPKmmS5_S7_mS7_mjjffbEUlRKNS0_8ClassBoxESA_E_EONSt16remove_referenceIS2_E4typeEOS2_(%class.anon* dereferenceable(1) %2) #5
  call void @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EC2ESD_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %1)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt6__sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %8 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %10 = icmp ne %"struct.(anonymous namespace)::ClassBox"* %8, %9
  br i1 %10, label %11, label %28

; <label>:11:                                     ; preds = %2
  %12 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %13 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %14 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %15 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %16 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %14 to i64
  %17 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %15 to i64
  %18 = sub i64 %16, %17
  %19 = sdiv exact i64 %18, 16
  %20 = call i64 @_ZSt4__lgl(i64 %19)
  %21 = mul nsw i64 %20, 2
  %22 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %6 to i8*
  %23 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %22, i8* align 1 %23, i64 1, i1 false)
  call void @_ZSt16__introsort_loopIPN12_GLOBAL__N_18ClassBoxElN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_T1_(%"struct.(anonymous namespace)::ClassBox"* %12, %"struct.(anonymous namespace)::ClassBox"* %13, i64 %21)
  %24 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %25 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %26 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7 to i8*
  %27 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 %27, i64 1, i1 false)
  call void @_ZSt22__final_insertion_sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %24, %"struct.(anonymous namespace)::ClassBox"* %25)
  br label %28

; <label>:28:                                     ; preds = %11, %2
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local i64 @_ZSt4__lgl(i64) #0 comdat {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = call i64 @llvm.ctlz.i64(i64 %3, i1 true)
  %5 = trunc i64 %4 to i32
  %6 = sext i32 %5 to i64
  %7 = sub i64 63, %6
  ret i64 %7
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt16__introsort_loopIPN12_GLOBAL__N_18ClassBoxElN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_T1_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, i64) #2 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %9 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %10 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  store i64 %2, i64* %7, align 8
  br label %12

; <label>:12:                                     ; preds = %29, %3
  %13 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %14 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %15 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %13 to i64
  %16 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %14 to i64
  %17 = sub i64 %15, %16
  %18 = sdiv exact i64 %17, 16
  %19 = icmp sgt i64 %18, 16
  br i1 %19, label %20, label %43

; <label>:20:                                     ; preds = %12
  %21 = load i64, i64* %7, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %29

; <label>:23:                                     ; preds = %20
  %24 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %25 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %26 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %27 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  %28 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %27, i8* align 1 %28, i64 1, i1 false)
  call void @_ZSt14__partial_sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %24, %"struct.(anonymous namespace)::ClassBox"* %25, %"struct.(anonymous namespace)::ClassBox"* %26)
  br label %43

; <label>:29:                                     ; preds = %20
  %30 = load i64, i64* %7, align 8
  %31 = add nsw i64 %30, -1
  store i64 %31, i64* %7, align 8
  %32 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %33 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %34 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %10 to i8*
  %35 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %35, i64 1, i1 false)
  %36 = call %"struct.(anonymous namespace)::ClassBox"* @_ZSt27__unguarded_partition_pivotIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEES7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %32, %"struct.(anonymous namespace)::ClassBox"* %33)
  store %"struct.(anonymous namespace)::ClassBox"* %36, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  %37 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  %38 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %39 = load i64, i64* %7, align 8
  %40 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %11 to i8*
  %41 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %41, i64 1, i1 false)
  call void @_ZSt16__introsort_loopIPN12_GLOBAL__N_18ClassBoxElN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_T1_(%"struct.(anonymous namespace)::ClassBox"* %37, %"struct.(anonymous namespace)::ClassBox"* %38, i64 %39)
  %42 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %42, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  br label %12

; <label>:43:                                     ; preds = %23, %12
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt22__final_insertion_sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %11 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %9 to i64
  %12 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %10 to i64
  %13 = sub i64 %11, %12
  %14 = sdiv exact i64 %13, 16
  %15 = icmp sgt i64 %14, 16
  br i1 %15, label %16, label %27

; <label>:16:                                     ; preds = %2
  %17 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %18 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %19 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %18, i64 16
  %20 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %6 to i8*
  %21 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %21, i64 1, i1 false)
  call void @_ZSt16__insertion_sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %17, %"struct.(anonymous namespace)::ClassBox"* %19)
  %22 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %23 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %22, i64 16
  %24 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %25 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7 to i8*
  %26 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %26, i64 1, i1 false)
  call void @_ZSt26__unguarded_insertion_sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %23, %"struct.(anonymous namespace)::ClassBox"* %24)
  br label %32

; <label>:27:                                     ; preds = %2
  %28 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %29 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %30 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  %31 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 1, i1 false)
  call void @_ZSt16__insertion_sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %28, %"struct.(anonymous namespace)::ClassBox"* %29)
  br label %32

; <label>:32:                                     ; preds = %27, %16
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt16__insertion_sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca %"struct.(anonymous namespace)::ClassBox", align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %10 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %11 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %12 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %13 = icmp eq %"struct.(anonymous namespace)::ClassBox"* %11, %12
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %2
  br label %48

; <label>:15:                                     ; preds = %2
  %16 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %17 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %16, i64 1
  store %"struct.(anonymous namespace)::ClassBox"* %17, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  br label %18

; <label>:18:                                     ; preds = %45, %15
  %19 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %20 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %21 = icmp ne %"struct.(anonymous namespace)::ClassBox"* %19, %20
  br i1 %21, label %22, label %48

; <label>:22:                                     ; preds = %18
  %23 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %24 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %25 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3, %"struct.(anonymous namespace)::ClassBox"* %23, %"struct.(anonymous namespace)::ClassBox"* %24)
  br i1 %25, label %26, label %40

; <label>:26:                                     ; preds = %22
  %27 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %28 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %27) #5
  %29 = bitcast %"struct.(anonymous namespace)::ClassBox"* %7 to i8*
  %30 = bitcast %"struct.(anonymous namespace)::ClassBox"* %28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 16, i1 false)
  %31 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %32 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %33 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %34 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %33, i64 1
  %35 = call %"struct.(anonymous namespace)::ClassBox"* @_ZSt13move_backwardIPN12_GLOBAL__N_18ClassBoxES2_ET0_T_S4_S3_(%"struct.(anonymous namespace)::ClassBox"* %31, %"struct.(anonymous namespace)::ClassBox"* %32, %"struct.(anonymous namespace)::ClassBox"* %34)
  %36 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %7) #5
  %37 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %38 = bitcast %"struct.(anonymous namespace)::ClassBox"* %37 to i8*
  %39 = bitcast %"struct.(anonymous namespace)::ClassBox"* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 16, i1 false)
  br label %44

; <label>:40:                                     ; preds = %22
  %41 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %42 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %9 to i8*
  %43 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %43, i64 1, i1 false)
  call void @_ZN9__gnu_cxx5__ops15__val_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EENS0_14_Val_comp_iterIS4_EENS0_15_Iter_comp_iterIS4_EE()
  call void @_ZSt25__unguarded_linear_insertIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops14_Val_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_T0_(%"struct.(anonymous namespace)::ClassBox"* %41)
  br label %44

; <label>:44:                                     ; preds = %40, %26
  br label %45

; <label>:45:                                     ; preds = %44
  %46 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %47 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %46, i32 1
  store %"struct.(anonymous namespace)::ClassBox"* %47, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  br label %18

; <label>:48:                                     ; preds = %14, %18
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt26__unguarded_insertion_sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %10, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  br label %11

; <label>:11:                                     ; preds = %19, %2
  %12 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %13 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %14 = icmp ne %"struct.(anonymous namespace)::ClassBox"* %12, %13
  br i1 %14, label %15, label %22

; <label>:15:                                     ; preds = %11
  %16 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %17 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  %18 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %18, i64 1, i1 false)
  call void @_ZN9__gnu_cxx5__ops15__val_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EENS0_14_Val_comp_iterIS4_EENS0_15_Iter_comp_iterIS4_EE()
  call void @_ZSt25__unguarded_linear_insertIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops14_Val_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_T0_(%"struct.(anonymous namespace)::ClassBox"* %16)
  br label %19

; <label>:19:                                     ; preds = %15
  %20 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %21 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %20, i32 1
  store %"struct.(anonymous namespace)::ClassBox"* %21, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  br label %11

; <label>:22:                                     ; preds = %11
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN9__gnu_cxx5__ops15__val_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EENS0_14_Val_comp_iterIS4_EENS0_15_Iter_comp_iterIS4_EE() #2 {
  %1 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %2 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %3 = call dereferenceable(1) %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* @_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S6_PKfPKmmS8_SA_mSA_mjjffbEUlRKNS3_8ClassBoxESD_E_EEEONSt16remove_referenceIS5_E4typeEOS5_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1) %2) #5
  call void @_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EC2EONS0_15_Iter_comp_iterISD_EE(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %1, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1) %3)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt25__unguarded_linear_insertIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops14_Val_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_T0_(%"struct.(anonymous namespace)::ClassBox"*) #2 {
  %2 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %3 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %4 = alloca %"struct.(anonymous namespace)::ClassBox", align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %3, align 8
  %6 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %3, align 8
  %7 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %6) #5
  %8 = bitcast %"struct.(anonymous namespace)::ClassBox"* %4 to i8*
  %9 = bitcast %"struct.(anonymous namespace)::ClassBox"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 16, i1 false)
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %3, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %10, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %11 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %12 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %11, i32 -1
  store %"struct.(anonymous namespace)::ClassBox"* %12, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  br label %13

; <label>:13:                                     ; preds = %16, %1
  %14 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %15 = call zeroext i1 @_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclISA_PSA_EEbRS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %2, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %4, %"struct.(anonymous namespace)::ClassBox"* %14)
  br i1 %15, label %16, label %25

; <label>:16:                                     ; preds = %13
  %17 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %18 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %17) #5
  %19 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %3, align 8
  %20 = bitcast %"struct.(anonymous namespace)::ClassBox"* %19 to i8*
  %21 = bitcast %"struct.(anonymous namespace)::ClassBox"* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 16, i1 false)
  %22 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %22, %"struct.(anonymous namespace)::ClassBox"** %3, align 8
  %23 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %24 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %23, i32 -1
  store %"struct.(anonymous namespace)::ClassBox"* %24, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  br label %13

; <label>:25:                                     ; preds = %13
  %26 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %4) #5
  %27 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %3, align 8
  %28 = bitcast %"struct.(anonymous namespace)::ClassBox"* %27 to i8*
  %29 = bitcast %"struct.(anonymous namespace)::ClassBox"* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 16, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16)) #0 {
  %2 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %2, align 8
  %3 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %2, align 8
  ret %"struct.(anonymous namespace)::ClassBox"* %3
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclISA_PSA_EEbRS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16), %"struct.(anonymous namespace)::ClassBox"*) #0 align 2 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %7 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  %8 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7, i32 0, i32 0
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %11 = call zeroext i1 @_ZZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S2_PKfPKmmS4_S6_mS6_mjjffbENKUlRKNS_8ClassBoxES9_E_clES9_S9_(%class.anon* %8, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %9, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %10)
  ret i1 %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @_ZZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S2_PKfPKmmS4_S6_mS6_mjjffbENKUlRKNS_8ClassBoxES9_E_clES9_S9_(%class.anon*, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16), %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16)) #0 align 2 {
  %4 = alloca %class.anon*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %class.anon* %0, %class.anon** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %7 = load %class.anon*, %class.anon** %4, align 8
  %8 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %9 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %8, i32 0, i32 0
  %10 = load float, float* %9, align 8
  %11 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %12 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %11, i32 0, i32 0
  %13 = load float, float* %12, align 8
  %14 = fcmp reassoc nsz arcp ogt float %10, %13
  ret i1 %14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal dereferenceable(1) %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* @_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S6_PKfPKmmS8_SA_mSA_mjjffbEUlRKNS3_8ClassBoxESD_E_EEEONSt16remove_referenceIS5_E4typeEOS5_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1)) #0 {
  %2 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %2, align 8
  %3 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %2, align 8
  ret %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EC2EONS0_15_Iter_comp_iterISD_EE(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1)) unnamed_addr #0 align 2 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %3, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %1, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  %5 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %3, align 8
  %6 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5, i32 0, i32 0
  %7 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  %8 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7, i32 0, i32 0
  %9 = call dereferenceable(1) %class.anon* @_ZSt4moveIRZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S3_PKfPKmmS5_S7_mS7_mjjffbEUlRKNS0_8ClassBoxESA_E_EONSt16remove_referenceIS2_E4typeEOS2_(%class.anon* dereferenceable(1) %8) #5
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal dereferenceable(1) %class.anon* @_ZSt4moveIRZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S3_PKfPKmmS5_S7_mS7_mjjffbEUlRKNS0_8ClassBoxESA_E_EONSt16remove_referenceIS2_E4typeEOS2_(%class.anon* dereferenceable(1)) #0 {
  %2 = alloca %class.anon*, align 8
  store %class.anon* %0, %class.anon** %2, align 8
  %3 = load %class.anon*, %class.anon** %2, align 8
  ret %class.anon* %3
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #0 align 2 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %7 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  %8 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7, i32 0, i32 0
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %11 = call zeroext i1 @_ZZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S2_PKfPKmmS4_S6_mS6_mjjffbENKUlRKNS_8ClassBoxES9_E_clES9_S9_(%class.anon* %8, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %9, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %10)
  ret i1 %11
}

; Function Attrs: noinline optnone uwtable
define internal %"struct.(anonymous namespace)::ClassBox"* @_ZSt13move_backwardIPN12_GLOBAL__N_18ClassBoxES2_ET0_T_S4_S3_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %7 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %8 = call %"struct.(anonymous namespace)::ClassBox"* @_ZSt12__miter_baseIPN12_GLOBAL__N_18ClassBoxEET_S3_(%"struct.(anonymous namespace)::ClassBox"* %7)
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %10 = call %"struct.(anonymous namespace)::ClassBox"* @_ZSt12__miter_baseIPN12_GLOBAL__N_18ClassBoxEET_S3_(%"struct.(anonymous namespace)::ClassBox"* %9)
  %11 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %12 = call %"struct.(anonymous namespace)::ClassBox"* @_ZSt23__copy_move_backward_a2ILb1EPN12_GLOBAL__N_18ClassBoxES2_ET1_T0_S4_S3_(%"struct.(anonymous namespace)::ClassBox"* %8, %"struct.(anonymous namespace)::ClassBox"* %10, %"struct.(anonymous namespace)::ClassBox"* %11)
  ret %"struct.(anonymous namespace)::ClassBox"* %12
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %"struct.(anonymous namespace)::ClassBox"* @_ZSt12__miter_baseIPN12_GLOBAL__N_18ClassBoxEET_S3_(%"struct.(anonymous namespace)::ClassBox"*) #0 {
  %2 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %2, align 8
  %3 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %2, align 8
  ret %"struct.(anonymous namespace)::ClassBox"* %3
}

; Function Attrs: noinline optnone uwtable
define internal %"struct.(anonymous namespace)::ClassBox"* @_ZSt23__copy_move_backward_a2ILb1EPN12_GLOBAL__N_18ClassBoxES2_ET1_T0_S4_S3_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %7 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %8 = call %"struct.(anonymous namespace)::ClassBox"* @_ZSt12__niter_baseIPN12_GLOBAL__N_18ClassBoxEET_S3_(%"struct.(anonymous namespace)::ClassBox"* %7)
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %10 = call %"struct.(anonymous namespace)::ClassBox"* @_ZSt12__niter_baseIPN12_GLOBAL__N_18ClassBoxEET_S3_(%"struct.(anonymous namespace)::ClassBox"* %9)
  %11 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %12 = call %"struct.(anonymous namespace)::ClassBox"* @_ZSt12__niter_baseIPN12_GLOBAL__N_18ClassBoxEET_S3_(%"struct.(anonymous namespace)::ClassBox"* %11)
  %13 = call %"struct.(anonymous namespace)::ClassBox"* @_ZSt22__copy_move_backward_aILb1EPN12_GLOBAL__N_18ClassBoxES2_ET1_T0_S4_S3_(%"struct.(anonymous namespace)::ClassBox"* %8, %"struct.(anonymous namespace)::ClassBox"* %10, %"struct.(anonymous namespace)::ClassBox"* %12)
  ret %"struct.(anonymous namespace)::ClassBox"* %13
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %"struct.(anonymous namespace)::ClassBox"* @_ZSt12__niter_baseIPN12_GLOBAL__N_18ClassBoxEET_S3_(%"struct.(anonymous namespace)::ClassBox"*) #0 {
  %2 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %2, align 8
  %3 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %2, align 8
  ret %"struct.(anonymous namespace)::ClassBox"* %3
}

; Function Attrs: noinline optnone uwtable
define internal %"struct.(anonymous namespace)::ClassBox"* @_ZSt22__copy_move_backward_aILb1EPN12_GLOBAL__N_18ClassBoxES2_ET1_T0_S4_S3_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca i8, align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  store i8 0, i8* %7, align 1
  %8 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %11 = call %"struct.(anonymous namespace)::ClassBox"* @_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPN12_GLOBAL__N_18ClassBoxES5_EET0_T_S7_S6_(%"struct.(anonymous namespace)::ClassBox"* %8, %"struct.(anonymous namespace)::ClassBox"* %9, %"struct.(anonymous namespace)::ClassBox"* %10)
  ret %"struct.(anonymous namespace)::ClassBox"* %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %"struct.(anonymous namespace)::ClassBox"* @_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPN12_GLOBAL__N_18ClassBoxES5_EET0_T_S7_S6_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #0 align 2 {
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca i64, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %8 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %10 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %8 to i64
  %11 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %9 to i64
  %12 = sub i64 %10, %11
  %13 = sdiv exact i64 %12, 16
  store i64 %13, i64* %7, align 8
  br label %14

; <label>:14:                                     ; preds = %25, %3
  %15 = load i64, i64* %7, align 8
  %16 = icmp sgt i64 %15, 0
  br i1 %16, label %17, label %28

; <label>:17:                                     ; preds = %14
  %18 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %19 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %18, i32 -1
  store %"struct.(anonymous namespace)::ClassBox"* %19, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %20 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %19) #5
  %21 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %22 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %21, i32 -1
  store %"struct.(anonymous namespace)::ClassBox"* %22, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %23 = bitcast %"struct.(anonymous namespace)::ClassBox"* %22 to i8*
  %24 = bitcast %"struct.(anonymous namespace)::ClassBox"* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 16, i1 false)
  br label %25

; <label>:25:                                     ; preds = %17
  %26 = load i64, i64* %7, align 8
  %27 = add nsw i64 %26, -1
  store i64 %27, i64* %7, align 8
  br label %14

; <label>:28:                                     ; preds = %14
  %29 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  ret %"struct.(anonymous namespace)::ClassBox"* %29
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt14__partial_sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %11 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %12 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  %13 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %13, i64 1, i1 false)
  call void @_ZSt13__heap_selectIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %9, %"struct.(anonymous namespace)::ClassBox"* %10, %"struct.(anonymous namespace)::ClassBox"* %11)
  %14 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %15 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  call void @_ZSt11__sort_heapIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_RT0_(%"struct.(anonymous namespace)::ClassBox"* %14, %"struct.(anonymous namespace)::ClassBox"* %15, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1) %4)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal %"struct.(anonymous namespace)::ClassBox"* @_ZSt27__unguarded_partition_pivotIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEES7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %11 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %12 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %10 to i64
  %13 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %11 to i64
  %14 = sub i64 %12, %13
  %15 = sdiv exact i64 %14, 16
  %16 = sdiv i64 %15, 2
  %17 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %9, i64 %16
  store %"struct.(anonymous namespace)::ClassBox"* %17, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %18 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %19 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %20 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %19, i64 1
  %21 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %22 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %23 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %22, i64 -1
  %24 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7 to i8*
  %25 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %24, i8* align 1 %25, i64 1, i1 false)
  call void @_ZSt22__move_median_to_firstIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %18, %"struct.(anonymous namespace)::ClassBox"* %20, %"struct.(anonymous namespace)::ClassBox"* %21, %"struct.(anonymous namespace)::ClassBox"* %23)
  %26 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %27 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %26, i64 1
  %28 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %29 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %30 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  %31 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 1, i1 false)
  %32 = call %"struct.(anonymous namespace)::ClassBox"* @_ZSt21__unguarded_partitionIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEES7_S7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %27, %"struct.(anonymous namespace)::ClassBox"* %28, %"struct.(anonymous namespace)::ClassBox"* %29)
  ret %"struct.(anonymous namespace)::ClassBox"* %32
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt22__move_median_to_firstIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %5 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %8 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %9 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %3, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %11 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %12 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5, %"struct.(anonymous namespace)::ClassBox"* %10, %"struct.(anonymous namespace)::ClassBox"* %11)
  br i1 %12, label %13, label %32

; <label>:13:                                     ; preds = %4
  %14 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %15 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  %16 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5, %"struct.(anonymous namespace)::ClassBox"* %14, %"struct.(anonymous namespace)::ClassBox"* %15)
  br i1 %16, label %17, label %20

; <label>:17:                                     ; preds = %13
  %18 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %19 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  call void @_ZSt9iter_swapIPN12_GLOBAL__N_18ClassBoxES2_EvT_T0_(%"struct.(anonymous namespace)::ClassBox"* %18, %"struct.(anonymous namespace)::ClassBox"* %19)
  br label %31

; <label>:20:                                     ; preds = %13
  %21 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %22 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  %23 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5, %"struct.(anonymous namespace)::ClassBox"* %21, %"struct.(anonymous namespace)::ClassBox"* %22)
  br i1 %23, label %24, label %27

; <label>:24:                                     ; preds = %20
  %25 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %26 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  call void @_ZSt9iter_swapIPN12_GLOBAL__N_18ClassBoxES2_EvT_T0_(%"struct.(anonymous namespace)::ClassBox"* %25, %"struct.(anonymous namespace)::ClassBox"* %26)
  br label %30

; <label>:27:                                     ; preds = %20
  %28 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %29 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  call void @_ZSt9iter_swapIPN12_GLOBAL__N_18ClassBoxES2_EvT_T0_(%"struct.(anonymous namespace)::ClassBox"* %28, %"struct.(anonymous namespace)::ClassBox"* %29)
  br label %30

; <label>:30:                                     ; preds = %27, %24
  br label %31

; <label>:31:                                     ; preds = %30, %17
  br label %51

; <label>:32:                                     ; preds = %4
  %33 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %34 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  %35 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5, %"struct.(anonymous namespace)::ClassBox"* %33, %"struct.(anonymous namespace)::ClassBox"* %34)
  br i1 %35, label %36, label %39

; <label>:36:                                     ; preds = %32
  %37 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %38 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  call void @_ZSt9iter_swapIPN12_GLOBAL__N_18ClassBoxES2_EvT_T0_(%"struct.(anonymous namespace)::ClassBox"* %37, %"struct.(anonymous namespace)::ClassBox"* %38)
  br label %50

; <label>:39:                                     ; preds = %32
  %40 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %41 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  %42 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5, %"struct.(anonymous namespace)::ClassBox"* %40, %"struct.(anonymous namespace)::ClassBox"* %41)
  br i1 %42, label %43, label %46

; <label>:43:                                     ; preds = %39
  %44 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %45 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  call void @_ZSt9iter_swapIPN12_GLOBAL__N_18ClassBoxES2_EvT_T0_(%"struct.(anonymous namespace)::ClassBox"* %44, %"struct.(anonymous namespace)::ClassBox"* %45)
  br label %49

; <label>:46:                                     ; preds = %39
  %47 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %48 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  call void @_ZSt9iter_swapIPN12_GLOBAL__N_18ClassBoxES2_EvT_T0_(%"struct.(anonymous namespace)::ClassBox"* %47, %"struct.(anonymous namespace)::ClassBox"* %48)
  br label %49

; <label>:49:                                     ; preds = %46, %43
  br label %50

; <label>:50:                                     ; preds = %49, %36
  br label %51

; <label>:51:                                     ; preds = %50, %31
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %"struct.(anonymous namespace)::ClassBox"* @_ZSt21__unguarded_partitionIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEES7_S7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #0 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  br label %8

; <label>:8:                                      ; preds = %3, %32
  br label %9

; <label>:9:                                      ; preds = %13, %8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %11 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %12 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4, %"struct.(anonymous namespace)::ClassBox"* %10, %"struct.(anonymous namespace)::ClassBox"* %11)
  br i1 %12, label %13, label %16

; <label>:13:                                     ; preds = %9
  %14 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %15 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %14, i32 1
  store %"struct.(anonymous namespace)::ClassBox"* %15, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  br label %9

; <label>:16:                                     ; preds = %9
  %17 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %18 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %17, i32 -1
  store %"struct.(anonymous namespace)::ClassBox"* %18, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  br label %19

; <label>:19:                                     ; preds = %23, %16
  %20 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %21 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %22 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4, %"struct.(anonymous namespace)::ClassBox"* %20, %"struct.(anonymous namespace)::ClassBox"* %21)
  br i1 %22, label %23, label %26

; <label>:23:                                     ; preds = %19
  %24 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %25 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %24, i32 -1
  store %"struct.(anonymous namespace)::ClassBox"* %25, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  br label %19

; <label>:26:                                     ; preds = %19
  %27 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %28 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %29 = icmp ult %"struct.(anonymous namespace)::ClassBox"* %27, %28
  br i1 %29, label %32, label %30

; <label>:30:                                     ; preds = %26
  %31 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  ret %"struct.(anonymous namespace)::ClassBox"* %31

; <label>:32:                                     ; preds = %26
  %33 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %34 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  call void @_ZSt9iter_swapIPN12_GLOBAL__N_18ClassBoxES2_EvT_T0_(%"struct.(anonymous namespace)::ClassBox"* %33, %"struct.(anonymous namespace)::ClassBox"* %34)
  %35 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %36 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %35, i32 1
  store %"struct.(anonymous namespace)::ClassBox"* %36, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  br label %8
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZSt9iter_swapIPN12_GLOBAL__N_18ClassBoxES2_EvT_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #0 {
  %3 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %3, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %5 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %3, align 8
  %6 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  call void @_ZSt4swapIN12_GLOBAL__N_18ClassBoxEENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SE_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %5, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %6) #5
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZSt4swapIN12_GLOBAL__N_18ClassBoxEENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SE_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16), %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16)) #0 {
  %3 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox", align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %3, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %6 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %3, align 8
  %7 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %6) #5
  %8 = bitcast %"struct.(anonymous namespace)::ClassBox"* %5 to i8*
  %9 = bitcast %"struct.(anonymous namespace)::ClassBox"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 16, i1 false)
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %11 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %10) #5
  %12 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %3, align 8
  %13 = bitcast %"struct.(anonymous namespace)::ClassBox"* %12 to i8*
  %14 = bitcast %"struct.(anonymous namespace)::ClassBox"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 16, i1 false)
  %15 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %5) #5
  %16 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %17 = bitcast %"struct.(anonymous namespace)::ClassBox"* %16 to i8*
  %18 = bitcast %"struct.(anonymous namespace)::ClassBox"* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 16, i1 false)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt13__heap_selectIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %8 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  call void @_ZSt11__make_heapIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_RT0_(%"struct.(anonymous namespace)::ClassBox"* %9, %"struct.(anonymous namespace)::ClassBox"* %10, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1) %4)
  %11 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %11, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  br label %12

; <label>:12:                                     ; preds = %25, %3
  %13 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %14 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %15 = icmp ult %"struct.(anonymous namespace)::ClassBox"* %13, %14
  br i1 %15, label %16, label %28

; <label>:16:                                     ; preds = %12
  %17 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %18 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %19 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4, %"struct.(anonymous namespace)::ClassBox"* %17, %"struct.(anonymous namespace)::ClassBox"* %18)
  br i1 %19, label %20, label %24

; <label>:20:                                     ; preds = %16
  %21 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %22 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %23 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  call void @_ZSt10__pop_heapIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_S7_RT0_(%"struct.(anonymous namespace)::ClassBox"* %21, %"struct.(anonymous namespace)::ClassBox"* %22, %"struct.(anonymous namespace)::ClassBox"* %23, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1) %4)
  br label %24

; <label>:24:                                     ; preds = %20, %16
  br label %25

; <label>:25:                                     ; preds = %24
  %26 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %27 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %26, i32 1
  store %"struct.(anonymous namespace)::ClassBox"* %27, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  br label %12

; <label>:28:                                     ; preds = %12
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt11__sort_heapIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_RT0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1)) #2 {
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %2, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %6, align 8
  br label %7

; <label>:7:                                      ; preds = %15, %3
  %8 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %10 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %8 to i64
  %11 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %9 to i64
  %12 = sub i64 %10, %11
  %13 = sdiv exact i64 %12, 16
  %14 = icmp sgt i64 %13, 1
  br i1 %14, label %15, label %22

; <label>:15:                                     ; preds = %7
  %16 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %17 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %16, i32 -1
  store %"struct.(anonymous namespace)::ClassBox"* %17, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %18 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %19 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %20 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %21 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %6, align 8
  call void @_ZSt10__pop_heapIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_S7_RT0_(%"struct.(anonymous namespace)::ClassBox"* %18, %"struct.(anonymous namespace)::ClassBox"* %19, %"struct.(anonymous namespace)::ClassBox"* %20, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1) %21)
  br label %7

; <label>:22:                                     ; preds = %7
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt10__pop_heapIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_S7_RT0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1)) #2 {
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %9 = alloca %"struct.(anonymous namespace)::ClassBox", align 8
  %10 = alloca %"struct.(anonymous namespace)::ClassBox", align 8
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %8, align 8
  %12 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %13 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %12) #5
  %14 = bitcast %"struct.(anonymous namespace)::ClassBox"* %9 to i8*
  %15 = bitcast %"struct.(anonymous namespace)::ClassBox"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 16, i1 false)
  %16 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %17 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %16) #5
  %18 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %19 = bitcast %"struct.(anonymous namespace)::ClassBox"* %18 to i8*
  %20 = bitcast %"struct.(anonymous namespace)::ClassBox"* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 16, i1 false)
  %21 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %22 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %23 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %24 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %22 to i64
  %25 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %23 to i64
  %26 = sub i64 %24, %25
  %27 = sdiv exact i64 %26, 16
  %28 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %9) #5
  %29 = bitcast %"struct.(anonymous namespace)::ClassBox"* %10 to i8*
  %30 = bitcast %"struct.(anonymous namespace)::ClassBox"* %28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 16, i1 false)
  %31 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %8, align 8
  %32 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %11 to i8*
  %33 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 %33, i64 1, i1 false)
  %34 = bitcast %"struct.(anonymous namespace)::ClassBox"* %10 to { float, i64 }*
  %35 = getelementptr inbounds { float, i64 }, { float, i64 }* %34, i32 0, i32 0
  %36 = load float, float* %35, align 8
  %37 = getelementptr inbounds { float, i64 }, { float, i64 }* %34, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  call void @_ZSt13__adjust_heapIPN12_GLOBAL__N_18ClassBoxElS1_N9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_T0_SH_T1_T2_(%"struct.(anonymous namespace)::ClassBox"* %21, i64 0, i64 %27, float %36, i64 %38)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt13__adjust_heapIPN12_GLOBAL__N_18ClassBoxElS1_N9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_T0_SH_T1_T2_(%"struct.(anonymous namespace)::ClassBox"*, i64, i64, float, i64) #2 {
  %6 = alloca %"struct.(anonymous namespace)::ClassBox", align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %8 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %14 = alloca %"struct.(anonymous namespace)::ClassBox", align 8
  %15 = bitcast %"struct.(anonymous namespace)::ClassBox"* %6 to { float, i64 }*
  %16 = getelementptr inbounds { float, i64 }, { float, i64 }* %15, i32 0, i32 0
  store float %3, float* %16, align 8
  %17 = getelementptr inbounds { float, i64 }, { float, i64 }* %15, i32 0, i32 1
  store i64 %4, i64* %17, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  store i64 %1, i64* %9, align 8
  store i64 %2, i64* %10, align 8
  %18 = load i64, i64* %9, align 8
  store i64 %18, i64* %11, align 8
  %19 = load i64, i64* %9, align 8
  store i64 %19, i64* %12, align 8
  br label %20

; <label>:20:                                     ; preds = %41, %5
  %21 = load i64, i64* %12, align 8
  %22 = load i64, i64* %10, align 8
  %23 = sub nsw i64 %22, 1
  %24 = sdiv i64 %23, 2
  %25 = icmp slt i64 %21, %24
  br i1 %25, label %26, label %52

; <label>:26:                                     ; preds = %20
  %27 = load i64, i64* %12, align 8
  %28 = add nsw i64 %27, 1
  %29 = mul nsw i64 2, %28
  store i64 %29, i64* %12, align 8
  %30 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %31 = load i64, i64* %12, align 8
  %32 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %30, i64 %31
  %33 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %34 = load i64, i64* %12, align 8
  %35 = sub nsw i64 %34, 1
  %36 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %33, i64 %35
  %37 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7, %"struct.(anonymous namespace)::ClassBox"* %32, %"struct.(anonymous namespace)::ClassBox"* %36)
  br i1 %37, label %38, label %41

; <label>:38:                                     ; preds = %26
  %39 = load i64, i64* %12, align 8
  %40 = add nsw i64 %39, -1
  store i64 %40, i64* %12, align 8
  br label %41

; <label>:41:                                     ; preds = %38, %26
  %42 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %43 = load i64, i64* %12, align 8
  %44 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %42, i64 %43
  %45 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %44) #5
  %46 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %47 = load i64, i64* %9, align 8
  %48 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %46, i64 %47
  %49 = bitcast %"struct.(anonymous namespace)::ClassBox"* %48 to i8*
  %50 = bitcast %"struct.(anonymous namespace)::ClassBox"* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %49, i8* align 8 %50, i64 16, i1 false)
  %51 = load i64, i64* %12, align 8
  store i64 %51, i64* %9, align 8
  br label %20

; <label>:52:                                     ; preds = %20
  %53 = load i64, i64* %10, align 8
  %54 = and i64 %53, 1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %78

; <label>:56:                                     ; preds = %52
  %57 = load i64, i64* %12, align 8
  %58 = load i64, i64* %10, align 8
  %59 = sub nsw i64 %58, 2
  %60 = sdiv i64 %59, 2
  %61 = icmp eq i64 %57, %60
  br i1 %61, label %62, label %78

; <label>:62:                                     ; preds = %56
  %63 = load i64, i64* %12, align 8
  %64 = add nsw i64 %63, 1
  %65 = mul nsw i64 2, %64
  store i64 %65, i64* %12, align 8
  %66 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %67 = load i64, i64* %12, align 8
  %68 = sub nsw i64 %67, 1
  %69 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %66, i64 %68
  %70 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %69) #5
  %71 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %72 = load i64, i64* %9, align 8
  %73 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %71, i64 %72
  %74 = bitcast %"struct.(anonymous namespace)::ClassBox"* %73 to i8*
  %75 = bitcast %"struct.(anonymous namespace)::ClassBox"* %70 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 16, i1 false)
  %76 = load i64, i64* %12, align 8
  %77 = sub nsw i64 %76, 1
  store i64 %77, i64* %9, align 8
  br label %78

; <label>:78:                                     ; preds = %62, %56, %52
  %79 = call dereferenceable(1) %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* @_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S6_PKfPKmmS8_SA_mSA_mjjffbEUlRKNS3_8ClassBoxESD_E_EEEONSt16remove_referenceIS5_E4typeEOS5_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1) %7) #5
  call void @_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EC2EONS0_15_Iter_comp_iterISD_EE(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %13, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1) %79)
  %80 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %81 = load i64, i64* %9, align 8
  %82 = load i64, i64* %11, align 8
  %83 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %6) #5
  %84 = bitcast %"struct.(anonymous namespace)::ClassBox"* %14 to i8*
  %85 = bitcast %"struct.(anonymous namespace)::ClassBox"* %83 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 16, i1 false)
  %86 = bitcast %"struct.(anonymous namespace)::ClassBox"* %14 to { float, i64 }*
  %87 = getelementptr inbounds { float, i64 }, { float, i64 }* %86, i32 0, i32 0
  %88 = load float, float* %87, align 8
  %89 = getelementptr inbounds { float, i64 }, { float, i64 }* %86, i32 0, i32 1
  %90 = load i64, i64* %89, align 8
  call void @_ZSt11__push_heapIPN12_GLOBAL__N_18ClassBoxElS1_N9__gnu_cxx5__ops14_Iter_comp_valIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_T0_SH_T1_RT2_(%"struct.(anonymous namespace)::ClassBox"* %80, i64 %81, i64 %82, float %88, i64 %90, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1) %13)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EC2EONS0_15_Iter_comp_iterISD_EE(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1)) unnamed_addr #0 align 2 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %3, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %1, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  %5 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %3, align 8
  %6 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5, i32 0, i32 0
  %7 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  %8 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7, i32 0, i32 0
  %9 = call dereferenceable(1) %class.anon* @_ZSt4moveIRZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S3_PKfPKmmS5_S7_mS7_mjjffbEUlRKNS0_8ClassBoxESA_E_EONSt16remove_referenceIS2_E4typeEOS2_(%class.anon* dereferenceable(1) %8) #5
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt11__push_heapIPN12_GLOBAL__N_18ClassBoxElS1_N9__gnu_cxx5__ops14_Iter_comp_valIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_T0_SH_T1_RT2_(%"struct.(anonymous namespace)::ClassBox"*, i64, i64, float, i64, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1)) #2 {
  %7 = alloca %"struct.(anonymous namespace)::ClassBox", align 8
  %8 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %12 = alloca i64, align 8
  %13 = bitcast %"struct.(anonymous namespace)::ClassBox"* %7 to { float, i64 }*
  %14 = getelementptr inbounds { float, i64 }, { float, i64 }* %13, i32 0, i32 0
  store float %3, float* %14, align 8
  %15 = getelementptr inbounds { float, i64 }, { float, i64 }* %13, i32 0, i32 1
  store i64 %4, i64* %15, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  store i64 %1, i64* %9, align 8
  store i64 %2, i64* %10, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %11, align 8
  %16 = load i64, i64* %9, align 8
  %17 = sub nsw i64 %16, 1
  %18 = sdiv i64 %17, 2
  store i64 %18, i64* %12, align 8
  br label %19

; <label>:19:                                     ; preds = %31, %6
  %20 = load i64, i64* %9, align 8
  %21 = load i64, i64* %10, align 8
  %22 = icmp sgt i64 %20, %21
  br i1 %22, label %23, label %29

; <label>:23:                                     ; preds = %19
  %24 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %11, align 8
  %25 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %26 = load i64, i64* %12, align 8
  %27 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %25, i64 %26
  %28 = call zeroext i1 @_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SA_EEbS4_RT0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %24, %"struct.(anonymous namespace)::ClassBox"* %27, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %7)
  br label %29

; <label>:29:                                     ; preds = %23, %19
  %30 = phi i1 [ false, %19 ], [ %28, %23 ]
  br i1 %30, label %31, label %45

; <label>:31:                                     ; preds = %29
  %32 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %33 = load i64, i64* %12, align 8
  %34 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %32, i64 %33
  %35 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %34) #5
  %36 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %37 = load i64, i64* %9, align 8
  %38 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %36, i64 %37
  %39 = bitcast %"struct.(anonymous namespace)::ClassBox"* %38 to i8*
  %40 = bitcast %"struct.(anonymous namespace)::ClassBox"* %35 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 16, i1 false)
  %41 = load i64, i64* %12, align 8
  store i64 %41, i64* %9, align 8
  %42 = load i64, i64* %9, align 8
  %43 = sub nsw i64 %42, 1
  %44 = sdiv i64 %43, 2
  store i64 %44, i64* %12, align 8
  br label %19

; <label>:45:                                     ; preds = %29
  %46 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %7) #5
  %47 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %48 = load i64, i64* %9, align 8
  %49 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %47, i64 %48
  %50 = bitcast %"struct.(anonymous namespace)::ClassBox"* %49 to i8*
  %51 = bitcast %"struct.(anonymous namespace)::ClassBox"* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 16, i1 false)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal zeroext i1 @_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SA_EEbS4_RT0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16)) #2 align 2 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %7 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  %8 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7, i32 0, i32 0
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %11 = call zeroext i1 @_ZZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S2_PKfPKmmS4_S6_mS6_mjjffbENKUlRKNS_8ClassBoxES9_E_clES9_S9_(%class.anon* %8, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %9, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %10)
  ret i1 %11
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt11__make_heapIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_RT0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1)) #2 {
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca %"struct.(anonymous namespace)::ClassBox", align 8
  %10 = alloca %"struct.(anonymous namespace)::ClassBox", align 8
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %2, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %6, align 8
  %12 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %13 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %14 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %12 to i64
  %15 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %13 to i64
  %16 = sub i64 %14, %15
  %17 = sdiv exact i64 %16, 16
  %18 = icmp slt i64 %17, 2
  br i1 %18, label %19, label %20

; <label>:19:                                     ; preds = %3
  br label %57

; <label>:20:                                     ; preds = %3
  %21 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %22 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %23 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %21 to i64
  %24 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %22 to i64
  %25 = sub i64 %23, %24
  %26 = sdiv exact i64 %25, 16
  store i64 %26, i64* %7, align 8
  %27 = load i64, i64* %7, align 8
  %28 = sub nsw i64 %27, 2
  %29 = sdiv i64 %28, 2
  store i64 %29, i64* %8, align 8
  br label %30

; <label>:30:                                     ; preds = %20, %54
  %31 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %32 = load i64, i64* %8, align 8
  %33 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %31, i64 %32
  %34 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %33) #5
  %35 = bitcast %"struct.(anonymous namespace)::ClassBox"* %9 to i8*
  %36 = bitcast %"struct.(anonymous namespace)::ClassBox"* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 16, i1 false)
  %37 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %38 = load i64, i64* %8, align 8
  %39 = load i64, i64* %7, align 8
  %40 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %9) #5
  %41 = bitcast %"struct.(anonymous namespace)::ClassBox"* %10 to i8*
  %42 = bitcast %"struct.(anonymous namespace)::ClassBox"* %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 16, i1 false)
  %43 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %6, align 8
  %44 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %11 to i8*
  %45 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %45, i64 1, i1 false)
  %46 = bitcast %"struct.(anonymous namespace)::ClassBox"* %10 to { float, i64 }*
  %47 = getelementptr inbounds { float, i64 }, { float, i64 }* %46, i32 0, i32 0
  %48 = load float, float* %47, align 8
  %49 = getelementptr inbounds { float, i64 }, { float, i64 }* %46, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  call void @_ZSt13__adjust_heapIPN12_GLOBAL__N_18ClassBoxElS1_N9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericImEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_T0_SH_T1_T2_(%"struct.(anonymous namespace)::ClassBox"* %37, i64 %38, i64 %39, float %48, i64 %50)
  %51 = load i64, i64* %8, align 8
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %54

; <label>:53:                                     ; preds = %30
  br label %57

; <label>:54:                                     ; preds = %30
  %55 = load i64, i64* %8, align 8
  %56 = add nsw i64 %55, -1
  store i64 %56, i64* %8, align 8
  br label %30

; <label>:57:                                     ; preds = %53, %19
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EC2ESD_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"*) unnamed_addr #0 align 2 {
  %2 = alloca %class.anon, align 1
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %3, align 8
  %4 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %3, align 8
  %5 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4, i32 0, i32 0
  %6 = call dereferenceable(1) %class.anon* @_ZSt4moveIRZN12_GLOBAL__N_118libjit_nms_genericImEEvPT_S3_PKfPKmmS5_S7_mS7_mjjffbEUlRKNS0_8ClassBoxESA_E_EONSt16remove_referenceIS2_E4typeEOS2_(%class.anon* dereferenceable(1) %2) #5
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_nms_i32(i32*, i32*, float*, i64*, i64, float*, i64*, i64, i64*, i64, i32, i32, float, float, i1 zeroext) #2 {
  %16 = alloca i32*, align 8
  %17 = alloca i32*, align 8
  %18 = alloca float*, align 8
  %19 = alloca i64*, align 8
  %20 = alloca i64, align 8
  %21 = alloca float*, align 8
  %22 = alloca i64*, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64*, align 8
  %25 = alloca i64, align 8
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca float, align 4
  %29 = alloca float, align 4
  %30 = alloca i8, align 1
  store i32* %0, i32** %16, align 8
  store i32* %1, i32** %17, align 8
  store float* %2, float** %18, align 8
  store i64* %3, i64** %19, align 8
  store i64 %4, i64* %20, align 8
  store float* %5, float** %21, align 8
  store i64* %6, i64** %22, align 8
  store i64 %7, i64* %23, align 8
  store i64* %8, i64** %24, align 8
  store i64 %9, i64* %25, align 8
  store i32 %10, i32* %26, align 4
  store i32 %11, i32* %27, align 4
  store float %12, float* %28, align 4
  store float %13, float* %29, align 4
  %31 = zext i1 %14 to i8
  store i8 %31, i8* %30, align 1
  %32 = load i32*, i32** %16, align 8
  %33 = load i32*, i32** %17, align 8
  %34 = load float*, float** %18, align 8
  %35 = load i64*, i64** %19, align 8
  %36 = load i64, i64* %20, align 8
  %37 = load float*, float** %21, align 8
  %38 = load i64*, i64** %22, align 8
  %39 = load i64, i64* %23, align 8
  %40 = load i64*, i64** %24, align 8
  %41 = load i64, i64* %25, align 8
  %42 = load i32, i32* %26, align 4
  %43 = load i32, i32* %27, align 4
  %44 = load float, float* %28, align 4
  %45 = load float, float* %29, align 4
  %46 = load i8, i8* %30, align 1
  %47 = trunc i8 %46 to i1
  call void @_ZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S2_PKfPKmmS4_S6_mS6_mjjffb(i32* %32, i32* %33, float* %34, i64* %35, i64 %36, float* %37, i64* %38, i64 %39, i64* %40, i64 %41, i32 %42, i32 %43, float %44, float %45, i1 zeroext %47)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S2_PKfPKmmS4_S6_mS6_mjjffb(i32*, i32*, float*, i64*, i64, float*, i64*, i64, i64*, i64, i32, i32, float, float, i1 zeroext) #2 {
  %16 = alloca i32*, align 8
  %17 = alloca i32*, align 8
  %18 = alloca float*, align 8
  %19 = alloca i64*, align 8
  %20 = alloca i64, align 8
  %21 = alloca float*, align 8
  %22 = alloca i64*, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64*, align 8
  %25 = alloca i64, align 8
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca float, align 4
  %29 = alloca float, align 4
  %30 = alloca i8, align 1
  %31 = alloca i32, align 4
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca i64, align 8
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca %"struct.(anonymous namespace)::Box"*, align 8
  %41 = alloca %class.anon, align 1
  %42 = alloca i64, align 8
  %43 = alloca i64, align 8
  %44 = alloca i32, align 4
  %45 = alloca %"struct.(anonymous namespace)::OutBox", align 8
  %46 = alloca i64, align 8
  %47 = alloca i8*, align 8
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  %51 = alloca float*, align 8
  %52 = alloca i64, align 8
  %53 = alloca float, align 4
  %54 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %55 = alloca %class.anon, align 1
  %56 = alloca i64, align 8
  %57 = alloca i64, align 8
  %58 = alloca float, align 4
  %59 = alloca i32, align 4
  %60 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %61 = alloca %"struct.(anonymous namespace)::Box"*, align 8
  %62 = alloca i8, align 1
  %63 = alloca i32, align 4
  %64 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %65 = alloca %"struct.(anonymous namespace)::Box"*, align 8
  %66 = alloca i64, align 8
  %67 = alloca i64, align 8
  store i32* %0, i32** %16, align 8
  store i32* %1, i32** %17, align 8
  store float* %2, float** %18, align 8
  store i64* %3, i64** %19, align 8
  store i64 %4, i64* %20, align 8
  store float* %5, float** %21, align 8
  store i64* %6, i64** %22, align 8
  store i64 %7, i64* %23, align 8
  store i64* %8, i64** %24, align 8
  store i64 %9, i64* %25, align 8
  store i32 %10, i32* %26, align 4
  store i32 %11, i32* %27, align 4
  store float %12, float* %28, align 4
  store float %13, float* %29, align 4
  %68 = zext i1 %14 to i8
  store i8 %68, i8* %30, align 1
  %69 = load i64, i64* %20, align 8
  %70 = sub i64 %69, 2
  %71 = trunc i64 %70 to i32
  store i32 %71, i32* %31, align 4
  store i64 1, i64* %32, align 8
  store i64 1, i64* %33, align 8
  %72 = load i64*, i64** %19, align 8
  %73 = load i32, i32* %31, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i64, i64* %72, i64 %74
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %34, align 8
  store i64 0, i64* %35, align 8
  %77 = load i8, i8* %30, align 1
  %78 = trunc i8 %77 to i1
  br i1 %78, label %150, label %79

; <label>:79:                                     ; preds = %15
  %80 = load i64, i64* %20, align 8
  %81 = sub i64 %80, 3
  %82 = trunc i64 %81 to i32
  store i32 %82, i32* %36, align 4
  %83 = load i64, i64* %23, align 8
  %84 = sub i64 %83, 3
  %85 = trunc i64 %84 to i32
  store i32 %85, i32* %37, align 4
  %86 = load i64, i64* %23, align 8
  %87 = sub i64 %86, 1
  %88 = trunc i64 %87 to i32
  store i32 %88, i32* %38, align 4
  %89 = load i64, i64* %23, align 8
  %90 = sub i64 %89, 2
  %91 = trunc i64 %90 to i32
  store i32 %91, i32* %39, align 4
  %92 = load i64*, i64** %22, align 8
  %93 = load i32, i32* %38, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i64, i64* %92, i64 %94
  %96 = load i64, i64* %95, align 8
  %97 = load i64*, i64** %19, align 8
  %98 = load i32, i32* %31, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i64, i64* %97, i64 %99
  %101 = load i64, i64* %100, align 8
  %102 = icmp eq i64 %96, %101
  br i1 %102, label %103, label %104

; <label>:103:                                    ; preds = %79
  br label %104

; <label>:104:                                    ; preds = %103, %79
  %105 = phi i1 [ false, %79 ], [ true, %103 ]
  br i1 %105, label %106, label %107

; <label>:106:                                    ; preds = %104
  br label %109

; <label>:107:                                    ; preds = %104
  call void @__assert_fail(i8* getelementptr inbounds ([121 x i8], [121 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i32 0, i32 0), i32 1007, i8* getelementptr inbounds ([217 x i8], [217 x i8]* @__PRETTY_FUNCTION__._ZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S2_PKfPKmmS4_S6_mS6_mjjffb, i32 0, i32 0)) #10
  unreachable
                                                  ; No predecessors!
  br label %109

; <label>:109:                                    ; preds = %108, %106
  %110 = load i64*, i64** %22, align 8
  %111 = load i32, i32* %37, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i64, i64* %110, i64 %112
  %114 = load i64, i64* %113, align 8
  %115 = load i64*, i64** %19, align 8
  %116 = load i32, i32* %36, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i64, i64* %115, i64 %117
  %119 = load i64, i64* %118, align 8
  %120 = icmp eq i64 %114, %119
  br i1 %120, label %121, label %122

; <label>:121:                                    ; preds = %109
  br label %122

; <label>:122:                                    ; preds = %121, %109
  %123 = phi i1 [ false, %109 ], [ true, %121 ]
  br i1 %123, label %124, label %125

; <label>:124:                                    ; preds = %122
  br label %127

; <label>:125:                                    ; preds = %122
  call void @__assert_fail(i8* getelementptr inbounds ([115 x i8], [115 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i32 0, i32 0), i32 1009, i8* getelementptr inbounds ([217 x i8], [217 x i8]* @__PRETTY_FUNCTION__._ZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S2_PKfPKmmS4_S6_mS6_mjjffb, i32 0, i32 0)) #10
  unreachable
                                                  ; No predecessors!
  br label %127

; <label>:127:                                    ; preds = %126, %124
  %128 = load i64*, i64** %22, align 8
  %129 = load i32, i32* %37, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i64, i64* %128, i64 %130
  %132 = load i64, i64* %131, align 8
  store i64 %132, i64* %32, align 8
  %133 = load i64*, i64** %22, align 8
  %134 = load i32, i32* %39, align 4
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds i64, i64* %133, i64 %135
  %137 = load i64, i64* %136, align 8
  store i64 %137, i64* %33, align 8
  %138 = load i64*, i64** %19, align 8
  %139 = load i32, i32* %31, align 4
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds i64, i64* %138, i64 %140
  %142 = load i64, i64* %141, align 8
  store i64 %142, i64* %34, align 8
  %143 = load i64*, i64** %24, align 8
  %144 = load i64, i64* %25, align 8
  %145 = sub i64 %144, 2
  %146 = getelementptr inbounds i64, i64* %143, i64 %145
  %147 = load i64, i64* %146, align 8
  %148 = load i64, i64* %32, align 8
  %149 = udiv i64 %147, %148
  store i64 %149, i64* %35, align 8
  br label %158

; <label>:150:                                    ; preds = %15
  %151 = load i64*, i64** %24, align 8
  %152 = load i64, i64* %25, align 8
  %153 = sub i64 %152, 1
  %154 = getelementptr inbounds i64, i64* %151, i64 %153
  %155 = load i64, i64* %154, align 8
  %156 = load i64, i64* %32, align 8
  %157 = udiv i64 %155, %156
  store i64 %157, i64* %35, align 8
  br label %158

; <label>:158:                                    ; preds = %150, %127
  %159 = load float*, float** %18, align 8
  %160 = bitcast float* %159 to %"struct.(anonymous namespace)::Box"*
  store %"struct.(anonymous namespace)::Box"* %160, %"struct.(anonymous namespace)::Box"** %40, align 8
  store i64 0, i64* %42, align 8
  store i64 0, i64* %43, align 8
  br label %161

; <label>:161:                                    ; preds = %463, %158
  %162 = load i64, i64* %43, align 8
  %163 = load i64, i64* %32, align 8
  %164 = icmp ult i64 %162, %163
  br i1 %164, label %165, label %466

; <label>:165:                                    ; preds = %161
  store i32 0, i32* %44, align 4
  %166 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 0
  %167 = load float*, float** %21, align 8
  %168 = load i64, i64* %43, align 8
  %169 = load i64, i64* %33, align 8
  %170 = mul i64 %168, %169
  %171 = getelementptr inbounds float, float* %167, i64 %170
  %172 = load float, float* %171, align 4
  store float %172, float* %166, align 8
  %173 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 1
  %174 = load i64, i64* %43, align 8
  store i64 %174, i64* %173, align 8
  %175 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 2
  store i64 0, i64* %175, align 8
  %176 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 3
  store i64 0, i64* %176, align 8
  store i64 0, i64* %46, align 8
  br label %177

; <label>:177:                                    ; preds = %392, %165
  %178 = load i64, i64* %46, align 8
  %179 = load i64, i64* %33, align 8
  %180 = icmp ult i64 %178, %179
  br i1 %180, label %181, label %395

; <label>:181:                                    ; preds = %177
  %182 = load i64, i64* %34, align 8
  %183 = call i8* @llvm.stacksave()
  store i8* %183, i8** %47, align 8
  %184 = alloca %"struct.(anonymous namespace)::ClassBox", i64 %182, align 16
  store i64 %182, i64* %48, align 8
  %185 = icmp eq i64 %182, 0
  br i1 %185, label %192, label %186

; <label>:186:                                    ; preds = %181
  %187 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %184, i64 %182
  br label %188

; <label>:188:                                    ; preds = %188, %186
  %189 = phi %"struct.(anonymous namespace)::ClassBox"* [ %184, %186 ], [ %190, %188 ]
  call void @_ZN12_GLOBAL__N_18ClassBoxC2Ev(%"struct.(anonymous namespace)::ClassBox"* %189) #5
  %190 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %189, i64 1
  %191 = icmp eq %"struct.(anonymous namespace)::ClassBox"* %190, %187
  br i1 %191, label %192, label %188

; <label>:192:                                    ; preds = %181, %188
  %193 = load i64, i64* %34, align 8
  %194 = alloca %"struct.(anonymous namespace)::ClassBox", i64 %193, align 16
  store i64 %193, i64* %49, align 8
  %195 = icmp eq i64 %193, 0
  br i1 %195, label %202, label %196

; <label>:196:                                    ; preds = %192
  %197 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %194, i64 %193
  br label %198

; <label>:198:                                    ; preds = %198, %196
  %199 = phi %"struct.(anonymous namespace)::ClassBox"* [ %194, %196 ], [ %200, %198 ]
  call void @_ZN12_GLOBAL__N_18ClassBoxC2Ev(%"struct.(anonymous namespace)::ClassBox"* %199) #5
  %200 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %199, i64 1
  %201 = icmp eq %"struct.(anonymous namespace)::ClassBox"* %200, %197
  br i1 %201, label %202, label %198

; <label>:202:                                    ; preds = %192, %198
  store i64 0, i64* %50, align 8
  %203 = load float*, float** %21, align 8
  %204 = load i64, i64* %43, align 8
  %205 = load i64, i64* %33, align 8
  %206 = mul i64 %204, %205
  %207 = load i64, i64* %46, align 8
  %208 = add i64 %206, %207
  %209 = load i64, i64* %34, align 8
  %210 = mul i64 %208, %209
  %211 = getelementptr inbounds float, float* %203, i64 %210
  store float* %211, float** %51, align 8
  store i64 0, i64* %52, align 8
  br label %212

; <label>:212:                                    ; preds = %235, %202
  %213 = load i64, i64* %52, align 8
  %214 = load i64, i64* %34, align 8
  %215 = icmp ult i64 %213, %214
  br i1 %215, label %216, label %238

; <label>:216:                                    ; preds = %212
  %217 = load float*, float** %51, align 8
  %218 = load i64, i64* %52, align 8
  %219 = getelementptr inbounds float, float* %217, i64 %218
  %220 = load float, float* %219, align 4
  store float %220, float* %53, align 4
  %221 = load float, float* %53, align 4
  %222 = load float, float* %29, align 4
  %223 = fcmp reassoc nsz arcp ogt float %221, %222
  br i1 %223, label %224, label %234

; <label>:224:                                    ; preds = %216
  %225 = load i64, i64* %50, align 8
  %226 = add i64 %225, 1
  store i64 %226, i64* %50, align 8
  %227 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %194, i64 %225
  store %"struct.(anonymous namespace)::ClassBox"* %227, %"struct.(anonymous namespace)::ClassBox"** %54, align 8
  %228 = load float, float* %53, align 4
  %229 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %54, align 8
  %230 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %229, i32 0, i32 0
  store float %228, float* %230, align 8
  %231 = load i64, i64* %52, align 8
  %232 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %54, align 8
  %233 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %232, i32 0, i32 1
  store i64 %231, i64* %233, align 8
  br label %234

; <label>:234:                                    ; preds = %224, %216
  br label %235

; <label>:235:                                    ; preds = %234
  %236 = load i64, i64* %52, align 8
  %237 = add i64 %236, 1
  store i64 %237, i64* %52, align 8
  br label %212

; <label>:238:                                    ; preds = %212
  %239 = load i64, i64* %50, align 8
  %240 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %194, i64 %239
  call void @_ZSt4sortIPN12_GLOBAL__N_18ClassBoxEZNS0_18libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKS1_SB_E_EvS4_S4_T0_(%"struct.(anonymous namespace)::ClassBox"* %194, %"struct.(anonymous namespace)::ClassBox"* %240)
  store i64 0, i64* %56, align 8
  store i64 0, i64* %57, align 8
  %241 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 0
  %242 = load float, float* %241, align 8
  store float %242, float* %58, align 4
  store i32 0, i32* %59, align 4
  br label %243

; <label>:243:                                    ; preds = %356, %238
  %244 = load i32, i32* %59, align 4
  %245 = zext i32 %244 to i64
  %246 = load i64, i64* %50, align 8
  %247 = icmp ult i64 %245, %246
  br i1 %247, label %248, label %359

; <label>:248:                                    ; preds = %243
  %249 = load i32, i32* %59, align 4
  %250 = zext i32 %249 to i64
  %251 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %194, i64 %250
  store %"struct.(anonymous namespace)::ClassBox"* %251, %"struct.(anonymous namespace)::ClassBox"** %60, align 8
  %252 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %40, align 8
  %253 = load i64, i64* %43, align 8
  %254 = load i64, i64* %34, align 8
  %255 = mul i64 %253, %254
  %256 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %60, align 8
  %257 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %256, i32 0, i32 1
  %258 = load i64, i64* %257, align 8
  %259 = add i64 %255, %258
  %260 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %252, i64 %259
  store %"struct.(anonymous namespace)::Box"* %260, %"struct.(anonymous namespace)::Box"** %61, align 8
  store i8 1, i8* %62, align 1
  store i32 0, i32* %63, align 4
  br label %261

; <label>:261:                                    ; preds = %292, %248
  %262 = load i32, i32* %63, align 4
  %263 = zext i32 %262 to i64
  %264 = load i64, i64* %56, align 8
  %265 = icmp ult i64 %263, %264
  br i1 %265, label %266, label %269

; <label>:266:                                    ; preds = %261
  %267 = load i8, i8* %62, align 1
  %268 = trunc i8 %267 to i1
  br label %269

; <label>:269:                                    ; preds = %266, %261
  %270 = phi i1 [ false, %261 ], [ %268, %266 ]
  br i1 %270, label %271, label %295

; <label>:271:                                    ; preds = %269
  %272 = load i32, i32* %63, align 4
  %273 = zext i32 %272 to i64
  %274 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %184, i64 %273
  store %"struct.(anonymous namespace)::ClassBox"* %274, %"struct.(anonymous namespace)::ClassBox"** %64, align 8
  %275 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %40, align 8
  %276 = load i64, i64* %43, align 8
  %277 = load i64, i64* %34, align 8
  %278 = mul i64 %276, %277
  %279 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %64, align 8
  %280 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %279, i32 0, i32 1
  %281 = load i64, i64* %280, align 8
  %282 = add i64 %278, %281
  %283 = getelementptr inbounds %"struct.(anonymous namespace)::Box", %"struct.(anonymous namespace)::Box"* %275, i64 %282
  store %"struct.(anonymous namespace)::Box"* %283, %"struct.(anonymous namespace)::Box"** %65, align 8
  %284 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %65, align 8
  %285 = load %"struct.(anonymous namespace)::Box"*, %"struct.(anonymous namespace)::Box"** %61, align 8
  %286 = load float, float* %28, align 4
  %287 = load i32, i32* %26, align 4
  %288 = zext i32 %287 to i64
  %289 = call zeroext i1 @_ZN12_GLOBAL__N_18checkIOUERKNS_3BoxES2_fm(%"struct.(anonymous namespace)::Box"* dereferenceable(16) %284, %"struct.(anonymous namespace)::Box"* dereferenceable(16) %285, float %286, i64 %288)
  %290 = xor i1 %289, true
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %62, align 1
  br label %292

; <label>:292:                                    ; preds = %271
  %293 = load i32, i32* %63, align 4
  %294 = add i32 %293, 1
  store i32 %294, i32* %63, align 4
  br label %261

; <label>:295:                                    ; preds = %269
  %296 = load i8, i8* %62, align 1
  %297 = trunc i8 %296 to i1
  br i1 %297, label %298, label %349

; <label>:298:                                    ; preds = %295
  %299 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %60, align 8
  %300 = load i64, i64* %56, align 8
  %301 = add i64 %300, 1
  store i64 %301, i64* %56, align 8
  %302 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %184, i64 %300
  %303 = bitcast %"struct.(anonymous namespace)::ClassBox"* %302 to i8*
  %304 = bitcast %"struct.(anonymous namespace)::ClassBox"* %299 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %303, i8* align 8 %304, i64 16, i1 false)
  %305 = load i8, i8* %30, align 1
  %306 = trunc i8 %305 to i1
  br i1 %306, label %307, label %315

; <label>:307:                                    ; preds = %298
  %308 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %60, align 8
  %309 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %308, i32 0, i32 1
  %310 = load i64, i64* %309, align 8
  %311 = trunc i64 %310 to i32
  %312 = load i32*, i32** %16, align 8
  %313 = load i64, i64* %42, align 8
  %314 = getelementptr inbounds i32, i32* %312, i64 %313
  store i32 %311, i32* %314, align 4
  br label %339

; <label>:315:                                    ; preds = %298
  %316 = load i64, i64* %43, align 8
  %317 = trunc i64 %316 to i32
  %318 = load i32*, i32** %16, align 8
  %319 = load i64, i64* %42, align 8
  %320 = mul i64 %319, 3
  %321 = add i64 %320, 0
  %322 = getelementptr inbounds i32, i32* %318, i64 %321
  store i32 %317, i32* %322, align 4
  %323 = load i64, i64* %46, align 8
  %324 = trunc i64 %323 to i32
  %325 = load i32*, i32** %16, align 8
  %326 = load i64, i64* %42, align 8
  %327 = mul i64 %326, 3
  %328 = add i64 %327, 1
  %329 = getelementptr inbounds i32, i32* %325, i64 %328
  store i32 %324, i32* %329, align 4
  %330 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %60, align 8
  %331 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %330, i32 0, i32 1
  %332 = load i64, i64* %331, align 8
  %333 = trunc i64 %332 to i32
  %334 = load i32*, i32** %16, align 8
  %335 = load i64, i64* %42, align 8
  %336 = mul i64 %335, 3
  %337 = add i64 %336, 2
  %338 = getelementptr inbounds i32, i32* %334, i64 %337
  store i32 %333, i32* %338, align 4
  br label %339

; <label>:339:                                    ; preds = %315, %307
  %340 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %60, align 8
  %341 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %340, i32 0, i32 0
  %342 = load float, float* %341, align 8
  store float %342, float* %58, align 4
  %343 = load i64, i64* %42, align 8
  %344 = add i64 %343, 1
  store i64 %344, i64* %42, align 8
  %345 = load i64, i64* %57, align 8
  %346 = add i64 %345, 1
  store i64 %346, i64* %57, align 8
  %347 = load i32, i32* %44, align 4
  %348 = add nsw i32 %347, 1
  store i32 %348, i32* %44, align 4
  br label %349

; <label>:349:                                    ; preds = %339, %295
  %350 = load i64, i64* %57, align 8
  %351 = load i32, i32* %27, align 4
  %352 = zext i32 %351 to i64
  %353 = icmp eq i64 %350, %352
  br i1 %353, label %354, label %355

; <label>:354:                                    ; preds = %349
  br label %359

; <label>:355:                                    ; preds = %349
  br label %356

; <label>:356:                                    ; preds = %355
  %357 = load i32, i32* %59, align 4
  %358 = add i32 %357, 1
  store i32 %358, i32* %59, align 4
  br label %243

; <label>:359:                                    ; preds = %354, %243
  %360 = load float, float* %58, align 4
  %361 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 0
  %362 = load float, float* %361, align 8
  %363 = fcmp reassoc nsz arcp olt float %360, %362
  br i1 %363, label %364, label %390

; <label>:364:                                    ; preds = %359
  %365 = load float, float* %58, align 4
  %366 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 0
  store float %365, float* %366, align 8
  %367 = load i8, i8* %30, align 1
  %368 = trunc i8 %367 to i1
  br i1 %368, label %369, label %377

; <label>:369:                                    ; preds = %364
  %370 = load i32*, i32** %16, align 8
  %371 = load i64, i64* %42, align 8
  %372 = sub i64 %371, 1
  %373 = getelementptr inbounds i32, i32* %370, i64 %372
  %374 = load i32, i32* %373, align 4
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 3
  store i64 %375, i64* %376, align 8
  br label %387

; <label>:377:                                    ; preds = %364
  %378 = load i32*, i32** %16, align 8
  %379 = load i64, i64* %42, align 8
  %380 = sub i64 %379, 1
  %381 = mul i64 %380, 3
  %382 = add i64 %381, 2
  %383 = getelementptr inbounds i32, i32* %378, i64 %382
  %384 = load i32, i32* %383, align 4
  %385 = sext i32 %384 to i64
  %386 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 3
  store i64 %385, i64* %386, align 8
  br label %387

; <label>:387:                                    ; preds = %377, %369
  %388 = load i64, i64* %46, align 8
  %389 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 2
  store i64 %388, i64* %389, align 8
  br label %390

; <label>:390:                                    ; preds = %387, %359
  %391 = load i8*, i8** %47, align 8
  call void @llvm.stackrestore(i8* %391)
  br label %392

; <label>:392:                                    ; preds = %390
  %393 = load i64, i64* %46, align 8
  %394 = add i64 %393, 1
  store i64 %394, i64* %46, align 8
  br label %177

; <label>:395:                                    ; preds = %177
  %396 = load i32, i32* %44, align 4
  %397 = sext i32 %396 to i64
  store i64 %397, i64* %66, align 8
  br label %398

; <label>:398:                                    ; preds = %440, %395
  %399 = load i64, i64* %66, align 8
  %400 = load i64, i64* %35, align 8
  %401 = icmp ult i64 %399, %400
  br i1 %401, label %402, label %443

; <label>:402:                                    ; preds = %398
  %403 = load i8, i8* %30, align 1
  %404 = trunc i8 %403 to i1
  br i1 %404, label %405, label %412

; <label>:405:                                    ; preds = %402
  %406 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 3
  %407 = load i64, i64* %406, align 8
  %408 = trunc i64 %407 to i32
  %409 = load i32*, i32** %16, align 8
  %410 = load i64, i64* %42, align 8
  %411 = getelementptr inbounds i32, i32* %409, i64 %410
  store i32 %408, i32* %411, align 4
  br label %437

; <label>:412:                                    ; preds = %402
  %413 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 1
  %414 = load i64, i64* %413, align 8
  %415 = trunc i64 %414 to i32
  %416 = load i32*, i32** %16, align 8
  %417 = load i64, i64* %42, align 8
  %418 = mul i64 %417, 3
  %419 = add i64 %418, 0
  %420 = getelementptr inbounds i32, i32* %416, i64 %419
  store i32 %415, i32* %420, align 4
  %421 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 2
  %422 = load i64, i64* %421, align 8
  %423 = trunc i64 %422 to i32
  %424 = load i32*, i32** %16, align 8
  %425 = load i64, i64* %42, align 8
  %426 = mul i64 %425, 3
  %427 = add i64 %426, 1
  %428 = getelementptr inbounds i32, i32* %424, i64 %427
  store i32 %423, i32* %428, align 4
  %429 = getelementptr inbounds %"struct.(anonymous namespace)::OutBox", %"struct.(anonymous namespace)::OutBox"* %45, i32 0, i32 3
  %430 = load i64, i64* %429, align 8
  %431 = trunc i64 %430 to i32
  %432 = load i32*, i32** %16, align 8
  %433 = load i64, i64* %42, align 8
  %434 = mul i64 %433, 3
  %435 = add i64 %434, 2
  %436 = getelementptr inbounds i32, i32* %432, i64 %435
  store i32 %431, i32* %436, align 4
  br label %437

; <label>:437:                                    ; preds = %412, %405
  %438 = load i64, i64* %42, align 8
  %439 = add i64 %438, 1
  store i64 %439, i64* %42, align 8
  br label %440

; <label>:440:                                    ; preds = %437
  %441 = load i64, i64* %66, align 8
  %442 = add i64 %441, 1
  store i64 %442, i64* %66, align 8
  br label %398

; <label>:443:                                    ; preds = %398
  store i64 0, i64* %67, align 8
  br label %444

; <label>:444:                                    ; preds = %459, %443
  %445 = load i64, i64* %67, align 8
  %446 = load i32, i32* %27, align 4
  %447 = zext i32 %446 to i64
  %448 = icmp ult i64 %445, %447
  br i1 %448, label %449, label %462

; <label>:449:                                    ; preds = %444
  %450 = load i32, i32* %44, align 4
  %451 = load i32*, i32** %17, align 8
  %452 = load i64, i64* %43, align 8
  %453 = load i32, i32* %27, align 4
  %454 = zext i32 %453 to i64
  %455 = mul i64 %452, %454
  %456 = load i64, i64* %67, align 8
  %457 = add i64 %455, %456
  %458 = getelementptr inbounds i32, i32* %451, i64 %457
  store i32 %450, i32* %458, align 4
  br label %459

; <label>:459:                                    ; preds = %449
  %460 = load i64, i64* %67, align 8
  %461 = add i64 %460, 1
  store i64 %461, i64* %67, align 8
  br label %444

; <label>:462:                                    ; preds = %444
  br label %463

; <label>:463:                                    ; preds = %462
  %464 = load i64, i64* %43, align 8
  %465 = add i64 %464, 1
  store i64 %465, i64* %43, align 8
  br label %161

; <label>:466:                                    ; preds = %161
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt4sortIPN12_GLOBAL__N_18ClassBoxEZNS0_18libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKS1_SB_E_EvS4_S4_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %3 = alloca %class.anon, align 1
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %7 = alloca %class.anon, align 1
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  call void @_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EENS0_15_Iter_comp_iterIS4_EES4_()
  call void @_ZSt6__sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %9, %"struct.(anonymous namespace)::ClassBox"* %10)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EENS0_15_Iter_comp_iterIS4_EES4_() #2 {
  %1 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %2 = alloca %class.anon, align 1
  %3 = alloca %class.anon, align 1
  %4 = call dereferenceable(1) %class.anon* @_ZSt4moveIRZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S3_PKfPKmmS5_S7_mS7_mjjffbEUlRKNS0_8ClassBoxESA_E_EONSt16remove_referenceIS2_E4typeEOS2_(%class.anon* dereferenceable(1) %2) #5
  call void @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EC2ESD_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %1)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt6__sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %8 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %10 = icmp ne %"struct.(anonymous namespace)::ClassBox"* %8, %9
  br i1 %10, label %11, label %28

; <label>:11:                                     ; preds = %2
  %12 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %13 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %14 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %15 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %16 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %14 to i64
  %17 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %15 to i64
  %18 = sub i64 %16, %17
  %19 = sdiv exact i64 %18, 16
  %20 = call i64 @_ZSt4__lgl(i64 %19)
  %21 = mul nsw i64 %20, 2
  %22 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %6 to i8*
  %23 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %22, i8* align 1 %23, i64 1, i1 false)
  call void @_ZSt16__introsort_loopIPN12_GLOBAL__N_18ClassBoxElN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_T1_(%"struct.(anonymous namespace)::ClassBox"* %12, %"struct.(anonymous namespace)::ClassBox"* %13, i64 %21)
  %24 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %25 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %26 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7 to i8*
  %27 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 %27, i64 1, i1 false)
  call void @_ZSt22__final_insertion_sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %24, %"struct.(anonymous namespace)::ClassBox"* %25)
  br label %28

; <label>:28:                                     ; preds = %11, %2
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt16__introsort_loopIPN12_GLOBAL__N_18ClassBoxElN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_T1_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, i64) #2 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %9 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %10 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  store i64 %2, i64* %7, align 8
  br label %12

; <label>:12:                                     ; preds = %29, %3
  %13 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %14 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %15 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %13 to i64
  %16 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %14 to i64
  %17 = sub i64 %15, %16
  %18 = sdiv exact i64 %17, 16
  %19 = icmp sgt i64 %18, 16
  br i1 %19, label %20, label %43

; <label>:20:                                     ; preds = %12
  %21 = load i64, i64* %7, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %29

; <label>:23:                                     ; preds = %20
  %24 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %25 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %26 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %27 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  %28 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %27, i8* align 1 %28, i64 1, i1 false)
  call void @_ZSt14__partial_sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %24, %"struct.(anonymous namespace)::ClassBox"* %25, %"struct.(anonymous namespace)::ClassBox"* %26)
  br label %43

; <label>:29:                                     ; preds = %20
  %30 = load i64, i64* %7, align 8
  %31 = add nsw i64 %30, -1
  store i64 %31, i64* %7, align 8
  %32 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %33 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %34 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %10 to i8*
  %35 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %35, i64 1, i1 false)
  %36 = call %"struct.(anonymous namespace)::ClassBox"* @_ZSt27__unguarded_partition_pivotIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEES7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %32, %"struct.(anonymous namespace)::ClassBox"* %33)
  store %"struct.(anonymous namespace)::ClassBox"* %36, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  %37 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  %38 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %39 = load i64, i64* %7, align 8
  %40 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %11 to i8*
  %41 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %41, i64 1, i1 false)
  call void @_ZSt16__introsort_loopIPN12_GLOBAL__N_18ClassBoxElN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_T1_(%"struct.(anonymous namespace)::ClassBox"* %37, %"struct.(anonymous namespace)::ClassBox"* %38, i64 %39)
  %42 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %42, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  br label %12

; <label>:43:                                     ; preds = %23, %12
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt22__final_insertion_sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %11 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %9 to i64
  %12 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %10 to i64
  %13 = sub i64 %11, %12
  %14 = sdiv exact i64 %13, 16
  %15 = icmp sgt i64 %14, 16
  br i1 %15, label %16, label %27

; <label>:16:                                     ; preds = %2
  %17 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %18 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %19 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %18, i64 16
  %20 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %6 to i8*
  %21 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %21, i64 1, i1 false)
  call void @_ZSt16__insertion_sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %17, %"struct.(anonymous namespace)::ClassBox"* %19)
  %22 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %23 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %22, i64 16
  %24 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %25 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7 to i8*
  %26 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %26, i64 1, i1 false)
  call void @_ZSt26__unguarded_insertion_sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %23, %"struct.(anonymous namespace)::ClassBox"* %24)
  br label %32

; <label>:27:                                     ; preds = %2
  %28 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %29 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %30 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  %31 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 1, i1 false)
  call void @_ZSt16__insertion_sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %28, %"struct.(anonymous namespace)::ClassBox"* %29)
  br label %32

; <label>:32:                                     ; preds = %27, %16
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt16__insertion_sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca %"struct.(anonymous namespace)::ClassBox", align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %10 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %11 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %12 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %13 = icmp eq %"struct.(anonymous namespace)::ClassBox"* %11, %12
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %2
  br label %48

; <label>:15:                                     ; preds = %2
  %16 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %17 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %16, i64 1
  store %"struct.(anonymous namespace)::ClassBox"* %17, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  br label %18

; <label>:18:                                     ; preds = %45, %15
  %19 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %20 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %21 = icmp ne %"struct.(anonymous namespace)::ClassBox"* %19, %20
  br i1 %21, label %22, label %48

; <label>:22:                                     ; preds = %18
  %23 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %24 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %25 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3, %"struct.(anonymous namespace)::ClassBox"* %23, %"struct.(anonymous namespace)::ClassBox"* %24)
  br i1 %25, label %26, label %40

; <label>:26:                                     ; preds = %22
  %27 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %28 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %27) #5
  %29 = bitcast %"struct.(anonymous namespace)::ClassBox"* %7 to i8*
  %30 = bitcast %"struct.(anonymous namespace)::ClassBox"* %28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 16, i1 false)
  %31 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %32 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %33 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %34 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %33, i64 1
  %35 = call %"struct.(anonymous namespace)::ClassBox"* @_ZSt13move_backwardIPN12_GLOBAL__N_18ClassBoxES2_ET0_T_S4_S3_(%"struct.(anonymous namespace)::ClassBox"* %31, %"struct.(anonymous namespace)::ClassBox"* %32, %"struct.(anonymous namespace)::ClassBox"* %34)
  %36 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %7) #5
  %37 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %38 = bitcast %"struct.(anonymous namespace)::ClassBox"* %37 to i8*
  %39 = bitcast %"struct.(anonymous namespace)::ClassBox"* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 16, i1 false)
  br label %44

; <label>:40:                                     ; preds = %22
  %41 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %42 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %9 to i8*
  %43 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %43, i64 1, i1 false)
  call void @_ZN9__gnu_cxx5__ops15__val_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EENS0_14_Val_comp_iterIS4_EENS0_15_Iter_comp_iterIS4_EE()
  call void @_ZSt25__unguarded_linear_insertIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops14_Val_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_T0_(%"struct.(anonymous namespace)::ClassBox"* %41)
  br label %44

; <label>:44:                                     ; preds = %40, %26
  br label %45

; <label>:45:                                     ; preds = %44
  %46 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %47 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %46, i32 1
  store %"struct.(anonymous namespace)::ClassBox"* %47, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  br label %18

; <label>:48:                                     ; preds = %14, %18
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt26__unguarded_insertion_sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %10, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  br label %11

; <label>:11:                                     ; preds = %19, %2
  %12 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %13 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %14 = icmp ne %"struct.(anonymous namespace)::ClassBox"* %12, %13
  br i1 %14, label %15, label %22

; <label>:15:                                     ; preds = %11
  %16 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %17 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  %18 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %18, i64 1, i1 false)
  call void @_ZN9__gnu_cxx5__ops15__val_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EENS0_14_Val_comp_iterIS4_EENS0_15_Iter_comp_iterIS4_EE()
  call void @_ZSt25__unguarded_linear_insertIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops14_Val_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_T0_(%"struct.(anonymous namespace)::ClassBox"* %16)
  br label %19

; <label>:19:                                     ; preds = %15
  %20 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %21 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %20, i32 1
  store %"struct.(anonymous namespace)::ClassBox"* %21, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  br label %11

; <label>:22:                                     ; preds = %11
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN9__gnu_cxx5__ops15__val_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EENS0_14_Val_comp_iterIS4_EENS0_15_Iter_comp_iterIS4_EE() #2 {
  %1 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %2 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %3 = call dereferenceable(1) %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* @_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S6_PKfPKmmS8_SA_mSA_mjjffbEUlRKNS3_8ClassBoxESD_E_EEEONSt16remove_referenceIS5_E4typeEOS5_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1) %2) #5
  call void @_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EC2EONS0_15_Iter_comp_iterISD_EE(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %1, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1) %3)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt25__unguarded_linear_insertIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops14_Val_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_T0_(%"struct.(anonymous namespace)::ClassBox"*) #2 {
  %2 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %3 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %4 = alloca %"struct.(anonymous namespace)::ClassBox", align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %3, align 8
  %6 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %3, align 8
  %7 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %6) #5
  %8 = bitcast %"struct.(anonymous namespace)::ClassBox"* %4 to i8*
  %9 = bitcast %"struct.(anonymous namespace)::ClassBox"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 16, i1 false)
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %3, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %10, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %11 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %12 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %11, i32 -1
  store %"struct.(anonymous namespace)::ClassBox"* %12, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  br label %13

; <label>:13:                                     ; preds = %16, %1
  %14 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %15 = call zeroext i1 @_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclISA_PSA_EEbRS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %2, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %4, %"struct.(anonymous namespace)::ClassBox"* %14)
  br i1 %15, label %16, label %25

; <label>:16:                                     ; preds = %13
  %17 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %18 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %17) #5
  %19 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %3, align 8
  %20 = bitcast %"struct.(anonymous namespace)::ClassBox"* %19 to i8*
  %21 = bitcast %"struct.(anonymous namespace)::ClassBox"* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 16, i1 false)
  %22 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %22, %"struct.(anonymous namespace)::ClassBox"** %3, align 8
  %23 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %24 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %23, i32 -1
  store %"struct.(anonymous namespace)::ClassBox"* %24, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  br label %13

; <label>:25:                                     ; preds = %13
  %26 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %4) #5
  %27 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %3, align 8
  %28 = bitcast %"struct.(anonymous namespace)::ClassBox"* %27 to i8*
  %29 = bitcast %"struct.(anonymous namespace)::ClassBox"* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 16, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclISA_PSA_EEbRS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16), %"struct.(anonymous namespace)::ClassBox"*) #0 align 2 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %7 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  %8 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7, i32 0, i32 0
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %11 = call zeroext i1 @_ZZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S2_PKfPKmmS4_S6_mS6_mjjffbENKUlRKNS_8ClassBoxES9_E_clES9_S9_(%class.anon* %8, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %9, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %10)
  ret i1 %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @_ZZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S2_PKfPKmmS4_S6_mS6_mjjffbENKUlRKNS_8ClassBoxES9_E_clES9_S9_(%class.anon*, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16), %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16)) #0 align 2 {
  %4 = alloca %class.anon*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %class.anon* %0, %class.anon** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %7 = load %class.anon*, %class.anon** %4, align 8
  %8 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %9 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %8, i32 0, i32 0
  %10 = load float, float* %9, align 8
  %11 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %12 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %11, i32 0, i32 0
  %13 = load float, float* %12, align 8
  %14 = fcmp reassoc nsz arcp ogt float %10, %13
  ret i1 %14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal dereferenceable(1) %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* @_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S6_PKfPKmmS8_SA_mSA_mjjffbEUlRKNS3_8ClassBoxESD_E_EEEONSt16remove_referenceIS5_E4typeEOS5_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1)) #0 {
  %2 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %2, align 8
  %3 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %2, align 8
  ret %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EC2EONS0_15_Iter_comp_iterISD_EE(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1)) unnamed_addr #0 align 2 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %3, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %1, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  %5 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %3, align 8
  %6 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5, i32 0, i32 0
  %7 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  %8 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7, i32 0, i32 0
  %9 = call dereferenceable(1) %class.anon* @_ZSt4moveIRZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S3_PKfPKmmS5_S7_mS7_mjjffbEUlRKNS0_8ClassBoxESA_E_EONSt16remove_referenceIS2_E4typeEOS2_(%class.anon* dereferenceable(1) %8) #5
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal dereferenceable(1) %class.anon* @_ZSt4moveIRZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S3_PKfPKmmS5_S7_mS7_mjjffbEUlRKNS0_8ClassBoxESA_E_EONSt16remove_referenceIS2_E4typeEOS2_(%class.anon* dereferenceable(1)) #0 {
  %2 = alloca %class.anon*, align 8
  store %class.anon* %0, %class.anon** %2, align 8
  %3 = load %class.anon*, %class.anon** %2, align 8
  ret %class.anon* %3
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #0 align 2 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %7 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  %8 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7, i32 0, i32 0
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %11 = call zeroext i1 @_ZZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S2_PKfPKmmS4_S6_mS6_mjjffbENKUlRKNS_8ClassBoxES9_E_clES9_S9_(%class.anon* %8, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %9, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %10)
  ret i1 %11
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt14__partial_sortIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %11 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %12 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  %13 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %13, i64 1, i1 false)
  call void @_ZSt13__heap_selectIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %9, %"struct.(anonymous namespace)::ClassBox"* %10, %"struct.(anonymous namespace)::ClassBox"* %11)
  %14 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %15 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  call void @_ZSt11__sort_heapIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_RT0_(%"struct.(anonymous namespace)::ClassBox"* %14, %"struct.(anonymous namespace)::ClassBox"* %15, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1) %4)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal %"struct.(anonymous namespace)::ClassBox"* @_ZSt27__unguarded_partition_pivotIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEES7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %11 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %12 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %10 to i64
  %13 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %11 to i64
  %14 = sub i64 %12, %13
  %15 = sdiv exact i64 %14, 16
  %16 = sdiv i64 %15, 2
  %17 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %9, i64 %16
  store %"struct.(anonymous namespace)::ClassBox"* %17, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %18 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %19 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %20 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %19, i64 1
  %21 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %22 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %23 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %22, i64 -1
  %24 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7 to i8*
  %25 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %24, i8* align 1 %25, i64 1, i1 false)
  call void @_ZSt22__move_median_to_firstIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %18, %"struct.(anonymous namespace)::ClassBox"* %20, %"struct.(anonymous namespace)::ClassBox"* %21, %"struct.(anonymous namespace)::ClassBox"* %23)
  %26 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %27 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %26, i64 1
  %28 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %29 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %30 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  %31 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 1, i1 false)
  %32 = call %"struct.(anonymous namespace)::ClassBox"* @_ZSt21__unguarded_partitionIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEES7_S7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"* %27, %"struct.(anonymous namespace)::ClassBox"* %28, %"struct.(anonymous namespace)::ClassBox"* %29)
  ret %"struct.(anonymous namespace)::ClassBox"* %32
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZSt22__move_median_to_firstIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #0 {
  %5 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %8 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %9 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %3, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %11 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %12 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5, %"struct.(anonymous namespace)::ClassBox"* %10, %"struct.(anonymous namespace)::ClassBox"* %11)
  br i1 %12, label %13, label %32

; <label>:13:                                     ; preds = %4
  %14 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %15 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  %16 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5, %"struct.(anonymous namespace)::ClassBox"* %14, %"struct.(anonymous namespace)::ClassBox"* %15)
  br i1 %16, label %17, label %20

; <label>:17:                                     ; preds = %13
  %18 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %19 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  call void @_ZSt9iter_swapIPN12_GLOBAL__N_18ClassBoxES2_EvT_T0_(%"struct.(anonymous namespace)::ClassBox"* %18, %"struct.(anonymous namespace)::ClassBox"* %19)
  br label %31

; <label>:20:                                     ; preds = %13
  %21 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %22 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  %23 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5, %"struct.(anonymous namespace)::ClassBox"* %21, %"struct.(anonymous namespace)::ClassBox"* %22)
  br i1 %23, label %24, label %27

; <label>:24:                                     ; preds = %20
  %25 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %26 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  call void @_ZSt9iter_swapIPN12_GLOBAL__N_18ClassBoxES2_EvT_T0_(%"struct.(anonymous namespace)::ClassBox"* %25, %"struct.(anonymous namespace)::ClassBox"* %26)
  br label %30

; <label>:27:                                     ; preds = %20
  %28 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %29 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  call void @_ZSt9iter_swapIPN12_GLOBAL__N_18ClassBoxES2_EvT_T0_(%"struct.(anonymous namespace)::ClassBox"* %28, %"struct.(anonymous namespace)::ClassBox"* %29)
  br label %30

; <label>:30:                                     ; preds = %27, %24
  br label %31

; <label>:31:                                     ; preds = %30, %17
  br label %51

; <label>:32:                                     ; preds = %4
  %33 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %34 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  %35 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5, %"struct.(anonymous namespace)::ClassBox"* %33, %"struct.(anonymous namespace)::ClassBox"* %34)
  br i1 %35, label %36, label %39

; <label>:36:                                     ; preds = %32
  %37 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %38 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  call void @_ZSt9iter_swapIPN12_GLOBAL__N_18ClassBoxES2_EvT_T0_(%"struct.(anonymous namespace)::ClassBox"* %37, %"struct.(anonymous namespace)::ClassBox"* %38)
  br label %50

; <label>:39:                                     ; preds = %32
  %40 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %41 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  %42 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5, %"struct.(anonymous namespace)::ClassBox"* %40, %"struct.(anonymous namespace)::ClassBox"* %41)
  br i1 %42, label %43, label %46

; <label>:43:                                     ; preds = %39
  %44 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %45 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %9, align 8
  call void @_ZSt9iter_swapIPN12_GLOBAL__N_18ClassBoxES2_EvT_T0_(%"struct.(anonymous namespace)::ClassBox"* %44, %"struct.(anonymous namespace)::ClassBox"* %45)
  br label %49

; <label>:46:                                     ; preds = %39
  %47 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %48 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  call void @_ZSt9iter_swapIPN12_GLOBAL__N_18ClassBoxES2_EvT_T0_(%"struct.(anonymous namespace)::ClassBox"* %47, %"struct.(anonymous namespace)::ClassBox"* %48)
  br label %49

; <label>:49:                                     ; preds = %46, %43
  br label %50

; <label>:50:                                     ; preds = %49, %36
  br label %51

; <label>:51:                                     ; preds = %50, %31
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %"struct.(anonymous namespace)::ClassBox"* @_ZSt21__unguarded_partitionIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEES7_S7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #0 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  br label %8

; <label>:8:                                      ; preds = %3, %32
  br label %9

; <label>:9:                                      ; preds = %13, %8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %11 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %12 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4, %"struct.(anonymous namespace)::ClassBox"* %10, %"struct.(anonymous namespace)::ClassBox"* %11)
  br i1 %12, label %13, label %16

; <label>:13:                                     ; preds = %9
  %14 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %15 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %14, i32 1
  store %"struct.(anonymous namespace)::ClassBox"* %15, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  br label %9

; <label>:16:                                     ; preds = %9
  %17 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %18 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %17, i32 -1
  store %"struct.(anonymous namespace)::ClassBox"* %18, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  br label %19

; <label>:19:                                     ; preds = %23, %16
  %20 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %21 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %22 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4, %"struct.(anonymous namespace)::ClassBox"* %20, %"struct.(anonymous namespace)::ClassBox"* %21)
  br i1 %22, label %23, label %26

; <label>:23:                                     ; preds = %19
  %24 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %25 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %24, i32 -1
  store %"struct.(anonymous namespace)::ClassBox"* %25, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  br label %19

; <label>:26:                                     ; preds = %19
  %27 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %28 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %29 = icmp ult %"struct.(anonymous namespace)::ClassBox"* %27, %28
  br i1 %29, label %32, label %30

; <label>:30:                                     ; preds = %26
  %31 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  ret %"struct.(anonymous namespace)::ClassBox"* %31

; <label>:32:                                     ; preds = %26
  %33 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %34 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  call void @_ZSt9iter_swapIPN12_GLOBAL__N_18ClassBoxES2_EvT_T0_(%"struct.(anonymous namespace)::ClassBox"* %33, %"struct.(anonymous namespace)::ClassBox"* %34)
  %35 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %36 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %35, i32 1
  store %"struct.(anonymous namespace)::ClassBox"* %36, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  br label %8
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt13__heap_selectIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_S7_T0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*) #2 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %8 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  call void @_ZSt11__make_heapIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_RT0_(%"struct.(anonymous namespace)::ClassBox"* %9, %"struct.(anonymous namespace)::ClassBox"* %10, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1) %4)
  %11 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %11, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  br label %12

; <label>:12:                                     ; preds = %25, %3
  %13 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %14 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %15 = icmp ult %"struct.(anonymous namespace)::ClassBox"* %13, %14
  br i1 %15, label %16, label %28

; <label>:16:                                     ; preds = %12
  %17 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %18 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %19 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4, %"struct.(anonymous namespace)::ClassBox"* %17, %"struct.(anonymous namespace)::ClassBox"* %18)
  br i1 %19, label %20, label %24

; <label>:20:                                     ; preds = %16
  %21 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %22 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %23 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  call void @_ZSt10__pop_heapIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_S7_RT0_(%"struct.(anonymous namespace)::ClassBox"* %21, %"struct.(anonymous namespace)::ClassBox"* %22, %"struct.(anonymous namespace)::ClassBox"* %23, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1) %4)
  br label %24

; <label>:24:                                     ; preds = %20, %16
  br label %25

; <label>:25:                                     ; preds = %24
  %26 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %27 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %26, i32 1
  store %"struct.(anonymous namespace)::ClassBox"* %27, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  br label %12

; <label>:28:                                     ; preds = %12
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt11__sort_heapIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_RT0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1)) #2 {
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %2, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %6, align 8
  br label %7

; <label>:7:                                      ; preds = %15, %3
  %8 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %10 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %8 to i64
  %11 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %9 to i64
  %12 = sub i64 %10, %11
  %13 = sdiv exact i64 %12, 16
  %14 = icmp sgt i64 %13, 1
  br i1 %14, label %15, label %22

; <label>:15:                                     ; preds = %7
  %16 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %17 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %16, i32 -1
  store %"struct.(anonymous namespace)::ClassBox"* %17, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %18 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %19 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %20 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %21 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %6, align 8
  call void @_ZSt10__pop_heapIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_S7_RT0_(%"struct.(anonymous namespace)::ClassBox"* %18, %"struct.(anonymous namespace)::ClassBox"* %19, %"struct.(anonymous namespace)::ClassBox"* %20, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1) %21)
  br label %7

; <label>:22:                                     ; preds = %7
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt10__pop_heapIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_S7_RT0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1)) #2 {
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %7 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %9 = alloca %"struct.(anonymous namespace)::ClassBox", align 8
  %10 = alloca %"struct.(anonymous namespace)::ClassBox", align 8
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %8, align 8
  %12 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %13 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %12) #5
  %14 = bitcast %"struct.(anonymous namespace)::ClassBox"* %9 to i8*
  %15 = bitcast %"struct.(anonymous namespace)::ClassBox"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 16, i1 false)
  %16 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %17 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %16) #5
  %18 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %7, align 8
  %19 = bitcast %"struct.(anonymous namespace)::ClassBox"* %18 to i8*
  %20 = bitcast %"struct.(anonymous namespace)::ClassBox"* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 16, i1 false)
  %21 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %22 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %23 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %24 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %22 to i64
  %25 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %23 to i64
  %26 = sub i64 %24, %25
  %27 = sdiv exact i64 %26, 16
  %28 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %9) #5
  %29 = bitcast %"struct.(anonymous namespace)::ClassBox"* %10 to i8*
  %30 = bitcast %"struct.(anonymous namespace)::ClassBox"* %28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 16, i1 false)
  %31 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %8, align 8
  %32 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %11 to i8*
  %33 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 %33, i64 1, i1 false)
  %34 = bitcast %"struct.(anonymous namespace)::ClassBox"* %10 to { float, i64 }*
  %35 = getelementptr inbounds { float, i64 }, { float, i64 }* %34, i32 0, i32 0
  %36 = load float, float* %35, align 8
  %37 = getelementptr inbounds { float, i64 }, { float, i64 }* %34, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  call void @_ZSt13__adjust_heapIPN12_GLOBAL__N_18ClassBoxElS1_N9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_T0_SH_T1_T2_(%"struct.(anonymous namespace)::ClassBox"* %21, i64 0, i64 %27, float %36, i64 %38)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt13__adjust_heapIPN12_GLOBAL__N_18ClassBoxElS1_N9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_T0_SH_T1_T2_(%"struct.(anonymous namespace)::ClassBox"*, i64, i64, float, i64) #2 {
  %6 = alloca %"struct.(anonymous namespace)::ClassBox", align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %8 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %14 = alloca %"struct.(anonymous namespace)::ClassBox", align 8
  %15 = bitcast %"struct.(anonymous namespace)::ClassBox"* %6 to { float, i64 }*
  %16 = getelementptr inbounds { float, i64 }, { float, i64 }* %15, i32 0, i32 0
  store float %3, float* %16, align 8
  %17 = getelementptr inbounds { float, i64 }, { float, i64 }* %15, i32 0, i32 1
  store i64 %4, i64* %17, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  store i64 %1, i64* %9, align 8
  store i64 %2, i64* %10, align 8
  %18 = load i64, i64* %9, align 8
  store i64 %18, i64* %11, align 8
  %19 = load i64, i64* %9, align 8
  store i64 %19, i64* %12, align 8
  br label %20

; <label>:20:                                     ; preds = %41, %5
  %21 = load i64, i64* %12, align 8
  %22 = load i64, i64* %10, align 8
  %23 = sub nsw i64 %22, 1
  %24 = sdiv i64 %23, 2
  %25 = icmp slt i64 %21, %24
  br i1 %25, label %26, label %52

; <label>:26:                                     ; preds = %20
  %27 = load i64, i64* %12, align 8
  %28 = add nsw i64 %27, 1
  %29 = mul nsw i64 2, %28
  store i64 %29, i64* %12, align 8
  %30 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %31 = load i64, i64* %12, align 8
  %32 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %30, i64 %31
  %33 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %34 = load i64, i64* %12, align 8
  %35 = sub nsw i64 %34, 1
  %36 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %33, i64 %35
  %37 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SG_EEbS4_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7, %"struct.(anonymous namespace)::ClassBox"* %32, %"struct.(anonymous namespace)::ClassBox"* %36)
  br i1 %37, label %38, label %41

; <label>:38:                                     ; preds = %26
  %39 = load i64, i64* %12, align 8
  %40 = add nsw i64 %39, -1
  store i64 %40, i64* %12, align 8
  br label %41

; <label>:41:                                     ; preds = %38, %26
  %42 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %43 = load i64, i64* %12, align 8
  %44 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %42, i64 %43
  %45 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %44) #5
  %46 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %47 = load i64, i64* %9, align 8
  %48 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %46, i64 %47
  %49 = bitcast %"struct.(anonymous namespace)::ClassBox"* %48 to i8*
  %50 = bitcast %"struct.(anonymous namespace)::ClassBox"* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %49, i8* align 8 %50, i64 16, i1 false)
  %51 = load i64, i64* %12, align 8
  store i64 %51, i64* %9, align 8
  br label %20

; <label>:52:                                     ; preds = %20
  %53 = load i64, i64* %10, align 8
  %54 = and i64 %53, 1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %78

; <label>:56:                                     ; preds = %52
  %57 = load i64, i64* %12, align 8
  %58 = load i64, i64* %10, align 8
  %59 = sub nsw i64 %58, 2
  %60 = sdiv i64 %59, 2
  %61 = icmp eq i64 %57, %60
  br i1 %61, label %62, label %78

; <label>:62:                                     ; preds = %56
  %63 = load i64, i64* %12, align 8
  %64 = add nsw i64 %63, 1
  %65 = mul nsw i64 2, %64
  store i64 %65, i64* %12, align 8
  %66 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %67 = load i64, i64* %12, align 8
  %68 = sub nsw i64 %67, 1
  %69 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %66, i64 %68
  %70 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %69) #5
  %71 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %72 = load i64, i64* %9, align 8
  %73 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %71, i64 %72
  %74 = bitcast %"struct.(anonymous namespace)::ClassBox"* %73 to i8*
  %75 = bitcast %"struct.(anonymous namespace)::ClassBox"* %70 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 16, i1 false)
  %76 = load i64, i64* %12, align 8
  %77 = sub nsw i64 %76, 1
  store i64 %77, i64* %9, align 8
  br label %78

; <label>:78:                                     ; preds = %62, %56, %52
  %79 = call dereferenceable(1) %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* @_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S6_PKfPKmmS8_SA_mSA_mjjffbEUlRKNS3_8ClassBoxESD_E_EEEONSt16remove_referenceIS5_E4typeEOS5_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1) %7) #5
  call void @_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EC2EONS0_15_Iter_comp_iterISD_EE(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %13, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1) %79)
  %80 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %81 = load i64, i64* %9, align 8
  %82 = load i64, i64* %11, align 8
  %83 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %6) #5
  %84 = bitcast %"struct.(anonymous namespace)::ClassBox"* %14 to i8*
  %85 = bitcast %"struct.(anonymous namespace)::ClassBox"* %83 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 16, i1 false)
  %86 = bitcast %"struct.(anonymous namespace)::ClassBox"* %14 to { float, i64 }*
  %87 = getelementptr inbounds { float, i64 }, { float, i64 }* %86, i32 0, i32 0
  %88 = load float, float* %87, align 8
  %89 = getelementptr inbounds { float, i64 }, { float, i64 }* %86, i32 0, i32 1
  %90 = load i64, i64* %89, align 8
  call void @_ZSt11__push_heapIPN12_GLOBAL__N_18ClassBoxElS1_N9__gnu_cxx5__ops14_Iter_comp_valIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_T0_SH_T1_RT2_(%"struct.(anonymous namespace)::ClassBox"* %80, i64 %81, i64 %82, float %88, i64 %90, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1) %13)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EC2EONS0_15_Iter_comp_iterISD_EE(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1)) unnamed_addr #0 align 2 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %3, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %1, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  %5 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %3, align 8
  %6 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5, i32 0, i32 0
  %7 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  %8 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7, i32 0, i32 0
  %9 = call dereferenceable(1) %class.anon* @_ZSt4moveIRZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S3_PKfPKmmS5_S7_mS7_mjjffbEUlRKNS0_8ClassBoxESA_E_EONSt16remove_referenceIS2_E4typeEOS2_(%class.anon* dereferenceable(1) %8) #5
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt11__push_heapIPN12_GLOBAL__N_18ClassBoxElS1_N9__gnu_cxx5__ops14_Iter_comp_valIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_T0_SH_T1_RT2_(%"struct.(anonymous namespace)::ClassBox"*, i64, i64, float, i64, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1)) #2 {
  %7 = alloca %"struct.(anonymous namespace)::ClassBox", align 8
  %8 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %12 = alloca i64, align 8
  %13 = bitcast %"struct.(anonymous namespace)::ClassBox"* %7 to { float, i64 }*
  %14 = getelementptr inbounds { float, i64 }, { float, i64 }* %13, i32 0, i32 0
  store float %3, float* %14, align 8
  %15 = getelementptr inbounds { float, i64 }, { float, i64 }* %13, i32 0, i32 1
  store i64 %4, i64* %15, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  store i64 %1, i64* %9, align 8
  store i64 %2, i64* %10, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %11, align 8
  %16 = load i64, i64* %9, align 8
  %17 = sub nsw i64 %16, 1
  %18 = sdiv i64 %17, 2
  store i64 %18, i64* %12, align 8
  br label %19

; <label>:19:                                     ; preds = %31, %6
  %20 = load i64, i64* %9, align 8
  %21 = load i64, i64* %10, align 8
  %22 = icmp sgt i64 %20, %21
  br i1 %22, label %23, label %29

; <label>:23:                                     ; preds = %19
  %24 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %11, align 8
  %25 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %26 = load i64, i64* %12, align 8
  %27 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %25, i64 %26
  %28 = call zeroext i1 @_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SA_EEbS4_RT0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %24, %"struct.(anonymous namespace)::ClassBox"* %27, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %7)
  br label %29

; <label>:29:                                     ; preds = %23, %19
  %30 = phi i1 [ false, %19 ], [ %28, %23 ]
  br i1 %30, label %31, label %45

; <label>:31:                                     ; preds = %29
  %32 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %33 = load i64, i64* %12, align 8
  %34 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %32, i64 %33
  %35 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %34) #5
  %36 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %37 = load i64, i64* %9, align 8
  %38 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %36, i64 %37
  %39 = bitcast %"struct.(anonymous namespace)::ClassBox"* %38 to i8*
  %40 = bitcast %"struct.(anonymous namespace)::ClassBox"* %35 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 16, i1 false)
  %41 = load i64, i64* %12, align 8
  store i64 %41, i64* %9, align 8
  %42 = load i64, i64* %9, align 8
  %43 = sub nsw i64 %42, 1
  %44 = sdiv i64 %43, 2
  store i64 %44, i64* %12, align 8
  br label %19

; <label>:45:                                     ; preds = %29
  %46 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %7) #5
  %47 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %8, align 8
  %48 = load i64, i64* %9, align 8
  %49 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %47, i64 %48
  %50 = bitcast %"struct.(anonymous namespace)::ClassBox"* %49 to i8*
  %51 = bitcast %"struct.(anonymous namespace)::ClassBox"* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 16, i1 false)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal zeroext i1 @_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EclIPSA_SA_EEbS4_RT0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16)) #2 align 2 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %2, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %7 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4, align 8
  %8 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7, i32 0, i32 0
  %9 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %10 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %6, align 8
  %11 = call zeroext i1 @_ZZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S2_PKfPKmmS4_S6_mS6_mjjffbENKUlRKNS_8ClassBoxES9_E_clES9_S9_(%class.anon* %8, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %9, %"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %10)
  ret i1 %11
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZSt11__make_heapIPN12_GLOBAL__N_18ClassBoxEN9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_S7_RT0_(%"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* dereferenceable(1)) #2 {
  %4 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %5 = alloca %"struct.(anonymous namespace)::ClassBox"*, align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca %"struct.(anonymous namespace)::ClassBox", align 8
  %10 = alloca %"struct.(anonymous namespace)::ClassBox", align 8
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.(anonymous namespace)::ClassBox"* %0, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  store %"struct.(anonymous namespace)::ClassBox"* %1, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %2, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %6, align 8
  %12 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %13 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %14 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %12 to i64
  %15 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %13 to i64
  %16 = sub i64 %14, %15
  %17 = sdiv exact i64 %16, 16
  %18 = icmp slt i64 %17, 2
  br i1 %18, label %19, label %20

; <label>:19:                                     ; preds = %3
  br label %57

; <label>:20:                                     ; preds = %3
  %21 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %5, align 8
  %22 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %23 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %21 to i64
  %24 = ptrtoint %"struct.(anonymous namespace)::ClassBox"* %22 to i64
  %25 = sub i64 %23, %24
  %26 = sdiv exact i64 %25, 16
  store i64 %26, i64* %7, align 8
  %27 = load i64, i64* %7, align 8
  %28 = sub nsw i64 %27, 2
  %29 = sdiv i64 %28, 2
  store i64 %29, i64* %8, align 8
  br label %30

; <label>:30:                                     ; preds = %20, %54
  %31 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %32 = load i64, i64* %8, align 8
  %33 = getelementptr inbounds %"struct.(anonymous namespace)::ClassBox", %"struct.(anonymous namespace)::ClassBox"* %31, i64 %32
  %34 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %33) #5
  %35 = bitcast %"struct.(anonymous namespace)::ClassBox"* %9 to i8*
  %36 = bitcast %"struct.(anonymous namespace)::ClassBox"* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 16, i1 false)
  %37 = load %"struct.(anonymous namespace)::ClassBox"*, %"struct.(anonymous namespace)::ClassBox"** %4, align 8
  %38 = load i64, i64* %8, align 8
  %39 = load i64, i64* %7, align 8
  %40 = call dereferenceable(16) %"struct.(anonymous namespace)::ClassBox"* @_ZSt4moveIRN12_GLOBAL__N_18ClassBoxEEONSt16remove_referenceIT_E4typeEOS4_(%"struct.(anonymous namespace)::ClassBox"* dereferenceable(16) %9) #5
  %41 = bitcast %"struct.(anonymous namespace)::ClassBox"* %10 to i8*
  %42 = bitcast %"struct.(anonymous namespace)::ClassBox"* %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 16, i1 false)
  %43 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %6, align 8
  %44 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %11 to i8*
  %45 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %45, i64 1, i1 false)
  %46 = bitcast %"struct.(anonymous namespace)::ClassBox"* %10 to { float, i64 }*
  %47 = getelementptr inbounds { float, i64 }, { float, i64 }* %46, i32 0, i32 0
  %48 = load float, float* %47, align 8
  %49 = getelementptr inbounds { float, i64 }, { float, i64 }* %46, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  call void @_ZSt13__adjust_heapIPN12_GLOBAL__N_18ClassBoxElS1_N9__gnu_cxx5__ops15_Iter_comp_iterIZNS0_18libjit_nms_genericIiEEvPT_S8_PKfPKmmSA_SC_mSC_mjjffbEUlRKS1_SE_E_EEEvS7_T0_SH_T1_T2_(%"struct.(anonymous namespace)::ClassBox"* %37, i64 %38, i64 %39, float %48, i64 %50)
  %51 = load i64, i64* %8, align 8
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %54

; <label>:53:                                     ; preds = %30
  br label %57

; <label>:54:                                     ; preds = %30
  %55 = load i64, i64* %8, align 8
  %56 = add nsw i64 %55, -1
  store i64 %56, i64* %8, align 8
  br label %30

; <label>:57:                                     ; preds = %53, %19
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S5_PKfPKmmS7_S9_mS9_mjjffbEUlRKNS2_8ClassBoxESC_E_EC2ESD_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"*) unnamed_addr #0 align 2 {
  %2 = alloca %class.anon, align 1
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %3, align 8
  %4 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %3, align 8
  %5 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4, i32 0, i32 0
  %6 = call dereferenceable(1) %class.anon* @_ZSt4moveIRZN12_GLOBAL__N_118libjit_nms_genericIiEEvPT_S3_PKfPKmmS5_S7_mS7_mjjffbEUlRKNS0_8ClassBoxESA_E_EONSt16remove_referenceIS2_E4typeEOS2_(%class.anon* dereferenceable(1) %2) #5
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_convDKKC8_f(float*, float*, float*, float*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64, i32, i32, i32, i32) #2 {
  %17 = alloca float*, align 8
  %18 = alloca float*, align 8
  %19 = alloca float*, align 8
  %20 = alloca float*, align 8
  %21 = alloca i64*, align 8
  %22 = alloca i64*, align 8
  %23 = alloca i64*, align 8
  %24 = alloca i64*, align 8
  %25 = alloca i64*, align 8
  %26 = alloca i64*, align 8
  %27 = alloca i64*, align 8
  %28 = alloca i64, align 8
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca void (i64, i64, i32, i32, i32, i64, float*, float*, float*, float*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64, i64)*, align 8
  %38 = alloca i64, align 8
  %39 = alloca i64, align 8
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  store float* %0, float** %17, align 8
  store float* %1, float** %18, align 8
  store float* %2, float** %19, align 8
  store float* %3, float** %20, align 8
  store i64* %4, i64** %21, align 8
  store i64* %5, i64** %22, align 8
  store i64* %6, i64** %23, align 8
  store i64* %7, i64** %24, align 8
  store i64* %8, i64** %25, align 8
  store i64* %9, i64** %26, align 8
  store i64* %10, i64** %27, align 8
  store i64 %11, i64* %28, align 8
  store i32 %12, i32* %29, align 4
  store i32 %13, i32* %30, align 4
  store i32 %14, i32* %31, align 4
  store i32 %15, i32* %32, align 4
  %43 = load i64*, i64** %22, align 8
  %44 = getelementptr inbounds i64, i64* %43, i64 3
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %33, align 8
  %46 = load i64*, i64** %21, align 8
  %47 = getelementptr inbounds i64, i64* %46, i64 3
  %48 = load i64, i64* %47, align 8
  store i64 %48, i64* %34, align 8
  %49 = load i64, i64* %33, align 8
  %50 = load i64, i64* %28, align 8
  %51 = udiv i64 %49, %50
  store i64 %51, i64* %35, align 8
  %52 = load i64, i64* %34, align 8
  %53 = load i64, i64* %28, align 8
  %54 = udiv i64 %52, %53
  store i64 %54, i64* %36, align 8
  %55 = load i32, i32* %29, align 4
  %56 = icmp ne i32 %55, 0
  %57 = zext i1 %56 to i64
  %58 = select i1 %56, void (i64, i64, i32, i32, i32, i64, float*, float*, float*, float*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64, i64)* @_ZN12_GLOBAL__N_141libjit_convDKKC8_foreach_xy_pixels_filterEmmjjjmPfPKfS2_S2_PKmS4_S4_S4_S4_S4_S4_mm, void (i64, i64, i32, i32, i32, i64, float*, float*, float*, float*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64, i64)* @_ZN12_GLOBAL__N_141libjit_convDKKC8_foreach_xy_filter_pixelsEmmjjjmPfPKfS2_S2_PKmS4_S4_S4_S4_S4_S4_mm
  store void (i64, i64, i32, i32, i32, i64, float*, float*, float*, float*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64, i64)* %58, void (i64, i64, i32, i32, i32, i64, float*, float*, float*, float*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64, i64)** %37, align 8
  store i64 0, i64* %38, align 8
  br label %59

; <label>:59:                                     ; preds = %122, %16
  %60 = load i64, i64* %38, align 8
  %61 = load i64*, i64** %22, align 8
  %62 = getelementptr inbounds i64, i64* %61, i64 0
  %63 = load i64, i64* %62, align 8
  %64 = icmp ult i64 %60, %63
  br i1 %64, label %65, label %125

; <label>:65:                                     ; preds = %59
  %66 = load i64, i64* %38, align 8
  %67 = load float*, float** %17, align 8
  %68 = load float*, float** %20, align 8
  %69 = load i64*, i64** %21, align 8
  %70 = load i64*, i64** %24, align 8
  call void @_ZN12_GLOBAL__N_133libjit_conv_init_output_with_biasEmPfPKfPKmS4_(i64 %66, float* %67, float* %68, i64* %69, i64* %70)
  store i64 0, i64* %39, align 8
  br label %71

; <label>:71:                                     ; preds = %118, %65
  %72 = load i64, i64* %39, align 8
  %73 = load i64, i64* %28, align 8
  %74 = icmp ult i64 %72, %73
  br i1 %74, label %75, label %121

; <label>:75:                                     ; preds = %71
  %76 = load i64, i64* %39, align 8
  %77 = load i64, i64* %36, align 8
  %78 = mul i64 %76, %77
  store i64 %78, i64* %40, align 8
  %79 = load i64, i64* %39, align 8
  %80 = add i64 %79, 1
  %81 = load i64, i64* %36, align 8
  %82 = mul i64 %80, %81
  store i64 %82, i64* %41, align 8
  %83 = load i64, i64* %40, align 8
  store i64 %83, i64* %42, align 8
  br label %84

; <label>:84:                                     ; preds = %109, %75
  %85 = load i64, i64* %42, align 8
  %86 = load i64, i64* %41, align 8
  %87 = icmp ult i64 %85, %86
  br i1 %87, label %88, label %117

; <label>:88:                                     ; preds = %84
  %89 = load void (i64, i64, i32, i32, i32, i64, float*, float*, float*, float*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64, i64)*, void (i64, i64, i32, i32, i32, i64, float*, float*, float*, float*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64, i64)** %37, align 8
  %90 = load i64, i64* %38, align 8
  %91 = load i64, i64* %42, align 8
  %92 = load i32, i32* %30, align 4
  %93 = load i32, i32* %32, align 4
  %94 = load i32, i32* %31, align 4
  %95 = load i64, i64* %35, align 8
  %96 = load float*, float** %17, align 8
  %97 = load float*, float** %18, align 8
  %98 = load float*, float** %19, align 8
  %99 = load float*, float** %20, align 8
  %100 = load i64*, i64** %21, align 8
  %101 = load i64*, i64** %22, align 8
  %102 = load i64*, i64** %23, align 8
  %103 = load i64*, i64** %24, align 8
  %104 = load i64*, i64** %25, align 8
  %105 = load i64*, i64** %26, align 8
  %106 = load i64*, i64** %27, align 8
  %107 = load i64, i64* %39, align 8
  %108 = load i64, i64* %41, align 8
  call void %89(i64 %90, i64 %91, i32 %92, i32 %93, i32 %94, i64 %95, float* %96, float* %97, float* %98, float* %99, i64* %100, i64* %101, i64* %102, i64* %103, i64* %104, i64* %105, i64* %106, i64 %107, i64 %108)
  br label %109

; <label>:109:                                    ; preds = %88
  %110 = load i32, i32* %30, align 4
  %111 = mul i32 8, %110
  %112 = load i32, i32* %32, align 4
  %113 = mul i32 %111, %112
  %114 = zext i32 %113 to i64
  %115 = load i64, i64* %42, align 8
  %116 = add i64 %115, %114
  store i64 %116, i64* %42, align 8
  br label %84

; <label>:117:                                    ; preds = %84
  br label %118

; <label>:118:                                    ; preds = %117
  %119 = load i64, i64* %39, align 8
  %120 = add i64 %119, 1
  store i64 %120, i64* %39, align 8
  br label %71

; <label>:121:                                    ; preds = %71
  br label %122

; <label>:122:                                    ; preds = %121
  %123 = load i64, i64* %38, align 8
  %124 = add i64 %123, 1
  store i64 %124, i64* %38, align 8
  br label %59

; <label>:125:                                    ; preds = %59
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_141libjit_convDKKC8_foreach_xy_pixels_filterEmmjjjmPfPKfS2_S2_PKmS4_S4_S4_S4_S4_S4_mm(i64, i64, i32, i32, i32, i64, float*, float*, float*, float*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64, i64) #2 {
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i64, align 8
  %26 = alloca float*, align 8
  %27 = alloca float*, align 8
  %28 = alloca float*, align 8
  %29 = alloca float*, align 8
  %30 = alloca i64*, align 8
  %31 = alloca i64*, align 8
  %32 = alloca i64*, align 8
  %33 = alloca i64*, align 8
  %34 = alloca i64*, align 8
  %35 = alloca i64*, align 8
  %36 = alloca i64*, align 8
  %37 = alloca i64, align 8
  %38 = alloca i64, align 8
  %39 = alloca i64, align 8
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  %43 = alloca i64, align 8
  %44 = alloca i64, align 8
  %45 = alloca i64, align 8
  %46 = alloca i64, align 8
  %47 = alloca i64, align 8
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  %51 = alloca i64, align 8
  %52 = alloca i32, align 4
  store i64 %0, i64* %20, align 8
  store i64 %1, i64* %21, align 8
  store i32 %2, i32* %22, align 4
  store i32 %3, i32* %23, align 4
  store i32 %4, i32* %24, align 4
  store i64 %5, i64* %25, align 8
  store float* %6, float** %26, align 8
  store float* %7, float** %27, align 8
  store float* %8, float** %28, align 8
  store float* %9, float** %29, align 8
  store i64* %10, i64** %30, align 8
  store i64* %11, i64** %31, align 8
  store i64* %12, i64** %32, align 8
  store i64* %13, i64** %33, align 8
  store i64* %14, i64** %34, align 8
  store i64* %15, i64** %35, align 8
  store i64* %16, i64** %36, align 8
  store i64 %17, i64* %37, align 8
  store i64 %18, i64* %38, align 8
  %53 = load i64*, i64** %36, align 8
  %54 = getelementptr inbounds i64, i64* %53, i64 0
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %39, align 8
  %56 = load i64*, i64** %36, align 8
  %57 = getelementptr inbounds i64, i64* %56, i64 1
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %40, align 8
  %59 = load i64*, i64** %35, align 8
  %60 = getelementptr inbounds i64, i64* %59, i64 0
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %41, align 8
  %62 = load i64*, i64** %35, align 8
  %63 = getelementptr inbounds i64, i64* %62, i64 1
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %42, align 8
  %65 = load i64*, i64** %34, align 8
  %66 = getelementptr inbounds i64, i64* %65, i64 0
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %43, align 8
  %68 = load i64*, i64** %34, align 8
  %69 = getelementptr inbounds i64, i64* %68, i64 1
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %44, align 8
  store i64 0, i64* %45, align 8
  br label %71

; <label>:71:                                     ; preds = %179, %19
  %72 = load i64, i64* %45, align 8
  %73 = load i64*, i64** %30, align 8
  %74 = getelementptr inbounds i64, i64* %73, i64 1
  %75 = load i64, i64* %74, align 8
  %76 = icmp ult i64 %72, %75
  br i1 %76, label %77, label %182

; <label>:77:                                     ; preds = %71
  store i64 0, i64* %46, align 8
  br label %78

; <label>:78:                                     ; preds = %175, %77
  %79 = load i64, i64* %46, align 8
  %80 = load i64*, i64** %30, align 8
  %81 = getelementptr inbounds i64, i64* %80, i64 2
  %82 = load i64, i64* %81, align 8
  %83 = icmp ult i64 %79, %82
  br i1 %83, label %84, label %178

; <label>:84:                                     ; preds = %78
  store i64 0, i64* %47, align 8
  br label %85

; <label>:85:                                     ; preds = %171, %84
  %86 = load i64, i64* %47, align 8
  %87 = load i64, i64* %43, align 8
  %88 = icmp ult i64 %86, %87
  br i1 %88, label %89, label %174

; <label>:89:                                     ; preds = %85
  store i64 0, i64* %48, align 8
  br label %90

; <label>:90:                                     ; preds = %167, %89
  %91 = load i64, i64* %48, align 8
  %92 = load i64, i64* %44, align 8
  %93 = icmp ult i64 %91, %92
  br i1 %93, label %94, label %170

; <label>:94:                                     ; preds = %90
  %95 = load i64, i64* %45, align 8
  %96 = load i64, i64* %41, align 8
  %97 = mul i64 %95, %96
  %98 = load i64, i64* %39, align 8
  %99 = sub i64 %97, %98
  %100 = load i64, i64* %47, align 8
  %101 = add i64 %99, %100
  store i64 %101, i64* %49, align 8
  %102 = load i64, i64* %46, align 8
  %103 = load i64, i64* %42, align 8
  %104 = mul i64 %102, %103
  %105 = load i64, i64* %40, align 8
  %106 = sub i64 %104, %105
  %107 = load i64, i64* %48, align 8
  %108 = add i64 %106, %107
  store i64 %108, i64* %50, align 8
  %109 = load i64, i64* %49, align 8
  %110 = icmp ult i64 %109, 0
  br i1 %110, label %126, label %111

; <label>:111:                                    ; preds = %94
  %112 = load i64, i64* %50, align 8
  %113 = icmp ult i64 %112, 0
  br i1 %113, label %126, label %114

; <label>:114:                                    ; preds = %111
  %115 = load i64, i64* %49, align 8
  %116 = load i64*, i64** %31, align 8
  %117 = getelementptr inbounds i64, i64* %116, i64 1
  %118 = load i64, i64* %117, align 8
  %119 = icmp uge i64 %115, %118
  br i1 %119, label %126, label %120

; <label>:120:                                    ; preds = %114
  %121 = load i64, i64* %50, align 8
  %122 = load i64*, i64** %31, align 8
  %123 = getelementptr inbounds i64, i64* %122, i64 2
  %124 = load i64, i64* %123, align 8
  %125 = icmp uge i64 %121, %124
  br i1 %125, label %126, label %127

; <label>:126:                                    ; preds = %120, %114, %111, %94
  br label %167

; <label>:127:                                    ; preds = %120
  %128 = load i64, i64* %21, align 8
  store i64 %128, i64* %51, align 8
  store i32 0, i32* %52, align 4
  br label %129

; <label>:129:                                    ; preds = %163, %127
  %130 = load i32, i32* %52, align 4
  %131 = load i32, i32* %23, align 4
  %132 = icmp ult i32 %130, %131
  br i1 %132, label %133, label %137

; <label>:133:                                    ; preds = %129
  %134 = load i64, i64* %51, align 8
  %135 = load i64, i64* %38, align 8
  %136 = icmp ult i64 %134, %135
  br label %137

; <label>:137:                                    ; preds = %133, %129
  %138 = phi i1 [ false, %129 ], [ %136, %133 ]
  br i1 %138, label %139, label %166

; <label>:139:                                    ; preds = %137
  %140 = load float*, float** %26, align 8
  %141 = load float*, float** %27, align 8
  %142 = load float*, float** %28, align 8
  %143 = load i64*, i64** %30, align 8
  %144 = load i64*, i64** %31, align 8
  %145 = load i64*, i64** %32, align 8
  %146 = load i64, i64* %20, align 8
  %147 = load i64, i64* %51, align 8
  %148 = load i32, i32* %22, align 4
  %149 = load i64, i64* %25, align 8
  %150 = load i64, i64* %49, align 8
  %151 = load i64, i64* %50, align 8
  %152 = load i64, i64* %45, align 8
  %153 = load i64, i64* %46, align 8
  %154 = load i64, i64* %47, align 8
  %155 = load i64, i64* %48, align 8
  %156 = load i64, i64* %42, align 8
  %157 = load i64, i64* %37, align 8
  call void @_ZN12_GLOBAL__N_133libjit_convDKKC8_convolve_channelEPfPKfS2_PKmS4_S4_mmjjmllllmmmm(float* %140, float* %141, float* %142, i64* %143, i64* %144, i64* %145, i64 %146, i64 %147, i32 %148, i32 1, i64 %149, i64 %150, i64 %151, i64 %152, i64 %153, i64 %154, i64 %155, i64 %156, i64 %157)
  %158 = load i32, i32* %22, align 4
  %159 = mul i32 %158, 8
  %160 = zext i32 %159 to i64
  %161 = load i64, i64* %51, align 8
  %162 = add i64 %161, %160
  store i64 %162, i64* %51, align 8
  br label %163

; <label>:163:                                    ; preds = %139
  %164 = load i32, i32* %52, align 4
  %165 = add i32 %164, 1
  store i32 %165, i32* %52, align 4
  br label %129

; <label>:166:                                    ; preds = %137
  br label %167

; <label>:167:                                    ; preds = %166, %126
  %168 = load i64, i64* %48, align 8
  %169 = add i64 %168, 1
  store i64 %169, i64* %48, align 8
  br label %90

; <label>:170:                                    ; preds = %90
  br label %171

; <label>:171:                                    ; preds = %170
  %172 = load i64, i64* %47, align 8
  %173 = add i64 %172, 1
  store i64 %173, i64* %47, align 8
  br label %85

; <label>:174:                                    ; preds = %85
  br label %175

; <label>:175:                                    ; preds = %174
  %176 = load i64, i64* %46, align 8
  %177 = add i64 %176, 1
  store i64 %177, i64* %46, align 8
  br label %78

; <label>:178:                                    ; preds = %78
  br label %179

; <label>:179:                                    ; preds = %178
  %180 = load i64, i64* %45, align 8
  %181 = add i64 %180, 1
  store i64 %181, i64* %45, align 8
  br label %71

; <label>:182:                                    ; preds = %71
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_141libjit_convDKKC8_foreach_xy_filter_pixelsEmmjjjmPfPKfS2_S2_PKmS4_S4_S4_S4_S4_S4_mm(i64, i64, i32, i32, i32, i64, float*, float*, float*, float*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64, i64) #2 {
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i64, align 8
  %26 = alloca float*, align 8
  %27 = alloca float*, align 8
  %28 = alloca float*, align 8
  %29 = alloca float*, align 8
  %30 = alloca i64*, align 8
  %31 = alloca i64*, align 8
  %32 = alloca i64*, align 8
  %33 = alloca i64*, align 8
  %34 = alloca i64*, align 8
  %35 = alloca i64*, align 8
  %36 = alloca i64*, align 8
  %37 = alloca i64, align 8
  %38 = alloca i64, align 8
  %39 = alloca i64, align 8
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  %43 = alloca i64, align 8
  %44 = alloca i64, align 8
  %45 = alloca i64, align 8
  %46 = alloca i64, align 8
  %47 = alloca i64, align 8
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  %51 = alloca i64, align 8
  %52 = alloca i32, align 4
  %53 = alloca i64, align 8
  %54 = alloca i64, align 8
  %55 = alloca i32, align 4
  store i64 %0, i64* %20, align 8
  store i64 %1, i64* %21, align 8
  store i32 %2, i32* %22, align 4
  store i32 %3, i32* %23, align 4
  store i32 %4, i32* %24, align 4
  store i64 %5, i64* %25, align 8
  store float* %6, float** %26, align 8
  store float* %7, float** %27, align 8
  store float* %8, float** %28, align 8
  store float* %9, float** %29, align 8
  store i64* %10, i64** %30, align 8
  store i64* %11, i64** %31, align 8
  store i64* %12, i64** %32, align 8
  store i64* %13, i64** %33, align 8
  store i64* %14, i64** %34, align 8
  store i64* %15, i64** %35, align 8
  store i64* %16, i64** %36, align 8
  store i64 %17, i64* %37, align 8
  store i64 %18, i64* %38, align 8
  %56 = load i64*, i64** %36, align 8
  %57 = getelementptr inbounds i64, i64* %56, i64 0
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %39, align 8
  %59 = load i64*, i64** %36, align 8
  %60 = getelementptr inbounds i64, i64* %59, i64 1
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %40, align 8
  %62 = load i64*, i64** %35, align 8
  %63 = getelementptr inbounds i64, i64* %62, i64 0
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %41, align 8
  %65 = load i64*, i64** %35, align 8
  %66 = getelementptr inbounds i64, i64* %65, i64 1
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %42, align 8
  %68 = load i64*, i64** %34, align 8
  %69 = getelementptr inbounds i64, i64* %68, i64 0
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %43, align 8
  %71 = load i64*, i64** %34, align 8
  %72 = getelementptr inbounds i64, i64* %71, i64 1
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %44, align 8
  store i64 0, i64* %45, align 8
  br label %74

; <label>:74:                                     ; preds = %260, %19
  %75 = load i64, i64* %45, align 8
  %76 = load i64, i64* %43, align 8
  %77 = icmp ult i64 %75, %76
  br i1 %77, label %78, label %263

; <label>:78:                                     ; preds = %74
  store i64 0, i64* %46, align 8
  br label %79

; <label>:79:                                     ; preds = %256, %78
  %80 = load i64, i64* %46, align 8
  %81 = load i64, i64* %44, align 8
  %82 = icmp ult i64 %80, %81
  br i1 %82, label %83, label %259

; <label>:83:                                     ; preds = %79
  store i64 0, i64* %47, align 8
  br label %84

; <label>:84:                                     ; preds = %252, %83
  %85 = load i64, i64* %47, align 8
  %86 = load i64*, i64** %30, align 8
  %87 = getelementptr inbounds i64, i64* %86, i64 1
  %88 = load i64, i64* %87, align 8
  %89 = icmp ult i64 %85, %88
  br i1 %89, label %90, label %255

; <label>:90:                                     ; preds = %84
  %91 = load i64, i64* %47, align 8
  %92 = load i64, i64* %41, align 8
  %93 = mul i64 %91, %92
  %94 = load i64, i64* %39, align 8
  %95 = sub i64 %93, %94
  %96 = load i64, i64* %45, align 8
  %97 = add i64 %95, %96
  store i64 %97, i64* %48, align 8
  %98 = load i64, i64* %48, align 8
  %99 = icmp slt i64 %98, 0
  br i1 %99, label %106, label %100

; <label>:100:                                    ; preds = %90
  %101 = load i64, i64* %48, align 8
  %102 = load i64*, i64** %31, align 8
  %103 = getelementptr inbounds i64, i64* %102, i64 1
  %104 = load i64, i64* %103, align 8
  %105 = icmp sge i64 %101, %104
  br i1 %105, label %106, label %107

; <label>:106:                                    ; preds = %100, %90
  br label %252

; <label>:107:                                    ; preds = %100
  store i64 0, i64* %49, align 8
  br label %108

; <label>:108:                                    ; preds = %179, %136, %107
  %109 = load i64, i64* %49, align 8
  %110 = load i64*, i64** %30, align 8
  %111 = getelementptr inbounds i64, i64* %110, i64 2
  %112 = load i64, i64* %111, align 8
  %113 = icmp ult i64 %109, %112
  br i1 %113, label %114, label %184

; <label>:114:                                    ; preds = %108
  %115 = load i64, i64* %49, align 8
  %116 = load i64, i64* %42, align 8
  %117 = mul i64 %115, %116
  %118 = load i64, i64* %40, align 8
  %119 = sub i64 %117, %118
  %120 = load i64, i64* %46, align 8
  %121 = add i64 %119, %120
  store i64 %121, i64* %50, align 8
  %122 = load i64, i64* %50, align 8
  %123 = load i64, i64* %42, align 8
  %124 = load i32, i32* %24, align 4
  %125 = zext i32 %124 to i64
  %126 = mul nsw i64 %123, %125
  %127 = add nsw i64 %122, %126
  %128 = load i64*, i64** %31, align 8
  %129 = getelementptr inbounds i64, i64* %128, i64 2
  %130 = load i64, i64* %129, align 8
  %131 = icmp sge i64 %127, %130
  br i1 %131, label %132, label %133

; <label>:132:                                    ; preds = %114
  br label %184

; <label>:133:                                    ; preds = %114
  %134 = load i64, i64* %50, align 8
  %135 = icmp slt i64 %134, 0
  br i1 %135, label %136, label %139

; <label>:136:                                    ; preds = %133
  %137 = load i64, i64* %49, align 8
  %138 = add i64 %137, 1
  store i64 %138, i64* %49, align 8
  br label %108

; <label>:139:                                    ; preds = %133
  %140 = load i64, i64* %21, align 8
  store i64 %140, i64* %51, align 8
  store i32 0, i32* %52, align 4
  br label %141

; <label>:141:                                    ; preds = %176, %139
  %142 = load i32, i32* %52, align 4
  %143 = load i32, i32* %23, align 4
  %144 = icmp ult i32 %142, %143
  br i1 %144, label %145, label %149

; <label>:145:                                    ; preds = %141
  %146 = load i64, i64* %51, align 8
  %147 = load i64, i64* %38, align 8
  %148 = icmp ult i64 %146, %147
  br label %149

; <label>:149:                                    ; preds = %145, %141
  %150 = phi i1 [ false, %141 ], [ %148, %145 ]
  br i1 %150, label %151, label %179

; <label>:151:                                    ; preds = %149
  %152 = load float*, float** %26, align 8
  %153 = load float*, float** %27, align 8
  %154 = load float*, float** %28, align 8
  %155 = load i64*, i64** %30, align 8
  %156 = load i64*, i64** %31, align 8
  %157 = load i64*, i64** %32, align 8
  %158 = load i64, i64* %20, align 8
  %159 = load i64, i64* %51, align 8
  %160 = load i32, i32* %22, align 4
  %161 = load i32, i32* %24, align 4
  %162 = load i64, i64* %25, align 8
  %163 = load i64, i64* %48, align 8
  %164 = load i64, i64* %50, align 8
  %165 = load i64, i64* %47, align 8
  %166 = load i64, i64* %49, align 8
  %167 = load i64, i64* %45, align 8
  %168 = load i64, i64* %46, align 8
  %169 = load i64, i64* %42, align 8
  %170 = load i64, i64* %37, align 8
  call void @_ZN12_GLOBAL__N_133libjit_convDKKC8_convolve_channelEPfPKfS2_PKmS4_S4_mmjjmllllmmmm(float* %152, float* %153, float* %154, i64* %155, i64* %156, i64* %157, i64 %158, i64 %159, i32 %160, i32 %161, i64 %162, i64 %163, i64 %164, i64 %165, i64 %166, i64 %167, i64 %168, i64 %169, i64 %170)
  %171 = load i32, i32* %22, align 4
  %172 = mul i32 %171, 8
  %173 = zext i32 %172 to i64
  %174 = load i64, i64* %51, align 8
  %175 = add i64 %174, %173
  store i64 %175, i64* %51, align 8
  br label %176

; <label>:176:                                    ; preds = %151
  %177 = load i32, i32* %52, align 4
  %178 = add i32 %177, 1
  store i32 %178, i32* %52, align 4
  br label %141

; <label>:179:                                    ; preds = %149
  %180 = load i32, i32* %24, align 4
  %181 = zext i32 %180 to i64
  %182 = load i64, i64* %49, align 8
  %183 = add i64 %182, %181
  store i64 %183, i64* %49, align 8
  br label %108

; <label>:184:                                    ; preds = %132, %108
  br label %185

; <label>:185:                                    ; preds = %248, %184
  %186 = load i64, i64* %49, align 8
  %187 = load i64*, i64** %30, align 8
  %188 = getelementptr inbounds i64, i64* %187, i64 2
  %189 = load i64, i64* %188, align 8
  %190 = icmp ult i64 %186, %189
  br i1 %190, label %191, label %251

; <label>:191:                                    ; preds = %185
  %192 = load i64, i64* %49, align 8
  %193 = load i64, i64* %42, align 8
  %194 = mul i64 %192, %193
  %195 = load i64, i64* %40, align 8
  %196 = sub i64 %194, %195
  %197 = load i64, i64* %46, align 8
  %198 = add i64 %196, %197
  store i64 %198, i64* %53, align 8
  %199 = load i64, i64* %53, align 8
  %200 = icmp slt i64 %199, 0
  br i1 %200, label %207, label %201

; <label>:201:                                    ; preds = %191
  %202 = load i64, i64* %53, align 8
  %203 = load i64*, i64** %31, align 8
  %204 = getelementptr inbounds i64, i64* %203, i64 2
  %205 = load i64, i64* %204, align 8
  %206 = icmp sge i64 %202, %205
  br i1 %206, label %207, label %208

; <label>:207:                                    ; preds = %201, %191
  br label %248

; <label>:208:                                    ; preds = %201
  %209 = load i64, i64* %21, align 8
  store i64 %209, i64* %54, align 8
  store i32 0, i32* %55, align 4
  br label %210

; <label>:210:                                    ; preds = %244, %208
  %211 = load i32, i32* %55, align 4
  %212 = load i32, i32* %23, align 4
  %213 = icmp ult i32 %211, %212
  br i1 %213, label %214, label %218

; <label>:214:                                    ; preds = %210
  %215 = load i64, i64* %54, align 8
  %216 = load i64, i64* %38, align 8
  %217 = icmp ult i64 %215, %216
  br label %218

; <label>:218:                                    ; preds = %214, %210
  %219 = phi i1 [ false, %210 ], [ %217, %214 ]
  br i1 %219, label %220, label %247

; <label>:220:                                    ; preds = %218
  %221 = load float*, float** %26, align 8
  %222 = load float*, float** %27, align 8
  %223 = load float*, float** %28, align 8
  %224 = load i64*, i64** %30, align 8
  %225 = load i64*, i64** %31, align 8
  %226 = load i64*, i64** %32, align 8
  %227 = load i64, i64* %20, align 8
  %228 = load i64, i64* %54, align 8
  %229 = load i32, i32* %22, align 4
  %230 = load i64, i64* %25, align 8
  %231 = load i64, i64* %48, align 8
  %232 = load i64, i64* %53, align 8
  %233 = load i64, i64* %47, align 8
  %234 = load i64, i64* %49, align 8
  %235 = load i64, i64* %45, align 8
  %236 = load i64, i64* %46, align 8
  %237 = load i64, i64* %42, align 8
  %238 = load i64, i64* %37, align 8
  call void @_ZN12_GLOBAL__N_133libjit_convDKKC8_convolve_channelEPfPKfS2_PKmS4_S4_mmjjmllllmmmm(float* %221, float* %222, float* %223, i64* %224, i64* %225, i64* %226, i64 %227, i64 %228, i32 %229, i32 1, i64 %230, i64 %231, i64 %232, i64 %233, i64 %234, i64 %235, i64 %236, i64 %237, i64 %238)
  %239 = load i32, i32* %22, align 4
  %240 = mul i32 %239, 8
  %241 = zext i32 %240 to i64
  %242 = load i64, i64* %54, align 8
  %243 = add i64 %242, %241
  store i64 %243, i64* %54, align 8
  br label %244

; <label>:244:                                    ; preds = %220
  %245 = load i32, i32* %55, align 4
  %246 = add i32 %245, 1
  store i32 %246, i32* %55, align 4
  br label %210

; <label>:247:                                    ; preds = %218
  br label %248

; <label>:248:                                    ; preds = %247, %207
  %249 = load i64, i64* %49, align 8
  %250 = add i64 %249, 1
  store i64 %250, i64* %49, align 8
  br label %185

; <label>:251:                                    ; preds = %185
  br label %252

; <label>:252:                                    ; preds = %251, %106
  %253 = load i64, i64* %47, align 8
  %254 = add i64 %253, 1
  store i64 %254, i64* %47, align 8
  br label %84

; <label>:255:                                    ; preds = %84
  br label %256

; <label>:256:                                    ; preds = %255
  %257 = load i64, i64* %46, align 8
  %258 = add i64 %257, 1
  store i64 %258, i64* %46, align 8
  br label %79

; <label>:259:                                    ; preds = %79
  br label %260

; <label>:260:                                    ; preds = %259
  %261 = load i64, i64* %45, align 8
  %262 = add i64 %261, 1
  store i64 %262, i64* %45, align 8
  br label %74

; <label>:263:                                    ; preds = %74
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_133libjit_conv_init_output_with_biasEmPfPKfPKmS4_(i64, float*, float*, i64*, i64*) #2 {
  %6 = alloca i64, align 8
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca float, align 4
  %15 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store float* %1, float** %7, align 8
  store float* %2, float** %8, align 8
  store i64* %3, i64** %9, align 8
  store i64* %4, i64** %10, align 8
  store i64 0, i64* %11, align 8
  br label %16

; <label>:16:                                     ; preds = %59, %5
  %17 = load i64, i64* %11, align 8
  %18 = load i64*, i64** %9, align 8
  %19 = getelementptr inbounds i64, i64* %18, i64 1
  %20 = load i64, i64* %19, align 8
  %21 = icmp ult i64 %17, %20
  br i1 %21, label %22, label %62

; <label>:22:                                     ; preds = %16
  store i64 0, i64* %12, align 8
  br label %23

; <label>:23:                                     ; preds = %55, %22
  %24 = load i64, i64* %12, align 8
  %25 = load i64*, i64** %9, align 8
  %26 = getelementptr inbounds i64, i64* %25, i64 2
  %27 = load i64, i64* %26, align 8
  %28 = icmp ult i64 %24, %27
  br i1 %28, label %29, label %58

; <label>:29:                                     ; preds = %23
  store i64 0, i64* %13, align 8
  br label %30

; <label>:30:                                     ; preds = %51, %29
  %31 = load i64, i64* %13, align 8
  %32 = load i64*, i64** %9, align 8
  %33 = getelementptr inbounds i64, i64* %32, i64 3
  %34 = load i64, i64* %33, align 8
  %35 = icmp ult i64 %31, %34
  br i1 %35, label %36, label %54

; <label>:36:                                     ; preds = %30
  %37 = load float*, float** %8, align 8
  %38 = load i64, i64* %13, align 8
  %39 = getelementptr inbounds float, float* %37, i64 %38
  %40 = load float, float* %39, align 4
  store float %40, float* %14, align 4
  %41 = load i64*, i64** %9, align 8
  %42 = load i64, i64* %6, align 8
  %43 = load i64, i64* %11, align 8
  %44 = load i64, i64* %12, align 8
  %45 = load i64, i64* %13, align 8
  %46 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %41, i64 %42, i64 %43, i64 %44, i64 %45)
  store i64 %46, i64* %15, align 8
  %47 = load float, float* %14, align 4
  %48 = load float*, float** %7, align 8
  %49 = load i64, i64* %15, align 8
  %50 = getelementptr inbounds float, float* %48, i64 %49
  store float %47, float* %50, align 4
  br label %51

; <label>:51:                                     ; preds = %36
  %52 = load i64, i64* %13, align 8
  %53 = add i64 %52, 1
  store i64 %53, i64* %13, align 8
  br label %30

; <label>:54:                                     ; preds = %30
  br label %55

; <label>:55:                                     ; preds = %54
  %56 = load i64, i64* %12, align 8
  %57 = add i64 %56, 1
  store i64 %57, i64* %12, align 8
  br label %23

; <label>:58:                                     ; preds = %23
  br label %59

; <label>:59:                                     ; preds = %58
  %60 = load i64, i64* %11, align 8
  %61 = add i64 %60, 1
  store i64 %61, i64* %11, align 8
  br label %16

; <label>:62:                                     ; preds = %16
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_133libjit_convDKKC8_convolve_channelEPfPKfS2_PKmS4_S4_mmjjmllllmmmm(float*, float*, float*, i64*, i64*, i64*, i64, i64, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64) #2 {
  %20 = alloca float*, align 8
  %21 = alloca float*, align 8
  %22 = alloca float*, align 8
  %23 = alloca i64*, align 8
  %24 = alloca i64*, align 8
  %25 = alloca i64*, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca i64, align 8
  %38 = alloca i64, align 8
  %39 = alloca i8*, align 8
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca i64, align 8
  %45 = alloca i8*, align 8
  %46 = alloca i64, align 8
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca i64, align 8
  %52 = alloca <8 x float>, align 32
  %53 = alloca i32, align 4
  %54 = alloca i32, align 4
  %55 = alloca i64, align 8
  store float* %0, float** %20, align 8
  store float* %1, float** %21, align 8
  store float* %2, float** %22, align 8
  store i64* %3, i64** %23, align 8
  store i64* %4, i64** %24, align 8
  store i64* %5, i64** %25, align 8
  store i64 %6, i64* %26, align 8
  store i64 %7, i64* %27, align 8
  store i32 %8, i32* %28, align 4
  store i32 %9, i32* %29, align 4
  store i64 %10, i64* %30, align 8
  store i64 %11, i64* %31, align 8
  store i64 %12, i64* %32, align 8
  store i64 %13, i64* %33, align 8
  store i64 %14, i64* %34, align 8
  store i64 %15, i64* %35, align 8
  store i64 %16, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  store i64 %18, i64* %38, align 8
  %56 = load i32, i32* %28, align 4
  %57 = zext i32 %56 to i64
  %58 = load i32, i32* %29, align 4
  %59 = zext i32 %58 to i64
  %60 = call i8* @llvm.stacksave()
  store i8* %60, i8** %39, align 8
  %61 = mul nuw i64 %57, %59
  %62 = alloca <8 x float>, i64 %61, align 32
  store i64 %57, i64* %40, align 8
  store i64 %59, i64* %41, align 8
  store i32 0, i32* %42, align 4
  br label %63

; <label>:63:                                     ; preds = %84, %19
  %64 = load i32, i32* %42, align 4
  %65 = load i32, i32* %29, align 4
  %66 = icmp ult i32 %64, %65
  br i1 %66, label %67, label %87

; <label>:67:                                     ; preds = %63
  store i32 0, i32* %43, align 4
  br label %68

; <label>:68:                                     ; preds = %80, %67
  %69 = load i32, i32* %43, align 4
  %70 = load i32, i32* %28, align 4
  %71 = icmp ult i32 %69, %70
  br i1 %71, label %72, label %83

; <label>:72:                                     ; preds = %68
  %73 = load i32, i32* %43, align 4
  %74 = zext i32 %73 to i64
  %75 = mul nsw i64 %74, %59
  %76 = getelementptr inbounds <8 x float>, <8 x float>* %62, i64 %75
  %77 = load i32, i32* %42, align 4
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds <8 x float>, <8 x float>* %76, i64 %78
  store <8 x float> zeroinitializer, <8 x float>* %79, align 32
  br label %80

; <label>:80:                                     ; preds = %72
  %81 = load i32, i32* %43, align 4
  %82 = add i32 %81, 1
  store i32 %82, i32* %43, align 4
  br label %68

; <label>:83:                                     ; preds = %68
  br label %84

; <label>:84:                                     ; preds = %83
  %85 = load i32, i32* %42, align 4
  %86 = add i32 %85, 1
  store i32 %86, i32* %42, align 4
  br label %63

; <label>:87:                                     ; preds = %63
  store i64 0, i64* %44, align 8
  br label %88

; <label>:88:                                     ; preds = %179, %87
  %89 = load i64, i64* %44, align 8
  %90 = load i64, i64* %30, align 8
  %91 = icmp ult i64 %89, %90
  br i1 %91, label %92, label %182

; <label>:92:                                     ; preds = %88
  %93 = load i32, i32* %29, align 4
  %94 = zext i32 %93 to i64
  %95 = call i8* @llvm.stacksave()
  store i8* %95, i8** %45, align 8
  %96 = alloca <8 x float>, i64 %94, align 32
  store i64 %94, i64* %46, align 8
  store i32 0, i32* %47, align 4
  br label %97

; <label>:97:                                     ; preds = %126, %92
  %98 = load i32, i32* %47, align 4
  %99 = load i32, i32* %29, align 4
  %100 = icmp ult i32 %98, %99
  br i1 %100, label %101, label %129

; <label>:101:                                    ; preds = %97
  %102 = load i64*, i64** %24, align 8
  %103 = load i64, i64* %26, align 8
  %104 = load i64, i64* %31, align 8
  %105 = load i64, i64* %32, align 8
  %106 = load i32, i32* %47, align 4
  %107 = zext i32 %106 to i64
  %108 = load i64, i64* %37, align 8
  %109 = mul i64 %107, %108
  %110 = add i64 %105, %109
  %111 = load i64, i64* %44, align 8
  %112 = load i64, i64* %38, align 8
  %113 = load i64, i64* %30, align 8
  %114 = mul i64 %112, %113
  %115 = add i64 %111, %114
  %116 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %102, i64 %103, i64 %104, i64 %110, i64 %115)
  store i64 %116, i64* %48, align 8
  %117 = load float*, float** %21, align 8
  %118 = load i64, i64* %48, align 8
  %119 = getelementptr inbounds float, float* %117, i64 %118
  %120 = load float, float* %119, align 4
  %121 = insertelement <8 x float> undef, float %120, i32 0
  %122 = shufflevector <8 x float> %121, <8 x float> undef, <8 x i32> zeroinitializer
  %123 = load i32, i32* %47, align 4
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds <8 x float>, <8 x float>* %96, i64 %124
  store <8 x float> %122, <8 x float>* %125, align 32
  br label %126

; <label>:126:                                    ; preds = %101
  %127 = load i32, i32* %47, align 4
  %128 = add i32 %127, 1
  store i32 %128, i32* %47, align 4
  br label %97

; <label>:129:                                    ; preds = %97
  store i32 0, i32* %49, align 4
  br label %130

; <label>:130:                                    ; preds = %174, %129
  %131 = load i32, i32* %49, align 4
  %132 = load i32, i32* %29, align 4
  %133 = icmp ult i32 %131, %132
  br i1 %133, label %134, label %177

; <label>:134:                                    ; preds = %130
  store i32 0, i32* %50, align 4
  br label %135

; <label>:135:                                    ; preds = %170, %134
  %136 = load i32, i32* %50, align 4
  %137 = load i32, i32* %28, align 4
  %138 = icmp ult i32 %136, %137
  br i1 %138, label %139, label %173

; <label>:139:                                    ; preds = %135
  %140 = load i64*, i64** %25, align 8
  %141 = load i64, i64* %27, align 8
  %142 = udiv i64 %141, 8
  %143 = load i32, i32* %50, align 4
  %144 = zext i32 %143 to i64
  %145 = add i64 %142, %144
  %146 = load i64, i64* %35, align 8
  %147 = load i64, i64* %36, align 8
  %148 = load i64, i64* %44, align 8
  %149 = call i64 @_Z15libjit_getXYZWQPKmmmmmm(i64* %140, i64 %145, i64 %146, i64 %147, i64 %148, i64 0)
  store i64 %149, i64* %51, align 8
  %150 = load float*, float** %22, align 8
  %151 = load i64, i64* %51, align 8
  %152 = getelementptr inbounds float, float* %150, i64 %151
  %153 = bitcast float* %152 to <8 x float>*
  %154 = load <8 x float>, <8 x float>* %153, align 32
  store <8 x float> %154, <8 x float>* %52, align 32
  %155 = load <8 x float>, <8 x float>* %52, align 32
  %156 = load i32, i32* %49, align 4
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds <8 x float>, <8 x float>* %96, i64 %157
  %159 = load <8 x float>, <8 x float>* %158, align 32
  %160 = fmul reassoc nsz arcp contract <8 x float> %155, %159
  %161 = load i32, i32* %50, align 4
  %162 = zext i32 %161 to i64
  %163 = mul nsw i64 %162, %59
  %164 = getelementptr inbounds <8 x float>, <8 x float>* %62, i64 %163
  %165 = load i32, i32* %49, align 4
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds <8 x float>, <8 x float>* %164, i64 %166
  %168 = load <8 x float>, <8 x float>* %167, align 32
  %169 = fadd reassoc nsz arcp contract <8 x float> %168, %160
  store <8 x float> %169, <8 x float>* %167, align 32
  br label %170

; <label>:170:                                    ; preds = %139
  %171 = load i32, i32* %50, align 4
  %172 = add i32 %171, 1
  store i32 %172, i32* %50, align 4
  br label %135

; <label>:173:                                    ; preds = %135
  br label %174

; <label>:174:                                    ; preds = %173
  %175 = load i32, i32* %49, align 4
  %176 = add i32 %175, 1
  store i32 %176, i32* %49, align 4
  br label %130

; <label>:177:                                    ; preds = %130
  %178 = load i8*, i8** %45, align 8
  call void @llvm.stackrestore(i8* %178)
  br label %179

; <label>:179:                                    ; preds = %177
  %180 = load i64, i64* %44, align 8
  %181 = add i64 %180, 1
  store i64 %181, i64* %44, align 8
  br label %88

; <label>:182:                                    ; preds = %88
  store i32 0, i32* %53, align 4
  br label %183

; <label>:183:                                    ; preds = %224, %182
  %184 = load i32, i32* %53, align 4
  %185 = load i32, i32* %29, align 4
  %186 = icmp ult i32 %184, %185
  br i1 %186, label %187, label %227

; <label>:187:                                    ; preds = %183
  store i32 0, i32* %54, align 4
  br label %188

; <label>:188:                                    ; preds = %220, %187
  %189 = load i32, i32* %54, align 4
  %190 = load i32, i32* %28, align 4
  %191 = icmp ult i32 %189, %190
  br i1 %191, label %192, label %223

; <label>:192:                                    ; preds = %188
  %193 = load i64*, i64** %23, align 8
  %194 = load i64, i64* %26, align 8
  %195 = load i64, i64* %33, align 8
  %196 = load i64, i64* %34, align 8
  %197 = load i32, i32* %53, align 4
  %198 = zext i32 %197 to i64
  %199 = add nsw i64 %196, %198
  %200 = load i64, i64* %27, align 8
  %201 = load i32, i32* %54, align 4
  %202 = mul i32 %201, 8
  %203 = zext i32 %202 to i64
  %204 = add i64 %200, %203
  %205 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %193, i64 %194, i64 %195, i64 %199, i64 %204)
  store i64 %205, i64* %55, align 8
  %206 = load i32, i32* %54, align 4
  %207 = zext i32 %206 to i64
  %208 = mul nsw i64 %207, %59
  %209 = getelementptr inbounds <8 x float>, <8 x float>* %62, i64 %208
  %210 = load i32, i32* %53, align 4
  %211 = zext i32 %210 to i64
  %212 = getelementptr inbounds <8 x float>, <8 x float>* %209, i64 %211
  %213 = load <8 x float>, <8 x float>* %212, align 32
  %214 = load float*, float** %20, align 8
  %215 = load i64, i64* %55, align 8
  %216 = getelementptr inbounds float, float* %214, i64 %215
  %217 = bitcast float* %216 to <8 x float>*
  %218 = load <8 x float>, <8 x float>* %217, align 32
  %219 = fadd reassoc nsz arcp contract <8 x float> %218, %213
  store <8 x float> %219, <8 x float>* %217, align 32
  br label %220

; <label>:220:                                    ; preds = %192
  %221 = load i32, i32* %54, align 4
  %222 = add i32 %221, 1
  store i32 %222, i32* %54, align 4
  br label %188

; <label>:223:                                    ; preds = %188
  br label %224

; <label>:224:                                    ; preds = %223
  %225 = load i32, i32* %53, align 4
  %226 = add i32 %225, 1
  store i32 %226, i32* %53, align 4
  br label %183

; <label>:227:                                    ; preds = %183
  %228 = load i8*, i8** %39, align 8
  call void @llvm.stackrestore(i8* %228)
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_convolution_f(float*, float*, float*, float*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64, i32, i64) #2 {
  %15 = alloca float*, align 8
  %16 = alloca float*, align 8
  %17 = alloca float*, align 8
  %18 = alloca float*, align 8
  %19 = alloca i64*, align 8
  %20 = alloca i64*, align 8
  %21 = alloca i64*, align 8
  %22 = alloca i64*, align 8
  %23 = alloca i64*, align 8
  %24 = alloca i64*, align 8
  %25 = alloca i64*, align 8
  %26 = alloca i64, align 8
  %27 = alloca i32, align 4
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca i64, align 8
  %38 = alloca i64, align 8
  %39 = alloca i32, align 4
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  %43 = alloca i64, align 8
  %44 = alloca i64, align 8
  %45 = alloca i64, align 8
  %46 = alloca i64, align 8
  %47 = alloca i64, align 8
  %48 = alloca i8*, align 8
  %49 = alloca i64, align 8
  %50 = alloca i32, align 4
  %51 = alloca i64, align 8
  %52 = alloca i64, align 8
  %53 = alloca i32, align 4
  %54 = alloca i64, align 8
  %55 = alloca i64, align 8
  %56 = alloca i64, align 8
  %57 = alloca i64, align 8
  %58 = alloca i64, align 8
  %59 = alloca float, align 4
  %60 = alloca i32, align 4
  %61 = alloca i64, align 8
  %62 = alloca i64, align 8
  %63 = alloca float, align 4
  %64 = alloca i32, align 4
  %65 = alloca i32, align 4
  store float* %0, float** %15, align 8
  store float* %1, float** %16, align 8
  store float* %2, float** %17, align 8
  store float* %3, float** %18, align 8
  store i64* %4, i64** %19, align 8
  store i64* %5, i64** %20, align 8
  store i64* %6, i64** %21, align 8
  store i64* %7, i64** %22, align 8
  store i64* %8, i64** %23, align 8
  store i64* %9, i64** %24, align 8
  store i64* %10, i64** %25, align 8
  store i64 %11, i64* %26, align 8
  store i32 %12, i32* %27, align 4
  store i64 %13, i64* %28, align 8
  %66 = load i64*, i64** %20, align 8
  %67 = getelementptr inbounds i64, i64* %66, i64 3
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %29, align 8
  %69 = load i64*, i64** %19, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 3
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %30, align 8
  %72 = load i64, i64* %29, align 8
  %73 = load i64, i64* %26, align 8
  %74 = udiv i64 %72, %73
  store i64 %74, i64* %31, align 8
  %75 = load i64, i64* %30, align 8
  %76 = load i64, i64* %26, align 8
  %77 = udiv i64 %75, %76
  store i64 %77, i64* %32, align 8
  %78 = load i64*, i64** %25, align 8
  %79 = getelementptr inbounds i64, i64* %78, i64 0
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %33, align 8
  %81 = load i64*, i64** %25, align 8
  %82 = getelementptr inbounds i64, i64* %81, i64 1
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %34, align 8
  %84 = load i64*, i64** %24, align 8
  %85 = getelementptr inbounds i64, i64* %84, i64 0
  %86 = load i64, i64* %85, align 8
  store i64 %86, i64* %35, align 8
  %87 = load i64*, i64** %24, align 8
  %88 = getelementptr inbounds i64, i64* %87, i64 1
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %36, align 8
  %90 = load i64*, i64** %23, align 8
  %91 = getelementptr inbounds i64, i64* %90, i64 0
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %37, align 8
  %93 = load i64*, i64** %23, align 8
  %94 = getelementptr inbounds i64, i64* %93, i64 1
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %38, align 8
  store i32 512, i32* %39, align 4
  store i64 0, i64* %40, align 8
  br label %96

; <label>:96:                                     ; preds = %414, %14
  %97 = load i64, i64* %40, align 8
  %98 = load i64*, i64** %20, align 8
  %99 = getelementptr inbounds i64, i64* %98, i64 0
  %100 = load i64, i64* %99, align 8
  %101 = icmp ult i64 %97, %100
  br i1 %101, label %102, label %417

; <label>:102:                                    ; preds = %96
  %103 = load i64, i64* %40, align 8
  %104 = load float*, float** %15, align 8
  %105 = load float*, float** %18, align 8
  %106 = load i64*, i64** %19, align 8
  %107 = load i64*, i64** %22, align 8
  call void @_ZN12_GLOBAL__N_133libjit_conv_init_output_with_biasEmPfPKfPKmS4_(i64 %103, float* %104, float* %105, i64* %106, i64* %107)
  store i64 0, i64* %41, align 8
  br label %108

; <label>:108:                                    ; preds = %410, %102
  %109 = load i64, i64* %41, align 8
  %110 = load i64, i64* %26, align 8
  %111 = icmp ult i64 %109, %110
  br i1 %111, label %112, label %413

; <label>:112:                                    ; preds = %108
  store i64 0, i64* %42, align 8
  br label %113

; <label>:113:                                    ; preds = %406, %112
  %114 = load i64, i64* %42, align 8
  %115 = load i64, i64* %31, align 8
  %116 = icmp ult i64 %114, %115
  br i1 %116, label %117, label %409

; <label>:117:                                    ; preds = %113
  %118 = load i64, i64* %41, align 8
  %119 = load i64, i64* %32, align 8
  %120 = mul i64 %118, %119
  store i64 %120, i64* %43, align 8
  br label %121

; <label>:121:                                    ; preds = %400, %117
  %122 = load i64, i64* %43, align 8
  %123 = load i64, i64* %41, align 8
  %124 = add i64 %123, 1
  %125 = load i64, i64* %32, align 8
  %126 = mul i64 %124, %125
  %127 = icmp ult i64 %122, %126
  br i1 %127, label %128, label %405

; <label>:128:                                    ; preds = %121
  store i64 0, i64* %44, align 8
  br label %129

; <label>:129:                                    ; preds = %396, %128
  %130 = load i64, i64* %44, align 8
  %131 = load i64, i64* %37, align 8
  %132 = icmp ult i64 %130, %131
  br i1 %132, label %133, label %399

; <label>:133:                                    ; preds = %129
  store i64 0, i64* %45, align 8
  br label %134

; <label>:134:                                    ; preds = %392, %133
  %135 = load i64, i64* %45, align 8
  %136 = load i64, i64* %38, align 8
  %137 = icmp ult i64 %135, %136
  br i1 %137, label %138, label %395

; <label>:138:                                    ; preds = %134
  store i64 0, i64* %46, align 8
  br label %139

; <label>:139:                                    ; preds = %388, %138
  %140 = load i64, i64* %46, align 8
  %141 = load i64*, i64** %19, align 8
  %142 = getelementptr inbounds i64, i64* %141, i64 1
  %143 = load i64, i64* %142, align 8
  %144 = icmp ult i64 %140, %143
  br i1 %144, label %145, label %391

; <label>:145:                                    ; preds = %139
  store i64 0, i64* %47, align 8
  br label %146

; <label>:146:                                    ; preds = %384, %145
  %147 = load i64, i64* %47, align 8
  %148 = load i64*, i64** %19, align 8
  %149 = getelementptr inbounds i64, i64* %148, i64 2
  %150 = load i64, i64* %149, align 8
  %151 = icmp ult i64 %147, %150
  br i1 %151, label %152, label %387

; <label>:152:                                    ; preds = %146
  %153 = load i32, i32* %27, align 4
  %154 = zext i32 %153 to i64
  %155 = call i8* @llvm.stacksave()
  store i8* %155, i8** %48, align 8
  %156 = alloca float, i64 %154, align 16
  store i64 %154, i64* %49, align 8
  store i32 0, i32* %50, align 4
  br label %157

; <label>:157:                                    ; preds = %165, %152
  %158 = load i32, i32* %50, align 4
  %159 = load i32, i32* %27, align 4
  %160 = icmp ult i32 %158, %159
  br i1 %160, label %161, label %168

; <label>:161:                                    ; preds = %157
  %162 = load i32, i32* %50, align 4
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds float, float* %156, i64 %163
  store float 0.000000e+00, float* %164, align 4
  br label %165

; <label>:165:                                    ; preds = %161
  %166 = load i32, i32* %50, align 4
  %167 = add i32 %166, 1
  store i32 %167, i32* %50, align 4
  br label %157

; <label>:168:                                    ; preds = %157
  %169 = load i64, i64* %46, align 8
  %170 = load i64, i64* %35, align 8
  %171 = mul i64 %169, %170
  %172 = load i64, i64* %33, align 8
  %173 = sub i64 %171, %172
  %174 = load i64, i64* %44, align 8
  %175 = load i64, i64* %28, align 8
  %176 = mul i64 %174, %175
  %177 = add i64 %173, %176
  store i64 %177, i64* %51, align 8
  %178 = load i64, i64* %47, align 8
  %179 = load i64, i64* %36, align 8
  %180 = mul i64 %178, %179
  %181 = load i64, i64* %34, align 8
  %182 = sub i64 %180, %181
  %183 = load i64, i64* %45, align 8
  %184 = load i64, i64* %28, align 8
  %185 = mul i64 %183, %184
  %186 = add i64 %182, %185
  store i64 %186, i64* %52, align 8
  %187 = load i64, i64* %51, align 8
  %188 = icmp slt i64 %187, 0
  br i1 %188, label %204, label %189

; <label>:189:                                    ; preds = %168
  %190 = load i64, i64* %52, align 8
  %191 = icmp slt i64 %190, 0
  br i1 %191, label %204, label %192

; <label>:192:                                    ; preds = %189
  %193 = load i64, i64* %51, align 8
  %194 = load i64*, i64** %20, align 8
  %195 = getelementptr inbounds i64, i64* %194, i64 1
  %196 = load i64, i64* %195, align 8
  %197 = icmp sge i64 %193, %196
  br i1 %197, label %204, label %198

; <label>:198:                                    ; preds = %192
  %199 = load i64, i64* %52, align 8
  %200 = load i64*, i64** %20, align 8
  %201 = getelementptr inbounds i64, i64* %200, i64 2
  %202 = load i64, i64* %201, align 8
  %203 = icmp sge i64 %199, %202
  br i1 %203, label %204, label %205

; <label>:204:                                    ; preds = %198, %192, %189, %168
  store i32 25, i32* %53, align 4
  br label %380

; <label>:205:                                    ; preds = %198
  %206 = load i64*, i64** %20, align 8
  %207 = load i64, i64* %40, align 8
  %208 = load i64, i64* %51, align 8
  %209 = load i64, i64* %52, align 8
  %210 = load i64, i64* %41, align 8
  %211 = load i64, i64* %31, align 8
  %212 = mul i64 %210, %211
  %213 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %206, i64 %207, i64 %208, i64 %209, i64 %212)
  store i64 %213, i64* %54, align 8
  %214 = load i64*, i64** %21, align 8
  %215 = load i64, i64* %43, align 8
  %216 = load i64, i64* %44, align 8
  %217 = load i64, i64* %45, align 8
  %218 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %214, i64 %215, i64 %216, i64 %217, i64 0)
  store i64 %218, i64* %55, align 8
  %219 = load i64*, i64** %21, align 8
  %220 = getelementptr inbounds i64, i64* %219, i64 1
  %221 = load i64, i64* %220, align 8
  %222 = load i64*, i64** %21, align 8
  %223 = getelementptr inbounds i64, i64* %222, i64 2
  %224 = load i64, i64* %223, align 8
  %225 = mul i64 %221, %224
  %226 = load i64*, i64** %21, align 8
  %227 = getelementptr inbounds i64, i64* %226, i64 3
  %228 = load i64, i64* %227, align 8
  %229 = mul i64 %225, %228
  store i64 %229, i64* %56, align 8
  %230 = load i64, i64* %42, align 8
  store i64 %230, i64* %57, align 8
  %231 = load i64, i64* %42, align 8
  %232 = add i64 %231, 512
  %233 = load i64, i64* %31, align 8
  %234 = icmp ult i64 %232, %233
  br i1 %234, label %235, label %238

; <label>:235:                                    ; preds = %205
  %236 = load i64, i64* %42, align 8
  %237 = add i64 %236, 512
  br label %240

; <label>:238:                                    ; preds = %205
  %239 = load i64, i64* %31, align 8
  br label %240

; <label>:240:                                    ; preds = %238, %235
  %241 = phi i64 [ %237, %235 ], [ %239, %238 ]
  store i64 %241, i64* %58, align 8
  br label %242

; <label>:242:                                    ; preds = %286, %240
  %243 = load i64, i64* %57, align 8
  %244 = load i64, i64* %58, align 8
  %245 = icmp ult i64 %243, %244
  br i1 %245, label %246, label %289

; <label>:246:                                    ; preds = %242
  %247 = load float*, float** %16, align 8
  %248 = load i64, i64* %54, align 8
  %249 = load i64, i64* %57, align 8
  %250 = add i64 %248, %249
  %251 = getelementptr inbounds float, float* %247, i64 %250
  %252 = load float, float* %251, align 4
  store float %252, float* %59, align 4
  store i32 0, i32* %60, align 4
  br label %253

; <label>:253:                                    ; preds = %282, %246
  %254 = load i32, i32* %60, align 4
  %255 = load i32, i32* %27, align 4
  %256 = icmp ult i32 4, %255
  br i1 %256, label %257, label %258

; <label>:257:                                    ; preds = %253
  br label %260

; <label>:258:                                    ; preds = %253
  %259 = load i32, i32* %27, align 4
  br label %260

; <label>:260:                                    ; preds = %258, %257
  %261 = phi i32 [ 4, %257 ], [ %259, %258 ]
  %262 = icmp ult i32 %254, %261
  br i1 %262, label %263, label %285

; <label>:263:                                    ; preds = %260
  %264 = load float*, float** %17, align 8
  %265 = load i64, i64* %55, align 8
  %266 = load i64, i64* %56, align 8
  %267 = load i32, i32* %60, align 4
  %268 = zext i32 %267 to i64
  %269 = mul i64 %266, %268
  %270 = add i64 %265, %269
  %271 = load i64, i64* %57, align 8
  %272 = add i64 %270, %271
  %273 = getelementptr inbounds float, float* %264, i64 %272
  %274 = load float, float* %273, align 4
  %275 = load float, float* %59, align 4
  %276 = fmul reassoc nsz arcp contract float %274, %275
  %277 = load i32, i32* %60, align 4
  %278 = zext i32 %277 to i64
  %279 = getelementptr inbounds float, float* %156, i64 %278
  %280 = load float, float* %279, align 4
  %281 = fadd reassoc nsz arcp contract float %280, %276
  store float %281, float* %279, align 4
  br label %282

; <label>:282:                                    ; preds = %263
  %283 = load i32, i32* %60, align 4
  %284 = add i32 %283, 1
  store i32 %284, i32* %60, align 4
  br label %253

; <label>:285:                                    ; preds = %260
  br label %286

; <label>:286:                                    ; preds = %285
  %287 = load i64, i64* %57, align 8
  %288 = add i64 %287, 1
  store i64 %288, i64* %57, align 8
  br label %242

; <label>:289:                                    ; preds = %242
  %290 = load i32, i32* %27, align 4
  %291 = icmp ugt i32 %290, 4
  br i1 %291, label %292, label %353

; <label>:292:                                    ; preds = %289
  %293 = load i64, i64* %42, align 8
  store i64 %293, i64* %61, align 8
  %294 = load i64, i64* %42, align 8
  %295 = add i64 %294, 512
  %296 = load i64, i64* %31, align 8
  %297 = icmp ult i64 %295, %296
  br i1 %297, label %298, label %301

; <label>:298:                                    ; preds = %292
  %299 = load i64, i64* %42, align 8
  %300 = add i64 %299, 512
  br label %303

; <label>:301:                                    ; preds = %292
  %302 = load i64, i64* %31, align 8
  br label %303

; <label>:303:                                    ; preds = %301, %298
  %304 = phi i64 [ %300, %298 ], [ %302, %301 ]
  store i64 %304, i64* %62, align 8
  br label %305

; <label>:305:                                    ; preds = %349, %303
  %306 = load i64, i64* %61, align 8
  %307 = load i64, i64* %62, align 8
  %308 = icmp ult i64 %306, %307
  br i1 %308, label %309, label %352

; <label>:309:                                    ; preds = %305
  %310 = load float*, float** %16, align 8
  %311 = load i64, i64* %54, align 8
  %312 = load i64, i64* %61, align 8
  %313 = add i64 %311, %312
  %314 = getelementptr inbounds float, float* %310, i64 %313
  %315 = load float, float* %314, align 4
  store float %315, float* %63, align 4
  store i32 4, i32* %64, align 4
  br label %316

; <label>:316:                                    ; preds = %345, %309
  %317 = load i32, i32* %64, align 4
  %318 = load i32, i32* %27, align 4
  %319 = icmp ult i32 8, %318
  br i1 %319, label %320, label %321

; <label>:320:                                    ; preds = %316
  br label %323

; <label>:321:                                    ; preds = %316
  %322 = load i32, i32* %27, align 4
  br label %323

; <label>:323:                                    ; preds = %321, %320
  %324 = phi i32 [ 8, %320 ], [ %322, %321 ]
  %325 = icmp ult i32 %317, %324
  br i1 %325, label %326, label %348

; <label>:326:                                    ; preds = %323
  %327 = load float*, float** %17, align 8
  %328 = load i64, i64* %55, align 8
  %329 = load i64, i64* %56, align 8
  %330 = load i32, i32* %64, align 4
  %331 = zext i32 %330 to i64
  %332 = mul i64 %329, %331
  %333 = add i64 %328, %332
  %334 = load i64, i64* %61, align 8
  %335 = add i64 %333, %334
  %336 = getelementptr inbounds float, float* %327, i64 %335
  %337 = load float, float* %336, align 4
  %338 = load float, float* %63, align 4
  %339 = fmul reassoc nsz arcp contract float %337, %338
  %340 = load i32, i32* %64, align 4
  %341 = zext i32 %340 to i64
  %342 = getelementptr inbounds float, float* %156, i64 %341
  %343 = load float, float* %342, align 4
  %344 = fadd reassoc nsz arcp contract float %343, %339
  store float %344, float* %342, align 4
  br label %345

; <label>:345:                                    ; preds = %326
  %346 = load i32, i32* %64, align 4
  %347 = add i32 %346, 1
  store i32 %347, i32* %64, align 4
  br label %316

; <label>:348:                                    ; preds = %323
  br label %349

; <label>:349:                                    ; preds = %348
  %350 = load i64, i64* %61, align 8
  %351 = add i64 %350, 1
  store i64 %351, i64* %61, align 8
  br label %305

; <label>:352:                                    ; preds = %305
  br label %353

; <label>:353:                                    ; preds = %352, %289
  store i32 0, i32* %65, align 4
  br label %354

; <label>:354:                                    ; preds = %376, %353
  %355 = load i32, i32* %65, align 4
  %356 = load i32, i32* %27, align 4
  %357 = icmp ult i32 %355, %356
  br i1 %357, label %358, label %379

; <label>:358:                                    ; preds = %354
  %359 = load i32, i32* %65, align 4
  %360 = zext i32 %359 to i64
  %361 = getelementptr inbounds float, float* %156, i64 %360
  %362 = load float, float* %361, align 4
  %363 = load float*, float** %15, align 8
  %364 = load i64*, i64** %19, align 8
  %365 = load i64, i64* %40, align 8
  %366 = load i64, i64* %46, align 8
  %367 = load i64, i64* %47, align 8
  %368 = load i64, i64* %43, align 8
  %369 = load i32, i32* %65, align 4
  %370 = zext i32 %369 to i64
  %371 = add i64 %368, %370
  %372 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %364, i64 %365, i64 %366, i64 %367, i64 %371)
  %373 = getelementptr inbounds float, float* %363, i64 %372
  %374 = load float, float* %373, align 4
  %375 = fadd reassoc nsz arcp contract float %374, %362
  store float %375, float* %373, align 4
  br label %376

; <label>:376:                                    ; preds = %358
  %377 = load i32, i32* %65, align 4
  %378 = add i32 %377, 1
  store i32 %378, i32* %65, align 4
  br label %354

; <label>:379:                                    ; preds = %354
  store i32 0, i32* %53, align 4
  br label %380

; <label>:380:                                    ; preds = %379, %204
  %381 = load i8*, i8** %48, align 8
  call void @llvm.stackrestore(i8* %381)
  %382 = load i32, i32* %53, align 4
  switch i32 %382, label %418 [
    i32 0, label %383
    i32 25, label %384
  ]

; <label>:383:                                    ; preds = %380
  br label %384

; <label>:384:                                    ; preds = %383, %380
  %385 = load i64, i64* %47, align 8
  %386 = add i64 %385, 1
  store i64 %386, i64* %47, align 8
  br label %146

; <label>:387:                                    ; preds = %146
  br label %388

; <label>:388:                                    ; preds = %387
  %389 = load i64, i64* %46, align 8
  %390 = add i64 %389, 1
  store i64 %390, i64* %46, align 8
  br label %139

; <label>:391:                                    ; preds = %139
  br label %392

; <label>:392:                                    ; preds = %391
  %393 = load i64, i64* %45, align 8
  %394 = add i64 %393, 1
  store i64 %394, i64* %45, align 8
  br label %134

; <label>:395:                                    ; preds = %134
  br label %396

; <label>:396:                                    ; preds = %395
  %397 = load i64, i64* %44, align 8
  %398 = add i64 %397, 1
  store i64 %398, i64* %44, align 8
  br label %129

; <label>:399:                                    ; preds = %129
  br label %400

; <label>:400:                                    ; preds = %399
  %401 = load i32, i32* %27, align 4
  %402 = zext i32 %401 to i64
  %403 = load i64, i64* %43, align 8
  %404 = add i64 %403, %402
  store i64 %404, i64* %43, align 8
  br label %121

; <label>:405:                                    ; preds = %121
  br label %406

; <label>:406:                                    ; preds = %405
  %407 = load i64, i64* %42, align 8
  %408 = add i64 %407, 512
  store i64 %408, i64* %42, align 8
  br label %113

; <label>:409:                                    ; preds = %113
  br label %410

; <label>:410:                                    ; preds = %409
  %411 = load i64, i64* %41, align 8
  %412 = add i64 %411, 1
  store i64 %412, i64* %41, align 8
  br label %108

; <label>:413:                                    ; preds = %108
  br label %414

; <label>:414:                                    ; preds = %413
  %415 = load i64, i64* %40, align 8
  %416 = add i64 %415, 1
  store i64 %416, i64* %40, align 8
  br label %96

; <label>:417:                                    ; preds = %96
  ret void

; <label>:418:                                    ; preds = %380
  unreachable
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_convolution_i8_i32(i8*, i8*, i8*, i32*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64) #2 {
  %25 = alloca i8*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i32*, align 8
  %29 = alloca i64*, align 8
  %30 = alloca i64*, align 8
  %31 = alloca i64*, align 8
  %32 = alloca i64*, align 8
  %33 = alloca i64*, align 8
  %34 = alloca i64*, align 8
  %35 = alloca i64*, align 8
  %36 = alloca i64, align 8
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca i32, align 4
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  store i8* %0, i8** %25, align 8
  store i8* %1, i8** %26, align 8
  store i8* %2, i8** %27, align 8
  store i32* %3, i32** %28, align 8
  store i64* %4, i64** %29, align 8
  store i64* %5, i64** %30, align 8
  store i64* %6, i64** %31, align 8
  store i64* %7, i64** %32, align 8
  store i64* %8, i64** %33, align 8
  store i64* %9, i64** %34, align 8
  store i64* %10, i64** %35, align 8
  store i64 %11, i64* %36, align 8
  store i32 %12, i32* %37, align 4
  store i32 %13, i32* %38, align 4
  store i32 %14, i32* %39, align 4
  store i32 %15, i32* %40, align 4
  store i32 %16, i32* %41, align 4
  store i32 %17, i32* %42, align 4
  store i32 %18, i32* %43, align 4
  store i32 %19, i32* %44, align 4
  store i32 %20, i32* %45, align 4
  store i32 %21, i32* %46, align 4
  store i32 %22, i32* %47, align 4
  store i64 %23, i64* %48, align 8
  %49 = load i8*, i8** %25, align 8
  %50 = load i8*, i8** %26, align 8
  %51 = load i8*, i8** %27, align 8
  %52 = load i32*, i32** %28, align 8
  %53 = load i64*, i64** %29, align 8
  %54 = load i64*, i64** %30, align 8
  %55 = load i64*, i64** %31, align 8
  %56 = load i64*, i64** %32, align 8
  %57 = load i64*, i64** %33, align 8
  %58 = load i64*, i64** %34, align 8
  %59 = load i64*, i64** %35, align 8
  %60 = load i64, i64* %36, align 8
  %61 = load i32, i32* %37, align 4
  %62 = load i32, i32* %38, align 4
  %63 = load i32, i32* %39, align 4
  %64 = load i32, i32* %40, align 4
  %65 = load i32, i32* %41, align 4
  %66 = load i32, i32* %42, align 4
  %67 = load i32, i32* %43, align 4
  %68 = load i32, i32* %44, align 4
  %69 = load i32, i32* %45, align 4
  %70 = load i32, i32* %46, align 4
  %71 = load i32, i32* %47, align 4
  %72 = load i64, i64* %48, align 8
  call void @_ZN12_GLOBAL__N_136libjit_quantized_convolution_genericIaiEEvPT_PKS1_S4_PKT0_PKmS9_S9_S9_S9_S9_S9_miiiiiiiiiijm(i8* %49, i8* %50, i8* %51, i32* %52, i64* %53, i64* %54, i64* %55, i64* %56, i64* %57, i64* %58, i64* %59, i64 %60, i32 %61, i32 %62, i32 %63, i32 %64, i32 %65, i32 %66, i32 %67, i32 %68, i32 %69, i32 %70, i32 %71, i64 %72)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_136libjit_quantized_convolution_genericIaiEEvPT_PKS1_S4_PKT0_PKmS9_S9_S9_S9_S9_S9_miiiiiiiiiijm(i8*, i8*, i8*, i32*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64) #2 {
  %25 = alloca i8*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i32*, align 8
  %29 = alloca i64*, align 8
  %30 = alloca i64*, align 8
  %31 = alloca i64*, align 8
  %32 = alloca i64*, align 8
  %33 = alloca i64*, align 8
  %34 = alloca i64*, align 8
  %35 = alloca i64*, align 8
  %36 = alloca i64, align 8
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca i32, align 4
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  %51 = alloca i64, align 8
  %52 = alloca i64, align 8
  %53 = alloca i64, align 8
  %54 = alloca i64, align 8
  %55 = alloca i64, align 8
  %56 = alloca i64, align 8
  %57 = alloca i64, align 8
  %58 = alloca i64, align 8
  %59 = alloca i64, align 8
  %60 = alloca i64, align 8
  %61 = alloca i64, align 8
  %62 = alloca i64, align 8
  %63 = alloca i64, align 8
  %64 = alloca i64, align 8
  %65 = alloca i64, align 8
  %66 = alloca i8*, align 8
  %67 = alloca i64, align 8
  %68 = alloca i32, align 4
  %69 = alloca i64, align 8
  %70 = alloca i64, align 8
  %71 = alloca i64, align 8
  %72 = alloca i64, align 8
  %73 = alloca i64, align 8
  %74 = alloca i64, align 8
  %75 = alloca i64, align 8
  %76 = alloca i64, align 8
  %77 = alloca i32, align 4
  %78 = alloca i32, align 4
  %79 = alloca i64, align 8
  %80 = alloca i32, align 4
  %81 = alloca i32, align 4
  %82 = alloca i32, align 4
  %83 = alloca i32, align 4
  store i8* %0, i8** %25, align 8
  store i8* %1, i8** %26, align 8
  store i8* %2, i8** %27, align 8
  store i32* %3, i32** %28, align 8
  store i64* %4, i64** %29, align 8
  store i64* %5, i64** %30, align 8
  store i64* %6, i64** %31, align 8
  store i64* %7, i64** %32, align 8
  store i64* %8, i64** %33, align 8
  store i64* %9, i64** %34, align 8
  store i64* %10, i64** %35, align 8
  store i64 %11, i64* %36, align 8
  store i32 %12, i32* %37, align 4
  store i32 %13, i32* %38, align 4
  store i32 %14, i32* %39, align 4
  store i32 %15, i32* %40, align 4
  store i32 %16, i32* %41, align 4
  store i32 %17, i32* %42, align 4
  store i32 %18, i32* %43, align 4
  store i32 %19, i32* %44, align 4
  store i32 %20, i32* %45, align 4
  store i32 %21, i32* %46, align 4
  store i32 %22, i32* %47, align 4
  store i64 %23, i64* %48, align 8
  %84 = load i64*, i64** %30, align 8
  %85 = getelementptr inbounds i64, i64* %84, i64 3
  %86 = load i64, i64* %85, align 8
  store i64 %86, i64* %49, align 8
  %87 = load i64*, i64** %29, align 8
  %88 = getelementptr inbounds i64, i64* %87, i64 3
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %50, align 8
  %90 = load i64, i64* %49, align 8
  %91 = load i64, i64* %36, align 8
  %92 = udiv i64 %90, %91
  store i64 %92, i64* %51, align 8
  %93 = load i64, i64* %50, align 8
  %94 = load i64, i64* %36, align 8
  %95 = udiv i64 %93, %94
  store i64 %95, i64* %52, align 8
  %96 = load i64*, i64** %35, align 8
  %97 = getelementptr inbounds i64, i64* %96, i64 0
  %98 = load i64, i64* %97, align 8
  store i64 %98, i64* %53, align 8
  %99 = load i64*, i64** %35, align 8
  %100 = getelementptr inbounds i64, i64* %99, i64 1
  %101 = load i64, i64* %100, align 8
  store i64 %101, i64* %54, align 8
  %102 = load i64*, i64** %34, align 8
  %103 = getelementptr inbounds i64, i64* %102, i64 0
  %104 = load i64, i64* %103, align 8
  store i64 %104, i64* %55, align 8
  %105 = load i64*, i64** %34, align 8
  %106 = getelementptr inbounds i64, i64* %105, i64 1
  %107 = load i64, i64* %106, align 8
  store i64 %107, i64* %56, align 8
  %108 = load i64*, i64** %33, align 8
  %109 = getelementptr inbounds i64, i64* %108, i64 0
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %57, align 8
  %111 = load i64*, i64** %33, align 8
  %112 = getelementptr inbounds i64, i64* %111, i64 1
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %58, align 8
  store i64 0, i64* %59, align 8
  br label %114

; <label>:114:                                    ; preds = %423, %24
  %115 = load i64, i64* %59, align 8
  %116 = load i64*, i64** %30, align 8
  %117 = getelementptr inbounds i64, i64* %116, i64 0
  %118 = load i64, i64* %117, align 8
  %119 = icmp ult i64 %115, %118
  br i1 %119, label %120, label %426

; <label>:120:                                    ; preds = %114
  store i64 0, i64* %60, align 8
  br label %121

; <label>:121:                                    ; preds = %419, %120
  %122 = load i64, i64* %60, align 8
  %123 = load i64, i64* %36, align 8
  %124 = icmp ult i64 %122, %123
  br i1 %124, label %125, label %422

; <label>:125:                                    ; preds = %121
  %126 = load i64, i64* %60, align 8
  %127 = load i64, i64* %52, align 8
  %128 = mul i64 %126, %127
  store i64 %128, i64* %61, align 8
  br label %129

; <label>:129:                                    ; preds = %413, %125
  %130 = load i64, i64* %61, align 8
  %131 = load i64, i64* %60, align 8
  %132 = add i64 %131, 1
  %133 = load i64, i64* %52, align 8
  %134 = mul i64 %132, %133
  %135 = icmp ult i64 %130, %134
  br i1 %135, label %136, label %418

; <label>:136:                                    ; preds = %129
  %137 = load i64, i64* %53, align 8
  %138 = sub nsw i64 0, %137
  store i64 %138, i64* %62, align 8
  store i64 0, i64* %63, align 8
  br label %139

; <label>:139:                                    ; preds = %406, %136
  %140 = load i64, i64* %63, align 8
  %141 = load i64*, i64** %29, align 8
  %142 = getelementptr inbounds i64, i64* %141, i64 1
  %143 = load i64, i64* %142, align 8
  %144 = icmp ult i64 %140, %143
  br i1 %144, label %145, label %412

; <label>:145:                                    ; preds = %139
  %146 = load i64, i64* %54, align 8
  %147 = sub nsw i64 0, %146
  store i64 %147, i64* %64, align 8
  store i64 0, i64* %65, align 8
  br label %148

; <label>:148:                                    ; preds = %399, %145
  %149 = load i64, i64* %65, align 8
  %150 = load i64*, i64** %29, align 8
  %151 = getelementptr inbounds i64, i64* %150, i64 2
  %152 = load i64, i64* %151, align 8
  %153 = icmp ult i64 %149, %152
  br i1 %153, label %154, label %405

; <label>:154:                                    ; preds = %148
  %155 = load i32, i32* %47, align 4
  %156 = zext i32 %155 to i64
  %157 = call i8* @llvm.stacksave()
  store i8* %157, i8** %66, align 8
  %158 = alloca i32, i64 %156, align 16
  store i64 %156, i64* %67, align 8
  store i32 0, i32* %68, align 4
  br label %159

; <label>:159:                                    ; preds = %180, %154
  %160 = load i32, i32* %68, align 4
  %161 = load i32, i32* %47, align 4
  %162 = icmp ult i32 %160, %161
  br i1 %162, label %163, label %183

; <label>:163:                                    ; preds = %159
  %164 = load i32*, i32** %28, align 8
  %165 = load i64, i64* %61, align 8
  %166 = load i32, i32* %68, align 4
  %167 = zext i32 %166 to i64
  %168 = add i64 %165, %167
  %169 = getelementptr inbounds i32, i32* %164, i64 %168
  %170 = load i32, i32* %169, align 4
  %171 = load i32, i32* %40, align 4
  %172 = sub nsw i32 %170, %171
  %173 = load i32, i32* %41, align 4
  %174 = load i32, i32* %42, align 4
  %175 = load i32, i32* %43, align 4
  %176 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %172, i32 %173, i32 %174, i32 %175, i32 0)
  %177 = load i32, i32* %68, align 4
  %178 = zext i32 %177 to i64
  %179 = getelementptr inbounds i32, i32* %158, i64 %178
  store i32 %176, i32* %179, align 4
  br label %180

; <label>:180:                                    ; preds = %163
  %181 = load i32, i32* %68, align 4
  %182 = add i32 %181, 1
  store i32 %182, i32* %68, align 4
  br label %159

; <label>:183:                                    ; preds = %159
  store i64 0, i64* %69, align 8
  br label %184

; <label>:184:                                    ; preds = %363, %183
  %185 = load i64, i64* %69, align 8
  %186 = load i64, i64* %57, align 8
  %187 = icmp ult i64 %185, %186
  br i1 %187, label %188, label %366

; <label>:188:                                    ; preds = %184
  store i64 0, i64* %70, align 8
  br label %189

; <label>:189:                                    ; preds = %359, %188
  %190 = load i64, i64* %70, align 8
  %191 = load i64, i64* %58, align 8
  %192 = icmp ult i64 %190, %191
  br i1 %192, label %193, label %362

; <label>:193:                                    ; preds = %189
  %194 = load i64, i64* %62, align 8
  %195 = load i64, i64* %69, align 8
  %196 = load i64, i64* %48, align 8
  %197 = mul i64 %195, %196
  %198 = add i64 %194, %197
  store i64 %198, i64* %71, align 8
  %199 = load i64, i64* %64, align 8
  %200 = load i64, i64* %70, align 8
  %201 = load i64, i64* %48, align 8
  %202 = mul i64 %200, %201
  %203 = add i64 %199, %202
  store i64 %203, i64* %72, align 8
  %204 = load i64, i64* %71, align 8
  %205 = icmp slt i64 %204, 0
  br i1 %205, label %221, label %206

; <label>:206:                                    ; preds = %193
  %207 = load i64, i64* %72, align 8
  %208 = icmp slt i64 %207, 0
  br i1 %208, label %221, label %209

; <label>:209:                                    ; preds = %206
  %210 = load i64, i64* %71, align 8
  %211 = load i64*, i64** %30, align 8
  %212 = getelementptr inbounds i64, i64* %211, i64 1
  %213 = load i64, i64* %212, align 8
  %214 = icmp sge i64 %210, %213
  br i1 %214, label %221, label %215

; <label>:215:                                    ; preds = %209
  %216 = load i64, i64* %72, align 8
  %217 = load i64*, i64** %30, align 8
  %218 = getelementptr inbounds i64, i64* %217, i64 2
  %219 = load i64, i64* %218, align 8
  %220 = icmp sge i64 %216, %219
  br i1 %220, label %221, label %222

; <label>:221:                                    ; preds = %215, %209, %206, %193
  br label %359

; <label>:222:                                    ; preds = %215
  %223 = load i64*, i64** %30, align 8
  %224 = load i64, i64* %59, align 8
  %225 = load i64, i64* %71, align 8
  %226 = load i64, i64* %72, align 8
  %227 = load i64, i64* %60, align 8
  %228 = load i64, i64* %51, align 8
  %229 = mul i64 %227, %228
  %230 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %223, i64 %224, i64 %225, i64 %226, i64 %229)
  store i64 %230, i64* %73, align 8
  %231 = load i64*, i64** %31, align 8
  %232 = load i64, i64* %61, align 8
  %233 = load i64, i64* %69, align 8
  %234 = load i64, i64* %70, align 8
  %235 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %231, i64 %232, i64 %233, i64 %234, i64 0)
  store i64 %235, i64* %74, align 8
  %236 = load i64*, i64** %31, align 8
  %237 = getelementptr inbounds i64, i64* %236, i64 1
  %238 = load i64, i64* %237, align 8
  %239 = load i64*, i64** %31, align 8
  %240 = getelementptr inbounds i64, i64* %239, i64 2
  %241 = load i64, i64* %240, align 8
  %242 = mul i64 %238, %241
  %243 = load i64*, i64** %31, align 8
  %244 = getelementptr inbounds i64, i64* %243, i64 3
  %245 = load i64, i64* %244, align 8
  %246 = mul i64 %242, %245
  store i64 %246, i64* %75, align 8
  store i64 0, i64* %76, align 8
  br label %247

; <label>:247:                                    ; preds = %297, %222
  %248 = load i64, i64* %76, align 8
  %249 = load i64, i64* %51, align 8
  %250 = icmp ult i64 %248, %249
  br i1 %250, label %251, label %300

; <label>:251:                                    ; preds = %247
  %252 = load i8*, i8** %26, align 8
  %253 = load i64, i64* %73, align 8
  %254 = load i64, i64* %76, align 8
  %255 = add i64 %253, %254
  %256 = getelementptr inbounds i8, i8* %252, i64 %255
  %257 = load i8, i8* %256, align 1
  %258 = sext i8 %257 to i32
  %259 = load i32, i32* %38, align 4
  %260 = sub nsw i32 %258, %259
  store i32 %260, i32* %77, align 4
  store i32 0, i32* %78, align 4
  br label %261

; <label>:261:                                    ; preds = %293, %251
  %262 = load i32, i32* %78, align 4
  %263 = load i32, i32* %47, align 4
  %264 = icmp ult i32 4, %263
  br i1 %264, label %265, label %266

; <label>:265:                                    ; preds = %261
  br label %268

; <label>:266:                                    ; preds = %261
  %267 = load i32, i32* %47, align 4
  br label %268

; <label>:268:                                    ; preds = %266, %265
  %269 = phi i32 [ 4, %265 ], [ %267, %266 ]
  %270 = icmp ult i32 %262, %269
  br i1 %270, label %271, label %296

; <label>:271:                                    ; preds = %268
  %272 = load i8*, i8** %27, align 8
  %273 = load i64, i64* %74, align 8
  %274 = load i64, i64* %75, align 8
  %275 = load i32, i32* %78, align 4
  %276 = zext i32 %275 to i64
  %277 = mul i64 %274, %276
  %278 = add i64 %273, %277
  %279 = load i64, i64* %76, align 8
  %280 = add i64 %278, %279
  %281 = getelementptr inbounds i8, i8* %272, i64 %280
  %282 = load i8, i8* %281, align 1
  %283 = sext i8 %282 to i32
  %284 = load i32, i32* %39, align 4
  %285 = sub nsw i32 %283, %284
  %286 = load i32, i32* %77, align 4
  %287 = mul nsw i32 %285, %286
  %288 = load i32, i32* %78, align 4
  %289 = zext i32 %288 to i64
  %290 = getelementptr inbounds i32, i32* %158, i64 %289
  %291 = load i32, i32* %290, align 4
  %292 = add nsw i32 %291, %287
  store i32 %292, i32* %290, align 4
  br label %293

; <label>:293:                                    ; preds = %271
  %294 = load i32, i32* %78, align 4
  %295 = add i32 %294, 1
  store i32 %295, i32* %78, align 4
  br label %261

; <label>:296:                                    ; preds = %268
  br label %297

; <label>:297:                                    ; preds = %296
  %298 = load i64, i64* %76, align 8
  %299 = add i64 %298, 1
  store i64 %299, i64* %76, align 8
  br label %247

; <label>:300:                                    ; preds = %247
  %301 = load i32, i32* %47, align 4
  %302 = icmp ugt i32 %301, 4
  br i1 %302, label %303, label %358

; <label>:303:                                    ; preds = %300
  store i64 0, i64* %79, align 8
  br label %304

; <label>:304:                                    ; preds = %354, %303
  %305 = load i64, i64* %79, align 8
  %306 = load i64, i64* %51, align 8
  %307 = icmp ult i64 %305, %306
  br i1 %307, label %308, label %357

; <label>:308:                                    ; preds = %304
  %309 = load i8*, i8** %26, align 8
  %310 = load i64, i64* %73, align 8
  %311 = load i64, i64* %79, align 8
  %312 = add i64 %310, %311
  %313 = getelementptr inbounds i8, i8* %309, i64 %312
  %314 = load i8, i8* %313, align 1
  %315 = sext i8 %314 to i32
  %316 = load i32, i32* %38, align 4
  %317 = sub nsw i32 %315, %316
  store i32 %317, i32* %80, align 4
  store i32 4, i32* %81, align 4
  br label %318

; <label>:318:                                    ; preds = %350, %308
  %319 = load i32, i32* %81, align 4
  %320 = load i32, i32* %47, align 4
  %321 = icmp ult i32 8, %320
  br i1 %321, label %322, label %323

; <label>:322:                                    ; preds = %318
  br label %325

; <label>:323:                                    ; preds = %318
  %324 = load i32, i32* %47, align 4
  br label %325

; <label>:325:                                    ; preds = %323, %322
  %326 = phi i32 [ 8, %322 ], [ %324, %323 ]
  %327 = icmp ult i32 %319, %326
  br i1 %327, label %328, label %353

; <label>:328:                                    ; preds = %325
  %329 = load i8*, i8** %27, align 8
  %330 = load i64, i64* %74, align 8
  %331 = load i64, i64* %75, align 8
  %332 = load i32, i32* %81, align 4
  %333 = zext i32 %332 to i64
  %334 = mul i64 %331, %333
  %335 = add i64 %330, %334
  %336 = load i64, i64* %79, align 8
  %337 = add i64 %335, %336
  %338 = getelementptr inbounds i8, i8* %329, i64 %337
  %339 = load i8, i8* %338, align 1
  %340 = sext i8 %339 to i32
  %341 = load i32, i32* %39, align 4
  %342 = sub nsw i32 %340, %341
  %343 = load i32, i32* %80, align 4
  %344 = mul nsw i32 %342, %343
  %345 = load i32, i32* %81, align 4
  %346 = zext i32 %345 to i64
  %347 = getelementptr inbounds i32, i32* %158, i64 %346
  %348 = load i32, i32* %347, align 4
  %349 = add nsw i32 %348, %344
  store i32 %349, i32* %347, align 4
  br label %350

; <label>:350:                                    ; preds = %328
  %351 = load i32, i32* %81, align 4
  %352 = add i32 %351, 1
  store i32 %352, i32* %81, align 4
  br label %318

; <label>:353:                                    ; preds = %325
  br label %354

; <label>:354:                                    ; preds = %353
  %355 = load i64, i64* %79, align 8
  %356 = add i64 %355, 1
  store i64 %356, i64* %79, align 8
  br label %304

; <label>:357:                                    ; preds = %304
  br label %358

; <label>:358:                                    ; preds = %357, %300
  br label %359

; <label>:359:                                    ; preds = %358, %221
  %360 = load i64, i64* %70, align 8
  %361 = add i64 %360, 1
  store i64 %361, i64* %70, align 8
  br label %189

; <label>:362:                                    ; preds = %189
  br label %363

; <label>:363:                                    ; preds = %362
  %364 = load i64, i64* %69, align 8
  %365 = add i64 %364, 1
  store i64 %365, i64* %69, align 8
  br label %184

; <label>:366:                                    ; preds = %184
  store i32 0, i32* %82, align 4
  br label %367

; <label>:367:                                    ; preds = %394, %366
  %368 = load i32, i32* %82, align 4
  %369 = load i32, i32* %47, align 4
  %370 = icmp ult i32 %368, %369
  br i1 %370, label %371, label %397

; <label>:371:                                    ; preds = %367
  %372 = load i32, i32* %82, align 4
  %373 = zext i32 %372 to i64
  %374 = getelementptr inbounds i32, i32* %158, i64 %373
  %375 = load i32, i32* %374, align 4
  %376 = load i32, i32* %44, align 4
  %377 = load i32, i32* %45, align 4
  %378 = load i32, i32* %46, align 4
  %379 = load i32, i32* %37, align 4
  %380 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %375, i32 %376, i32 %377, i32 %378, i32 %379)
  store i32 %380, i32* %83, align 4
  %381 = load i32, i32* %83, align 4
  %382 = call signext i8 @_Z11libjit_clipi(i32 %381)
  %383 = load i8*, i8** %25, align 8
  %384 = load i64*, i64** %29, align 8
  %385 = load i64, i64* %59, align 8
  %386 = load i64, i64* %63, align 8
  %387 = load i64, i64* %65, align 8
  %388 = load i64, i64* %61, align 8
  %389 = load i32, i32* %82, align 4
  %390 = zext i32 %389 to i64
  %391 = add i64 %388, %390
  %392 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %384, i64 %385, i64 %386, i64 %387, i64 %391)
  %393 = getelementptr inbounds i8, i8* %383, i64 %392
  store i8 %382, i8* %393, align 1
  br label %394

; <label>:394:                                    ; preds = %371
  %395 = load i32, i32* %82, align 4
  %396 = add i32 %395, 1
  store i32 %396, i32* %82, align 4
  br label %367

; <label>:397:                                    ; preds = %367
  %398 = load i8*, i8** %66, align 8
  call void @llvm.stackrestore(i8* %398)
  br label %399

; <label>:399:                                    ; preds = %397
  %400 = load i64, i64* %56, align 8
  %401 = load i64, i64* %64, align 8
  %402 = add i64 %401, %400
  store i64 %402, i64* %64, align 8
  %403 = load i64, i64* %65, align 8
  %404 = add i64 %403, 1
  store i64 %404, i64* %65, align 8
  br label %148

; <label>:405:                                    ; preds = %148
  br label %406

; <label>:406:                                    ; preds = %405
  %407 = load i64, i64* %55, align 8
  %408 = load i64, i64* %62, align 8
  %409 = add i64 %408, %407
  store i64 %409, i64* %62, align 8
  %410 = load i64, i64* %63, align 8
  %411 = add i64 %410, 1
  store i64 %411, i64* %63, align 8
  br label %139

; <label>:412:                                    ; preds = %139
  br label %413

; <label>:413:                                    ; preds = %412
  %414 = load i32, i32* %47, align 4
  %415 = zext i32 %414 to i64
  %416 = load i64, i64* %61, align 8
  %417 = add i64 %416, %415
  store i64 %417, i64* %61, align 8
  br label %129

; <label>:418:                                    ; preds = %129
  br label %419

; <label>:419:                                    ; preds = %418
  %420 = load i64, i64* %60, align 8
  %421 = add i64 %420, 1
  store i64 %421, i64* %60, align 8
  br label %121

; <label>:422:                                    ; preds = %121
  br label %423

; <label>:423:                                    ; preds = %422
  %424 = load i64, i64* %59, align 8
  %425 = add i64 %424, 1
  store i64 %425, i64* %59, align 8
  br label %114

; <label>:426:                                    ; preds = %114
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_convolution_i8_i8(i8*, i8*, i8*, i8*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64) #2 {
  %25 = alloca i8*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i8*, align 8
  %29 = alloca i64*, align 8
  %30 = alloca i64*, align 8
  %31 = alloca i64*, align 8
  %32 = alloca i64*, align 8
  %33 = alloca i64*, align 8
  %34 = alloca i64*, align 8
  %35 = alloca i64*, align 8
  %36 = alloca i64, align 8
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca i32, align 4
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  store i8* %0, i8** %25, align 8
  store i8* %1, i8** %26, align 8
  store i8* %2, i8** %27, align 8
  store i8* %3, i8** %28, align 8
  store i64* %4, i64** %29, align 8
  store i64* %5, i64** %30, align 8
  store i64* %6, i64** %31, align 8
  store i64* %7, i64** %32, align 8
  store i64* %8, i64** %33, align 8
  store i64* %9, i64** %34, align 8
  store i64* %10, i64** %35, align 8
  store i64 %11, i64* %36, align 8
  store i32 %12, i32* %37, align 4
  store i32 %13, i32* %38, align 4
  store i32 %14, i32* %39, align 4
  store i32 %15, i32* %40, align 4
  store i32 %16, i32* %41, align 4
  store i32 %17, i32* %42, align 4
  store i32 %18, i32* %43, align 4
  store i32 %19, i32* %44, align 4
  store i32 %20, i32* %45, align 4
  store i32 %21, i32* %46, align 4
  store i32 %22, i32* %47, align 4
  store i64 %23, i64* %48, align 8
  %49 = load i8*, i8** %25, align 8
  %50 = load i8*, i8** %26, align 8
  %51 = load i8*, i8** %27, align 8
  %52 = load i8*, i8** %28, align 8
  %53 = load i64*, i64** %29, align 8
  %54 = load i64*, i64** %30, align 8
  %55 = load i64*, i64** %31, align 8
  %56 = load i64*, i64** %32, align 8
  %57 = load i64*, i64** %33, align 8
  %58 = load i64*, i64** %34, align 8
  %59 = load i64*, i64** %35, align 8
  %60 = load i64, i64* %36, align 8
  %61 = load i32, i32* %37, align 4
  %62 = load i32, i32* %38, align 4
  %63 = load i32, i32* %39, align 4
  %64 = load i32, i32* %40, align 4
  %65 = load i32, i32* %41, align 4
  %66 = load i32, i32* %42, align 4
  %67 = load i32, i32* %43, align 4
  %68 = load i32, i32* %44, align 4
  %69 = load i32, i32* %45, align 4
  %70 = load i32, i32* %46, align 4
  %71 = load i32, i32* %47, align 4
  %72 = load i64, i64* %48, align 8
  call void @_ZN12_GLOBAL__N_136libjit_quantized_convolution_genericIaaEEvPT_PKS1_S4_PKT0_PKmS9_S9_S9_S9_S9_S9_miiiiiiiiiijm(i8* %49, i8* %50, i8* %51, i8* %52, i64* %53, i64* %54, i64* %55, i64* %56, i64* %57, i64* %58, i64* %59, i64 %60, i32 %61, i32 %62, i32 %63, i32 %64, i32 %65, i32 %66, i32 %67, i32 %68, i32 %69, i32 %70, i32 %71, i64 %72)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_136libjit_quantized_convolution_genericIaaEEvPT_PKS1_S4_PKT0_PKmS9_S9_S9_S9_S9_S9_miiiiiiiiiijm(i8*, i8*, i8*, i8*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64) #0 {
  %25 = alloca i8*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i8*, align 8
  %29 = alloca i64*, align 8
  %30 = alloca i64*, align 8
  %31 = alloca i64*, align 8
  %32 = alloca i64*, align 8
  %33 = alloca i64*, align 8
  %34 = alloca i64*, align 8
  %35 = alloca i64*, align 8
  %36 = alloca i64, align 8
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca i32, align 4
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  %51 = alloca i64, align 8
  %52 = alloca i64, align 8
  %53 = alloca i64, align 8
  %54 = alloca i64, align 8
  %55 = alloca i64, align 8
  %56 = alloca i64, align 8
  %57 = alloca i64, align 8
  %58 = alloca i64, align 8
  %59 = alloca i64, align 8
  %60 = alloca i64, align 8
  %61 = alloca i64, align 8
  %62 = alloca i64, align 8
  %63 = alloca i64, align 8
  %64 = alloca i64, align 8
  %65 = alloca i64, align 8
  %66 = alloca i8*, align 8
  %67 = alloca i64, align 8
  %68 = alloca i32, align 4
  %69 = alloca i64, align 8
  %70 = alloca i64, align 8
  %71 = alloca i64, align 8
  %72 = alloca i64, align 8
  %73 = alloca i64, align 8
  %74 = alloca i64, align 8
  %75 = alloca i64, align 8
  %76 = alloca i64, align 8
  %77 = alloca i32, align 4
  %78 = alloca i32, align 4
  %79 = alloca i64, align 8
  %80 = alloca i32, align 4
  %81 = alloca i32, align 4
  %82 = alloca i32, align 4
  %83 = alloca i32, align 4
  store i8* %0, i8** %25, align 8
  store i8* %1, i8** %26, align 8
  store i8* %2, i8** %27, align 8
  store i8* %3, i8** %28, align 8
  store i64* %4, i64** %29, align 8
  store i64* %5, i64** %30, align 8
  store i64* %6, i64** %31, align 8
  store i64* %7, i64** %32, align 8
  store i64* %8, i64** %33, align 8
  store i64* %9, i64** %34, align 8
  store i64* %10, i64** %35, align 8
  store i64 %11, i64* %36, align 8
  store i32 %12, i32* %37, align 4
  store i32 %13, i32* %38, align 4
  store i32 %14, i32* %39, align 4
  store i32 %15, i32* %40, align 4
  store i32 %16, i32* %41, align 4
  store i32 %17, i32* %42, align 4
  store i32 %18, i32* %43, align 4
  store i32 %19, i32* %44, align 4
  store i32 %20, i32* %45, align 4
  store i32 %21, i32* %46, align 4
  store i32 %22, i32* %47, align 4
  store i64 %23, i64* %48, align 8
  %84 = load i64*, i64** %30, align 8
  %85 = getelementptr inbounds i64, i64* %84, i64 3
  %86 = load i64, i64* %85, align 8
  store i64 %86, i64* %49, align 8
  %87 = load i64*, i64** %29, align 8
  %88 = getelementptr inbounds i64, i64* %87, i64 3
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %50, align 8
  %90 = load i64, i64* %49, align 8
  %91 = load i64, i64* %36, align 8
  %92 = udiv i64 %90, %91
  store i64 %92, i64* %51, align 8
  %93 = load i64, i64* %50, align 8
  %94 = load i64, i64* %36, align 8
  %95 = udiv i64 %93, %94
  store i64 %95, i64* %52, align 8
  %96 = load i64*, i64** %35, align 8
  %97 = getelementptr inbounds i64, i64* %96, i64 0
  %98 = load i64, i64* %97, align 8
  store i64 %98, i64* %53, align 8
  %99 = load i64*, i64** %35, align 8
  %100 = getelementptr inbounds i64, i64* %99, i64 1
  %101 = load i64, i64* %100, align 8
  store i64 %101, i64* %54, align 8
  %102 = load i64*, i64** %34, align 8
  %103 = getelementptr inbounds i64, i64* %102, i64 0
  %104 = load i64, i64* %103, align 8
  store i64 %104, i64* %55, align 8
  %105 = load i64*, i64** %34, align 8
  %106 = getelementptr inbounds i64, i64* %105, i64 1
  %107 = load i64, i64* %106, align 8
  store i64 %107, i64* %56, align 8
  %108 = load i64*, i64** %33, align 8
  %109 = getelementptr inbounds i64, i64* %108, i64 0
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %57, align 8
  %111 = load i64*, i64** %33, align 8
  %112 = getelementptr inbounds i64, i64* %111, i64 1
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %58, align 8
  store i64 0, i64* %59, align 8
  br label %114

; <label>:114:                                    ; preds = %424, %24
  %115 = load i64, i64* %59, align 8
  %116 = load i64*, i64** %30, align 8
  %117 = getelementptr inbounds i64, i64* %116, i64 0
  %118 = load i64, i64* %117, align 8
  %119 = icmp ult i64 %115, %118
  br i1 %119, label %120, label %427

; <label>:120:                                    ; preds = %114
  store i64 0, i64* %60, align 8
  br label %121

; <label>:121:                                    ; preds = %420, %120
  %122 = load i64, i64* %60, align 8
  %123 = load i64, i64* %36, align 8
  %124 = icmp ult i64 %122, %123
  br i1 %124, label %125, label %423

; <label>:125:                                    ; preds = %121
  %126 = load i64, i64* %60, align 8
  %127 = load i64, i64* %52, align 8
  %128 = mul i64 %126, %127
  store i64 %128, i64* %61, align 8
  br label %129

; <label>:129:                                    ; preds = %414, %125
  %130 = load i64, i64* %61, align 8
  %131 = load i64, i64* %60, align 8
  %132 = add i64 %131, 1
  %133 = load i64, i64* %52, align 8
  %134 = mul i64 %132, %133
  %135 = icmp ult i64 %130, %134
  br i1 %135, label %136, label %419

; <label>:136:                                    ; preds = %129
  %137 = load i64, i64* %53, align 8
  %138 = sub nsw i64 0, %137
  store i64 %138, i64* %62, align 8
  store i64 0, i64* %63, align 8
  br label %139

; <label>:139:                                    ; preds = %407, %136
  %140 = load i64, i64* %63, align 8
  %141 = load i64*, i64** %29, align 8
  %142 = getelementptr inbounds i64, i64* %141, i64 1
  %143 = load i64, i64* %142, align 8
  %144 = icmp ult i64 %140, %143
  br i1 %144, label %145, label %413

; <label>:145:                                    ; preds = %139
  %146 = load i64, i64* %54, align 8
  %147 = sub nsw i64 0, %146
  store i64 %147, i64* %64, align 8
  store i64 0, i64* %65, align 8
  br label %148

; <label>:148:                                    ; preds = %400, %145
  %149 = load i64, i64* %65, align 8
  %150 = load i64*, i64** %29, align 8
  %151 = getelementptr inbounds i64, i64* %150, i64 2
  %152 = load i64, i64* %151, align 8
  %153 = icmp ult i64 %149, %152
  br i1 %153, label %154, label %406

; <label>:154:                                    ; preds = %148
  %155 = load i32, i32* %47, align 4
  %156 = zext i32 %155 to i64
  %157 = call i8* @llvm.stacksave()
  store i8* %157, i8** %66, align 8
  %158 = alloca i32, i64 %156, align 16
  store i64 %156, i64* %67, align 8
  store i32 0, i32* %68, align 4
  br label %159

; <label>:159:                                    ; preds = %181, %154
  %160 = load i32, i32* %68, align 4
  %161 = load i32, i32* %47, align 4
  %162 = icmp ult i32 %160, %161
  br i1 %162, label %163, label %184

; <label>:163:                                    ; preds = %159
  %164 = load i8*, i8** %28, align 8
  %165 = load i64, i64* %61, align 8
  %166 = load i32, i32* %68, align 4
  %167 = zext i32 %166 to i64
  %168 = add i64 %165, %167
  %169 = getelementptr inbounds i8, i8* %164, i64 %168
  %170 = load i8, i8* %169, align 1
  %171 = sext i8 %170 to i32
  %172 = load i32, i32* %40, align 4
  %173 = sub nsw i32 %171, %172
  %174 = load i32, i32* %41, align 4
  %175 = load i32, i32* %42, align 4
  %176 = load i32, i32* %43, align 4
  %177 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %173, i32 %174, i32 %175, i32 %176, i32 0)
  %178 = load i32, i32* %68, align 4
  %179 = zext i32 %178 to i64
  %180 = getelementptr inbounds i32, i32* %158, i64 %179
  store i32 %177, i32* %180, align 4
  br label %181

; <label>:181:                                    ; preds = %163
  %182 = load i32, i32* %68, align 4
  %183 = add i32 %182, 1
  store i32 %183, i32* %68, align 4
  br label %159

; <label>:184:                                    ; preds = %159
  store i64 0, i64* %69, align 8
  br label %185

; <label>:185:                                    ; preds = %364, %184
  %186 = load i64, i64* %69, align 8
  %187 = load i64, i64* %57, align 8
  %188 = icmp ult i64 %186, %187
  br i1 %188, label %189, label %367

; <label>:189:                                    ; preds = %185
  store i64 0, i64* %70, align 8
  br label %190

; <label>:190:                                    ; preds = %360, %189
  %191 = load i64, i64* %70, align 8
  %192 = load i64, i64* %58, align 8
  %193 = icmp ult i64 %191, %192
  br i1 %193, label %194, label %363

; <label>:194:                                    ; preds = %190
  %195 = load i64, i64* %62, align 8
  %196 = load i64, i64* %69, align 8
  %197 = load i64, i64* %48, align 8
  %198 = mul i64 %196, %197
  %199 = add i64 %195, %198
  store i64 %199, i64* %71, align 8
  %200 = load i64, i64* %64, align 8
  %201 = load i64, i64* %70, align 8
  %202 = load i64, i64* %48, align 8
  %203 = mul i64 %201, %202
  %204 = add i64 %200, %203
  store i64 %204, i64* %72, align 8
  %205 = load i64, i64* %71, align 8
  %206 = icmp slt i64 %205, 0
  br i1 %206, label %222, label %207

; <label>:207:                                    ; preds = %194
  %208 = load i64, i64* %72, align 8
  %209 = icmp slt i64 %208, 0
  br i1 %209, label %222, label %210

; <label>:210:                                    ; preds = %207
  %211 = load i64, i64* %71, align 8
  %212 = load i64*, i64** %30, align 8
  %213 = getelementptr inbounds i64, i64* %212, i64 1
  %214 = load i64, i64* %213, align 8
  %215 = icmp sge i64 %211, %214
  br i1 %215, label %222, label %216

; <label>:216:                                    ; preds = %210
  %217 = load i64, i64* %72, align 8
  %218 = load i64*, i64** %30, align 8
  %219 = getelementptr inbounds i64, i64* %218, i64 2
  %220 = load i64, i64* %219, align 8
  %221 = icmp sge i64 %217, %220
  br i1 %221, label %222, label %223

; <label>:222:                                    ; preds = %216, %210, %207, %194
  br label %360

; <label>:223:                                    ; preds = %216
  %224 = load i64*, i64** %30, align 8
  %225 = load i64, i64* %59, align 8
  %226 = load i64, i64* %71, align 8
  %227 = load i64, i64* %72, align 8
  %228 = load i64, i64* %60, align 8
  %229 = load i64, i64* %51, align 8
  %230 = mul i64 %228, %229
  %231 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %224, i64 %225, i64 %226, i64 %227, i64 %230)
  store i64 %231, i64* %73, align 8
  %232 = load i64*, i64** %31, align 8
  %233 = load i64, i64* %61, align 8
  %234 = load i64, i64* %69, align 8
  %235 = load i64, i64* %70, align 8
  %236 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %232, i64 %233, i64 %234, i64 %235, i64 0)
  store i64 %236, i64* %74, align 8
  %237 = load i64*, i64** %31, align 8
  %238 = getelementptr inbounds i64, i64* %237, i64 1
  %239 = load i64, i64* %238, align 8
  %240 = load i64*, i64** %31, align 8
  %241 = getelementptr inbounds i64, i64* %240, i64 2
  %242 = load i64, i64* %241, align 8
  %243 = mul i64 %239, %242
  %244 = load i64*, i64** %31, align 8
  %245 = getelementptr inbounds i64, i64* %244, i64 3
  %246 = load i64, i64* %245, align 8
  %247 = mul i64 %243, %246
  store i64 %247, i64* %75, align 8
  store i64 0, i64* %76, align 8
  br label %248

; <label>:248:                                    ; preds = %298, %223
  %249 = load i64, i64* %76, align 8
  %250 = load i64, i64* %51, align 8
  %251 = icmp ult i64 %249, %250
  br i1 %251, label %252, label %301

; <label>:252:                                    ; preds = %248
  %253 = load i8*, i8** %26, align 8
  %254 = load i64, i64* %73, align 8
  %255 = load i64, i64* %76, align 8
  %256 = add i64 %254, %255
  %257 = getelementptr inbounds i8, i8* %253, i64 %256
  %258 = load i8, i8* %257, align 1
  %259 = sext i8 %258 to i32
  %260 = load i32, i32* %38, align 4
  %261 = sub nsw i32 %259, %260
  store i32 %261, i32* %77, align 4
  store i32 0, i32* %78, align 4
  br label %262

; <label>:262:                                    ; preds = %294, %252
  %263 = load i32, i32* %78, align 4
  %264 = load i32, i32* %47, align 4
  %265 = icmp ult i32 4, %264
  br i1 %265, label %266, label %267

; <label>:266:                                    ; preds = %262
  br label %269

; <label>:267:                                    ; preds = %262
  %268 = load i32, i32* %47, align 4
  br label %269

; <label>:269:                                    ; preds = %267, %266
  %270 = phi i32 [ 4, %266 ], [ %268, %267 ]
  %271 = icmp ult i32 %263, %270
  br i1 %271, label %272, label %297

; <label>:272:                                    ; preds = %269
  %273 = load i8*, i8** %27, align 8
  %274 = load i64, i64* %74, align 8
  %275 = load i64, i64* %75, align 8
  %276 = load i32, i32* %78, align 4
  %277 = zext i32 %276 to i64
  %278 = mul i64 %275, %277
  %279 = add i64 %274, %278
  %280 = load i64, i64* %76, align 8
  %281 = add i64 %279, %280
  %282 = getelementptr inbounds i8, i8* %273, i64 %281
  %283 = load i8, i8* %282, align 1
  %284 = sext i8 %283 to i32
  %285 = load i32, i32* %39, align 4
  %286 = sub nsw i32 %284, %285
  %287 = load i32, i32* %77, align 4
  %288 = mul nsw i32 %286, %287
  %289 = load i32, i32* %78, align 4
  %290 = zext i32 %289 to i64
  %291 = getelementptr inbounds i32, i32* %158, i64 %290
  %292 = load i32, i32* %291, align 4
  %293 = add nsw i32 %292, %288
  store i32 %293, i32* %291, align 4
  br label %294

; <label>:294:                                    ; preds = %272
  %295 = load i32, i32* %78, align 4
  %296 = add i32 %295, 1
  store i32 %296, i32* %78, align 4
  br label %262

; <label>:297:                                    ; preds = %269
  br label %298

; <label>:298:                                    ; preds = %297
  %299 = load i64, i64* %76, align 8
  %300 = add i64 %299, 1
  store i64 %300, i64* %76, align 8
  br label %248

; <label>:301:                                    ; preds = %248
  %302 = load i32, i32* %47, align 4
  %303 = icmp ugt i32 %302, 4
  br i1 %303, label %304, label %359

; <label>:304:                                    ; preds = %301
  store i64 0, i64* %79, align 8
  br label %305

; <label>:305:                                    ; preds = %355, %304
  %306 = load i64, i64* %79, align 8
  %307 = load i64, i64* %51, align 8
  %308 = icmp ult i64 %306, %307
  br i1 %308, label %309, label %358

; <label>:309:                                    ; preds = %305
  %310 = load i8*, i8** %26, align 8
  %311 = load i64, i64* %73, align 8
  %312 = load i64, i64* %79, align 8
  %313 = add i64 %311, %312
  %314 = getelementptr inbounds i8, i8* %310, i64 %313
  %315 = load i8, i8* %314, align 1
  %316 = sext i8 %315 to i32
  %317 = load i32, i32* %38, align 4
  %318 = sub nsw i32 %316, %317
  store i32 %318, i32* %80, align 4
  store i32 4, i32* %81, align 4
  br label %319

; <label>:319:                                    ; preds = %351, %309
  %320 = load i32, i32* %81, align 4
  %321 = load i32, i32* %47, align 4
  %322 = icmp ult i32 8, %321
  br i1 %322, label %323, label %324

; <label>:323:                                    ; preds = %319
  br label %326

; <label>:324:                                    ; preds = %319
  %325 = load i32, i32* %47, align 4
  br label %326

; <label>:326:                                    ; preds = %324, %323
  %327 = phi i32 [ 8, %323 ], [ %325, %324 ]
  %328 = icmp ult i32 %320, %327
  br i1 %328, label %329, label %354

; <label>:329:                                    ; preds = %326
  %330 = load i8*, i8** %27, align 8
  %331 = load i64, i64* %74, align 8
  %332 = load i64, i64* %75, align 8
  %333 = load i32, i32* %81, align 4
  %334 = zext i32 %333 to i64
  %335 = mul i64 %332, %334
  %336 = add i64 %331, %335
  %337 = load i64, i64* %79, align 8
  %338 = add i64 %336, %337
  %339 = getelementptr inbounds i8, i8* %330, i64 %338
  %340 = load i8, i8* %339, align 1
  %341 = sext i8 %340 to i32
  %342 = load i32, i32* %39, align 4
  %343 = sub nsw i32 %341, %342
  %344 = load i32, i32* %80, align 4
  %345 = mul nsw i32 %343, %344
  %346 = load i32, i32* %81, align 4
  %347 = zext i32 %346 to i64
  %348 = getelementptr inbounds i32, i32* %158, i64 %347
  %349 = load i32, i32* %348, align 4
  %350 = add nsw i32 %349, %345
  store i32 %350, i32* %348, align 4
  br label %351

; <label>:351:                                    ; preds = %329
  %352 = load i32, i32* %81, align 4
  %353 = add i32 %352, 1
  store i32 %353, i32* %81, align 4
  br label %319

; <label>:354:                                    ; preds = %326
  br label %355

; <label>:355:                                    ; preds = %354
  %356 = load i64, i64* %79, align 8
  %357 = add i64 %356, 1
  store i64 %357, i64* %79, align 8
  br label %305

; <label>:358:                                    ; preds = %305
  br label %359

; <label>:359:                                    ; preds = %358, %301
  br label %360

; <label>:360:                                    ; preds = %359, %222
  %361 = load i64, i64* %70, align 8
  %362 = add i64 %361, 1
  store i64 %362, i64* %70, align 8
  br label %190

; <label>:363:                                    ; preds = %190
  br label %364

; <label>:364:                                    ; preds = %363
  %365 = load i64, i64* %69, align 8
  %366 = add i64 %365, 1
  store i64 %366, i64* %69, align 8
  br label %185

; <label>:367:                                    ; preds = %185
  store i32 0, i32* %82, align 4
  br label %368

; <label>:368:                                    ; preds = %395, %367
  %369 = load i32, i32* %82, align 4
  %370 = load i32, i32* %47, align 4
  %371 = icmp ult i32 %369, %370
  br i1 %371, label %372, label %398

; <label>:372:                                    ; preds = %368
  %373 = load i32, i32* %82, align 4
  %374 = zext i32 %373 to i64
  %375 = getelementptr inbounds i32, i32* %158, i64 %374
  %376 = load i32, i32* %375, align 4
  %377 = load i32, i32* %44, align 4
  %378 = load i32, i32* %45, align 4
  %379 = load i32, i32* %46, align 4
  %380 = load i32, i32* %37, align 4
  %381 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %376, i32 %377, i32 %378, i32 %379, i32 %380)
  store i32 %381, i32* %83, align 4
  %382 = load i32, i32* %83, align 4
  %383 = call signext i8 @_Z11libjit_clipi(i32 %382)
  %384 = load i8*, i8** %25, align 8
  %385 = load i64*, i64** %29, align 8
  %386 = load i64, i64* %59, align 8
  %387 = load i64, i64* %63, align 8
  %388 = load i64, i64* %65, align 8
  %389 = load i64, i64* %61, align 8
  %390 = load i32, i32* %82, align 4
  %391 = zext i32 %390 to i64
  %392 = add i64 %389, %391
  %393 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %385, i64 %386, i64 %387, i64 %388, i64 %392)
  %394 = getelementptr inbounds i8, i8* %384, i64 %393
  store i8 %383, i8* %394, align 1
  br label %395

; <label>:395:                                    ; preds = %372
  %396 = load i32, i32* %82, align 4
  %397 = add i32 %396, 1
  store i32 %397, i32* %82, align 4
  br label %368

; <label>:398:                                    ; preds = %368
  %399 = load i8*, i8** %66, align 8
  call void @llvm.stackrestore(i8* %399)
  br label %400

; <label>:400:                                    ; preds = %398
  %401 = load i64, i64* %56, align 8
  %402 = load i64, i64* %64, align 8
  %403 = add i64 %402, %401
  store i64 %403, i64* %64, align 8
  %404 = load i64, i64* %65, align 8
  %405 = add i64 %404, 1
  store i64 %405, i64* %65, align 8
  br label %148

; <label>:406:                                    ; preds = %148
  br label %407

; <label>:407:                                    ; preds = %406
  %408 = load i64, i64* %55, align 8
  %409 = load i64, i64* %62, align 8
  %410 = add i64 %409, %408
  store i64 %410, i64* %62, align 8
  %411 = load i64, i64* %63, align 8
  %412 = add i64 %411, 1
  store i64 %412, i64* %63, align 8
  br label %139

; <label>:413:                                    ; preds = %139
  br label %414

; <label>:414:                                    ; preds = %413
  %415 = load i32, i32* %47, align 4
  %416 = zext i32 %415 to i64
  %417 = load i64, i64* %61, align 8
  %418 = add i64 %417, %416
  store i64 %418, i64* %61, align 8
  br label %129

; <label>:419:                                    ; preds = %129
  br label %420

; <label>:420:                                    ; preds = %419
  %421 = load i64, i64* %60, align 8
  %422 = add i64 %421, 1
  store i64 %422, i64* %60, align 8
  br label %121

; <label>:423:                                    ; preds = %121
  br label %424

; <label>:424:                                    ; preds = %423
  %425 = load i64, i64* %59, align 8
  %426 = add i64 %425, 1
  store i64 %426, i64* %59, align 8
  br label %114

; <label>:427:                                    ; preds = %114
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_convolution_grad_f(float*, float*, float*, float*, float*, float*, i64*, i64*, i64*, i64*, i64*, i64*, i64, i64) #2 {
  %15 = alloca float*, align 8
  %16 = alloca float*, align 8
  %17 = alloca float*, align 8
  %18 = alloca float*, align 8
  %19 = alloca float*, align 8
  %20 = alloca float*, align 8
  %21 = alloca i64*, align 8
  %22 = alloca i64*, align 8
  %23 = alloca i64*, align 8
  %24 = alloca i64*, align 8
  %25 = alloca i64*, align 8
  %26 = alloca i64*, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca i64, align 8
  %38 = alloca i64, align 8
  %39 = alloca i64, align 8
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  %43 = alloca i64, align 8
  %44 = alloca i64, align 8
  %45 = alloca float, align 4
  %46 = alloca i64, align 8
  %47 = alloca i64, align 8
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  store float* %0, float** %15, align 8
  store float* %1, float** %16, align 8
  store float* %2, float** %17, align 8
  store float* %3, float** %18, align 8
  store float* %4, float** %19, align 8
  store float* %5, float** %20, align 8
  store i64* %6, i64** %21, align 8
  store i64* %7, i64** %22, align 8
  store i64* %8, i64** %23, align 8
  store i64* %9, i64** %24, align 8
  store i64* %10, i64** %25, align 8
  store i64* %11, i64** %26, align 8
  store i64 %12, i64* %27, align 8
  store i64 %13, i64* %28, align 8
  store i64 4, i64* %29, align 8
  %51 = load float*, float** %15, align 8
  %52 = bitcast float* %51 to i8*
  %53 = load i64*, i64** %22, align 8
  %54 = getelementptr inbounds i64, i64* %53, i64 0
  %55 = load i64, i64* %54, align 8
  %56 = load i64*, i64** %22, align 8
  %57 = getelementptr inbounds i64, i64* %56, i64 1
  %58 = load i64, i64* %57, align 8
  %59 = mul i64 %55, %58
  %60 = load i64*, i64** %22, align 8
  %61 = getelementptr inbounds i64, i64* %60, i64 2
  %62 = load i64, i64* %61, align 8
  %63 = mul i64 %59, %62
  %64 = load i64*, i64** %22, align 8
  %65 = getelementptr inbounds i64, i64* %64, i64 3
  %66 = load i64, i64* %65, align 8
  %67 = mul i64 %63, %66
  %68 = load i64, i64* %29, align 8
  %69 = mul i64 %67, %68
  call void @llvm.memset.p0i8.i64(i8* align 4 %52, i8 0, i64 %69, i1 false)
  %70 = load float*, float** %18, align 8
  %71 = bitcast float* %70 to i8*
  %72 = load i64*, i64** %23, align 8
  %73 = getelementptr inbounds i64, i64* %72, i64 0
  %74 = load i64, i64* %73, align 8
  %75 = load i64*, i64** %23, align 8
  %76 = getelementptr inbounds i64, i64* %75, i64 1
  %77 = load i64, i64* %76, align 8
  %78 = mul i64 %74, %77
  %79 = load i64*, i64** %23, align 8
  %80 = getelementptr inbounds i64, i64* %79, i64 2
  %81 = load i64, i64* %80, align 8
  %82 = mul i64 %78, %81
  %83 = load i64*, i64** %23, align 8
  %84 = getelementptr inbounds i64, i64* %83, i64 3
  %85 = load i64, i64* %84, align 8
  %86 = mul i64 %82, %85
  %87 = load i64, i64* %29, align 8
  %88 = mul i64 %86, %87
  call void @llvm.memset.p0i8.i64(i8* align 4 %71, i8 0, i64 %88, i1 false)
  %89 = load float*, float** %19, align 8
  %90 = bitcast float* %89 to i8*
  %91 = load i64*, i64** %21, align 8
  %92 = getelementptr inbounds i64, i64* %91, i64 3
  %93 = load i64, i64* %92, align 8
  %94 = load i64, i64* %29, align 8
  %95 = mul i64 %93, %94
  call void @llvm.memset.p0i8.i64(i8* align 4 %90, i8 0, i64 %95, i1 false)
  %96 = load i64*, i64** %26, align 8
  %97 = getelementptr inbounds i64, i64* %96, i64 0
  %98 = load i64, i64* %97, align 8
  store i64 %98, i64* %30, align 8
  %99 = load i64*, i64** %26, align 8
  %100 = getelementptr inbounds i64, i64* %99, i64 1
  %101 = load i64, i64* %100, align 8
  store i64 %101, i64* %31, align 8
  %102 = load i64*, i64** %25, align 8
  %103 = getelementptr inbounds i64, i64* %102, i64 0
  %104 = load i64, i64* %103, align 8
  store i64 %104, i64* %32, align 8
  %105 = load i64*, i64** %25, align 8
  %106 = getelementptr inbounds i64, i64* %105, i64 1
  %107 = load i64, i64* %106, align 8
  store i64 %107, i64* %33, align 8
  %108 = load i64*, i64** %24, align 8
  %109 = getelementptr inbounds i64, i64* %108, i64 0
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %34, align 8
  %111 = load i64*, i64** %24, align 8
  %112 = getelementptr inbounds i64, i64* %111, i64 1
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %35, align 8
  %114 = load i64*, i64** %22, align 8
  %115 = getelementptr inbounds i64, i64* %114, i64 3
  %116 = load i64, i64* %115, align 8
  %117 = load i64, i64* %27, align 8
  %118 = udiv i64 %116, %117
  store i64 %118, i64* %36, align 8
  %119 = load i64*, i64** %21, align 8
  %120 = getelementptr inbounds i64, i64* %119, i64 3
  %121 = load i64, i64* %120, align 8
  %122 = load i64, i64* %27, align 8
  %123 = udiv i64 %121, %122
  store i64 %123, i64* %37, align 8
  store i64 0, i64* %38, align 8
  br label %124

; <label>:124:                                    ; preds = %308, %14
  %125 = load i64, i64* %38, align 8
  %126 = load i64*, i64** %21, align 8
  %127 = getelementptr inbounds i64, i64* %126, i64 0
  %128 = load i64, i64* %127, align 8
  %129 = icmp ult i64 %125, %128
  br i1 %129, label %130, label %311

; <label>:130:                                    ; preds = %124
  store i64 0, i64* %39, align 8
  br label %131

; <label>:131:                                    ; preds = %304, %130
  %132 = load i64, i64* %39, align 8
  %133 = load i64, i64* %27, align 8
  %134 = icmp ult i64 %132, %133
  br i1 %134, label %135, label %307

; <label>:135:                                    ; preds = %131
  %136 = load i64, i64* %39, align 8
  %137 = load i64, i64* %37, align 8
  %138 = mul i64 %136, %137
  store i64 %138, i64* %40, align 8
  br label %139

; <label>:139:                                    ; preds = %300, %135
  %140 = load i64, i64* %40, align 8
  %141 = load i64, i64* %39, align 8
  %142 = add i64 %141, 1
  %143 = load i64, i64* %37, align 8
  %144 = mul i64 %142, %143
  %145 = icmp ult i64 %140, %144
  br i1 %145, label %146, label %303

; <label>:146:                                    ; preds = %139
  %147 = load i64, i64* %30, align 8
  %148 = sub nsw i64 0, %147
  store i64 %148, i64* %41, align 8
  store i64 0, i64* %42, align 8
  br label %149

; <label>:149:                                    ; preds = %293, %146
  %150 = load i64, i64* %42, align 8
  %151 = load i64*, i64** %21, align 8
  %152 = getelementptr inbounds i64, i64* %151, i64 1
  %153 = load i64, i64* %152, align 8
  %154 = icmp ult i64 %150, %153
  br i1 %154, label %155, label %299

; <label>:155:                                    ; preds = %149
  %156 = load i64, i64* %31, align 8
  %157 = sub nsw i64 0, %156
  store i64 %157, i64* %43, align 8
  store i64 0, i64* %44, align 8
  br label %158

; <label>:158:                                    ; preds = %286, %155
  %159 = load i64, i64* %44, align 8
  %160 = load i64*, i64** %21, align 8
  %161 = getelementptr inbounds i64, i64* %160, i64 2
  %162 = load i64, i64* %161, align 8
  %163 = icmp ult i64 %159, %162
  br i1 %163, label %164, label %292

; <label>:164:                                    ; preds = %158
  %165 = load float*, float** %16, align 8
  %166 = load i64*, i64** %21, align 8
  %167 = load i64, i64* %38, align 8
  %168 = load i64, i64* %42, align 8
  %169 = load i64, i64* %44, align 8
  %170 = load i64, i64* %40, align 8
  %171 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %166, i64 %167, i64 %168, i64 %169, i64 %170)
  %172 = getelementptr inbounds float, float* %165, i64 %171
  %173 = load float, float* %172, align 4
  store float %173, float* %45, align 4
  store i64 0, i64* %46, align 8
  br label %174

; <label>:174:                                    ; preds = %276, %164
  %175 = load i64, i64* %46, align 8
  %176 = load i64, i64* %34, align 8
  %177 = icmp ult i64 %175, %176
  br i1 %177, label %178, label %279

; <label>:178:                                    ; preds = %174
  store i64 0, i64* %47, align 8
  br label %179

; <label>:179:                                    ; preds = %272, %178
  %180 = load i64, i64* %47, align 8
  %181 = load i64, i64* %35, align 8
  %182 = icmp ult i64 %180, %181
  br i1 %182, label %183, label %275

; <label>:183:                                    ; preds = %179
  %184 = load i64, i64* %41, align 8
  %185 = load i64, i64* %46, align 8
  %186 = load i64, i64* %28, align 8
  %187 = mul i64 %185, %186
  %188 = add i64 %184, %187
  store i64 %188, i64* %48, align 8
  %189 = load i64, i64* %43, align 8
  %190 = load i64, i64* %47, align 8
  %191 = load i64, i64* %28, align 8
  %192 = mul i64 %190, %191
  %193 = add i64 %189, %192
  store i64 %193, i64* %49, align 8
  %194 = load i64, i64* %48, align 8
  %195 = icmp slt i64 %194, 0
  br i1 %195, label %211, label %196

; <label>:196:                                    ; preds = %183
  %197 = load i64, i64* %49, align 8
  %198 = icmp slt i64 %197, 0
  br i1 %198, label %211, label %199

; <label>:199:                                    ; preds = %196
  %200 = load i64, i64* %48, align 8
  %201 = load i64*, i64** %22, align 8
  %202 = getelementptr inbounds i64, i64* %201, i64 1
  %203 = load i64, i64* %202, align 8
  %204 = icmp sge i64 %200, %203
  br i1 %204, label %211, label %205

; <label>:205:                                    ; preds = %199
  %206 = load i64, i64* %49, align 8
  %207 = load i64*, i64** %22, align 8
  %208 = getelementptr inbounds i64, i64* %207, i64 2
  %209 = load i64, i64* %208, align 8
  %210 = icmp sge i64 %206, %209
  br i1 %210, label %211, label %212

; <label>:211:                                    ; preds = %205, %199, %196, %183
  br label %272

; <label>:212:                                    ; preds = %205
  store i64 0, i64* %50, align 8
  br label %213

; <label>:213:                                    ; preds = %268, %212
  %214 = load i64, i64* %50, align 8
  %215 = load i64, i64* %36, align 8
  %216 = icmp ult i64 %214, %215
  br i1 %216, label %217, label %271

; <label>:217:                                    ; preds = %213
  %218 = load float*, float** %20, align 8
  %219 = load i64*, i64** %23, align 8
  %220 = load i64, i64* %40, align 8
  %221 = load i64, i64* %46, align 8
  %222 = load i64, i64* %47, align 8
  %223 = load i64, i64* %50, align 8
  %224 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %219, i64 %220, i64 %221, i64 %222, i64 %223)
  %225 = getelementptr inbounds float, float* %218, i64 %224
  %226 = load float, float* %225, align 4
  %227 = load float, float* %45, align 4
  %228 = fmul reassoc nsz arcp contract float %226, %227
  %229 = load float*, float** %15, align 8
  %230 = load i64*, i64** %22, align 8
  %231 = load i64, i64* %38, align 8
  %232 = load i64, i64* %48, align 8
  %233 = load i64, i64* %49, align 8
  %234 = load i64, i64* %39, align 8
  %235 = load i64, i64* %36, align 8
  %236 = mul i64 %234, %235
  %237 = load i64, i64* %50, align 8
  %238 = add i64 %236, %237
  %239 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %230, i64 %231, i64 %232, i64 %233, i64 %238)
  %240 = getelementptr inbounds float, float* %229, i64 %239
  %241 = load float, float* %240, align 4
  %242 = fadd reassoc nsz arcp contract float %241, %228
  store float %242, float* %240, align 4
  %243 = load float*, float** %17, align 8
  %244 = load i64*, i64** %22, align 8
  %245 = load i64, i64* %38, align 8
  %246 = load i64, i64* %48, align 8
  %247 = load i64, i64* %49, align 8
  %248 = load i64, i64* %39, align 8
  %249 = load i64, i64* %36, align 8
  %250 = mul i64 %248, %249
  %251 = load i64, i64* %50, align 8
  %252 = add i64 %250, %251
  %253 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %244, i64 %245, i64 %246, i64 %247, i64 %252)
  %254 = getelementptr inbounds float, float* %243, i64 %253
  %255 = load float, float* %254, align 4
  %256 = load float, float* %45, align 4
  %257 = fmul reassoc nsz arcp contract float %255, %256
  %258 = load float*, float** %18, align 8
  %259 = load i64*, i64** %23, align 8
  %260 = load i64, i64* %40, align 8
  %261 = load i64, i64* %46, align 8
  %262 = load i64, i64* %47, align 8
  %263 = load i64, i64* %50, align 8
  %264 = call i64 @_Z14libjit_getXYZWPKmmmmm(i64* %259, i64 %260, i64 %261, i64 %262, i64 %263)
  %265 = getelementptr inbounds float, float* %258, i64 %264
  %266 = load float, float* %265, align 4
  %267 = fadd reassoc nsz arcp contract float %266, %257
  store float %267, float* %265, align 4
  br label %268

; <label>:268:                                    ; preds = %217
  %269 = load i64, i64* %50, align 8
  %270 = add i64 %269, 1
  store i64 %270, i64* %50, align 8
  br label %213

; <label>:271:                                    ; preds = %213
  br label %272

; <label>:272:                                    ; preds = %271, %211
  %273 = load i64, i64* %47, align 8
  %274 = add i64 %273, 1
  store i64 %274, i64* %47, align 8
  br label %179

; <label>:275:                                    ; preds = %179
  br label %276

; <label>:276:                                    ; preds = %275
  %277 = load i64, i64* %46, align 8
  %278 = add i64 %277, 1
  store i64 %278, i64* %46, align 8
  br label %174

; <label>:279:                                    ; preds = %174
  %280 = load float, float* %45, align 4
  %281 = load float*, float** %19, align 8
  %282 = load i64, i64* %40, align 8
  %283 = getelementptr inbounds float, float* %281, i64 %282
  %284 = load float, float* %283, align 4
  %285 = fadd reassoc nsz arcp contract float %284, %280
  store float %285, float* %283, align 4
  br label %286

; <label>:286:                                    ; preds = %279
  %287 = load i64, i64* %44, align 8
  %288 = add i64 %287, 1
  store i64 %288, i64* %44, align 8
  %289 = load i64, i64* %33, align 8
  %290 = load i64, i64* %43, align 8
  %291 = add i64 %290, %289
  store i64 %291, i64* %43, align 8
  br label %158

; <label>:292:                                    ; preds = %158
  br label %293

; <label>:293:                                    ; preds = %292
  %294 = load i64, i64* %42, align 8
  %295 = add i64 %294, 1
  store i64 %295, i64* %42, align 8
  %296 = load i64, i64* %32, align 8
  %297 = load i64, i64* %41, align 8
  %298 = add i64 %297, %296
  store i64 %298, i64* %41, align 8
  br label %149

; <label>:299:                                    ; preds = %149
  br label %300

; <label>:300:                                    ; preds = %299
  %301 = load i64, i64* %40, align 8
  %302 = add i64 %301, 1
  store i64 %302, i64* %40, align 8
  br label %139

; <label>:303:                                    ; preds = %139
  br label %304

; <label>:304:                                    ; preds = %303
  %305 = load i64, i64* %39, align 8
  %306 = add i64 %305, 1
  store i64 %306, i64* %39, align 8
  br label %131

; <label>:307:                                    ; preds = %131
  br label %308

; <label>:308:                                    ; preds = %307
  %309 = load i64, i64* %38, align 8
  %310 = add i64 %309, 1
  store i64 %310, i64* %38, align 8
  br label %124

; <label>:311:                                    ; preds = %124
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_matmul_f(float*, float*, float*, i64*, i64*, i64*) #2 {
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  %9 = alloca float*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i64*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store float* %0, float** %7, align 8
  store float* %1, float** %8, align 8
  store float* %2, float** %9, align 8
  store i64* %3, i64** %10, align 8
  store i64* %4, i64** %11, align 8
  store i64* %5, i64** %12, align 8
  %16 = load float*, float** %7, align 8
  %17 = bitcast float* %16 to i8*
  %18 = load i64*, i64** %10, align 8
  %19 = getelementptr inbounds i64, i64* %18, i64 0
  %20 = load i64, i64* %19, align 8
  %21 = load i64*, i64** %10, align 8
  %22 = getelementptr inbounds i64, i64* %21, i64 1
  %23 = load i64, i64* %22, align 8
  %24 = mul i64 %20, %23
  %25 = mul i64 %24, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false)
  %26 = load i64*, i64** %10, align 8
  %27 = getelementptr inbounds i64, i64* %26, i64 1
  %28 = load i64, i64* %27, align 8
  %29 = trunc i64 %28 to i32
  store i32 %29, i32* %13, align 4
  %30 = load i64*, i64** %10, align 8
  %31 = getelementptr inbounds i64, i64* %30, i64 0
  %32 = load i64, i64* %31, align 8
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 4
  %34 = load i64*, i64** %11, align 8
  %35 = getelementptr inbounds i64, i64* %34, i64 1
  %36 = load i64, i64* %35, align 8
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %15, align 4
  %38 = load i32, i32* %13, align 4
  %39 = sext i32 %38 to i64
  %40 = load i32, i32* %14, align 4
  %41 = sext i32 %40 to i64
  %42 = load i32, i32* %15, align 4
  %43 = sext i32 %42 to i64
  %44 = load float*, float** %9, align 8
  %45 = load i64*, i64** %12, align 8
  %46 = getelementptr inbounds i64, i64* %45, i64 1
  %47 = load i64, i64* %46, align 8
  %48 = load float*, float** %8, align 8
  %49 = load i64*, i64** %11, align 8
  %50 = getelementptr inbounds i64, i64* %49, i64 1
  %51 = load i64, i64* %50, align 8
  %52 = load float*, float** %7, align 8
  %53 = load i64*, i64** %10, align 8
  %54 = getelementptr inbounds i64, i64* %53, i64 1
  %55 = load i64, i64* %54, align 8
  call void @_ZN12_GLOBAL__N_119libjit_matmul_outerILb0EEEvmmmPKfmS2_mPfm(i64 %39, i64 %41, i64 %43, float* %44, i64 %47, float* %48, i64 %51, float* %52, i64 %55)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_119libjit_matmul_outerILb0EEEvmmmPKfmS2_mPfm(i64, i64, i64, float*, i64, float*, i64, float*, i64) #2 {
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca float*, align 8
  %14 = alloca i64, align 8
  %15 = alloca float*, align 8
  %16 = alloca i64, align 8
  %17 = alloca float*, align 8
  %18 = alloca i64, align 8
  %19 = alloca float*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  store i64 %0, i64* %10, align 8
  store i64 %1, i64* %11, align 8
  store i64 %2, i64* %12, align 8
  store float* %3, float** %13, align 8
  store i64 %4, i64* %14, align 8
  store float* %5, float** %15, align 8
  store i64 %6, i64* %16, align 8
  store float* %7, float** %17, align 8
  store i64 %8, i64* %18, align 8
  store float* null, float** %19, align 8
  store i64 0, i64* %20, align 8
  br label %26

; <label>:26:                                     ; preds = %116, %9
  %27 = load i64, i64* %20, align 8
  %28 = load i64, i64* %12, align 8
  %29 = icmp ult i64 %27, %28
  br i1 %29, label %30, label %119

; <label>:30:                                     ; preds = %26
  %31 = load i64, i64* %12, align 8
  %32 = load i64, i64* %20, align 8
  %33 = sub i64 %31, %32
  %34 = icmp ult i64 %33, 128
  br i1 %34, label %35, label %39

; <label>:35:                                     ; preds = %30
  %36 = load i64, i64* %12, align 8
  %37 = load i64, i64* %20, align 8
  %38 = sub i64 %36, %37
  br label %40

; <label>:39:                                     ; preds = %30
  br label %40

; <label>:40:                                     ; preds = %39, %35
  %41 = phi i64 [ %38, %35 ], [ 128, %39 ]
  store i64 %41, i64* %21, align 8
  store i64 0, i64* %22, align 8
  br label %42

; <label>:42:                                     ; preds = %112, %40
  %43 = load i64, i64* %22, align 8
  %44 = load i64, i64* %11, align 8
  %45 = icmp ult i64 %43, %44
  br i1 %45, label %46, label %115

; <label>:46:                                     ; preds = %42
  %47 = load i64, i64* %11, align 8
  %48 = load i64, i64* %22, align 8
  %49 = sub i64 %47, %48
  %50 = icmp ult i64 %49, 4096
  br i1 %50, label %51, label %55

; <label>:51:                                     ; preds = %46
  %52 = load i64, i64* %11, align 8
  %53 = load i64, i64* %22, align 8
  %54 = sub i64 %52, %53
  br label %56

; <label>:55:                                     ; preds = %46
  br label %56

; <label>:56:                                     ; preds = %55, %51
  %57 = phi i64 [ %54, %51 ], [ 4096, %55 ]
  store i64 %57, i64* %23, align 8
  store i64 0, i64* %24, align 8
  br label %58

; <label>:58:                                     ; preds = %108, %56
  %59 = load i64, i64* %24, align 8
  %60 = load i64, i64* %10, align 8
  %61 = icmp ult i64 %59, %60
  br i1 %61, label %62, label %111

; <label>:62:                                     ; preds = %58
  %63 = load i64, i64* %10, align 8
  %64 = load i64, i64* %24, align 8
  %65 = sub i64 %63, %64
  %66 = icmp ult i64 %65, 256
  br i1 %66, label %67, label %71

; <label>:67:                                     ; preds = %62
  %68 = load i64, i64* %10, align 8
  %69 = load i64, i64* %24, align 8
  %70 = sub i64 %68, %69
  br label %72

; <label>:71:                                     ; preds = %62
  br label %72

; <label>:72:                                     ; preds = %71, %67
  %73 = phi i64 [ %70, %67 ], [ 256, %71 ]
  store i64 %73, i64* %25, align 8
  %74 = load i64, i64* %25, align 8
  %75 = trunc i64 %74 to i32
  %76 = load i64, i64* %23, align 8
  %77 = trunc i64 %76 to i32
  %78 = load i64, i64* %21, align 8
  %79 = trunc i64 %78 to i32
  %80 = load float*, float** %13, align 8
  %81 = load i64, i64* %20, align 8
  %82 = load i64, i64* %14, align 8
  %83 = mul i64 %81, %82
  %84 = load i64, i64* %24, align 8
  %85 = add i64 %83, %84
  %86 = getelementptr inbounds float, float* %80, i64 %85
  %87 = load i64, i64* %14, align 8
  %88 = trunc i64 %87 to i32
  %89 = load float*, float** %15, align 8
  %90 = load i64, i64* %22, align 8
  %91 = load i64, i64* %16, align 8
  %92 = mul i64 %90, %91
  %93 = load i64, i64* %20, align 8
  %94 = add i64 %92, %93
  %95 = getelementptr inbounds float, float* %89, i64 %94
  %96 = load i64, i64* %16, align 8
  %97 = trunc i64 %96 to i32
  %98 = load float*, float** %17, align 8
  %99 = load i64, i64* %22, align 8
  %100 = load i64, i64* %18, align 8
  %101 = mul i64 %99, %100
  %102 = load i64, i64* %24, align 8
  %103 = add i64 %101, %102
  %104 = getelementptr inbounds float, float* %98, i64 %103
  %105 = load i64, i64* %18, align 8
  %106 = trunc i64 %105 to i32
  %107 = load float*, float** %19, align 8
  call void @_ZN12_GLOBAL__N_119libjit_matmul_innerILb0EEEviiiPKfiS2_iPfiS3_(i32 %75, i32 %77, i32 %79, float* %86, i32 %88, float* %95, i32 %97, float* %104, i32 %106, float* %107)
  br label %108

; <label>:108:                                    ; preds = %72
  %109 = load i64, i64* %24, align 8
  %110 = add i64 %109, 256
  store i64 %110, i64* %24, align 8
  br label %58

; <label>:111:                                    ; preds = %58
  br label %112

; <label>:112:                                    ; preds = %111
  %113 = load i64, i64* %22, align 8
  %114 = add i64 %113, 4096
  store i64 %114, i64* %22, align 8
  br label %42

; <label>:115:                                    ; preds = %42
  br label %116

; <label>:116:                                    ; preds = %115
  %117 = load i64, i64* %20, align 8
  %118 = add i64 %117, 128
  store i64 %118, i64* %20, align 8
  br label %26

; <label>:119:                                    ; preds = %26
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_119libjit_matmul_innerILb0EEEviiiPKfiS2_iPfiS3_(i32, i32, i32, float*, i32, float*, i32, float*, i32, float*) #2 {
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca float*, align 8
  %15 = alloca i32, align 4
  %16 = alloca float*, align 8
  %17 = alloca i32, align 4
  %18 = alloca float*, align 8
  %19 = alloca i32, align 4
  %20 = alloca float*, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  store i32 %0, i32* %11, align 4
  store i32 %1, i32* %12, align 4
  store i32 %2, i32* %13, align 4
  store float* %3, float** %14, align 8
  store i32 %4, i32* %15, align 4
  store float* %5, float** %16, align 8
  store i32 %6, i32* %17, align 4
  store float* %7, float** %18, align 8
  store i32 %8, i32* %19, align 4
  store float* %9, float** %20, align 8
  %25 = load i32, i32* %11, align 4
  %26 = load i32, i32* %13, align 4
  %27 = mul nsw i32 %25, %26
  %28 = zext i32 %27 to i64
  %29 = call i8* @llvm.stacksave()
  store i8* %29, i8** %21, align 8
  %30 = alloca float, i64 %28, align 64
  store i64 %28, i64* %22, align 8
  %31 = load i32, i32* %11, align 4
  %32 = load i32, i32* %12, align 4
  %33 = load i32, i32* %13, align 4
  %34 = load float*, float** %14, align 8
  %35 = load i32, i32* %15, align 4
  %36 = load float*, float** %16, align 8
  %37 = load i32, i32* %17, align 4
  %38 = load float*, float** %18, align 8
  %39 = load i32, i32* %19, align 4
  call void @_ZN12_GLOBAL__N_128libjit_matmul_inner_unpackedEiiiPKfiS1_iPfi(i32 %31, i32 %32, i32 %33, float* %34, i32 %35, float* %36, i32 %37, float* %38, i32 %39)
  %40 = load i32, i32* %11, align 4
  %41 = sdiv i32 %40, 32
  %42 = mul nsw i32 %41, 32
  %43 = sext i32 %42 to i64
  store i64 %43, i64* %23, align 8
  %44 = load i32, i32* %12, align 4
  %45 = sdiv i32 %44, 3
  %46 = mul nsw i32 %45, 3
  %47 = sext i32 %46 to i64
  store i64 %47, i64* %24, align 8
  %48 = load i64, i64* %23, align 8
  %49 = load i32, i32* %11, align 4
  %50 = sext i32 %49 to i64
  %51 = icmp slt i64 %48, %50
  br i1 %51, label %52, label %84

; <label>:52:                                     ; preds = %10
  %53 = load i32, i32* %11, align 4
  %54 = sext i32 %53 to i64
  %55 = load i64, i64* %23, align 8
  %56 = sub nsw i64 %54, %55
  %57 = trunc i64 %56 to i32
  %58 = load i64, i64* %24, align 8
  %59 = trunc i64 %58 to i32
  %60 = load i32, i32* %13, align 4
  %61 = load float*, float** %14, align 8
  %62 = load i32, i32* %15, align 4
  %63 = mul nsw i32 0, %62
  %64 = sext i32 %63 to i64
  %65 = load i64, i64* %23, align 8
  %66 = add nsw i64 %64, %65
  %67 = getelementptr inbounds float, float* %61, i64 %66
  %68 = load i32, i32* %15, align 4
  %69 = load float*, float** %16, align 8
  %70 = load i32, i32* %17, align 4
  %71 = mul nsw i32 0, %70
  %72 = add nsw i32 %71, 0
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds float, float* %69, i64 %73
  %75 = load i32, i32* %17, align 4
  %76 = load float*, float** %18, align 8
  %77 = load i32, i32* %19, align 4
  %78 = mul nsw i32 0, %77
  %79 = sext i32 %78 to i64
  %80 = load i64, i64* %23, align 8
  %81 = add nsw i64 %79, %80
  %82 = getelementptr inbounds float, float* %76, i64 %81
  %83 = load i32, i32* %19, align 4
  call void @_ZN12_GLOBAL__N_117libjit_matmul_oddEiiiPKfiS1_iPfi(i32 %57, i32 %59, i32 %60, float* %67, i32 %68, float* %74, i32 %75, float* %82, i32 %83)
  br label %84

; <label>:84:                                     ; preds = %52, %10
  %85 = load i64, i64* %24, align 8
  %86 = load i32, i32* %12, align 4
  %87 = sext i32 %86 to i64
  %88 = icmp slt i64 %85, %87
  br i1 %88, label %89, label %121

; <label>:89:                                     ; preds = %84
  %90 = load i64, i64* %23, align 8
  %91 = trunc i64 %90 to i32
  %92 = load i32, i32* %12, align 4
  %93 = sext i32 %92 to i64
  %94 = load i64, i64* %24, align 8
  %95 = sub nsw i64 %93, %94
  %96 = trunc i64 %95 to i32
  %97 = load i32, i32* %13, align 4
  %98 = load float*, float** %14, align 8
  %99 = load i32, i32* %15, align 4
  %100 = mul nsw i32 0, %99
  %101 = add nsw i32 %100, 0
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds float, float* %98, i64 %102
  %104 = load i32, i32* %15, align 4
  %105 = load float*, float** %16, align 8
  %106 = load i64, i64* %24, align 8
  %107 = load i32, i32* %17, align 4
  %108 = sext i32 %107 to i64
  %109 = mul nsw i64 %106, %108
  %110 = add nsw i64 %109, 0
  %111 = getelementptr inbounds float, float* %105, i64 %110
  %112 = load i32, i32* %17, align 4
  %113 = load float*, float** %18, align 8
  %114 = load i64, i64* %24, align 8
  %115 = load i32, i32* %19, align 4
  %116 = sext i32 %115 to i64
  %117 = mul nsw i64 %114, %116
  %118 = add nsw i64 %117, 0
  %119 = getelementptr inbounds float, float* %113, i64 %118
  %120 = load i32, i32* %19, align 4
  call void @_ZN12_GLOBAL__N_117libjit_matmul_oddEiiiPKfiS1_iPfi(i32 %91, i32 %96, i32 %97, float* %103, i32 %104, float* %111, i32 %112, float* %119, i32 %120)
  br label %121

; <label>:121:                                    ; preds = %89, %84
  %122 = load i64, i64* %23, align 8
  %123 = load i32, i32* %11, align 4
  %124 = sext i32 %123 to i64
  %125 = icmp slt i64 %122, %124
  br i1 %125, label %126, label %168

; <label>:126:                                    ; preds = %121
  %127 = load i64, i64* %24, align 8
  %128 = load i32, i32* %12, align 4
  %129 = sext i32 %128 to i64
  %130 = icmp slt i64 %127, %129
  br i1 %130, label %131, label %168

; <label>:131:                                    ; preds = %126
  %132 = load i32, i32* %11, align 4
  %133 = sext i32 %132 to i64
  %134 = load i64, i64* %23, align 8
  %135 = sub nsw i64 %133, %134
  %136 = trunc i64 %135 to i32
  %137 = load i32, i32* %12, align 4
  %138 = sext i32 %137 to i64
  %139 = load i64, i64* %24, align 8
  %140 = sub nsw i64 %138, %139
  %141 = trunc i64 %140 to i32
  %142 = load i32, i32* %13, align 4
  %143 = load float*, float** %14, align 8
  %144 = load i32, i32* %15, align 4
  %145 = mul nsw i32 0, %144
  %146 = sext i32 %145 to i64
  %147 = load i64, i64* %23, align 8
  %148 = add nsw i64 %146, %147
  %149 = getelementptr inbounds float, float* %143, i64 %148
  %150 = load i32, i32* %15, align 4
  %151 = load float*, float** %16, align 8
  %152 = load i64, i64* %24, align 8
  %153 = load i32, i32* %17, align 4
  %154 = sext i32 %153 to i64
  %155 = mul nsw i64 %152, %154
  %156 = add nsw i64 %155, 0
  %157 = getelementptr inbounds float, float* %151, i64 %156
  %158 = load i32, i32* %17, align 4
  %159 = load float*, float** %18, align 8
  %160 = load i64, i64* %24, align 8
  %161 = load i32, i32* %19, align 4
  %162 = sext i32 %161 to i64
  %163 = mul nsw i64 %160, %162
  %164 = load i64, i64* %23, align 8
  %165 = add nsw i64 %163, %164
  %166 = getelementptr inbounds float, float* %159, i64 %165
  %167 = load i32, i32* %19, align 4
  call void @_ZN12_GLOBAL__N_117libjit_matmul_oddEiiiPKfiS1_iPfi(i32 %136, i32 %141, i32 %142, float* %149, i32 %150, float* %157, i32 %158, float* %166, i32 %167)
  br label %168

; <label>:168:                                    ; preds = %131, %126, %121
  %169 = load i8*, i8** %21, align 8
  call void @llvm.stackrestore(i8* %169)
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_128libjit_matmul_inner_unpackedEiiiPKfiS1_iPfi(i32, i32, i32, float*, i32, float*, i32, float*, i32) #2 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca float*, align 8
  %14 = alloca i32, align 4
  %15 = alloca float*, align 8
  %16 = alloca i32, align 4
  %17 = alloca float*, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  store i32 %0, i32* %10, align 4
  store i32 %1, i32* %11, align 4
  store i32 %2, i32* %12, align 4
  store float* %3, float** %13, align 8
  store i32 %4, i32* %14, align 4
  store float* %5, float** %15, align 8
  store i32 %6, i32* %16, align 4
  store float* %7, float** %17, align 8
  store i32 %8, i32* %18, align 4
  store i32 0, i32* %19, align 4
  br label %21

; <label>:21:                                     ; preds = %69, %9
  %22 = load i32, i32* %19, align 4
  %23 = load i32, i32* %10, align 4
  %24 = sub nsw i32 %23, 32
  %25 = add nsw i32 %24, 1
  %26 = icmp slt i32 %22, %25
  br i1 %26, label %27, label %72

; <label>:27:                                     ; preds = %21
  store i32 0, i32* %20, align 4
  br label %28

; <label>:28:                                     ; preds = %65, %27
  %29 = load i32, i32* %20, align 4
  %30 = load i32, i32* %11, align 4
  %31 = sub nsw i32 %30, 3
  %32 = add nsw i32 %31, 1
  %33 = icmp slt i32 %29, %32
  br i1 %33, label %34, label %68

; <label>:34:                                     ; preds = %28
  %35 = load i32, i32* %12, align 4
  %36 = sext i32 %35 to i64
  %37 = load float*, float** %13, align 8
  %38 = load i32, i32* %14, align 4
  %39 = mul nsw i32 0, %38
  %40 = load i32, i32* %19, align 4
  %41 = add nsw i32 %39, %40
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds float, float* %37, i64 %42
  %44 = load i32, i32* %14, align 4
  %45 = sext i32 %44 to i64
  %46 = load float*, float** %15, align 8
  %47 = load i32, i32* %20, align 4
  %48 = load i32, i32* %16, align 4
  %49 = mul nsw i32 %47, %48
  %50 = add nsw i32 %49, 0
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %46, i64 %51
  %53 = load i32, i32* %16, align 4
  %54 = sext i32 %53 to i64
  %55 = load float*, float** %17, align 8
  %56 = load i32, i32* %20, align 4
  %57 = load i32, i32* %18, align 4
  %58 = mul nsw i32 %56, %57
  %59 = load i32, i32* %19, align 4
  %60 = add nsw i32 %58, %59
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds float, float* %55, i64 %61
  %63 = load i32, i32* %18, align 4
  %64 = sext i32 %63 to i64
  call void @_ZN12_GLOBAL__N_117libjit_matmul_dotILm4ELm3EEEvmPKfmS2_mPfm(i64 %36, float* %43, i64 %45, float* %52, i64 %54, float* %62, i64 %64)
  br label %65

; <label>:65:                                     ; preds = %34
  %66 = load i32, i32* %20, align 4
  %67 = add nsw i32 %66, 3
  store i32 %67, i32* %20, align 4
  br label %28

; <label>:68:                                     ; preds = %28
  br label %69

; <label>:69:                                     ; preds = %68
  %70 = load i32, i32* %19, align 4
  %71 = add nsw i32 %70, 32
  store i32 %71, i32* %19, align 4
  br label %21

; <label>:72:                                     ; preds = %21
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_117libjit_matmul_oddEiiiPKfiS1_iPfi(i32, i32, i32, float*, i32, float*, i32, float*, i32) #0 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca float*, align 8
  %14 = alloca i32, align 4
  %15 = alloca float*, align 8
  %16 = alloca i32, align 4
  %17 = alloca float*, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  store i32 %0, i32* %10, align 4
  store i32 %1, i32* %11, align 4
  store i32 %2, i32* %12, align 4
  store float* %3, float** %13, align 8
  store i32 %4, i32* %14, align 4
  store float* %5, float** %15, align 8
  store i32 %6, i32* %16, align 4
  store float* %7, float** %17, align 8
  store i32 %8, i32* %18, align 4
  store i32 0, i32* %19, align 4
  br label %22

; <label>:22:                                     ; preds = %74, %9
  %23 = load i32, i32* %19, align 4
  %24 = load i32, i32* %12, align 4
  %25 = icmp slt i32 %23, %24
  br i1 %25, label %26, label %77

; <label>:26:                                     ; preds = %22
  store i32 0, i32* %20, align 4
  br label %27

; <label>:27:                                     ; preds = %70, %26
  %28 = load i32, i32* %20, align 4
  %29 = load i32, i32* %11, align 4
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %31, label %73

; <label>:31:                                     ; preds = %27
  store i32 0, i32* %21, align 4
  br label %32

; <label>:32:                                     ; preds = %66, %31
  %33 = load i32, i32* %21, align 4
  %34 = load i32, i32* %10, align 4
  %35 = icmp slt i32 %33, %34
  br i1 %35, label %36, label %69

; <label>:36:                                     ; preds = %32
  %37 = load float*, float** %13, align 8
  %38 = load i32, i32* %19, align 4
  %39 = load i32, i32* %14, align 4
  %40 = mul nsw i32 %38, %39
  %41 = load i32, i32* %21, align 4
  %42 = add nsw i32 %40, %41
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds float, float* %37, i64 %43
  %45 = load float, float* %44, align 4
  %46 = load float*, float** %15, align 8
  %47 = load i32, i32* %20, align 4
  %48 = load i32, i32* %16, align 4
  %49 = mul nsw i32 %47, %48
  %50 = load i32, i32* %19, align 4
  %51 = add nsw i32 %49, %50
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds float, float* %46, i64 %52
  %54 = load float, float* %53, align 4
  %55 = fmul reassoc nsz arcp contract float %45, %54
  %56 = load float*, float** %17, align 8
  %57 = load i32, i32* %20, align 4
  %58 = load i32, i32* %18, align 4
  %59 = mul nsw i32 %57, %58
  %60 = load i32, i32* %21, align 4
  %61 = add nsw i32 %59, %60
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds float, float* %56, i64 %62
  %64 = load float, float* %63, align 4
  %65 = fadd reassoc nsz arcp contract float %64, %55
  store float %65, float* %63, align 4
  br label %66

; <label>:66:                                     ; preds = %36
  %67 = load i32, i32* %21, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %21, align 4
  br label %32

; <label>:69:                                     ; preds = %32
  br label %70

; <label>:70:                                     ; preds = %69
  %71 = load i32, i32* %20, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %20, align 4
  br label %27

; <label>:73:                                     ; preds = %27
  br label %74

; <label>:74:                                     ; preds = %73
  %75 = load i32, i32* %19, align 4
  %76 = add nsw i32 %75, 1
  store i32 %76, i32* %19, align 4
  br label %22

; <label>:77:                                     ; preds = %22
  ret void
}

; Function Attrs: noinline optnone uwtable
define internal void @_ZN12_GLOBAL__N_117libjit_matmul_dotILm4ELm3EEEvmPKfmS2_mPfm(i64, float*, i64, float*, i64, float*, i64) #8 {
  %8 = alloca i64, align 8
  %9 = alloca float*, align 8
  %10 = alloca i64, align 8
  %11 = alloca float*, align 8
  %12 = alloca i64, align 8
  %13 = alloca float*, align 8
  %14 = alloca i64, align 8
  %15 = alloca [4 x [3 x <8 x float>]], align 32
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca <8 x float>, align 32
  %19 = alloca i64, align 8
  %20 = alloca <8 x float>, align 32
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca <8 x float>, align 32
  store i64 %0, i64* %8, align 8
  store float* %1, float** %9, align 8
  store i64 %2, i64* %10, align 8
  store float* %3, float** %11, align 8
  store i64 %4, i64* %12, align 8
  store float* %5, float** %13, align 8
  store i64 %6, i64* %14, align 8
  %24 = bitcast [4 x [3 x <8 x float>]]* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %24, i8 0, i64 384, i1 false)
  store i64 0, i64* %16, align 8
  br label %25

; <label>:25:                                     ; preds = %74, %7
  %26 = load i64, i64* %16, align 8
  %27 = load i64, i64* %8, align 8
  %28 = icmp ult i64 %26, %27
  br i1 %28, label %29, label %77

; <label>:29:                                     ; preds = %25
  store i64 0, i64* %17, align 8
  br label %30

; <label>:30:                                     ; preds = %70, %29
  %31 = load i64, i64* %17, align 8
  %32 = icmp ult i64 %31, 4
  br i1 %32, label %33, label %73

; <label>:33:                                     ; preds = %30
  %34 = load float*, float** %9, align 8
  %35 = load i64, i64* %16, align 8
  %36 = load i64, i64* %10, align 8
  %37 = mul i64 %35, %36
  %38 = load i64, i64* %17, align 8
  %39 = mul i64 %38, 8
  %40 = add i64 %37, %39
  %41 = getelementptr inbounds float, float* %34, i64 %40
  %42 = call reassoc nsz arcp <8 x float> @_Z11LoaduFloat8PKf(float* %41)
  store <8 x float> %42, <8 x float>* %18, align 32
  store i64 0, i64* %19, align 8
  br label %43

; <label>:43:                                     ; preds = %66, %33
  %44 = load i64, i64* %19, align 8
  %45 = icmp ult i64 %44, 3
  br i1 %45, label %46, label %69

; <label>:46:                                     ; preds = %43
  %47 = load float*, float** %11, align 8
  %48 = load i64, i64* %19, align 8
  %49 = load i64, i64* %12, align 8
  %50 = mul i64 %48, %49
  %51 = load i64, i64* %16, align 8
  %52 = add i64 %50, %51
  %53 = getelementptr inbounds float, float* %47, i64 %52
  %54 = load float, float* %53, align 4
  %55 = insertelement <8 x float> undef, float %54, i32 0
  %56 = shufflevector <8 x float> %55, <8 x float> undef, <8 x i32> zeroinitializer
  store <8 x float> %56, <8 x float>* %20, align 32
  %57 = load <8 x float>, <8 x float>* %18, align 32
  %58 = load <8 x float>, <8 x float>* %20, align 32
  %59 = fmul reassoc nsz arcp contract <8 x float> %57, %58
  %60 = load i64, i64* %17, align 8
  %61 = getelementptr inbounds [4 x [3 x <8 x float>]], [4 x [3 x <8 x float>]]* %15, i64 0, i64 %60
  %62 = load i64, i64* %19, align 8
  %63 = getelementptr inbounds [3 x <8 x float>], [3 x <8 x float>]* %61, i64 0, i64 %62
  %64 = load <8 x float>, <8 x float>* %63, align 32
  %65 = fadd reassoc nsz arcp contract <8 x float> %64, %59
  store <8 x float> %65, <8 x float>* %63, align 32
  br label %66

; <label>:66:                                     ; preds = %46
  %67 = load i64, i64* %19, align 8
  %68 = add i64 %67, 1
  store i64 %68, i64* %19, align 8
  br label %43

; <label>:69:                                     ; preds = %43
  br label %70

; <label>:70:                                     ; preds = %69
  %71 = load i64, i64* %17, align 8
  %72 = add i64 %71, 1
  store i64 %72, i64* %17, align 8
  br label %30

; <label>:73:                                     ; preds = %30
  br label %74

; <label>:74:                                     ; preds = %73
  %75 = load i64, i64* %16, align 8
  %76 = add i64 %75, 1
  store i64 %76, i64* %16, align 8
  br label %25

; <label>:77:                                     ; preds = %25
  store i64 0, i64* %21, align 8
  br label %78

; <label>:78:                                     ; preds = %103, %77
  %79 = load i64, i64* %21, align 8
  %80 = icmp ult i64 %79, 3
  br i1 %80, label %81, label %106

; <label>:81:                                     ; preds = %78
  store i64 0, i64* %22, align 8
  br label %82

; <label>:82:                                     ; preds = %99, %81
  %83 = load i64, i64* %22, align 8
  %84 = icmp ult i64 %83, 4
  br i1 %84, label %85, label %102

; <label>:85:                                     ; preds = %82
  %86 = load float*, float** %13, align 8
  %87 = load i64, i64* %21, align 8
  %88 = load i64, i64* %14, align 8
  %89 = mul i64 %87, %88
  %90 = load i64, i64* %22, align 8
  %91 = mul i64 %90, 8
  %92 = add i64 %89, %91
  %93 = getelementptr inbounds float, float* %86, i64 %92
  %94 = load i64, i64* %22, align 8
  %95 = getelementptr inbounds [4 x [3 x <8 x float>]], [4 x [3 x <8 x float>]]* %15, i64 0, i64 %94
  %96 = load i64, i64* %21, align 8
  %97 = getelementptr inbounds [3 x <8 x float>], [3 x <8 x float>]* %95, i64 0, i64 %96
  %98 = load <8 x float>, <8 x float>* %97, align 32
  store <8 x float> %98, <8 x float>* %23, align 32
  call void @_Z10AdduFloat8PfDv8_f(float* %93, <8 x float>* byval align 32 %23)
  br label %99

; <label>:99:                                     ; preds = %85
  %100 = load i64, i64* %22, align 8
  %101 = add i64 %100, 1
  store i64 %101, i64* %22, align 8
  br label %82

; <label>:102:                                    ; preds = %82
  br label %103

; <label>:103:                                    ; preds = %102
  %104 = load i64, i64* %21, align 8
  %105 = add i64 %104, 1
  store i64 %105, i64* %21, align 8
  br label %78

; <label>:106:                                    ; preds = %78
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local <8 x float> @_Z11LoaduFloat8PKf(float*) #9 comdat {
  %2 = alloca float*, align 8
  %3 = alloca <8 x float>, align 32
  store float* %0, float** %2, align 8
  %4 = bitcast <8 x float>* %3 to i8*
  %5 = load float*, float** %2, align 8
  %6 = bitcast float* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %4, i8* align 4 %6, i64 32, i1 false)
  %7 = load <8 x float>, <8 x float>* %3, align 32
  ret <8 x float> %7
}

; Function Attrs: noinline optnone uwtable
define linkonce_odr dso_local void @_Z10AdduFloat8PfDv8_f(float*, <8 x float>* byval align 32) #8 comdat {
  %3 = alloca float*, align 8
  %4 = alloca <8 x float>, align 32
  %5 = alloca <8 x float>, align 32
  %6 = load <8 x float>, <8 x float>* %1, align 32
  store float* %0, float** %3, align 8
  store <8 x float> %6, <8 x float>* %4, align 32
  %7 = load float*, float** %3, align 8
  %8 = load float*, float** %3, align 8
  %9 = call reassoc nsz arcp <8 x float> @_Z11LoaduFloat8PKf(float* %8)
  %10 = load <8 x float>, <8 x float>* %4, align 32
  %11 = fadd reassoc nsz arcp contract <8 x float> %9, %10
  store <8 x float> %11, <8 x float>* %5, align 32
  call void @_Z12StoreuFloat8PfDv8_f(float* %7, <8 x float>* byval align 32 %5)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_Z12StoreuFloat8PfDv8_f(float*, <8 x float>* byval align 32) #0 comdat {
  %3 = alloca float*, align 8
  %4 = alloca <8 x float>, align 32
  %5 = load <8 x float>, <8 x float>* %1, align 32
  store float* %0, float** %3, align 8
  store <8 x float> %5, <8 x float>* %4, align 32
  %6 = load float*, float** %3, align 8
  %7 = bitcast float* %6 to i8*
  %8 = bitcast <8 x float>* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 32 %8, i64 32, i1 false)
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_matmul_i8(i8*, i8*, i8*, i64*, i64*, i64*, i32, i32, i32, i32, i32, i32) #2 {
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64*, align 8
  %17 = alloca i64*, align 8
  %18 = alloca i64*, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i32, align 4
  %28 = alloca i64, align 8
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  store i8* %0, i8** %13, align 8
  store i8* %1, i8** %14, align 8
  store i8* %2, i8** %15, align 8
  store i64* %3, i64** %16, align 8
  store i64* %4, i64** %17, align 8
  store i64* %5, i64** %18, align 8
  store i32 %6, i32* %19, align 4
  store i32 %7, i32* %20, align 4
  store i32 %8, i32* %21, align 4
  store i32 %9, i32* %22, align 4
  store i32 %10, i32* %23, align 4
  store i32 %11, i32* %24, align 4
  store i64 0, i64* %25, align 8
  br label %32

; <label>:32:                                     ; preds = %100, %12
  %33 = load i64, i64* %25, align 8
  %34 = load i64*, i64** %16, align 8
  %35 = getelementptr inbounds i64, i64* %34, i64 0
  %36 = load i64, i64* %35, align 8
  %37 = icmp ult i64 %33, %36
  br i1 %37, label %38, label %103

; <label>:38:                                     ; preds = %32
  store i64 0, i64* %26, align 8
  br label %39

; <label>:39:                                     ; preds = %96, %38
  %40 = load i64, i64* %26, align 8
  %41 = load i64*, i64** %16, align 8
  %42 = getelementptr inbounds i64, i64* %41, i64 1
  %43 = load i64, i64* %42, align 8
  %44 = icmp ult i64 %40, %43
  br i1 %44, label %45, label %99

; <label>:45:                                     ; preds = %39
  store i32 0, i32* %27, align 4
  store i64 0, i64* %28, align 8
  br label %46

; <label>:46:                                     ; preds = %78, %45
  %47 = load i64, i64* %28, align 8
  %48 = load i64*, i64** %17, align 8
  %49 = getelementptr inbounds i64, i64* %48, i64 1
  %50 = load i64, i64* %49, align 8
  %51 = icmp ult i64 %47, %50
  br i1 %51, label %52, label %81

; <label>:52:                                     ; preds = %46
  %53 = load i8*, i8** %14, align 8
  %54 = load i64*, i64** %17, align 8
  %55 = load i64, i64* %25, align 8
  %56 = load i64, i64* %28, align 8
  %57 = call i64 @_Z12libjit_getXYPKmmm(i64* %54, i64 %55, i64 %56)
  %58 = getelementptr inbounds i8, i8* %53, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = sext i8 %59 to i32
  %61 = load i32, i32* %20, align 4
  %62 = sub nsw i32 %60, %61
  store i32 %62, i32* %29, align 4
  %63 = load i8*, i8** %15, align 8
  %64 = load i64*, i64** %18, align 8
  %65 = load i64, i64* %28, align 8
  %66 = load i64, i64* %26, align 8
  %67 = call i64 @_Z12libjit_getXYPKmmm(i64* %64, i64 %65, i64 %66)
  %68 = getelementptr inbounds i8, i8* %63, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = sext i8 %69 to i32
  %71 = load i32, i32* %21, align 4
  %72 = sub nsw i32 %70, %71
  store i32 %72, i32* %30, align 4
  %73 = load i32, i32* %29, align 4
  %74 = load i32, i32* %30, align 4
  %75 = mul nsw i32 %73, %74
  %76 = load i32, i32* %27, align 4
  %77 = add nsw i32 %76, %75
  store i32 %77, i32* %27, align 4
  br label %78

; <label>:78:                                     ; preds = %52
  %79 = load i64, i64* %28, align 8
  %80 = add i64 %79, 1
  store i64 %80, i64* %28, align 8
  br label %46

; <label>:81:                                     ; preds = %46
  %82 = load i32, i32* %27, align 4
  %83 = load i32, i32* %22, align 4
  %84 = load i32, i32* %23, align 4
  %85 = load i32, i32* %24, align 4
  %86 = load i32, i32* %19, align 4
  %87 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %82, i32 %83, i32 %84, i32 %85, i32 %86)
  store i32 %87, i32* %31, align 4
  %88 = load i32, i32* %31, align 4
  %89 = call signext i8 @_Z11libjit_clipi(i32 %88)
  %90 = load i8*, i8** %13, align 8
  %91 = load i64*, i64** %16, align 8
  %92 = load i64, i64* %25, align 8
  %93 = load i64, i64* %26, align 8
  %94 = call i64 @_Z12libjit_getXYPKmmm(i64* %91, i64 %92, i64 %93)
  %95 = getelementptr inbounds i8, i8* %90, i64 %94
  store i8 %89, i8* %95, align 1
  br label %96

; <label>:96:                                     ; preds = %81
  %97 = load i64, i64* %26, align 8
  %98 = add i64 %97, 1
  store i64 %98, i64* %26, align 8
  br label %39

; <label>:99:                                     ; preds = %39
  br label %100

; <label>:100:                                    ; preds = %99
  %101 = load i64, i64* %25, align 8
  %102 = add i64 %101, 1
  store i64 %102, i64* %25, align 8
  br label %32

; <label>:103:                                    ; preds = %32
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_rowwise_quantized_fc_i8_i32(i8*, i8*, i8*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i64*, i64*, i64*, i64*, i64, i32, i32, i32) #2 {
  %20 = alloca i8*, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i32*, align 8
  %24 = alloca i32*, align 8
  %25 = alloca i32*, align 8
  %26 = alloca i32*, align 8
  %27 = alloca i32*, align 8
  %28 = alloca i32*, align 8
  %29 = alloca i32*, align 8
  %30 = alloca i32*, align 8
  %31 = alloca i64*, align 8
  %32 = alloca i64*, align 8
  %33 = alloca i64*, align 8
  %34 = alloca i64*, align 8
  %35 = alloca i64, align 8
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  store i8* %0, i8** %20, align 8
  store i8* %1, i8** %21, align 8
  store i8* %2, i8** %22, align 8
  store i32* %3, i32** %23, align 8
  store i32* %4, i32** %24, align 8
  store i32* %5, i32** %25, align 8
  store i32* %6, i32** %26, align 8
  store i32* %7, i32** %27, align 8
  store i32* %8, i32** %28, align 8
  store i32* %9, i32** %29, align 8
  store i32* %10, i32** %30, align 8
  store i64* %11, i64** %31, align 8
  store i64* %12, i64** %32, align 8
  store i64* %13, i64** %33, align 8
  store i64* %14, i64** %34, align 8
  store i64 %15, i64* %35, align 8
  store i32 %16, i32* %36, align 4
  store i32 %17, i32* %37, align 4
  store i32 %18, i32* %38, align 4
  %39 = load i8*, i8** %20, align 8
  %40 = load i8*, i8** %21, align 8
  %41 = load i8*, i8** %22, align 8
  %42 = load i32*, i32** %23, align 8
  %43 = load i32*, i32** %24, align 8
  %44 = load i32*, i32** %25, align 8
  %45 = load i32*, i32** %26, align 8
  %46 = load i32*, i32** %27, align 8
  %47 = load i32*, i32** %28, align 8
  %48 = load i32*, i32** %29, align 8
  %49 = load i32*, i32** %30, align 8
  %50 = load i64*, i64** %31, align 8
  %51 = load i64*, i64** %32, align 8
  %52 = load i64*, i64** %33, align 8
  %53 = load i64*, i64** %34, align 8
  %54 = load i64, i64* %35, align 8
  %55 = load i32, i32* %36, align 4
  %56 = load i32, i32* %37, align 4
  %57 = load i32, i32* %38, align 4
  call void @_ZN12_GLOBAL__N_135libjit_rowwise_quantized_fc_genericIaiEEvPT_PKS1_S4_PKT0_PKiS9_S9_S9_S9_S9_S9_PKmSB_SB_SB_miii(i8* %39, i8* %40, i8* %41, i32* %42, i32* %43, i32* %44, i32* %45, i32* %46, i32* %47, i32* %48, i32* %49, i64* %50, i64* %51, i64* %52, i64* %53, i64 %54, i32 %55, i32 %56, i32 %57)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_135libjit_rowwise_quantized_fc_genericIaiEEvPT_PKS1_S4_PKT0_PKiS9_S9_S9_S9_S9_S9_PKmSB_SB_SB_miii(i8*, i8*, i8*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i64*, i64*, i64*, i64*, i64, i32, i32, i32) #0 {
  %20 = alloca i8*, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i32*, align 8
  %24 = alloca i32*, align 8
  %25 = alloca i32*, align 8
  %26 = alloca i32*, align 8
  %27 = alloca i32*, align 8
  %28 = alloca i32*, align 8
  %29 = alloca i32*, align 8
  %30 = alloca i32*, align 8
  %31 = alloca i64*, align 8
  %32 = alloca i64*, align 8
  %33 = alloca i64*, align 8
  %34 = alloca i64*, align 8
  %35 = alloca i64, align 8
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i64, align 8
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  %43 = alloca i64, align 8
  %44 = alloca i32, align 4
  %45 = alloca i64, align 8
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  store i8* %0, i8** %20, align 8
  store i8* %1, i8** %21, align 8
  store i8* %2, i8** %22, align 8
  store i32* %3, i32** %23, align 8
  store i32* %4, i32** %24, align 8
  store i32* %5, i32** %25, align 8
  store i32* %6, i32** %26, align 8
  store i32* %7, i32** %27, align 8
  store i32* %8, i32** %28, align 8
  store i32* %9, i32** %29, align 8
  store i32* %10, i32** %30, align 8
  store i64* %11, i64** %31, align 8
  store i64* %12, i64** %32, align 8
  store i64* %13, i64** %33, align 8
  store i64* %14, i64** %34, align 8
  store i64 %15, i64* %35, align 8
  store i32 %16, i32* %36, align 4
  store i32 %17, i32* %37, align 4
  store i32 %18, i32* %38, align 4
  %50 = load i64*, i64** %32, align 8
  %51 = getelementptr inbounds i64, i64* %50, i64 1
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %39, align 8
  %53 = load i64*, i64** %31, align 8
  %54 = getelementptr inbounds i64, i64* %53, i64 0
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %40, align 8
  %56 = load i64*, i64** %31, align 8
  %57 = getelementptr inbounds i64, i64* %56, i64 1
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %41, align 8
  store i64 0, i64* %42, align 8
  br label %59

; <label>:59:                                     ; preds = %155, %19
  %60 = load i64, i64* %42, align 8
  %61 = load i64, i64* %40, align 8
  %62 = icmp ult i64 %60, %61
  br i1 %62, label %63, label %158

; <label>:63:                                     ; preds = %59
  store i64 0, i64* %43, align 8
  br label %64

; <label>:64:                                     ; preds = %151, %63
  %65 = load i64, i64* %43, align 8
  %66 = load i64, i64* %41, align 8
  %67 = icmp ult i64 %65, %66
  br i1 %67, label %68, label %154

; <label>:68:                                     ; preds = %64
  store i32 0, i32* %44, align 4
  store i64 0, i64* %45, align 8
  br label %69

; <label>:69:                                     ; preds = %102, %68
  %70 = load i64, i64* %45, align 8
  %71 = load i64, i64* %39, align 8
  %72 = icmp ult i64 %70, %71
  br i1 %72, label %73, label %105

; <label>:73:                                     ; preds = %69
  %74 = load i8*, i8** %22, align 8
  %75 = load i64*, i64** %33, align 8
  %76 = load i64, i64* %43, align 8
  %77 = load i64, i64* %45, align 8
  %78 = call i64 @_Z12libjit_getXYPKmmm(i64* %75, i64 %76, i64 %77)
  %79 = getelementptr inbounds i8, i8* %74, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = sext i8 %80 to i32
  store i32 %81, i32* %46, align 4
  %82 = load i8*, i8** %21, align 8
  %83 = load i64*, i64** %32, align 8
  %84 = load i64, i64* %42, align 8
  %85 = load i64, i64* %45, align 8
  %86 = call i64 @_Z12libjit_getXYPKmmm(i64* %83, i64 %84, i64 %85)
  %87 = getelementptr inbounds i8, i8* %82, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = sext i8 %88 to i32
  store i32 %89, i32* %47, align 4
  %90 = load i32, i32* %46, align 4
  %91 = load i32*, i32** %24, align 8
  %92 = load i64, i64* %43, align 8
  %93 = getelementptr inbounds i32, i32* %91, i64 %92
  %94 = load i32, i32* %93, align 4
  %95 = sub nsw i32 %90, %94
  %96 = load i32, i32* %47, align 4
  %97 = load i32, i32* %37, align 4
  %98 = sub nsw i32 %96, %97
  %99 = mul nsw i32 %95, %98
  %100 = load i32, i32* %44, align 4
  %101 = add nsw i32 %100, %99
  store i32 %101, i32* %44, align 4
  br label %102

; <label>:102:                                    ; preds = %73
  %103 = load i64, i64* %45, align 8
  %104 = add i64 %103, 1
  store i64 %104, i64* %45, align 8
  br label %69

; <label>:105:                                    ; preds = %69
  %106 = load i32*, i32** %23, align 8
  %107 = load i64, i64* %43, align 8
  %108 = getelementptr inbounds i32, i32* %106, i64 %107
  %109 = load i32, i32* %108, align 4
  %110 = load i32, i32* %38, align 4
  %111 = sub nsw i32 %109, %110
  %112 = load i32*, i32** %25, align 8
  %113 = load i64, i64* %43, align 8
  %114 = getelementptr inbounds i32, i32* %112, i64 %113
  %115 = load i32, i32* %114, align 4
  %116 = load i32*, i32** %26, align 8
  %117 = load i64, i64* %43, align 8
  %118 = getelementptr inbounds i32, i32* %116, i64 %117
  %119 = load i32, i32* %118, align 4
  %120 = load i32*, i32** %27, align 8
  %121 = load i64, i64* %43, align 8
  %122 = getelementptr inbounds i32, i32* %120, i64 %121
  %123 = load i32, i32* %122, align 4
  %124 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %111, i32 %115, i32 %119, i32 %123, i32 0)
  store i32 %124, i32* %48, align 4
  %125 = load i32, i32* %48, align 4
  %126 = load i32, i32* %44, align 4
  %127 = add nsw i32 %126, %125
  store i32 %127, i32* %44, align 4
  %128 = load i32, i32* %44, align 4
  %129 = load i32*, i32** %28, align 8
  %130 = load i64, i64* %43, align 8
  %131 = getelementptr inbounds i32, i32* %129, i64 %130
  %132 = load i32, i32* %131, align 4
  %133 = load i32*, i32** %29, align 8
  %134 = load i64, i64* %43, align 8
  %135 = getelementptr inbounds i32, i32* %133, i64 %134
  %136 = load i32, i32* %135, align 4
  %137 = load i32*, i32** %30, align 8
  %138 = load i64, i64* %43, align 8
  %139 = getelementptr inbounds i32, i32* %137, i64 %138
  %140 = load i32, i32* %139, align 4
  %141 = load i32, i32* %36, align 4
  %142 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %128, i32 %132, i32 %136, i32 %140, i32 %141)
  store i32 %142, i32* %49, align 4
  %143 = load i32, i32* %49, align 4
  %144 = call signext i8 @_Z11libjit_clipi(i32 %143)
  %145 = load i8*, i8** %20, align 8
  %146 = load i64*, i64** %31, align 8
  %147 = load i64, i64* %42, align 8
  %148 = load i64, i64* %43, align 8
  %149 = call i64 @_Z12libjit_getXYPKmmm(i64* %146, i64 %147, i64 %148)
  %150 = getelementptr inbounds i8, i8* %145, i64 %149
  store i8 %144, i8* %150, align 1
  br label %151

; <label>:151:                                    ; preds = %105
  %152 = load i64, i64* %43, align 8
  %153 = add i64 %152, 1
  store i64 %153, i64* %43, align 8
  br label %64

; <label>:154:                                    ; preds = %64
  br label %155

; <label>:155:                                    ; preds = %154
  %156 = load i64, i64* %42, align 8
  %157 = add i64 %156, 1
  store i64 %157, i64* %42, align 8
  br label %59

; <label>:158:                                    ; preds = %59
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @libjit_rowwise_quantized_fc_i8_i8(i8*, i8*, i8*, i8*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i64*, i64*, i64*, i64*, i64, i32, i32, i32) #2 {
  %20 = alloca i8*, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i8*, align 8
  %24 = alloca i32*, align 8
  %25 = alloca i32*, align 8
  %26 = alloca i32*, align 8
  %27 = alloca i32*, align 8
  %28 = alloca i32*, align 8
  %29 = alloca i32*, align 8
  %30 = alloca i32*, align 8
  %31 = alloca i64*, align 8
  %32 = alloca i64*, align 8
  %33 = alloca i64*, align 8
  %34 = alloca i64*, align 8
  %35 = alloca i64, align 8
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  store i8* %0, i8** %20, align 8
  store i8* %1, i8** %21, align 8
  store i8* %2, i8** %22, align 8
  store i8* %3, i8** %23, align 8
  store i32* %4, i32** %24, align 8
  store i32* %5, i32** %25, align 8
  store i32* %6, i32** %26, align 8
  store i32* %7, i32** %27, align 8
  store i32* %8, i32** %28, align 8
  store i32* %9, i32** %29, align 8
  store i32* %10, i32** %30, align 8
  store i64* %11, i64** %31, align 8
  store i64* %12, i64** %32, align 8
  store i64* %13, i64** %33, align 8
  store i64* %14, i64** %34, align 8
  store i64 %15, i64* %35, align 8
  store i32 %16, i32* %36, align 4
  store i32 %17, i32* %37, align 4
  store i32 %18, i32* %38, align 4
  %39 = load i8*, i8** %20, align 8
  %40 = load i8*, i8** %21, align 8
  %41 = load i8*, i8** %22, align 8
  %42 = load i8*, i8** %23, align 8
  %43 = load i32*, i32** %24, align 8
  %44 = load i32*, i32** %25, align 8
  %45 = load i32*, i32** %26, align 8
  %46 = load i32*, i32** %27, align 8
  %47 = load i32*, i32** %28, align 8
  %48 = load i32*, i32** %29, align 8
  %49 = load i32*, i32** %30, align 8
  %50 = load i64*, i64** %31, align 8
  %51 = load i64*, i64** %32, align 8
  %52 = load i64*, i64** %33, align 8
  %53 = load i64*, i64** %34, align 8
  %54 = load i64, i64* %35, align 8
  %55 = load i32, i32* %36, align 4
  %56 = load i32, i32* %37, align 4
  %57 = load i32, i32* %38, align 4
  call void @_ZN12_GLOBAL__N_135libjit_rowwise_quantized_fc_genericIaaEEvPT_PKS1_S4_PKT0_PKiS9_S9_S9_S9_S9_S9_PKmSB_SB_SB_miii(i8* %39, i8* %40, i8* %41, i8* %42, i32* %43, i32* %44, i32* %45, i32* %46, i32* %47, i32* %48, i32* %49, i64* %50, i64* %51, i64* %52, i64* %53, i64 %54, i32 %55, i32 %56, i32 %57)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ZN12_GLOBAL__N_135libjit_rowwise_quantized_fc_genericIaaEEvPT_PKS1_S4_PKT0_PKiS9_S9_S9_S9_S9_S9_PKmSB_SB_SB_miii(i8*, i8*, i8*, i8*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i64*, i64*, i64*, i64*, i64, i32, i32, i32) #0 {
  %20 = alloca i8*, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i8*, align 8
  %24 = alloca i32*, align 8
  %25 = alloca i32*, align 8
  %26 = alloca i32*, align 8
  %27 = alloca i32*, align 8
  %28 = alloca i32*, align 8
  %29 = alloca i32*, align 8
  %30 = alloca i32*, align 8
  %31 = alloca i64*, align 8
  %32 = alloca i64*, align 8
  %33 = alloca i64*, align 8
  %34 = alloca i64*, align 8
  %35 = alloca i64, align 8
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i64, align 8
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  %43 = alloca i64, align 8
  %44 = alloca i32, align 4
  %45 = alloca i64, align 8
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  store i8* %0, i8** %20, align 8
  store i8* %1, i8** %21, align 8
  store i8* %2, i8** %22, align 8
  store i8* %3, i8** %23, align 8
  store i32* %4, i32** %24, align 8
  store i32* %5, i32** %25, align 8
  store i32* %6, i32** %26, align 8
  store i32* %7, i32** %27, align 8
  store i32* %8, i32** %28, align 8
  store i32* %9, i32** %29, align 8
  store i32* %10, i32** %30, align 8
  store i64* %11, i64** %31, align 8
  store i64* %12, i64** %32, align 8
  store i64* %13, i64** %33, align 8
  store i64* %14, i64** %34, align 8
  store i64 %15, i64* %35, align 8
  store i32 %16, i32* %36, align 4
  store i32 %17, i32* %37, align 4
  store i32 %18, i32* %38, align 4
  %50 = load i64*, i64** %32, align 8
  %51 = getelementptr inbounds i64, i64* %50, i64 1
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %39, align 8
  %53 = load i64*, i64** %31, align 8
  %54 = getelementptr inbounds i64, i64* %53, i64 0
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %40, align 8
  %56 = load i64*, i64** %31, align 8
  %57 = getelementptr inbounds i64, i64* %56, i64 1
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %41, align 8
  store i64 0, i64* %42, align 8
  br label %59

; <label>:59:                                     ; preds = %156, %19
  %60 = load i64, i64* %42, align 8
  %61 = load i64, i64* %40, align 8
  %62 = icmp ult i64 %60, %61
  br i1 %62, label %63, label %159

; <label>:63:                                     ; preds = %59
  store i64 0, i64* %43, align 8
  br label %64

; <label>:64:                                     ; preds = %152, %63
  %65 = load i64, i64* %43, align 8
  %66 = load i64, i64* %41, align 8
  %67 = icmp ult i64 %65, %66
  br i1 %67, label %68, label %155

; <label>:68:                                     ; preds = %64
  store i32 0, i32* %44, align 4
  store i64 0, i64* %45, align 8
  br label %69

; <label>:69:                                     ; preds = %102, %68
  %70 = load i64, i64* %45, align 8
  %71 = load i64, i64* %39, align 8
  %72 = icmp ult i64 %70, %71
  br i1 %72, label %73, label %105

; <label>:73:                                     ; preds = %69
  %74 = load i8*, i8** %22, align 8
  %75 = load i64*, i64** %33, align 8
  %76 = load i64, i64* %43, align 8
  %77 = load i64, i64* %45, align 8
  %78 = call i64 @_Z12libjit_getXYPKmmm(i64* %75, i64 %76, i64 %77)
  %79 = getelementptr inbounds i8, i8* %74, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = sext i8 %80 to i32
  store i32 %81, i32* %46, align 4
  %82 = load i8*, i8** %21, align 8
  %83 = load i64*, i64** %32, align 8
  %84 = load i64, i64* %42, align 8
  %85 = load i64, i64* %45, align 8
  %86 = call i64 @_Z12libjit_getXYPKmmm(i64* %83, i64 %84, i64 %85)
  %87 = getelementptr inbounds i8, i8* %82, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = sext i8 %88 to i32
  store i32 %89, i32* %47, align 4
  %90 = load i32, i32* %46, align 4
  %91 = load i32*, i32** %24, align 8
  %92 = load i64, i64* %43, align 8
  %93 = getelementptr inbounds i32, i32* %91, i64 %92
  %94 = load i32, i32* %93, align 4
  %95 = sub nsw i32 %90, %94
  %96 = load i32, i32* %47, align 4
  %97 = load i32, i32* %37, align 4
  %98 = sub nsw i32 %96, %97
  %99 = mul nsw i32 %95, %98
  %100 = load i32, i32* %44, align 4
  %101 = add nsw i32 %100, %99
  store i32 %101, i32* %44, align 4
  br label %102

; <label>:102:                                    ; preds = %73
  %103 = load i64, i64* %45, align 8
  %104 = add i64 %103, 1
  store i64 %104, i64* %45, align 8
  br label %69

; <label>:105:                                    ; preds = %69
  %106 = load i8*, i8** %23, align 8
  %107 = load i64, i64* %43, align 8
  %108 = getelementptr inbounds i8, i8* %106, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = sext i8 %109 to i32
  %111 = load i32, i32* %38, align 4
  %112 = sub nsw i32 %110, %111
  %113 = load i32*, i32** %25, align 8
  %114 = load i64, i64* %43, align 8
  %115 = getelementptr inbounds i32, i32* %113, i64 %114
  %116 = load i32, i32* %115, align 4
  %117 = load i32*, i32** %26, align 8
  %118 = load i64, i64* %43, align 8
  %119 = getelementptr inbounds i32, i32* %117, i64 %118
  %120 = load i32, i32* %119, align 4
  %121 = load i32*, i32** %27, align 8
  %122 = load i64, i64* %43, align 8
  %123 = getelementptr inbounds i32, i32* %121, i64 %122
  %124 = load i32, i32* %123, align 4
  %125 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %112, i32 %116, i32 %120, i32 %124, i32 0)
  store i32 %125, i32* %48, align 4
  %126 = load i32, i32* %48, align 4
  %127 = load i32, i32* %44, align 4
  %128 = add nsw i32 %127, %126
  store i32 %128, i32* %44, align 4
  %129 = load i32, i32* %44, align 4
  %130 = load i32*, i32** %28, align 8
  %131 = load i64, i64* %43, align 8
  %132 = getelementptr inbounds i32, i32* %130, i64 %131
  %133 = load i32, i32* %132, align 4
  %134 = load i32*, i32** %29, align 8
  %135 = load i64, i64* %43, align 8
  %136 = getelementptr inbounds i32, i32* %134, i64 %135
  %137 = load i32, i32* %136, align 4
  %138 = load i32*, i32** %30, align 8
  %139 = load i64, i64* %43, align 8
  %140 = getelementptr inbounds i32, i32* %138, i64 %139
  %141 = load i32, i32* %140, align 4
  %142 = load i32, i32* %36, align 4
  %143 = call i32 @_Z18libjit_scale_i32i8iiiii(i32 %129, i32 %133, i32 %137, i32 %141, i32 %142)
  store i32 %143, i32* %49, align 4
  %144 = load i32, i32* %49, align 4
  %145 = call signext i8 @_Z11libjit_clipi(i32 %144)
  %146 = load i8*, i8** %20, align 8
  %147 = load i64*, i64** %31, align 8
  %148 = load i64, i64* %42, align 8
  %149 = load i64, i64* %43, align 8
  %150 = call i64 @_Z12libjit_getXYPKmmm(i64* %147, i64 %148, i64 %149)
  %151 = getelementptr inbounds i8, i8* %146, i64 %150
  store i8 %145, i8* %151, align 1
  br label %152

; <label>:152:                                    ; preds = %105
  %153 = load i64, i64* %43, align 8
  %154 = add i64 %153, 1
  store i64 %154, i64* %43, align 8
  br label %64

; <label>:155:                                    ; preds = %64
  br label %156

; <label>:156:                                    ; preds = %155
  %157 = load i64, i64* %42, align 8
  %158 = add i64 %157, 1
  store i64 %158, i64* %42, align 8
  br label %59

; <label>:159:                                    ; preds = %59
  ret void
}

define internal void @main(i8*, i8*, i8*, i64*) {
entry:
  %4 = ptrtoint i8* %2 to i64
  %5 = ptrtoint i8* %0 to i64
  %6 = ptrtoint i8* %1 to i64
  %7 = getelementptr i64, i64* %3, i64 13
  %8 = load i64, i64* %7
  %9 = add i64 %4, %8
  %10 = inttoptr i64 %9 to float*
  %11 = getelementptr i64, i64* %3, i64 12
  %12 = load i64, i64* %11
  %13 = add i64 %6, %12
  %14 = inttoptr i64 %13 to float*
  %15 = getelementptr i64, i64* %3, i64 5
  %16 = load i64, i64* %15
  %17 = add i64 %5, %16
  %18 = inttoptr i64 %17 to float*
  %19 = getelementptr i64, i64* %3, i64 0
  %20 = load i64, i64* %19
  %21 = add i64 %5, %20
  %22 = inttoptr i64 %21 to float*
  call void @libjit_convolution_f(float* %10, float* %14, float* %18, float* %22, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @0, i32 0, i32 0), i64* getelementptr inbounds ([4 x i64], [4 x i64]* @1, i32 0, i32 0), i64* getelementptr inbounds ([4 x i64], [4 x i64]* @2, i32 0, i32 0), i64* getelementptr inbounds ([1 x i64], [1 x i64]* @3, i32 0, i32 0), i64* getelementptr inbounds ([2 x i64], [2 x i64]* @4, i32 0, i32 0), i64* getelementptr inbounds ([2 x i64], [2 x i64]* @5, i32 0, i32 0), i64* getelementptr inbounds ([4 x i64], [4 x i64]* @6, i32 0, i32 0), i64 1, i32 1, i64 1)
  %23 = getelementptr i64, i64* %3, i64 13
  %24 = load i64, i64* %23
  %25 = add i64 %4, %24
  %26 = inttoptr i64 %25 to float*
  call void @libjit_stacked_kernel(float* %26)
  %27 = getelementptr i64, i64* %3, i64 14
  %28 = load i64, i64* %27
  %29 = add i64 %4, %28
  %30 = inttoptr i64 %29 to float*
  %31 = getelementptr i64, i64* %3, i64 13
  %32 = load i64, i64* %31
  %33 = add i64 %4, %32
  %34 = inttoptr i64 %33 to float*
  call void @libjit_max_pool_f(float* %34, float* %30, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @0, i32 0, i32 0), i64* getelementptr inbounds ([4 x i64], [4 x i64]* @7, i32 0, i32 0), i64* getelementptr inbounds ([2 x i64], [2 x i64]* @8, i32 0, i32 0), i64* getelementptr inbounds ([2 x i64], [2 x i64]* @8, i32 0, i32 0), i64* getelementptr inbounds ([4 x i64], [4 x i64]* @9, i32 0, i32 0))
  %35 = getelementptr i64, i64* %3, i64 15
  %36 = load i64, i64* %35
  %37 = add i64 %4, %36
  %38 = inttoptr i64 %37 to float*
  %39 = getelementptr i64, i64* %3, i64 14
  %40 = load i64, i64* %39
  %41 = add i64 %4, %40
  %42 = inttoptr i64 %41 to float*
  %43 = getelementptr i64, i64* %3, i64 6
  %44 = load i64, i64* %43
  %45 = add i64 %5, %44
  %46 = inttoptr i64 %45 to float*
  %47 = getelementptr i64, i64* %3, i64 1
  %48 = load i64, i64* %47
  %49 = add i64 %5, %48
  %50 = inttoptr i64 %49 to float*
  call void @libjit_convolution_f(float* %38, float* %42, float* %46, float* %50, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @10, i32 0, i32 0), i64* getelementptr inbounds ([4 x i64], [4 x i64]* @7, i32 0, i32 0), i64* getelementptr inbounds ([4 x i64], [4 x i64]* @11, i32 0, i32 0), i64* getelementptr inbounds ([1 x i64], [1 x i64]* @12, i32 0, i32 0), i64* getelementptr inbounds ([2 x i64], [2 x i64]* @4, i32 0, i32 0), i64* getelementptr inbounds ([2 x i64], [2 x i64]* @5, i32 0, i32 0), i64* getelementptr inbounds ([4 x i64], [4 x i64]* @9, i32 0, i32 0), i64 1, i32 8, i64 1)
  %51 = getelementptr i64, i64* %3, i64 15
  %52 = load i64, i64* %51
  %53 = add i64 %4, %52
  %54 = inttoptr i64 %53 to float*
  call void @libjit_stacked_kernel.1(float* %54)
  %55 = getelementptr i64, i64* %3, i64 16
  %56 = load i64, i64* %55
  %57 = add i64 %4, %56
  %58 = inttoptr i64 %57 to float*
  %59 = getelementptr i64, i64* %3, i64 15
  %60 = load i64, i64* %59
  %61 = add i64 %4, %60
  %62 = inttoptr i64 %61 to float*
  call void @libjit_max_pool_f(float* %62, float* %58, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @10, i32 0, i32 0), i64* getelementptr inbounds ([4 x i64], [4 x i64]* @13, i32 0, i32 0), i64* getelementptr inbounds ([2 x i64], [2 x i64]* @8, i32 0, i32 0), i64* getelementptr inbounds ([2 x i64], [2 x i64]* @8, i32 0, i32 0), i64* getelementptr inbounds ([4 x i64], [4 x i64]* @9, i32 0, i32 0))
  %63 = getelementptr i64, i64* %3, i64 18
  %64 = load i64, i64* %63
  %65 = add i64 %4, %64
  %66 = inttoptr i64 %65 to float*
  %67 = getelementptr i64, i64* %3, i64 17
  %68 = load i64, i64* %67
  %69 = add i64 %4, %68
  %70 = inttoptr i64 %69 to float*
  %71 = getelementptr i64, i64* %3, i64 9
  %72 = load i64, i64* %71
  %73 = add i64 %5, %72
  %74 = inttoptr i64 %73 to float*
  call void @libjit_matmul_f(float* %66, float* %70, float* %74, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @14, i32 0, i32 0), i64* getelementptr inbounds ([2 x i64], [2 x i64]* @15, i32 0, i32 0), i64* getelementptr inbounds ([2 x i64], [2 x i64]* @16, i32 0, i32 0))
  %75 = getelementptr i64, i64* %3, i64 18
  %76 = load i64, i64* %75
  %77 = add i64 %4, %76
  %78 = inttoptr i64 %77 to float*
  %79 = getelementptr i64, i64* %3, i64 2
  %80 = load i64, i64* %79
  %81 = add i64 %5, %80
  %82 = inttoptr i64 %81 to float*
  call void @libjit_stacked_kernel.2(float* %78, float* %82)
  %83 = getelementptr i64, i64* %3, i64 18
  %84 = load i64, i64* %83
  %85 = add i64 %4, %84
  %86 = inttoptr i64 %85 to float*
  call void @libjit_stacked_kernel.3(float* %86)
  %87 = getelementptr i64, i64* %3, i64 19
  %88 = load i64, i64* %87
  %89 = add i64 %4, %88
  %90 = inttoptr i64 %89 to float*
  %91 = getelementptr i64, i64* %3, i64 18
  %92 = load i64, i64* %91
  %93 = add i64 %4, %92
  %94 = inttoptr i64 %93 to float*
  %95 = getelementptr i64, i64* %3, i64 7
  %96 = load i64, i64* %95
  %97 = add i64 %5, %96
  %98 = inttoptr i64 %97 to float*
  call void @libjit_matmul_f(float* %90, float* %94, float* %98, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @17, i32 0, i32 0), i64* getelementptr inbounds ([2 x i64], [2 x i64]* @14, i32 0, i32 0), i64* getelementptr inbounds ([2 x i64], [2 x i64]* @18, i32 0, i32 0))
  %99 = getelementptr i64, i64* %3, i64 19
  %100 = load i64, i64* %99
  %101 = add i64 %4, %100
  %102 = inttoptr i64 %101 to float*
  %103 = getelementptr i64, i64* %3, i64 3
  %104 = load i64, i64* %103
  %105 = add i64 %5, %104
  %106 = inttoptr i64 %105 to float*
  call void @libjit_stacked_kernel.4(float* %102, float* %106)
  %107 = getelementptr i64, i64* %3, i64 19
  %108 = load i64, i64* %107
  %109 = add i64 %4, %108
  %110 = inttoptr i64 %109 to float*
  call void @libjit_stacked_kernel.5(float* %110)
  %111 = getelementptr i64, i64* %3, i64 11
  %112 = load i64, i64* %111
  %113 = add i64 %6, %112
  %114 = inttoptr i64 %113 to float*
  %115 = getelementptr i64, i64* %3, i64 19
  %116 = load i64, i64* %115
  %117 = add i64 %4, %116
  %118 = inttoptr i64 %117 to float*
  %119 = getelementptr i64, i64* %3, i64 8
  %120 = load i64, i64* %119
  %121 = add i64 %5, %120
  %122 = inttoptr i64 %121 to float*
  call void @libjit_matmul_f(float* %114, float* %118, float* %122, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @19, i32 0, i32 0), i64* getelementptr inbounds ([2 x i64], [2 x i64]* @17, i32 0, i32 0), i64* getelementptr inbounds ([2 x i64], [2 x i64]* @20, i32 0, i32 0))
  %123 = getelementptr i64, i64* %3, i64 11
  %124 = load i64, i64* %123
  %125 = add i64 %6, %124
  %126 = inttoptr i64 %125 to float*
  %127 = getelementptr i64, i64* %3, i64 4
  %128 = load i64, i64* %127
  %129 = add i64 %5, %128
  %130 = inttoptr i64 %129 to float*
  call void @libjit_stacked_kernel.6(float* %126, float* %130)
  ret void
}

define internal void @libjit_stacked_kernel(float* noalias) {
entry:
  br label %loop

loop:                                             ; preds = %loop, %entry
  %1 = phi i64 [ 0, %entry ], [ %nextvar, %loop ]
  %2 = call float @libjit_element_maxsplat_kernel_f(i64 %1, float 0.000000e+00, float* %0, float* null)
  %buffer.element.addr = getelementptr float, float* %0, i64 %1
  store float %2, float* %buffer.element.addr
  %nextvar = add nuw nsw i64 %1, 1
  %loopcond = icmp ult i64 %nextvar, 4704
  br i1 %loopcond, label %loop, label %afterloop, !llvm.loop !4

afterloop:                                        ; preds = %loop
  ret void
}

define internal void @libjit_stacked_kernel.1(float* noalias) {
entry:
  br label %loop

loop:                                             ; preds = %loop, %entry
  %1 = phi i64 [ 0, %entry ], [ %nextvar, %loop ]
  %2 = call float @libjit_element_maxsplat_kernel_f(i64 %1, float 0.000000e+00, float* %0, float* null)
  %buffer.element.addr = getelementptr float, float* %0, i64 %1
  store float %2, float* %buffer.element.addr
  %nextvar = add nuw nsw i64 %1, 1
  %loopcond = icmp ult i64 %nextvar, 1600
  br i1 %loopcond, label %loop, label %afterloop, !llvm.loop !6

afterloop:                                        ; preds = %loop
  ret void
}

define internal void @libjit_stacked_kernel.2(float* noalias, float* noalias) {
entry:
  br label %loop

loop:                                             ; preds = %loop, %entry
  %2 = phi i64 [ 0, %entry ], [ %nextvar, %loop ]
  %3 = call float @libjit_element_add_kernel_f(i64 %2, float* %0, float* %1, float* null)
  %buffer.element.addr = getelementptr float, float* %0, i64 %2
  store float %3, float* %buffer.element.addr
  %nextvar = add nuw nsw i64 %2, 1
  %loopcond = icmp ult i64 %nextvar, 120
  br i1 %loopcond, label %loop, label %afterloop, !llvm.loop !7

afterloop:                                        ; preds = %loop
  ret void
}

define internal void @libjit_stacked_kernel.3(float* noalias) {
entry:
  br label %loop

loop:                                             ; preds = %loop, %entry
  %1 = phi i64 [ 0, %entry ], [ %nextvar, %loop ]
  %2 = call float @libjit_element_maxsplat_kernel_f(i64 %1, float 0.000000e+00, float* %0, float* null)
  %buffer.element.addr = getelementptr float, float* %0, i64 %1
  store float %2, float* %buffer.element.addr
  %nextvar = add nuw nsw i64 %1, 1
  %loopcond = icmp ult i64 %nextvar, 120
  br i1 %loopcond, label %loop, label %afterloop, !llvm.loop !8

afterloop:                                        ; preds = %loop
  ret void
}

define internal void @libjit_stacked_kernel.4(float* noalias, float* noalias) {
entry:
  br label %loop

loop:                                             ; preds = %loop, %entry
  %2 = phi i64 [ 0, %entry ], [ %nextvar, %loop ]
  %3 = call float @libjit_element_add_kernel_f(i64 %2, float* %0, float* %1, float* null)
  %buffer.element.addr = getelementptr float, float* %0, i64 %2
  store float %3, float* %buffer.element.addr
  %nextvar = add nuw nsw i64 %2, 1
  %loopcond = icmp ult i64 %nextvar, 84
  br i1 %loopcond, label %loop, label %afterloop, !llvm.loop !9

afterloop:                                        ; preds = %loop
  ret void
}

define internal void @libjit_stacked_kernel.5(float* noalias) {
entry:
  br label %loop

loop:                                             ; preds = %loop, %entry
  %1 = phi i64 [ 0, %entry ], [ %nextvar, %loop ]
  %2 = call float @libjit_element_maxsplat_kernel_f(i64 %1, float 0.000000e+00, float* %0, float* null)
  %buffer.element.addr = getelementptr float, float* %0, i64 %1
  store float %2, float* %buffer.element.addr
  %nextvar = add nuw nsw i64 %1, 1
  %loopcond = icmp ult i64 %nextvar, 84
  br i1 %loopcond, label %loop, label %afterloop, !llvm.loop !10

afterloop:                                        ; preds = %loop
  ret void
}

define internal void @libjit_stacked_kernel.6(float* noalias, float* noalias) {
entry:
  br label %loop

loop:                                             ; preds = %loop, %entry
  %2 = phi i64 [ 0, %entry ], [ %nextvar, %loop ]
  %3 = call float @libjit_element_add_kernel_f(i64 %2, float* %0, float* %1, float* null)
  %buffer.element.addr = getelementptr float, float* %0, i64 %2
  store float %3, float* %buffer.element.addr
  %nextvar = add nuw nsw i64 %2, 1
  %loopcond = icmp ult i64 %nextvar, 10
  br i1 %loopcond, label %loop, label %afterloop, !llvm.loop !11

afterloop:                                        ; preds = %loop
  ret void
}

define void @LeNet5(i8*, i8*, i8*) {
entry:
  call void @main(i8* %0, i8* %1, i8* %2, i64* getelementptr inbounds ([20 x i64], [20 x i64]* @offsetsArray, i32 0, i32 0))
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { noinline optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #8 = { noinline optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #9 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind }

!llvm.ident = !{!0, !0, !0}
!llvm.module.flags = !{!1, !2, !3}

!0 = !{!"clang version 8.0.0-3~ubuntu18.04.2 (tags/RELEASE_800/final)"}
!1 = !{i32 2, !"Dwarf Version", i32 4}
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.vectorize.enable", i1 true}
!6 = distinct !{!6, !5}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !5}
!9 = distinct !{!9, !5}
!10 = distinct !{!10, !5}
!11 = distinct !{!11, !5}
LLVM module after optimizations:
; ModuleID = 'libjit.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #0

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

; Function Attrs: alwaysinline nounwind
define void @LeNet5(i8*, i8*, i8*) local_unnamed_addr #2 {
entry:
  %3 = ptrtoint i8* %2 to i64
  %4 = ptrtoint i8* %0 to i64
  %5 = ptrtoint i8* %1 to i64
  %6 = bitcast i8* %2 to float*
  %7 = bitcast i8* %1 to float*
  %8 = add i64 %4, 1088
  %9 = inttoptr i64 %8 to float*
  %10 = bitcast i8* %0 to float*
  tail call fastcc void @libjit_convolution_f_0_specialized(float* %6, float* %7, float* %9, float* %10) #1
  tail call fastcc void @libjit_stacked_kernel_1_specialized(float* %6) #1
  %11 = add i64 %3, 18816
  %12 = inttoptr i64 %11 to float*
  tail call fastcc void @libjit_max_pool_f_2_specialized(float* %6, float* %12) #1
  %13 = add i64 %4, 1728
  %14 = inttoptr i64 %13 to float*
  %15 = add i64 %4, 64
  %16 = inttoptr i64 %15 to float*
  tail call fastcc void @libjit_convolution_f_3_specialized(float* %6, float* %12, float* %14, float* %16) #1
  tail call fastcc void @libjit_stacked_kernel.1_4_specialized(float* %6) #1
  %17 = add i64 %3, 6400
  %18 = inttoptr i64 %17 to float*
  tail call fastcc void @libjit_max_pool_f_5_specialized(float* %6, float* %18) #1
  %19 = add i64 %4, 55040
  %20 = inttoptr i64 %19 to float*
  tail call fastcc void @libjit_matmul_f_6_specialized(float* %6, float* %18, float* %20) #1
  %21 = add i64 %4, 128
  %22 = inttoptr i64 %21 to float*
  tail call fastcc void @libjit_stacked_kernel.2_7_specialized(float* %6, float* %22) #1
  tail call fastcc void @libjit_stacked_kernel.3_8_specialized(float* %6) #1
  %23 = add i64 %3, 512
  %24 = inttoptr i64 %23 to float*
  %25 = add i64 %4, 11328
  %26 = inttoptr i64 %25 to float*
  tail call fastcc void @libjit_matmul_f_9_specialized(float* %24, float* %6, float* %26) #1
  %27 = add i64 %4, 640
  %28 = inttoptr i64 %27 to float*
  tail call fastcc void @libjit_stacked_kernel.4_10_specialized(float* %24, float* %28) #1
  tail call fastcc void @libjit_stacked_kernel.5_11_specialized(float* %24) #1
  %29 = add i64 %5, 3136
  %30 = inttoptr i64 %29 to float*
  %31 = add i64 %4, 51648
  %32 = inttoptr i64 %31 to float*
  tail call fastcc void @libjit_matmul_f_12_specialized(float* %30, float* %24, float* %32) #1
  %33 = add i64 %4, 1024
  %34 = inttoptr i64 %33 to float*
  tail call fastcc void @libjit_stacked_kernel.6_13_specialized(float* %30, float* %34) #1
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @libjit_convolution_f_0_specialized(float* nocapture, float* nocapture readonly, float* nocapture readonly, float* nocapture readonly) unnamed_addr #3 {
.preheader1.i.preheader:
  %4 = bitcast float* %3 to i32*
  %5 = getelementptr inbounds float, float* %3, i64 1
  %6 = bitcast float* %5 to i32*
  %7 = getelementptr inbounds float, float* %3, i64 2
  %8 = bitcast float* %7 to i32*
  %9 = getelementptr inbounds float, float* %3, i64 3
  %10 = bitcast float* %9 to i32*
  %11 = getelementptr inbounds float, float* %3, i64 4
  %12 = bitcast float* %11 to i32*
  %13 = getelementptr inbounds float, float* %3, i64 5
  %14 = bitcast float* %13 to i32*
  br label %.preheader.i.preheader

.preheader.i.preheader:                           ; preds = %.preheader1.i.preheader, %._crit_edge6.i
  %.027.i = phi i64 [ %68, %._crit_edge6.i ], [ 0, %.preheader1.i.preheader ]
  %15 = mul nuw nsw i64 %.027.i, 28
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %._crit_edge.i, %.preheader.i.preheader
  %.014.i = phi i64 [ 0, %.preheader.i.preheader ], [ %67, %._crit_edge.i ]
  %16 = add nuw nsw i64 %.014.i, %15
  %17 = load i32, i32* %4, align 4
  %18 = mul nuw nsw i64 %16, 6
  %19 = getelementptr inbounds float, float* %0, i64 %18
  %20 = bitcast float* %19 to i32*
  store i32 %17, i32* %20, align 4
  %21 = load i32, i32* %6, align 4
  %22 = or i64 %18, 1
  %23 = getelementptr inbounds float, float* %0, i64 %22
  %24 = bitcast float* %23 to i32*
  store i32 %21, i32* %24, align 4
  %25 = load i32, i32* %8, align 4
  %26 = or i64 %18, 2
  %27 = getelementptr inbounds float, float* %0, i64 %26
  %28 = bitcast float* %27 to i32*
  store i32 %25, i32* %28, align 4
  %29 = load i32, i32* %10, align 4
  %30 = or i64 %18, 3
  %31 = getelementptr inbounds float, float* %0, i64 %30
  %32 = bitcast float* %31 to i32*
  store i32 %29, i32* %32, align 4
  %33 = load i32, i32* %12, align 4
  %34 = add nuw nsw i64 %18, 4
  %35 = getelementptr inbounds float, float* %0, i64 %34
  %36 = bitcast float* %35 to i32*
  store i32 %33, i32* %36, align 4
  %37 = load i32, i32* %14, align 4
  %38 = add nuw nsw i64 %18, 5
  %39 = getelementptr inbounds float, float* %0, i64 %38
  %40 = bitcast float* %39 to i32*
  store i32 %37, i32* %40, align 4
  %41 = or i64 %.014.i, 1
  %42 = add nuw nsw i64 %41, %15
  %43 = load i32, i32* %4, align 4
  %44 = mul nuw nsw i64 %42, 6
  %45 = getelementptr inbounds float, float* %0, i64 %44
  %46 = bitcast float* %45 to i32*
  store i32 %43, i32* %46, align 4
  %47 = load i32, i32* %6, align 4
  %48 = or i64 %44, 1
  %49 = getelementptr inbounds float, float* %0, i64 %48
  %50 = bitcast float* %49 to i32*
  store i32 %47, i32* %50, align 4
  %51 = load i32, i32* %8, align 4
  %52 = add nuw nsw i64 %44, 2
  %53 = getelementptr inbounds float, float* %0, i64 %52
  %54 = bitcast float* %53 to i32*
  store i32 %51, i32* %54, align 4
  %55 = load i32, i32* %10, align 4
  %56 = add nuw nsw i64 %44, 3
  %57 = getelementptr inbounds float, float* %0, i64 %56
  %58 = bitcast float* %57 to i32*
  store i32 %55, i32* %58, align 4
  %59 = load i32, i32* %12, align 4
  %60 = add nuw nsw i64 %44, 4
  %61 = getelementptr inbounds float, float* %0, i64 %60
  %62 = bitcast float* %61 to i32*
  store i32 %59, i32* %62, align 4
  %63 = load i32, i32* %14, align 4
  %64 = add nuw nsw i64 %44, 5
  %65 = getelementptr inbounds float, float* %0, i64 %64
  %66 = bitcast float* %65 to i32*
  store i32 %63, i32* %66, align 4
  %67 = add nuw nsw i64 %.014.i, 2
  %exitcond.1 = icmp eq i64 %67, 28
  br i1 %exitcond.1, label %._crit_edge6.i, label %._crit_edge.i

._crit_edge6.i:                                   ; preds = %._crit_edge.i
  %68 = add nuw nsw i64 %.027.i, 1
  %exitcond37 = icmp eq i64 %68, 28
  br i1 %exitcond37, label %.preheader20, label %.preheader.i.preheader

.preheader20:                                     ; preds = %._crit_edge6.i, %108
  %.01132 = phi i64 [ %109, %108 ], [ 0, %._crit_edge6.i ]
  %69 = mul nuw nsw i64 %.01132, 5
  br label %.preheader19

.preheader19:                                     ; preds = %106, %.preheader20
  %.01031 = phi i64 [ 0, %.preheader20 ], [ %107, %106 ]
  %70 = add nsw i64 %.01031, -2
  %71 = add nuw nsw i64 %.01031, %69
  %72 = mul nuw nsw i64 %71, 5
  br label %.preheader18

.preheader18:                                     ; preds = %104, %.preheader19
  %.0930 = phi i64 [ 0, %.preheader19 ], [ %105, %104 ]
  %73 = add nsw i64 %.0930, -2
  %74 = add nuw nsw i64 %.0930, %72
  %75 = getelementptr inbounds float, float* %2, i64 %74
  br label %.preheader17

.preheader17:                                     ; preds = %102, %.preheader18
  %.0829 = phi i64 [ 0, %.preheader18 ], [ %103, %102 ]
  %76 = add nsw i64 %70, %.0829
  %77 = icmp sgt i64 %76, 27
  %78 = mul nsw i64 %76, 28
  %79 = mul nuw nsw i64 %.0829, 28
  br label %.critedge

.critedge:                                        ; preds = %121, %.preheader17
  %.0727 = phi i64 [ 0, %.preheader17 ], [ %122, %121 ]
  %80 = tail call i8* @llvm.stacksave()
  %81 = add nsw i64 %.0727, %73
  %82 = or i64 %81, %76
  %83 = icmp slt i64 %82, 0
  %or.cond15 = or i1 %77, %83
  %84 = icmp sgt i64 %81, 27
  %or.cond16 = or i1 %84, %or.cond15
  br i1 %or.cond16, label %.critedge.145, label %.preheader

.preheader:                                       ; preds = %.critedge
  %85 = add nsw i64 %81, %78
  %86 = getelementptr inbounds float, float* %1, i64 %85
  %87 = load float, float* %86, align 4
  %88 = load float, float* %75, align 4
  %89 = fmul reassoc nsz arcp contract float %87, %88
  %90 = add nuw nsw i64 %.0727, %79
  %91 = mul nuw nsw i64 %90, 6
  %92 = add nuw nsw i64 %91, %.01132
  %93 = getelementptr inbounds float, float* %0, i64 %92
  %94 = load float, float* %93, align 4
  %95 = fadd reassoc nsz arcp contract float %89, %94
  store float %95, float* %93, align 4
  br label %.critedge.145

.critedge.145:                                    ; preds = %.preheader, %.critedge
  tail call void @llvm.stackrestore(i8* %80)
  %96 = or i64 %.0727, 1
  %97 = tail call i8* @llvm.stacksave()
  %98 = add nsw i64 %96, %73
  %99 = or i64 %98, %76
  %100 = icmp slt i64 %99, 0
  %or.cond15.1 = or i1 %77, %100
  %101 = icmp sgt i64 %98, 27
  %or.cond16.1 = or i1 %101, %or.cond15.1
  br i1 %or.cond16.1, label %121, label %.preheader.1

; <label>:102:                                    ; preds = %121
  %103 = add nuw nsw i64 %.0829, 1
  %exitcond40 = icmp eq i64 %103, 28
  br i1 %exitcond40, label %104, label %.preheader17

; <label>:104:                                    ; preds = %102
  %105 = add nuw nsw i64 %.0930, 1
  %exitcond41 = icmp eq i64 %105, 5
  br i1 %exitcond41, label %106, label %.preheader18

; <label>:106:                                    ; preds = %104
  %107 = add nuw nsw i64 %.01031, 1
  %exitcond42 = icmp eq i64 %107, 5
  br i1 %exitcond42, label %108, label %.preheader19

; <label>:108:                                    ; preds = %106
  %109 = add nuw nsw i64 %.01132, 1
  %exitcond43 = icmp eq i64 %109, 6
  br i1 %exitcond43, label %._crit_edge, label %.preheader20

._crit_edge:                                      ; preds = %108
  ret void

.preheader.1:                                     ; preds = %.critedge.145
  %110 = add nsw i64 %98, %78
  %111 = getelementptr inbounds float, float* %1, i64 %110
  %112 = load float, float* %111, align 4
  %113 = load float, float* %75, align 4
  %114 = fmul reassoc nsz arcp contract float %112, %113
  %115 = add nuw nsw i64 %96, %79
  %116 = mul nuw nsw i64 %115, 6
  %117 = add nuw nsw i64 %116, %.01132
  %118 = getelementptr inbounds float, float* %0, i64 %117
  %119 = load float, float* %118, align 4
  %120 = fadd reassoc nsz arcp contract float %114, %119
  store float %120, float* %118, align 4
  br label %121

; <label>:121:                                    ; preds = %.preheader.1, %.critedge.145
  tail call void @llvm.stackrestore(i8* %97)
  %122 = add nuw nsw i64 %.0727, 2
  %exitcond39.1 = icmp eq i64 %122, 28
  br i1 %exitcond39.1, label %102, label %.critedge
}

; Function Attrs: noinline norecurse nounwind
define internal fastcc void @libjit_stacked_kernel_1_specialized(float* nocapture) unnamed_addr #4 {
entry:
  br label %vector.body

vector.body:                                      ; preds = %vector.body.1, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next.1, %vector.body.1 ]
  %1 = getelementptr float, float* %0, i64 %index
  %2 = bitcast float* %1 to <8 x float>*
  %wide.load = load <8 x float>, <8 x float>* %2, align 4
  %3 = getelementptr float, float* %1, i64 8
  %4 = bitcast float* %3 to <8 x float>*
  %wide.load4 = load <8 x float>, <8 x float>* %4, align 4
  %5 = getelementptr float, float* %1, i64 16
  %6 = bitcast float* %5 to <8 x float>*
  %wide.load5 = load <8 x float>, <8 x float>* %6, align 4
  %7 = getelementptr float, float* %1, i64 24
  %8 = bitcast float* %7 to <8 x float>*
  %wide.load6 = load <8 x float>, <8 x float>* %8, align 4
  %9 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load, zeroinitializer
  %10 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load4, zeroinitializer
  %11 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load5, zeroinitializer
  %12 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load6, zeroinitializer
  %13 = select <8 x i1> %9, <8 x float> %wide.load, <8 x float> zeroinitializer
  %14 = select <8 x i1> %10, <8 x float> %wide.load4, <8 x float> zeroinitializer
  %15 = select <8 x i1> %11, <8 x float> %wide.load5, <8 x float> zeroinitializer
  %16 = select <8 x i1> %12, <8 x float> %wide.load6, <8 x float> zeroinitializer
  store <8 x float> %13, <8 x float>* %2, align 4
  store <8 x float> %14, <8 x float>* %4, align 4
  store <8 x float> %15, <8 x float>* %6, align 4
  store <8 x float> %16, <8 x float>* %8, align 4
  %index.next = or i64 %index, 32
  %17 = icmp eq i64 %index.next, 4704
  br i1 %17, label %afterloop, label %vector.body.1, !llvm.loop !4

afterloop:                                        ; preds = %vector.body
  ret void

vector.body.1:                                    ; preds = %vector.body
  %18 = getelementptr float, float* %0, i64 %index.next
  %19 = bitcast float* %18 to <8 x float>*
  %wide.load.1 = load <8 x float>, <8 x float>* %19, align 4
  %20 = getelementptr float, float* %18, i64 8
  %21 = bitcast float* %20 to <8 x float>*
  %wide.load4.1 = load <8 x float>, <8 x float>* %21, align 4
  %22 = getelementptr float, float* %18, i64 16
  %23 = bitcast float* %22 to <8 x float>*
  %wide.load5.1 = load <8 x float>, <8 x float>* %23, align 4
  %24 = getelementptr float, float* %18, i64 24
  %25 = bitcast float* %24 to <8 x float>*
  %wide.load6.1 = load <8 x float>, <8 x float>* %25, align 4
  %26 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.1, zeroinitializer
  %27 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load4.1, zeroinitializer
  %28 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load5.1, zeroinitializer
  %29 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load6.1, zeroinitializer
  %30 = select <8 x i1> %26, <8 x float> %wide.load.1, <8 x float> zeroinitializer
  %31 = select <8 x i1> %27, <8 x float> %wide.load4.1, <8 x float> zeroinitializer
  %32 = select <8 x i1> %28, <8 x float> %wide.load5.1, <8 x float> zeroinitializer
  %33 = select <8 x i1> %29, <8 x float> %wide.load6.1, <8 x float> zeroinitializer
  store <8 x float> %30, <8 x float>* %19, align 4
  store <8 x float> %31, <8 x float>* %21, align 4
  store <8 x float> %32, <8 x float>* %23, align 4
  store <8 x float> %33, <8 x float>* %25, align 4
  %index.next.1 = add nuw nsw i64 %index, 64
  br label %vector.body
}

; Function Attrs: noinline norecurse nounwind
define internal fastcc void @libjit_max_pool_f_2_specialized(float* nocapture readonly, float* nocapture) unnamed_addr #4 {
  br label %.preheader15.i.preheader

.preheader15.i.preheader:                         ; preds = %2, %._crit_edge33.i
  %.01036.i = phi i64 [ %100, %._crit_edge33.i ], [ 0, %2 ]
  %.01134.i = phi i64 [ %99, %._crit_edge33.i ], [ 0, %2 ]
  %3 = mul nuw nsw i64 %.01036.i, 14
  %4 = mul nuw nsw i64 %.01134.i, 28
  %5 = or i64 %.01134.i, 1
  %6 = mul nuw nsw i64 %5, 28
  br label %.preheader14.i.preheader

.preheader14.i.preheader:                         ; preds = %.preheader15.i.preheader, %.preheader14.i.preheader
  %.0831.i = phi i64 [ %98, %.preheader14.i.preheader ], [ 0, %.preheader15.i.preheader ]
  %.0929.i = phi i64 [ %97, %.preheader14.i.preheader ], [ 0, %.preheader15.i.preheader ]
  %7 = add nuw nsw i64 %.0831.i, %3
  %8 = mul nuw nsw i64 %7, 6
  %9 = add nuw nsw i64 %.0929.i, %4
  %10 = mul nuw nsw i64 %9, 6
  %11 = or i64 %.0929.i, 1
  %12 = add nuw nsw i64 %11, %4
  %13 = mul nuw nsw i64 %12, 6
  %14 = add nuw nsw i64 %.0929.i, %6
  %15 = mul nuw nsw i64 %14, 6
  %16 = add nuw nsw i64 %11, %6
  %17 = mul nuw nsw i64 %16, 6
  %18 = getelementptr inbounds float, float* %0, i64 %10
  %19 = load float, float* %18, align 4
  %20 = getelementptr inbounds float, float* %0, i64 %13
  %21 = load float, float* %20, align 4
  %.inv = fcmp reassoc nsz arcp oge float %21, %19
  %.2.i.1 = select i1 %.inv, float %21, float %19
  %22 = getelementptr inbounds float, float* %0, i64 %15
  %23 = load float, float* %22, align 4
  %.inv11 = fcmp reassoc nsz arcp oge float %23, %.2.i.1
  %.2.i.16 = select i1 %.inv11, float %23, float %.2.i.1
  %24 = getelementptr inbounds float, float* %0, i64 %17
  %25 = load float, float* %24, align 4
  %.inv12 = fcmp reassoc nsz arcp oge float %25, %.2.i.16
  %.2.i.1.1 = select i1 %.inv12, float %25, float %.2.i.16
  %26 = getelementptr inbounds float, float* %1, i64 %8
  store float %.2.i.1.1, float* %26, align 4
  %27 = or i64 %10, 1
  %28 = getelementptr inbounds float, float* %0, i64 %27
  %29 = load float, float* %28, align 4
  %30 = or i64 %13, 1
  %31 = getelementptr inbounds float, float* %0, i64 %30
  %32 = load float, float* %31, align 4
  %.inv.1 = fcmp reassoc nsz arcp oge float %32, %29
  %.2.i.1.113 = select i1 %.inv.1, float %32, float %29
  %33 = or i64 %15, 1
  %34 = getelementptr inbounds float, float* %0, i64 %33
  %35 = load float, float* %34, align 4
  %.inv11.1 = fcmp reassoc nsz arcp oge float %35, %.2.i.1.113
  %.2.i.16.1 = select i1 %.inv11.1, float %35, float %.2.i.1.113
  %36 = or i64 %17, 1
  %37 = getelementptr inbounds float, float* %0, i64 %36
  %38 = load float, float* %37, align 4
  %.inv12.1 = fcmp reassoc nsz arcp oge float %38, %.2.i.16.1
  %.2.i.1.1.1 = select i1 %.inv12.1, float %38, float %.2.i.16.1
  %39 = or i64 %8, 1
  %40 = getelementptr inbounds float, float* %1, i64 %39
  store float %.2.i.1.1.1, float* %40, align 4
  %41 = or i64 %10, 2
  %42 = getelementptr inbounds float, float* %0, i64 %41
  %43 = load float, float* %42, align 4
  %44 = add nuw nsw i64 %13, 2
  %45 = getelementptr inbounds float, float* %0, i64 %44
  %46 = load float, float* %45, align 4
  %.inv.2 = fcmp reassoc nsz arcp oge float %46, %43
  %.2.i.1.2 = select i1 %.inv.2, float %46, float %43
  %47 = or i64 %15, 2
  %48 = getelementptr inbounds float, float* %0, i64 %47
  %49 = load float, float* %48, align 4
  %.inv11.2 = fcmp reassoc nsz arcp oge float %49, %.2.i.1.2
  %.2.i.16.2 = select i1 %.inv11.2, float %49, float %.2.i.1.2
  %50 = add nuw nsw i64 %17, 2
  %51 = getelementptr inbounds float, float* %0, i64 %50
  %52 = load float, float* %51, align 4
  %.inv12.2 = fcmp reassoc nsz arcp oge float %52, %.2.i.16.2
  %.2.i.1.1.2 = select i1 %.inv12.2, float %52, float %.2.i.16.2
  %53 = add nuw nsw i64 %8, 2
  %54 = getelementptr inbounds float, float* %1, i64 %53
  store float %.2.i.1.1.2, float* %54, align 4
  %55 = or i64 %10, 3
  %56 = getelementptr inbounds float, float* %0, i64 %55
  %57 = load float, float* %56, align 4
  %58 = add nuw nsw i64 %13, 3
  %59 = getelementptr inbounds float, float* %0, i64 %58
  %60 = load float, float* %59, align 4
  %.inv.3 = fcmp reassoc nsz arcp oge float %60, %57
  %.2.i.1.3 = select i1 %.inv.3, float %60, float %57
  %61 = or i64 %15, 3
  %62 = getelementptr inbounds float, float* %0, i64 %61
  %63 = load float, float* %62, align 4
  %.inv11.3 = fcmp reassoc nsz arcp oge float %63, %.2.i.1.3
  %.2.i.16.3 = select i1 %.inv11.3, float %63, float %.2.i.1.3
  %64 = add nuw nsw i64 %17, 3
  %65 = getelementptr inbounds float, float* %0, i64 %64
  %66 = load float, float* %65, align 4
  %.inv12.3 = fcmp reassoc nsz arcp oge float %66, %.2.i.16.3
  %.2.i.1.1.3 = select i1 %.inv12.3, float %66, float %.2.i.16.3
  %67 = add nuw nsw i64 %8, 3
  %68 = getelementptr inbounds float, float* %1, i64 %67
  store float %.2.i.1.1.3, float* %68, align 4
  %69 = add nuw nsw i64 %10, 4
  %70 = getelementptr inbounds float, float* %0, i64 %69
  %71 = load float, float* %70, align 4
  %72 = add nuw nsw i64 %13, 4
  %73 = getelementptr inbounds float, float* %0, i64 %72
  %74 = load float, float* %73, align 4
  %.inv.4 = fcmp reassoc nsz arcp oge float %74, %71
  %.2.i.1.4 = select i1 %.inv.4, float %74, float %71
  %75 = add nuw nsw i64 %15, 4
  %76 = getelementptr inbounds float, float* %0, i64 %75
  %77 = load float, float* %76, align 4
  %.inv11.4 = fcmp reassoc nsz arcp oge float %77, %.2.i.1.4
  %.2.i.16.4 = select i1 %.inv11.4, float %77, float %.2.i.1.4
  %78 = add nuw nsw i64 %17, 4
  %79 = getelementptr inbounds float, float* %0, i64 %78
  %80 = load float, float* %79, align 4
  %.inv12.4 = fcmp reassoc nsz arcp oge float %80, %.2.i.16.4
  %.2.i.1.1.4 = select i1 %.inv12.4, float %80, float %.2.i.16.4
  %81 = add nuw nsw i64 %8, 4
  %82 = getelementptr inbounds float, float* %1, i64 %81
  store float %.2.i.1.1.4, float* %82, align 4
  %83 = add nuw nsw i64 %10, 5
  %84 = getelementptr inbounds float, float* %0, i64 %83
  %85 = load float, float* %84, align 4
  %86 = add nuw nsw i64 %13, 5
  %87 = getelementptr inbounds float, float* %0, i64 %86
  %88 = load float, float* %87, align 4
  %.inv.5 = fcmp reassoc nsz arcp oge float %88, %85
  %.2.i.1.5 = select i1 %.inv.5, float %88, float %85
  %89 = add nuw nsw i64 %15, 5
  %90 = getelementptr inbounds float, float* %0, i64 %89
  %91 = load float, float* %90, align 4
  %.inv11.5 = fcmp reassoc nsz arcp oge float %91, %.2.i.1.5
  %.2.i.16.5 = select i1 %.inv11.5, float %91, float %.2.i.1.5
  %92 = add nuw nsw i64 %17, 5
  %93 = getelementptr inbounds float, float* %0, i64 %92
  %94 = load float, float* %93, align 4
  %.inv12.5 = fcmp reassoc nsz arcp oge float %94, %.2.i.16.5
  %.2.i.1.1.5 = select i1 %.inv12.5, float %94, float %.2.i.16.5
  %95 = add nuw nsw i64 %8, 5
  %96 = getelementptr inbounds float, float* %1, i64 %95
  store float %.2.i.1.1.5, float* %96, align 4
  %97 = add nuw nsw i64 %.0929.i, 2
  %98 = add nuw nsw i64 %.0831.i, 1
  %exitcond9 = icmp eq i64 %98, 14
  br i1 %exitcond9, label %._crit_edge33.i, label %.preheader14.i.preheader

._crit_edge33.i:                                  ; preds = %.preheader14.i.preheader
  %99 = add nuw nsw i64 %.01134.i, 2
  %100 = add nuw nsw i64 %.01036.i, 1
  %exitcond10 = icmp eq i64 %100, 14
  br i1 %exitcond10, label %_ZN12_GLOBAL__N_123libjit_max_pool_genericIfEEvPKT_PS1_PKmS6_PmS7_S7_.exit, label %.preheader15.i.preheader

_ZN12_GLOBAL__N_123libjit_max_pool_genericIfEEvPKT_PS1_PKmS6_PmS7_S7_.exit: ; preds = %._crit_edge33.i
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @libjit_convolution_f_3_specialized(float* nocapture, float* nocapture readonly, float* nocapture readonly, float* nocapture readonly) unnamed_addr #3 {
.preheader1.i.preheader:
  %4 = bitcast float* %3 to i32*
  %5 = getelementptr inbounds float, float* %3, i64 1
  %6 = bitcast float* %5 to i32*
  %7 = getelementptr inbounds float, float* %3, i64 2
  %8 = bitcast float* %7 to i32*
  %9 = getelementptr inbounds float, float* %3, i64 3
  %10 = bitcast float* %9 to i32*
  %11 = getelementptr inbounds float, float* %3, i64 4
  %12 = bitcast float* %11 to i32*
  %13 = getelementptr inbounds float, float* %3, i64 5
  %14 = bitcast float* %13 to i32*
  %15 = getelementptr inbounds float, float* %3, i64 6
  %16 = bitcast float* %15 to i32*
  %17 = getelementptr inbounds float, float* %3, i64 7
  %18 = bitcast float* %17 to i32*
  %19 = getelementptr inbounds float, float* %3, i64 8
  %20 = bitcast float* %19 to i32*
  %21 = getelementptr inbounds float, float* %3, i64 9
  %22 = bitcast float* %21 to i32*
  %23 = getelementptr inbounds float, float* %3, i64 10
  %24 = bitcast float* %23 to i32*
  %25 = getelementptr inbounds float, float* %3, i64 11
  %26 = bitcast float* %25 to i32*
  %27 = getelementptr inbounds float, float* %3, i64 12
  %28 = bitcast float* %27 to i32*
  %29 = getelementptr inbounds float, float* %3, i64 13
  %30 = bitcast float* %29 to i32*
  %31 = getelementptr inbounds float, float* %3, i64 14
  %32 = bitcast float* %31 to i32*
  %33 = getelementptr inbounds float, float* %3, i64 15
  %34 = bitcast float* %33 to i32*
  br label %.preheader.i.preheader

.preheader.i.preheader:                           ; preds = %.preheader1.i.preheader, %._crit_edge6.i
  %.027.i = phi i64 [ %102, %._crit_edge6.i ], [ 0, %.preheader1.i.preheader ]
  %35 = mul nuw nsw i64 %.027.i, 10
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %._crit_edge.i, %.preheader.i.preheader
  %.014.i = phi i64 [ %101, %._crit_edge.i ], [ 0, %.preheader.i.preheader ]
  %36 = add nuw nsw i64 %.014.i, %35
  %37 = load i32, i32* %4, align 4
  %38 = shl i64 %36, 4
  %39 = getelementptr inbounds float, float* %0, i64 %38
  %40 = bitcast float* %39 to i32*
  store i32 %37, i32* %40, align 4
  %41 = load i32, i32* %6, align 4
  %42 = or i64 %38, 1
  %43 = getelementptr inbounds float, float* %0, i64 %42
  %44 = bitcast float* %43 to i32*
  store i32 %41, i32* %44, align 4
  %45 = load i32, i32* %8, align 4
  %46 = or i64 %38, 2
  %47 = getelementptr inbounds float, float* %0, i64 %46
  %48 = bitcast float* %47 to i32*
  store i32 %45, i32* %48, align 4
  %49 = load i32, i32* %10, align 4
  %50 = or i64 %38, 3
  %51 = getelementptr inbounds float, float* %0, i64 %50
  %52 = bitcast float* %51 to i32*
  store i32 %49, i32* %52, align 4
  %53 = load i32, i32* %12, align 4
  %54 = or i64 %38, 4
  %55 = getelementptr inbounds float, float* %0, i64 %54
  %56 = bitcast float* %55 to i32*
  store i32 %53, i32* %56, align 4
  %57 = load i32, i32* %14, align 4
  %58 = or i64 %38, 5
  %59 = getelementptr inbounds float, float* %0, i64 %58
  %60 = bitcast float* %59 to i32*
  store i32 %57, i32* %60, align 4
  %61 = load i32, i32* %16, align 4
  %62 = or i64 %38, 6
  %63 = getelementptr inbounds float, float* %0, i64 %62
  %64 = bitcast float* %63 to i32*
  store i32 %61, i32* %64, align 4
  %65 = load i32, i32* %18, align 4
  %66 = or i64 %38, 7
  %67 = getelementptr inbounds float, float* %0, i64 %66
  %68 = bitcast float* %67 to i32*
  store i32 %65, i32* %68, align 4
  %69 = load i32, i32* %20, align 4
  %70 = or i64 %38, 8
  %71 = getelementptr inbounds float, float* %0, i64 %70
  %72 = bitcast float* %71 to i32*
  store i32 %69, i32* %72, align 4
  %73 = load i32, i32* %22, align 4
  %74 = or i64 %38, 9
  %75 = getelementptr inbounds float, float* %0, i64 %74
  %76 = bitcast float* %75 to i32*
  store i32 %73, i32* %76, align 4
  %77 = load i32, i32* %24, align 4
  %78 = or i64 %38, 10
  %79 = getelementptr inbounds float, float* %0, i64 %78
  %80 = bitcast float* %79 to i32*
  store i32 %77, i32* %80, align 4
  %81 = load i32, i32* %26, align 4
  %82 = or i64 %38, 11
  %83 = getelementptr inbounds float, float* %0, i64 %82
  %84 = bitcast float* %83 to i32*
  store i32 %81, i32* %84, align 4
  %85 = load i32, i32* %28, align 4
  %86 = or i64 %38, 12
  %87 = getelementptr inbounds float, float* %0, i64 %86
  %88 = bitcast float* %87 to i32*
  store i32 %85, i32* %88, align 4
  %89 = load i32, i32* %30, align 4
  %90 = or i64 %38, 13
  %91 = getelementptr inbounds float, float* %0, i64 %90
  %92 = bitcast float* %91 to i32*
  store i32 %89, i32* %92, align 4
  %93 = load i32, i32* %32, align 4
  %94 = or i64 %38, 14
  %95 = getelementptr inbounds float, float* %0, i64 %94
  %96 = bitcast float* %95 to i32*
  store i32 %93, i32* %96, align 4
  %97 = load i32, i32* %34, align 4
  %98 = or i64 %38, 15
  %99 = getelementptr inbounds float, float* %0, i64 %98
  %100 = bitcast float* %99 to i32*
  store i32 %97, i32* %100, align 4
  %101 = add nuw nsw i64 %.014.i, 1
  %exitcond = icmp eq i64 %101, 10
  br i1 %exitcond, label %._crit_edge6.i, label %._crit_edge.i

._crit_edge6.i:                                   ; preds = %._crit_edge.i
  %102 = add nuw nsw i64 %.027.i, 1
  %exitcond40 = icmp eq i64 %102, 10
  br i1 %exitcond40, label %.preheader21, label %.preheader.i.preheader

.preheader21:                                     ; preds = %._crit_edge6.i, %404
  %.01135 = phi i64 [ %405, %404 ], [ 0, %._crit_edge6.i ]
  %103 = mul nuw nsw i64 %.01135, 5
  br label %.preheader20

.preheader20:                                     ; preds = %402, %.preheader21
  %.01034 = phi i64 [ 0, %.preheader21 ], [ %403, %402 ]
  %104 = add nuw nsw i64 %.01034, %103
  %105 = mul nuw nsw i64 %104, 5
  br label %.preheader19

.preheader19:                                     ; preds = %400, %.preheader20
  %.0933 = phi i64 [ 0, %.preheader20 ], [ %401, %400 ]
  %106 = add nuw nsw i64 %.0933, %105
  %107 = mul nuw nsw i64 %106, 6
  %108 = add nuw nsw i64 %107, 5
  %109 = add nuw nsw i64 %107, 450
  %110 = getelementptr inbounds float, float* %2, i64 %109
  %111 = or i64 %107, 1
  %112 = add nuw nsw i64 %111, 450
  %113 = getelementptr inbounds float, float* %2, i64 %112
  %114 = add nuw nsw i64 %107, 452
  %115 = getelementptr inbounds float, float* %2, i64 %114
  %116 = add nuw nsw i64 %107, 453
  %117 = getelementptr inbounds float, float* %2, i64 %116
  %118 = add nuw nsw i64 %107, 454
  %119 = getelementptr inbounds float, float* %2, i64 %118
  %120 = add nuw nsw i64 %107, 455
  %121 = getelementptr inbounds float, float* %2, i64 %120
  %122 = add nuw nsw i64 %107, 300
  %123 = getelementptr inbounds float, float* %2, i64 %122
  %124 = add nuw nsw i64 %111, 300
  %125 = getelementptr inbounds float, float* %2, i64 %124
  %126 = add nuw nsw i64 %107, 302
  %127 = getelementptr inbounds float, float* %2, i64 %126
  %128 = add nuw nsw i64 %107, 303
  %129 = getelementptr inbounds float, float* %2, i64 %128
  %130 = add nuw nsw i64 %107, 304
  %131 = getelementptr inbounds float, float* %2, i64 %130
  %132 = add nuw nsw i64 %107, 305
  %133 = getelementptr inbounds float, float* %2, i64 %132
  %134 = add nuw nsw i64 %107, 150
  %135 = getelementptr inbounds float, float* %2, i64 %134
  %136 = add nuw nsw i64 %111, 150
  %137 = getelementptr inbounds float, float* %2, i64 %136
  %138 = add nuw nsw i64 %107, 152
  %139 = getelementptr inbounds float, float* %2, i64 %138
  %140 = add nuw nsw i64 %107, 153
  %141 = getelementptr inbounds float, float* %2, i64 %140
  %142 = add nuw nsw i64 %107, 154
  %143 = getelementptr inbounds float, float* %2, i64 %142
  %144 = add nuw nsw i64 %107, 155
  %145 = getelementptr inbounds float, float* %2, i64 %144
  %146 = getelementptr inbounds float, float* %2, i64 %107
  %147 = getelementptr inbounds float, float* %2, i64 %111
  %148 = add nuw nsw i64 %107, 2
  %149 = getelementptr inbounds float, float* %2, i64 %148
  %150 = add nuw nsw i64 %107, 3
  %151 = getelementptr inbounds float, float* %2, i64 %150
  %152 = add nuw nsw i64 %107, 4
  %153 = getelementptr inbounds float, float* %2, i64 %152
  %154 = getelementptr inbounds float, float* %2, i64 %108
  %155 = add nuw nsw i64 %107, 600
  %156 = getelementptr inbounds float, float* %2, i64 %155
  %157 = add nuw nsw i64 %107, 750
  %158 = getelementptr inbounds float, float* %2, i64 %157
  %159 = add nuw nsw i64 %107, 900
  %160 = getelementptr inbounds float, float* %2, i64 %159
  %161 = add nuw nsw i64 %107, 1050
  %162 = getelementptr inbounds float, float* %2, i64 %161
  %163 = add nuw nsw i64 %111, 600
  %164 = getelementptr inbounds float, float* %2, i64 %163
  %165 = add nuw nsw i64 %111, 750
  %166 = getelementptr inbounds float, float* %2, i64 %165
  %167 = add nuw nsw i64 %111, 900
  %168 = getelementptr inbounds float, float* %2, i64 %167
  %169 = add nuw nsw i64 %111, 1050
  %170 = getelementptr inbounds float, float* %2, i64 %169
  %171 = add nuw nsw i64 %107, 602
  %172 = getelementptr inbounds float, float* %2, i64 %171
  %173 = add nuw nsw i64 %107, 752
  %174 = getelementptr inbounds float, float* %2, i64 %173
  %175 = add nuw nsw i64 %107, 902
  %176 = getelementptr inbounds float, float* %2, i64 %175
  %177 = add nuw nsw i64 %107, 1052
  %178 = getelementptr inbounds float, float* %2, i64 %177
  %179 = add nuw nsw i64 %107, 603
  %180 = getelementptr inbounds float, float* %2, i64 %179
  %181 = add nuw nsw i64 %107, 753
  %182 = getelementptr inbounds float, float* %2, i64 %181
  %183 = add nuw nsw i64 %107, 903
  %184 = getelementptr inbounds float, float* %2, i64 %183
  %185 = add nuw nsw i64 %107, 1053
  %186 = getelementptr inbounds float, float* %2, i64 %185
  %187 = add nuw nsw i64 %107, 604
  %188 = getelementptr inbounds float, float* %2, i64 %187
  %189 = add nuw nsw i64 %107, 754
  %190 = getelementptr inbounds float, float* %2, i64 %189
  %191 = add nuw nsw i64 %107, 904
  %192 = getelementptr inbounds float, float* %2, i64 %191
  %193 = add nuw nsw i64 %107, 1054
  %194 = getelementptr inbounds float, float* %2, i64 %193
  %195 = add nuw nsw i64 %107, 605
  %196 = getelementptr inbounds float, float* %2, i64 %195
  %197 = add nuw nsw i64 %107, 755
  %198 = getelementptr inbounds float, float* %2, i64 %197
  %199 = add nuw nsw i64 %107, 905
  %200 = getelementptr inbounds float, float* %2, i64 %199
  %201 = add nuw nsw i64 %107, 1055
  %202 = getelementptr inbounds float, float* %2, i64 %201
  br label %.preheader18

.preheader18:                                     ; preds = %398, %.preheader19
  %.0832 = phi i64 [ 0, %.preheader19 ], [ %399, %398 ]
  %203 = add nuw nsw i64 %.0832, %.01034
  %204 = mul nuw nsw i64 %203, 14
  %205 = mul nuw nsw i64 %.0832, 10
  %206 = add nuw nsw i64 %204, %.0933
  br label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %.lr.ph.preheader, %.preheader18
  %.0730 = phi i64 [ 0, %.preheader18 ], [ %397, %.lr.ph.preheader ]
  %207 = tail call i8* @llvm.stacksave()
  %208 = add nuw nsw i64 %206, %.0730
  %209 = mul nuw nsw i64 %208, 6
  %210 = getelementptr inbounds float, float* %1, i64 %209
  %211 = load float, float* %210, align 4
  %212 = or i64 %209, 1
  %213 = getelementptr inbounds float, float* %1, i64 %212
  %214 = load float, float* %213, align 4
  %215 = add nuw nsw i64 %209, 2
  %216 = getelementptr inbounds float, float* %1, i64 %215
  %217 = load float, float* %216, align 4
  %218 = add nuw nsw i64 %209, 3
  %219 = getelementptr inbounds float, float* %1, i64 %218
  %220 = load float, float* %219, align 4
  %221 = add nuw nsw i64 %209, 4
  %222 = getelementptr inbounds float, float* %1, i64 %221
  %223 = load float, float* %222, align 4
  %224 = add nuw nsw i64 %209, 5
  %225 = getelementptr inbounds float, float* %1, i64 %224
  %226 = load float, float* %225, align 4
  %227 = load float, float* %110, align 4
  %228 = fmul reassoc nsz arcp contract float %211, %227
  %229 = load float, float* %113, align 4
  %230 = fmul reassoc nsz arcp contract float %214, %229
  %231 = fadd reassoc nsz arcp contract float %228, %230
  %232 = load float, float* %115, align 4
  %233 = fmul reassoc nsz arcp contract float %217, %232
  %234 = fadd reassoc nsz arcp contract float %231, %233
  %235 = load float, float* %117, align 4
  %236 = fmul reassoc nsz arcp contract float %220, %235
  %237 = fadd reassoc nsz arcp contract float %234, %236
  %238 = load float, float* %119, align 4
  %239 = fmul reassoc nsz arcp contract float %223, %238
  %240 = fadd reassoc nsz arcp contract float %237, %239
  %241 = load float, float* %121, align 4
  %242 = fmul reassoc nsz arcp contract float %226, %241
  %243 = fadd reassoc nsz arcp contract float %240, %242
  %244 = load float, float* %123, align 4
  %245 = fmul reassoc nsz arcp contract float %211, %244
  %246 = load float, float* %125, align 4
  %247 = fmul reassoc nsz arcp contract float %214, %246
  %248 = fadd reassoc nsz arcp contract float %245, %247
  %249 = load float, float* %127, align 4
  %250 = fmul reassoc nsz arcp contract float %217, %249
  %251 = fadd reassoc nsz arcp contract float %248, %250
  %252 = load float, float* %129, align 4
  %253 = fmul reassoc nsz arcp contract float %220, %252
  %254 = fadd reassoc nsz arcp contract float %251, %253
  %255 = load float, float* %131, align 4
  %256 = fmul reassoc nsz arcp contract float %223, %255
  %257 = fadd reassoc nsz arcp contract float %254, %256
  %258 = load float, float* %133, align 4
  %259 = fmul reassoc nsz arcp contract float %226, %258
  %260 = fadd reassoc nsz arcp contract float %257, %259
  %261 = load float, float* %135, align 4
  %262 = fmul reassoc nsz arcp contract float %211, %261
  %263 = load float, float* %137, align 4
  %264 = fmul reassoc nsz arcp contract float %214, %263
  %265 = fadd reassoc nsz arcp contract float %262, %264
  %266 = load float, float* %139, align 4
  %267 = fmul reassoc nsz arcp contract float %217, %266
  %268 = fadd reassoc nsz arcp contract float %265, %267
  %269 = load float, float* %141, align 4
  %270 = fmul reassoc nsz arcp contract float %220, %269
  %271 = fadd reassoc nsz arcp contract float %268, %270
  %272 = load float, float* %143, align 4
  %273 = fmul reassoc nsz arcp contract float %223, %272
  %274 = fadd reassoc nsz arcp contract float %271, %273
  %275 = load float, float* %145, align 4
  %276 = fmul reassoc nsz arcp contract float %226, %275
  %277 = fadd reassoc nsz arcp contract float %274, %276
  %278 = load float, float* %146, align 4
  %279 = fmul reassoc nsz arcp contract float %211, %278
  %280 = load float, float* %147, align 4
  %281 = fmul reassoc nsz arcp contract float %214, %280
  %282 = fadd reassoc nsz arcp contract float %279, %281
  %283 = load float, float* %149, align 4
  %284 = fmul reassoc nsz arcp contract float %217, %283
  %285 = fadd reassoc nsz arcp contract float %282, %284
  %286 = load float, float* %151, align 4
  %287 = fmul reassoc nsz arcp contract float %220, %286
  %288 = fadd reassoc nsz arcp contract float %285, %287
  %289 = load float, float* %153, align 4
  %290 = fmul reassoc nsz arcp contract float %223, %289
  %291 = fadd reassoc nsz arcp contract float %288, %290
  %292 = load float, float* %154, align 4
  %293 = fmul reassoc nsz arcp contract float %226, %292
  %294 = fadd reassoc nsz arcp contract float %291, %293
  %295 = load float, float* %156, align 4
  %296 = fmul reassoc nsz arcp contract float %211, %295
  %297 = load float, float* %158, align 4
  %298 = fmul reassoc nsz arcp contract float %211, %297
  %299 = load float, float* %160, align 4
  %300 = fmul reassoc nsz arcp contract float %211, %299
  %301 = load float, float* %162, align 4
  %302 = fmul reassoc nsz arcp contract float %211, %301
  %303 = load float, float* %164, align 4
  %304 = fmul reassoc nsz arcp contract float %214, %303
  %305 = fadd reassoc nsz arcp contract float %296, %304
  %306 = load float, float* %166, align 4
  %307 = fmul reassoc nsz arcp contract float %214, %306
  %308 = fadd reassoc nsz arcp contract float %298, %307
  %309 = load float, float* %168, align 4
  %310 = fmul reassoc nsz arcp contract float %214, %309
  %311 = fadd reassoc nsz arcp contract float %300, %310
  %312 = load float, float* %170, align 4
  %313 = fmul reassoc nsz arcp contract float %214, %312
  %314 = fadd reassoc nsz arcp contract float %302, %313
  %315 = load float, float* %172, align 4
  %316 = fmul reassoc nsz arcp contract float %217, %315
  %317 = fadd reassoc nsz arcp contract float %305, %316
  %318 = load float, float* %174, align 4
  %319 = fmul reassoc nsz arcp contract float %217, %318
  %320 = fadd reassoc nsz arcp contract float %308, %319
  %321 = load float, float* %176, align 4
  %322 = fmul reassoc nsz arcp contract float %217, %321
  %323 = fadd reassoc nsz arcp contract float %311, %322
  %324 = load float, float* %178, align 4
  %325 = fmul reassoc nsz arcp contract float %217, %324
  %326 = fadd reassoc nsz arcp contract float %314, %325
  %327 = load float, float* %180, align 4
  %328 = fmul reassoc nsz arcp contract float %220, %327
  %329 = fadd reassoc nsz arcp contract float %317, %328
  %330 = load float, float* %182, align 4
  %331 = fmul reassoc nsz arcp contract float %220, %330
  %332 = fadd reassoc nsz arcp contract float %320, %331
  %333 = load float, float* %184, align 4
  %334 = fmul reassoc nsz arcp contract float %220, %333
  %335 = fadd reassoc nsz arcp contract float %323, %334
  %336 = load float, float* %186, align 4
  %337 = fmul reassoc nsz arcp contract float %220, %336
  %338 = fadd reassoc nsz arcp contract float %326, %337
  %339 = load float, float* %188, align 4
  %340 = fmul reassoc nsz arcp contract float %223, %339
  %341 = fadd reassoc nsz arcp contract float %329, %340
  %342 = load float, float* %190, align 4
  %343 = fmul reassoc nsz arcp contract float %223, %342
  %344 = fadd reassoc nsz arcp contract float %332, %343
  %345 = load float, float* %192, align 4
  %346 = fmul reassoc nsz arcp contract float %223, %345
  %347 = fadd reassoc nsz arcp contract float %335, %346
  %348 = load float, float* %194, align 4
  %349 = fmul reassoc nsz arcp contract float %223, %348
  %350 = fadd reassoc nsz arcp contract float %338, %349
  %351 = load float, float* %196, align 4
  %352 = fmul reassoc nsz arcp contract float %226, %351
  %353 = fadd reassoc nsz arcp contract float %341, %352
  %354 = load float, float* %198, align 4
  %355 = fmul reassoc nsz arcp contract float %226, %354
  %356 = fadd reassoc nsz arcp contract float %344, %355
  %357 = load float, float* %200, align 4
  %358 = fmul reassoc nsz arcp contract float %226, %357
  %359 = fadd reassoc nsz arcp contract float %347, %358
  %360 = load float, float* %202, align 4
  %361 = fmul reassoc nsz arcp contract float %226, %360
  %362 = fadd reassoc nsz arcp contract float %350, %361
  %363 = add nuw nsw i64 %.0730, %205
  %364 = shl i64 %363, 4
  %365 = add nuw nsw i64 %364, %.01135
  %366 = getelementptr inbounds float, float* %0, i64 %365
  %367 = load float, float* %366, align 4
  %368 = fadd reassoc nsz arcp contract float %294, %367
  store float %368, float* %366, align 4
  %369 = or i64 %365, 1
  %370 = getelementptr inbounds float, float* %0, i64 %369
  %371 = load float, float* %370, align 4
  %372 = fadd reassoc nsz arcp contract float %277, %371
  store float %372, float* %370, align 4
  %373 = or i64 %365, 2
  %374 = getelementptr inbounds float, float* %0, i64 %373
  %375 = load float, float* %374, align 4
  %376 = fadd reassoc nsz arcp contract float %260, %375
  store float %376, float* %374, align 4
  %377 = or i64 %365, 3
  %378 = getelementptr inbounds float, float* %0, i64 %377
  %379 = load float, float* %378, align 4
  %380 = fadd reassoc nsz arcp contract float %243, %379
  store float %380, float* %378, align 4
  %381 = or i64 %365, 4
  %382 = getelementptr inbounds float, float* %0, i64 %381
  %383 = load float, float* %382, align 4
  %384 = fadd reassoc nsz arcp contract float %353, %383
  store float %384, float* %382, align 4
  %385 = or i64 %365, 5
  %386 = getelementptr inbounds float, float* %0, i64 %385
  %387 = load float, float* %386, align 4
  %388 = fadd reassoc nsz arcp contract float %356, %387
  store float %388, float* %386, align 4
  %389 = or i64 %365, 6
  %390 = getelementptr inbounds float, float* %0, i64 %389
  %391 = load float, float* %390, align 4
  %392 = fadd reassoc nsz arcp contract float %359, %391
  store float %392, float* %390, align 4
  %393 = or i64 %365, 7
  %394 = getelementptr inbounds float, float* %0, i64 %393
  %395 = load float, float* %394, align 4
  %396 = fadd reassoc nsz arcp contract float %362, %395
  store float %396, float* %394, align 4
  tail call void @llvm.stackrestore(i8* %207)
  %397 = add nuw nsw i64 %.0730, 1
  %exitcond48 = icmp eq i64 %397, 10
  br i1 %exitcond48, label %398, label %.lr.ph.preheader

; <label>:398:                                    ; preds = %.lr.ph.preheader
  %399 = add nuw nsw i64 %.0832, 1
  %exitcond49 = icmp eq i64 %399, 10
  br i1 %exitcond49, label %400, label %.preheader18

; <label>:400:                                    ; preds = %398
  %401 = add nuw nsw i64 %.0933, 1
  %exitcond50 = icmp eq i64 %401, 5
  br i1 %exitcond50, label %402, label %.preheader19

; <label>:402:                                    ; preds = %400
  %403 = add nuw nsw i64 %.01034, 1
  %exitcond51 = icmp eq i64 %403, 5
  br i1 %exitcond51, label %404, label %.preheader20

; <label>:404:                                    ; preds = %402
  %405 = add nuw nsw i64 %.01135, 8
  %406 = icmp ult i64 %405, 16
  br i1 %406, label %.preheader21, label %_ZN12_GLOBAL__N_133libjit_conv_init_output_with_biasEmPfPKfPKmS4_.exit

_ZN12_GLOBAL__N_133libjit_conv_init_output_with_biasEmPfPKfPKmS4_.exit: ; preds = %404
  ret void
}

; Function Attrs: noinline norecurse nounwind
define internal fastcc void @libjit_stacked_kernel.1_4_specialized(float* nocapture) unnamed_addr #4 {
entry:
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next.1, %vector.body ]
  %1 = getelementptr float, float* %0, i64 %index
  %2 = bitcast float* %1 to <8 x float>*
  %wide.load = load <8 x float>, <8 x float>* %2, align 4
  %3 = getelementptr float, float* %1, i64 8
  %4 = bitcast float* %3 to <8 x float>*
  %wide.load4 = load <8 x float>, <8 x float>* %4, align 4
  %5 = getelementptr float, float* %1, i64 16
  %6 = bitcast float* %5 to <8 x float>*
  %wide.load5 = load <8 x float>, <8 x float>* %6, align 4
  %7 = getelementptr float, float* %1, i64 24
  %8 = bitcast float* %7 to <8 x float>*
  %wide.load6 = load <8 x float>, <8 x float>* %8, align 4
  %9 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load, zeroinitializer
  %10 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load4, zeroinitializer
  %11 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load5, zeroinitializer
  %12 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load6, zeroinitializer
  %13 = select <8 x i1> %9, <8 x float> %wide.load, <8 x float> zeroinitializer
  %14 = select <8 x i1> %10, <8 x float> %wide.load4, <8 x float> zeroinitializer
  %15 = select <8 x i1> %11, <8 x float> %wide.load5, <8 x float> zeroinitializer
  %16 = select <8 x i1> %12, <8 x float> %wide.load6, <8 x float> zeroinitializer
  store <8 x float> %13, <8 x float>* %2, align 4
  store <8 x float> %14, <8 x float>* %4, align 4
  store <8 x float> %15, <8 x float>* %6, align 4
  store <8 x float> %16, <8 x float>* %8, align 4
  %index.next = or i64 %index, 32
  %17 = getelementptr float, float* %0, i64 %index.next
  %18 = bitcast float* %17 to <8 x float>*
  %wide.load.1 = load <8 x float>, <8 x float>* %18, align 4
  %19 = getelementptr float, float* %17, i64 8
  %20 = bitcast float* %19 to <8 x float>*
  %wide.load4.1 = load <8 x float>, <8 x float>* %20, align 4
  %21 = getelementptr float, float* %17, i64 16
  %22 = bitcast float* %21 to <8 x float>*
  %wide.load5.1 = load <8 x float>, <8 x float>* %22, align 4
  %23 = getelementptr float, float* %17, i64 24
  %24 = bitcast float* %23 to <8 x float>*
  %wide.load6.1 = load <8 x float>, <8 x float>* %24, align 4
  %25 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.1, zeroinitializer
  %26 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load4.1, zeroinitializer
  %27 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load5.1, zeroinitializer
  %28 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load6.1, zeroinitializer
  %29 = select <8 x i1> %25, <8 x float> %wide.load.1, <8 x float> zeroinitializer
  %30 = select <8 x i1> %26, <8 x float> %wide.load4.1, <8 x float> zeroinitializer
  %31 = select <8 x i1> %27, <8 x float> %wide.load5.1, <8 x float> zeroinitializer
  %32 = select <8 x i1> %28, <8 x float> %wide.load6.1, <8 x float> zeroinitializer
  store <8 x float> %29, <8 x float>* %18, align 4
  store <8 x float> %30, <8 x float>* %20, align 4
  store <8 x float> %31, <8 x float>* %22, align 4
  store <8 x float> %32, <8 x float>* %24, align 4
  %index.next.1 = add nuw nsw i64 %index, 64
  %33 = icmp eq i64 %index.next.1, 1600
  br i1 %33, label %afterloop, label %vector.body, !llvm.loop !7

afterloop:                                        ; preds = %vector.body
  ret void
}

; Function Attrs: noinline norecurse nounwind
define internal fastcc void @libjit_max_pool_f_5_specialized(float* nocapture readonly, float* nocapture) unnamed_addr #4 {
  br label %.preheader15.i.preheader

.preheader15.i.preheader:                         ; preds = %2, %._crit_edge33.i
  %.01036.i = phi i64 [ %66, %._crit_edge33.i ], [ 0, %2 ]
  %.01134.i = phi i64 [ %65, %._crit_edge33.i ], [ 0, %2 ]
  %3 = mul nuw nsw i64 %.01036.i, 80
  %4 = mul nuw nsw i64 %.01036.i, 320
  %5 = mul nuw nsw i64 %.01036.i, 5
  %6 = mul nuw nsw i64 %.01134.i, 10
  %7 = or i64 %.01134.i, 1
  %8 = mul nuw nsw i64 %7, 10
  br label %.preheader14.i.preheader

.preheader14.i.preheader:                         ; preds = %.preheader15.i.preheader, %._crit_edge28.i
  %.0831.i = phi i64 [ %64, %._crit_edge28.i ], [ 0, %.preheader15.i.preheader ]
  %.0929.i = phi i64 [ %63, %._crit_edge28.i ], [ 0, %.preheader15.i.preheader ]
  %9 = shl i64 %.0831.i, 4
  %10 = shl i64 %.0831.i, 5
  %11 = add nuw nsw i64 %.0831.i, %5
  %12 = shl i64 %11, 4
  %13 = add nuw nsw i64 %.0929.i, %6
  %14 = shl i64 %13, 4
  %15 = or i64 %.0929.i, 1
  %16 = add nuw nsw i64 %15, %6
  %17 = shl i64 %16, 4
  %18 = add nuw nsw i64 %.0929.i, %8
  %19 = shl i64 %18, 4
  %20 = add nuw nsw i64 %15, %8
  %21 = shl i64 %20, 4
  %22 = add nuw nsw i64 %10, %4
  %23 = add nuw nsw i64 %22, 192
  %scevgep18 = getelementptr float, float* %0, i64 %23
  %scevgep16 = getelementptr float, float* %0, i64 %22
  %24 = add nuw nsw i64 %9, %3
  %25 = add nuw nsw i64 %24, 16
  %scevgep14 = getelementptr float, float* %1, i64 %25
  %scevgep = getelementptr float, float* %1, i64 %24
  %bound0 = icmp ult float* %scevgep, %scevgep18
  %bound1 = icmp ult float* %scevgep16, %scevgep14
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %._crit_edge.i2.1, label %vector.body

vector.body:                                      ; preds = %.preheader14.i.preheader
  %26 = getelementptr inbounds float, float* %0, i64 %14
  %27 = bitcast float* %26 to <8 x float>*
  %wide.load = load <8 x float>, <8 x float>* %27, align 4, !alias.scope !8
  %28 = getelementptr inbounds float, float* %0, i64 %17
  %29 = bitcast float* %28 to <8 x float>*
  %wide.load20 = load <8 x float>, <8 x float>* %29, align 4, !alias.scope !8
  %30 = fcmp reassoc nsz arcp oge <8 x float> %wide.load20, %wide.load
  %31 = select <8 x i1> %30, <8 x float> %wide.load20, <8 x float> %wide.load
  %32 = getelementptr inbounds float, float* %0, i64 %19
  %33 = bitcast float* %32 to <8 x float>*
  %wide.load21 = load <8 x float>, <8 x float>* %33, align 4, !alias.scope !8
  %34 = fcmp reassoc nsz arcp oge <8 x float> %wide.load21, %31
  %35 = select <8 x i1> %34, <8 x float> %wide.load21, <8 x float> %31
  %36 = getelementptr inbounds float, float* %0, i64 %21
  %37 = bitcast float* %36 to <8 x float>*
  %wide.load22 = load <8 x float>, <8 x float>* %37, align 4, !alias.scope !8
  %38 = fcmp reassoc nsz arcp oge <8 x float> %wide.load22, %35
  %39 = select <8 x i1> %38, <8 x float> %wide.load22, <8 x float> %35
  %40 = getelementptr inbounds float, float* %1, i64 %12
  %41 = bitcast float* %40 to <8 x float>*
  store <8 x float> %39, <8 x float>* %41, align 4, !alias.scope !11, !noalias !8
  %42 = or i64 %14, 8
  %43 = getelementptr inbounds float, float* %0, i64 %42
  %44 = bitcast float* %43 to <8 x float>*
  %wide.load.1 = load <8 x float>, <8 x float>* %44, align 4, !alias.scope !8
  %45 = or i64 %17, 8
  %46 = getelementptr inbounds float, float* %0, i64 %45
  %47 = bitcast float* %46 to <8 x float>*
  %wide.load20.1 = load <8 x float>, <8 x float>* %47, align 4, !alias.scope !8
  %48 = fcmp reassoc nsz arcp oge <8 x float> %wide.load20.1, %wide.load.1
  %49 = select <8 x i1> %48, <8 x float> %wide.load20.1, <8 x float> %wide.load.1
  %50 = or i64 %19, 8
  %51 = getelementptr inbounds float, float* %0, i64 %50
  %52 = bitcast float* %51 to <8 x float>*
  %wide.load21.1 = load <8 x float>, <8 x float>* %52, align 4, !alias.scope !8
  %53 = fcmp reassoc nsz arcp oge <8 x float> %wide.load21.1, %49
  %54 = select <8 x i1> %53, <8 x float> %wide.load21.1, <8 x float> %49
  %55 = or i64 %21, 8
  %56 = getelementptr inbounds float, float* %0, i64 %55
  %57 = bitcast float* %56 to <8 x float>*
  %wide.load22.1 = load <8 x float>, <8 x float>* %57, align 4, !alias.scope !8
  %58 = fcmp reassoc nsz arcp oge <8 x float> %wide.load22.1, %54
  %59 = select <8 x i1> %58, <8 x float> %wide.load22.1, <8 x float> %54
  %60 = or i64 %12, 8
  %61 = getelementptr inbounds float, float* %1, i64 %60
  %62 = bitcast float* %61 to <8 x float>*
  store <8 x float> %59, <8 x float>* %62, align 4, !alias.scope !11, !noalias !8
  br label %._crit_edge28.i

._crit_edge28.i:                                  ; preds = %._crit_edge.i2.1, %vector.body
  %63 = add nuw nsw i64 %.0929.i, 2
  %64 = add nuw nsw i64 %.0831.i, 1
  %exitcond9 = icmp eq i64 %64, 5
  br i1 %exitcond9, label %._crit_edge33.i, label %.preheader14.i.preheader

._crit_edge33.i:                                  ; preds = %._crit_edge28.i
  %65 = add nuw nsw i64 %.01134.i, 2
  %66 = add nuw nsw i64 %.01036.i, 1
  %exitcond10 = icmp eq i64 %66, 5
  br i1 %exitcond10, label %_ZN12_GLOBAL__N_123libjit_max_pool_genericIfEEvPKT_PS1_PKmS6_PmS7_S7_.exit, label %.preheader15.i.preheader

_ZN12_GLOBAL__N_123libjit_max_pool_genericIfEEvPKT_PS1_PKmS6_PmS7_S7_.exit: ; preds = %._crit_edge33.i
  ret void

._crit_edge.i2.1:                                 ; preds = %.preheader14.i.preheader, %._crit_edge.i2.1
  %.0726.i = phi i64 [ %96, %._crit_edge.i2.1 ], [ 0, %.preheader14.i.preheader ]
  %67 = add nuw nsw i64 %.0726.i, %14
  %68 = getelementptr inbounds float, float* %0, i64 %67
  %69 = load float, float* %68, align 4
  %70 = add nuw nsw i64 %.0726.i, %17
  %71 = getelementptr inbounds float, float* %0, i64 %70
  %72 = load float, float* %71, align 4
  %.inv = fcmp reassoc nsz arcp oge float %72, %69
  %.2.i.1 = select i1 %.inv, float %72, float %69
  %73 = add nuw nsw i64 %.0726.i, %19
  %74 = getelementptr inbounds float, float* %0, i64 %73
  %75 = load float, float* %74, align 4
  %.inv11 = fcmp reassoc nsz arcp oge float %75, %.2.i.1
  %.2.i.16 = select i1 %.inv11, float %75, float %.2.i.1
  %76 = add nuw nsw i64 %.0726.i, %21
  %77 = getelementptr inbounds float, float* %0, i64 %76
  %78 = load float, float* %77, align 4
  %.inv12 = fcmp reassoc nsz arcp oge float %78, %.2.i.16
  %.2.i.1.1 = select i1 %.inv12, float %78, float %.2.i.16
  %79 = add nuw nsw i64 %.0726.i, %12
  %80 = getelementptr inbounds float, float* %1, i64 %79
  store float %.2.i.1.1, float* %80, align 4
  %81 = or i64 %.0726.i, 1
  %82 = add nuw nsw i64 %81, %14
  %83 = getelementptr inbounds float, float* %0, i64 %82
  %84 = load float, float* %83, align 4
  %85 = add nuw nsw i64 %81, %17
  %86 = getelementptr inbounds float, float* %0, i64 %85
  %87 = load float, float* %86, align 4
  %.inv.1 = fcmp reassoc nsz arcp oge float %87, %84
  %.2.i.1.124 = select i1 %.inv.1, float %87, float %84
  %88 = add nuw nsw i64 %81, %19
  %89 = getelementptr inbounds float, float* %0, i64 %88
  %90 = load float, float* %89, align 4
  %.inv11.1 = fcmp reassoc nsz arcp oge float %90, %.2.i.1.124
  %.2.i.16.1 = select i1 %.inv11.1, float %90, float %.2.i.1.124
  %91 = add nuw nsw i64 %81, %21
  %92 = getelementptr inbounds float, float* %0, i64 %91
  %93 = load float, float* %92, align 4
  %.inv12.1 = fcmp reassoc nsz arcp oge float %93, %.2.i.16.1
  %.2.i.1.1.1 = select i1 %.inv12.1, float %93, float %.2.i.16.1
  %94 = add nuw nsw i64 %81, %12
  %95 = getelementptr inbounds float, float* %1, i64 %94
  store float %.2.i.1.1.1, float* %95, align 4
  %96 = add nuw nsw i64 %.0726.i, 2
  %exitcond.1 = icmp eq i64 %96, 16
  br i1 %exitcond.1, label %._crit_edge28.i, label %._crit_edge.i2.1, !llvm.loop !13
}

; Function Attrs: noinline nounwind
define internal fastcc void @libjit_matmul_f_6_specialized(float* nocapture, float* nocapture readonly, float* nocapture readonly) unnamed_addr #3 {
  %4 = bitcast float* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 480, i1 false)
  %5 = getelementptr inbounds float, float* %0, i64 96
  %6 = bitcast float* %5 to i8*
  %scevgep = getelementptr float, float* %0, i64 120
  %7 = bitcast float* %0 to <8 x float>*
  %8 = getelementptr inbounds float, float* %0, i64 8
  %9 = bitcast float* %8 to <8 x float>*
  %10 = getelementptr inbounds float, float* %0, i64 16
  %11 = bitcast float* %10 to <8 x float>*
  %12 = getelementptr inbounds float, float* %0, i64 24
  %13 = bitcast float* %12 to <8 x float>*
  %14 = getelementptr inbounds float, float* %0, i64 32
  %15 = bitcast float* %14 to <8 x float>*
  %16 = getelementptr inbounds float, float* %0, i64 40
  %17 = bitcast float* %16 to <8 x float>*
  %18 = getelementptr inbounds float, float* %0, i64 48
  %19 = bitcast float* %18 to <8 x float>*
  %20 = getelementptr inbounds float, float* %0, i64 56
  %21 = bitcast float* %20 to <8 x float>*
  %22 = getelementptr inbounds float, float* %0, i64 64
  %23 = bitcast float* %22 to <8 x float>*
  %24 = getelementptr inbounds float, float* %0, i64 72
  %25 = bitcast float* %24 to <8 x float>*
  %26 = getelementptr inbounds float, float* %0, i64 80
  %27 = bitcast float* %26 to <8 x float>*
  %28 = getelementptr inbounds float, float* %0, i64 88
  %29 = bitcast float* %28 to <8 x float>*
  %30 = bitcast float* %5 to <8 x float>*
  %31 = getelementptr inbounds float, float* %0, i64 104
  %32 = bitcast float* %31 to <8 x float>*
  %33 = getelementptr inbounds float, float* %0, i64 112
  %34 = bitcast float* %33 to <8 x float>*
  br label %_ZN12_GLOBAL__N_128libjit_matmul_inner_unpackedEiiiPKfiS1_iPfi.exit.i.i

_ZN12_GLOBAL__N_128libjit_matmul_inner_unpackedEiiiPKfiS1_iPfi.exit.i.i: ; preds = %_ZN12_GLOBAL__N_119libjit_matmul_innerILb0EEEviiiPKfiS2_iPfiS3_.exit.i, %3
  %indvar = phi i64 [ %indvar.next, %_ZN12_GLOBAL__N_119libjit_matmul_innerILb0EEEviiiPKfiS2_iPfiS3_.exit.i ], [ 0, %3 ]
  %.0229.i = phi i64 [ %199, %_ZN12_GLOBAL__N_119libjit_matmul_innerILb0EEEviiiPKfiS2_iPfiS3_.exit.i ], [ 0, %3 ]
  %35 = mul nuw nsw i64 %indvar, 15360
  %36 = or i64 %35, 96
  %37 = shl i64 %indvar, 7
  %38 = sub nuw nsw i64 400, %.0229.i
  %39 = icmp ult i64 %38, 128
  %40 = select i1 %39, i64 %38, i64 128
  %41 = mul nuw nsw i64 %.0229.i, 120
  %42 = getelementptr inbounds float, float* %1, i64 %.0229.i
  %43 = getelementptr inbounds float, float* %2, i64 %41
  br label %.lr.ph.i16.i.i

.lr.ph.i16.i.i:                                   ; preds = %_ZN12_GLOBAL__N_128libjit_matmul_inner_unpackedEiiiPKfiS1_iPfi.exit.i.i, %._crit_edge.i22.i.i
  %indvars.iv15.i11.i.i = phi i64 [ 0, %_ZN12_GLOBAL__N_128libjit_matmul_inner_unpackedEiiiPKfiS1_iPfi.exit.i.i ], [ %indvars.iv.next16.i23.i.i, %._crit_edge.i22.i.i ]
  %44 = mul nuw nsw i64 %indvars.iv15.i11.i.i, 120
  %45 = getelementptr inbounds float, float* %42, i64 %indvars.iv15.i11.i.i
  %46 = add nuw nsw i64 %indvars.iv15.i11.i.i, %37
  %scevgep20 = getelementptr float, float* %1, i64 %46
  %scevgep2021 = bitcast float* %scevgep20 to i8*
  %uglygep22 = getelementptr i8, i8* %scevgep2021, i64 1
  %47 = add nuw nsw i64 %44, %36
  %scevgep18 = getelementptr float, float* %2, i64 %47
  %48 = add nuw nsw i64 %44, %35
  %scevgep16 = getelementptr float, float* %2, i64 %48
  %bound023 = icmp ugt float* %scevgep18, %0
  %bound124 = icmp ult float* %scevgep16, %5
  %found.conflict25 = and i1 %bound023, %bound124
  %bound027 = icmp ugt i8* %uglygep22, %4
  %bound128 = icmp ult float* %45, %5
  %found.conflict29 = and i1 %bound128, %bound027
  %conflict.rdx30 = or i1 %found.conflict25, %found.conflict29
  br i1 %conflict.rdx30, label %scalar.ph14, label %vector.body12

vector.body12:                                    ; preds = %.lr.ph.i16.i.i
  %49 = getelementptr inbounds float, float* %43, i64 %44
  %50 = bitcast float* %49 to <8 x float>*
  %wide.load41 = load <8 x float>, <8 x float>* %50, align 4, !alias.scope !14
  %51 = load float, float* %45, align 4, !alias.scope !17
  %52 = insertelement <8 x float> undef, float %51, i32 0
  %53 = shufflevector <8 x float> %52, <8 x float> undef, <8 x i32> zeroinitializer
  %54 = fmul reassoc nsz arcp contract <8 x float> %wide.load41, %53
  %wide.load42 = load <8 x float>, <8 x float>* %7, align 4, !alias.scope !19, !noalias !21
  %55 = fadd reassoc nsz arcp contract <8 x float> %wide.load42, %54
  store <8 x float> %55, <8 x float>* %7, align 4, !alias.scope !19, !noalias !21
  %56 = add nuw nsw i64 %44, 8
  %57 = getelementptr inbounds float, float* %43, i64 %56
  %58 = bitcast float* %57 to <8 x float>*
  %wide.load41.1 = load <8 x float>, <8 x float>* %58, align 4, !alias.scope !14
  %59 = fmul reassoc nsz arcp contract <8 x float> %53, %wide.load41.1
  %wide.load42.1 = load <8 x float>, <8 x float>* %9, align 4, !alias.scope !19, !noalias !21
  %60 = fadd reassoc nsz arcp contract <8 x float> %wide.load42.1, %59
  store <8 x float> %60, <8 x float>* %9, align 4, !alias.scope !19, !noalias !21
  %61 = add nuw nsw i64 %44, 16
  %62 = getelementptr inbounds float, float* %43, i64 %61
  %63 = bitcast float* %62 to <8 x float>*
  %wide.load41.2 = load <8 x float>, <8 x float>* %63, align 4, !alias.scope !14
  %64 = fmul reassoc nsz arcp contract <8 x float> %53, %wide.load41.2
  %wide.load42.2 = load <8 x float>, <8 x float>* %11, align 4, !alias.scope !19, !noalias !21
  %65 = fadd reassoc nsz arcp contract <8 x float> %wide.load42.2, %64
  store <8 x float> %65, <8 x float>* %11, align 4, !alias.scope !19, !noalias !21
  %66 = add nuw nsw i64 %44, 24
  %67 = getelementptr inbounds float, float* %43, i64 %66
  %68 = bitcast float* %67 to <8 x float>*
  %wide.load41.3 = load <8 x float>, <8 x float>* %68, align 4, !alias.scope !14
  %69 = fmul reassoc nsz arcp contract <8 x float> %53, %wide.load41.3
  %wide.load42.3 = load <8 x float>, <8 x float>* %13, align 4, !alias.scope !19, !noalias !21
  %70 = fadd reassoc nsz arcp contract <8 x float> %wide.load42.3, %69
  store <8 x float> %70, <8 x float>* %13, align 4, !alias.scope !19, !noalias !21
  %71 = add nuw nsw i64 %44, 32
  %72 = getelementptr inbounds float, float* %43, i64 %71
  %73 = bitcast float* %72 to <8 x float>*
  %wide.load41.4 = load <8 x float>, <8 x float>* %73, align 4, !alias.scope !14
  %74 = fmul reassoc nsz arcp contract <8 x float> %53, %wide.load41.4
  %wide.load42.4 = load <8 x float>, <8 x float>* %15, align 4, !alias.scope !19, !noalias !21
  %75 = fadd reassoc nsz arcp contract <8 x float> %wide.load42.4, %74
  store <8 x float> %75, <8 x float>* %15, align 4, !alias.scope !19, !noalias !21
  %76 = add nuw nsw i64 %44, 40
  %77 = getelementptr inbounds float, float* %43, i64 %76
  %78 = bitcast float* %77 to <8 x float>*
  %wide.load41.5 = load <8 x float>, <8 x float>* %78, align 4, !alias.scope !14
  %79 = fmul reassoc nsz arcp contract <8 x float> %53, %wide.load41.5
  %wide.load42.5 = load <8 x float>, <8 x float>* %17, align 4, !alias.scope !19, !noalias !21
  %80 = fadd reassoc nsz arcp contract <8 x float> %wide.load42.5, %79
  store <8 x float> %80, <8 x float>* %17, align 4, !alias.scope !19, !noalias !21
  %81 = add nuw nsw i64 %44, 48
  %82 = getelementptr inbounds float, float* %43, i64 %81
  %83 = bitcast float* %82 to <8 x float>*
  %wide.load41.6 = load <8 x float>, <8 x float>* %83, align 4, !alias.scope !14
  %84 = fmul reassoc nsz arcp contract <8 x float> %53, %wide.load41.6
  %wide.load42.6 = load <8 x float>, <8 x float>* %19, align 4, !alias.scope !19, !noalias !21
  %85 = fadd reassoc nsz arcp contract <8 x float> %wide.load42.6, %84
  store <8 x float> %85, <8 x float>* %19, align 4, !alias.scope !19, !noalias !21
  %86 = add nuw nsw i64 %44, 56
  %87 = getelementptr inbounds float, float* %43, i64 %86
  %88 = bitcast float* %87 to <8 x float>*
  %wide.load41.7 = load <8 x float>, <8 x float>* %88, align 4, !alias.scope !14
  %89 = fmul reassoc nsz arcp contract <8 x float> %53, %wide.load41.7
  %wide.load42.7 = load <8 x float>, <8 x float>* %21, align 4, !alias.scope !19, !noalias !21
  %90 = fadd reassoc nsz arcp contract <8 x float> %wide.load42.7, %89
  store <8 x float> %90, <8 x float>* %21, align 4, !alias.scope !19, !noalias !21
  %91 = add nuw nsw i64 %44, 64
  %92 = getelementptr inbounds float, float* %43, i64 %91
  %93 = bitcast float* %92 to <8 x float>*
  %wide.load41.8 = load <8 x float>, <8 x float>* %93, align 4, !alias.scope !14
  %94 = fmul reassoc nsz arcp contract <8 x float> %53, %wide.load41.8
  %wide.load42.8 = load <8 x float>, <8 x float>* %23, align 4, !alias.scope !19, !noalias !21
  %95 = fadd reassoc nsz arcp contract <8 x float> %wide.load42.8, %94
  store <8 x float> %95, <8 x float>* %23, align 4, !alias.scope !19, !noalias !21
  %96 = add nuw nsw i64 %44, 72
  %97 = getelementptr inbounds float, float* %43, i64 %96
  %98 = bitcast float* %97 to <8 x float>*
  %wide.load41.9 = load <8 x float>, <8 x float>* %98, align 4, !alias.scope !14
  %99 = fmul reassoc nsz arcp contract <8 x float> %53, %wide.load41.9
  %wide.load42.9 = load <8 x float>, <8 x float>* %25, align 4, !alias.scope !19, !noalias !21
  %100 = fadd reassoc nsz arcp contract <8 x float> %wide.load42.9, %99
  store <8 x float> %100, <8 x float>* %25, align 4, !alias.scope !19, !noalias !21
  %101 = add nuw nsw i64 %44, 80
  %102 = getelementptr inbounds float, float* %43, i64 %101
  %103 = bitcast float* %102 to <8 x float>*
  %wide.load41.10 = load <8 x float>, <8 x float>* %103, align 4, !alias.scope !14
  %104 = fmul reassoc nsz arcp contract <8 x float> %53, %wide.load41.10
  %wide.load42.10 = load <8 x float>, <8 x float>* %27, align 4, !alias.scope !19, !noalias !21
  %105 = fadd reassoc nsz arcp contract <8 x float> %wide.load42.10, %104
  store <8 x float> %105, <8 x float>* %27, align 4, !alias.scope !19, !noalias !21
  %106 = add nuw nsw i64 %44, 88
  %107 = getelementptr inbounds float, float* %43, i64 %106
  %108 = bitcast float* %107 to <8 x float>*
  %wide.load41.11 = load <8 x float>, <8 x float>* %108, align 4, !alias.scope !14
  %109 = fmul reassoc nsz arcp contract <8 x float> %53, %wide.load41.11
  %wide.load42.11 = load <8 x float>, <8 x float>* %29, align 4, !alias.scope !19, !noalias !21
  %110 = fadd reassoc nsz arcp contract <8 x float> %wide.load42.11, %109
  store <8 x float> %110, <8 x float>* %29, align 4, !alias.scope !19, !noalias !21
  br label %._crit_edge.i22.i.i

scalar.ph14:                                      ; preds = %.lr.ph.i16.i.i, %scalar.ph14
  %indvars.iv.i17.i.i = phi i64 [ %indvars.iv.next.i18.i.i.3, %scalar.ph14 ], [ 0, %.lr.ph.i16.i.i ]
  %111 = add nuw nsw i64 %indvars.iv.i17.i.i, %44
  %112 = getelementptr inbounds float, float* %43, i64 %111
  %113 = load float, float* %112, align 4
  %114 = load float, float* %45, align 4
  %115 = fmul reassoc nsz arcp contract float %113, %114
  %116 = getelementptr inbounds float, float* %0, i64 %indvars.iv.i17.i.i
  %117 = load float, float* %116, align 4
  %118 = fadd reassoc nsz arcp contract float %117, %115
  store float %118, float* %116, align 4
  %indvars.iv.next.i18.i.i = or i64 %indvars.iv.i17.i.i, 1
  %119 = add nuw nsw i64 %indvars.iv.next.i18.i.i, %44
  %120 = getelementptr inbounds float, float* %43, i64 %119
  %121 = load float, float* %120, align 4
  %122 = load float, float* %45, align 4
  %123 = fmul reassoc nsz arcp contract float %121, %122
  %124 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.i18.i.i
  %125 = load float, float* %124, align 4
  %126 = fadd reassoc nsz arcp contract float %125, %123
  store float %126, float* %124, align 4
  %indvars.iv.next.i18.i.i.1 = or i64 %indvars.iv.i17.i.i, 2
  %127 = add nuw nsw i64 %indvars.iv.next.i18.i.i.1, %44
  %128 = getelementptr inbounds float, float* %43, i64 %127
  %129 = load float, float* %128, align 4
  %130 = load float, float* %45, align 4
  %131 = fmul reassoc nsz arcp contract float %129, %130
  %132 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.i18.i.i.1
  %133 = load float, float* %132, align 4
  %134 = fadd reassoc nsz arcp contract float %133, %131
  store float %134, float* %132, align 4
  %indvars.iv.next.i18.i.i.2 = or i64 %indvars.iv.i17.i.i, 3
  %135 = add nuw nsw i64 %indvars.iv.next.i18.i.i.2, %44
  %136 = getelementptr inbounds float, float* %43, i64 %135
  %137 = load float, float* %136, align 4
  %138 = load float, float* %45, align 4
  %139 = fmul reassoc nsz arcp contract float %137, %138
  %140 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.i18.i.i.2
  %141 = load float, float* %140, align 4
  %142 = fadd reassoc nsz arcp contract float %141, %139
  store float %142, float* %140, align 4
  %indvars.iv.next.i18.i.i.3 = add nuw nsw i64 %indvars.iv.i17.i.i, 4
  %exitcond.i19.i.i.3 = icmp eq i64 %indvars.iv.next.i18.i.i.3, 96
  br i1 %exitcond.i19.i.i.3, label %._crit_edge.i22.i.i, label %scalar.ph14, !llvm.loop !22

._crit_edge.i22.i.i:                              ; preds = %scalar.ph14, %vector.body12
  %indvars.iv.next16.i23.i.i = add nuw nsw i64 %indvars.iv15.i11.i.i, 1
  %exitcond18.i24.i.i = icmp eq i64 %indvars.iv.next16.i23.i.i, %40
  br i1 %exitcond18.i24.i.i, label %_ZN12_GLOBAL__N_117libjit_matmul_oddEiiiPKfiS1_iPfi.exit26.i.i, label %.lr.ph.i16.i.i

_ZN12_GLOBAL__N_117libjit_matmul_oddEiiiPKfiS1_iPfi.exit26.i.i: ; preds = %._crit_edge.i22.i.i
  %143 = or i64 %35, 120
  %144 = getelementptr inbounds float, float* %43, i64 96
  br label %.lr.ph.i3.i.i

.lr.ph.i3.i.i:                                    ; preds = %_ZN12_GLOBAL__N_117libjit_matmul_oddEiiiPKfiS1_iPfi.exit26.i.i, %._crit_edge.i6.i.i
  %indvars.iv15.i.i.i = phi i64 [ %indvars.iv.next16.i.i.i, %._crit_edge.i6.i.i ], [ 0, %_ZN12_GLOBAL__N_117libjit_matmul_oddEiiiPKfiS1_iPfi.exit26.i.i ]
  %145 = mul nuw nsw i64 %indvars.iv15.i.i.i, 120
  %146 = getelementptr inbounds float, float* %42, i64 %indvars.iv15.i.i.i
  %147 = add nuw nsw i64 %indvars.iv15.i.i.i, %37
  %scevgep6 = getelementptr float, float* %1, i64 %147
  %scevgep67 = bitcast float* %scevgep6 to i8*
  %uglygep = getelementptr i8, i8* %scevgep67, i64 1
  %148 = add nuw nsw i64 %145, %143
  %scevgep4 = getelementptr float, float* %2, i64 %148
  %149 = add nuw nsw i64 %145, %36
  %scevgep2 = getelementptr float, float* %2, i64 %149
  %bound0 = icmp ult float* %5, %scevgep4
  %bound1 = icmp ult float* %scevgep2, %scevgep
  %found.conflict = and i1 %bound0, %bound1
  %bound08 = icmp ugt i8* %uglygep, %6
  %bound19 = icmp ult float* %146, %scevgep
  %found.conflict10 = and i1 %bound19, %bound08
  %conflict.rdx = or i1 %found.conflict, %found.conflict10
  br i1 %conflict.rdx, label %scalar.ph, label %vector.body

vector.body:                                      ; preds = %.lr.ph.i3.i.i
  %150 = getelementptr inbounds float, float* %144, i64 %145
  %151 = bitcast float* %150 to <8 x float>*
  %wide.load = load <8 x float>, <8 x float>* %151, align 4, !alias.scope !23
  %152 = load float, float* %146, align 4, !alias.scope !26
  %153 = insertelement <8 x float> undef, float %152, i32 0
  %154 = shufflevector <8 x float> %153, <8 x float> undef, <8 x i32> zeroinitializer
  %155 = fmul reassoc nsz arcp contract <8 x float> %wide.load, %154
  %wide.load11 = load <8 x float>, <8 x float>* %30, align 4, !alias.scope !28, !noalias !30
  %156 = fadd reassoc nsz arcp contract <8 x float> %wide.load11, %155
  store <8 x float> %156, <8 x float>* %30, align 4, !alias.scope !28, !noalias !30
  %157 = add nuw nsw i64 %145, 8
  %158 = getelementptr inbounds float, float* %144, i64 %157
  %159 = bitcast float* %158 to <8 x float>*
  %wide.load.1 = load <8 x float>, <8 x float>* %159, align 4, !alias.scope !23
  %160 = fmul reassoc nsz arcp contract <8 x float> %154, %wide.load.1
  %wide.load11.1 = load <8 x float>, <8 x float>* %32, align 4, !alias.scope !28, !noalias !30
  %161 = fadd reassoc nsz arcp contract <8 x float> %wide.load11.1, %160
  store <8 x float> %161, <8 x float>* %32, align 4, !alias.scope !28, !noalias !30
  %162 = add nuw nsw i64 %145, 16
  %163 = getelementptr inbounds float, float* %144, i64 %162
  %164 = bitcast float* %163 to <8 x float>*
  %wide.load.2 = load <8 x float>, <8 x float>* %164, align 4, !alias.scope !23
  %165 = fmul reassoc nsz arcp contract <8 x float> %154, %wide.load.2
  %wide.load11.2 = load <8 x float>, <8 x float>* %34, align 4, !alias.scope !28, !noalias !30
  %166 = fadd reassoc nsz arcp contract <8 x float> %wide.load11.2, %165
  store <8 x float> %166, <8 x float>* %34, align 4, !alias.scope !28, !noalias !30
  br label %._crit_edge.i6.i.i

scalar.ph:                                        ; preds = %.lr.ph.i3.i.i, %scalar.ph
  %indvars.iv.i4.i.i = phi i64 [ %indvars.iv.next.i5.i.i.3, %scalar.ph ], [ 0, %.lr.ph.i3.i.i ]
  %167 = add nuw nsw i64 %indvars.iv.i4.i.i, %145
  %168 = getelementptr inbounds float, float* %144, i64 %167
  %169 = load float, float* %168, align 4
  %170 = load float, float* %146, align 4
  %171 = fmul reassoc nsz arcp contract float %169, %170
  %172 = getelementptr inbounds float, float* %5, i64 %indvars.iv.i4.i.i
  %173 = load float, float* %172, align 4
  %174 = fadd reassoc nsz arcp contract float %173, %171
  store float %174, float* %172, align 4
  %indvars.iv.next.i5.i.i = or i64 %indvars.iv.i4.i.i, 1
  %175 = add nuw nsw i64 %indvars.iv.next.i5.i.i, %145
  %176 = getelementptr inbounds float, float* %144, i64 %175
  %177 = load float, float* %176, align 4
  %178 = load float, float* %146, align 4
  %179 = fmul reassoc nsz arcp contract float %177, %178
  %180 = getelementptr inbounds float, float* %5, i64 %indvars.iv.next.i5.i.i
  %181 = load float, float* %180, align 4
  %182 = fadd reassoc nsz arcp contract float %181, %179
  store float %182, float* %180, align 4
  %indvars.iv.next.i5.i.i.1 = or i64 %indvars.iv.i4.i.i, 2
  %183 = add nuw nsw i64 %indvars.iv.next.i5.i.i.1, %145
  %184 = getelementptr inbounds float, float* %144, i64 %183
  %185 = load float, float* %184, align 4
  %186 = load float, float* %146, align 4
  %187 = fmul reassoc nsz arcp contract float %185, %186
  %188 = getelementptr inbounds float, float* %5, i64 %indvars.iv.next.i5.i.i.1
  %189 = load float, float* %188, align 4
  %190 = fadd reassoc nsz arcp contract float %189, %187
  store float %190, float* %188, align 4
  %indvars.iv.next.i5.i.i.2 = or i64 %indvars.iv.i4.i.i, 3
  %191 = add nuw nsw i64 %indvars.iv.next.i5.i.i.2, %145
  %192 = getelementptr inbounds float, float* %144, i64 %191
  %193 = load float, float* %192, align 4
  %194 = load float, float* %146, align 4
  %195 = fmul reassoc nsz arcp contract float %193, %194
  %196 = getelementptr inbounds float, float* %5, i64 %indvars.iv.next.i5.i.i.2
  %197 = load float, float* %196, align 4
  %198 = fadd reassoc nsz arcp contract float %197, %195
  store float %198, float* %196, align 4
  %indvars.iv.next.i5.i.i.3 = add nuw nsw i64 %indvars.iv.i4.i.i, 4
  %exitcond.i.i.i.3 = icmp eq i64 %indvars.iv.next.i5.i.i.3, 24
  br i1 %exitcond.i.i.i.3, label %._crit_edge.i6.i.i, label %scalar.ph, !llvm.loop !31

._crit_edge.i6.i.i:                               ; preds = %scalar.ph, %vector.body
  %indvars.iv.next16.i.i.i = add nuw nsw i64 %indvars.iv15.i.i.i, 1
  %exitcond18.i.i.i = icmp eq i64 %indvars.iv.next16.i.i.i, %40
  br i1 %exitcond18.i.i.i, label %_ZN12_GLOBAL__N_119libjit_matmul_innerILb0EEEviiiPKfiS2_iPfiS3_.exit.i, label %.lr.ph.i3.i.i

_ZN12_GLOBAL__N_119libjit_matmul_innerILb0EEEviiiPKfiS2_iPfiS3_.exit.i: ; preds = %._crit_edge.i6.i.i
  %199 = add nuw nsw i64 %.0229.i, 128
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar.next, 4
  br i1 %exitcond, label %_ZN12_GLOBAL__N_119libjit_matmul_outerILb0EEEvmmmPKfmS2_mPfm.exit, label %_ZN12_GLOBAL__N_128libjit_matmul_inner_unpackedEiiiPKfiS1_iPfi.exit.i.i

_ZN12_GLOBAL__N_119libjit_matmul_outerILb0EEEvmmmPKfmS2_mPfm.exit: ; preds = %_ZN12_GLOBAL__N_119libjit_matmul_innerILb0EEEviiiPKfiS2_iPfiS3_.exit.i
  ret void
}

; Function Attrs: noinline norecurse nounwind
define internal fastcc void @libjit_stacked_kernel.2_7_specialized(float* nocapture, float* nocapture readonly) unnamed_addr #4 {
entry:
  %scevgep = getelementptr float, float* %0, i64 120
  %scevgep2 = getelementptr float, float* %1, i64 120
  %bound0 = icmp ugt float* %scevgep2, %0
  %bound1 = icmp ugt float* %scevgep, %1
  %found.conflict = and i1 %bound1, %bound0
  br i1 %found.conflict, label %loop, label %vector.body

vector.body:                                      ; preds = %entry
  %2 = bitcast float* %0 to <8 x float>*
  %wide.load = load <8 x float>, <8 x float>* %2, align 4, !alias.scope !32, !noalias !35
  %3 = bitcast float* %1 to <8 x float>*
  %wide.load4 = load <8 x float>, <8 x float>* %3, align 4, !alias.scope !35
  %4 = fadd reassoc nsz arcp contract <8 x float> %wide.load, %wide.load4
  store <8 x float> %4, <8 x float>* %2, align 4, !alias.scope !32, !noalias !35
  %5 = getelementptr float, float* %0, i64 8
  %6 = bitcast float* %5 to <8 x float>*
  %wide.load.1 = load <8 x float>, <8 x float>* %6, align 4, !alias.scope !32, !noalias !35
  %7 = getelementptr inbounds float, float* %1, i64 8
  %8 = bitcast float* %7 to <8 x float>*
  %wide.load4.1 = load <8 x float>, <8 x float>* %8, align 4, !alias.scope !35
  %9 = fadd reassoc nsz arcp contract <8 x float> %wide.load.1, %wide.load4.1
  store <8 x float> %9, <8 x float>* %6, align 4, !alias.scope !32, !noalias !35
  %10 = getelementptr float, float* %0, i64 16
  %11 = bitcast float* %10 to <8 x float>*
  %wide.load.2 = load <8 x float>, <8 x float>* %11, align 4, !alias.scope !32, !noalias !35
  %12 = getelementptr inbounds float, float* %1, i64 16
  %13 = bitcast float* %12 to <8 x float>*
  %wide.load4.2 = load <8 x float>, <8 x float>* %13, align 4, !alias.scope !35
  %14 = fadd reassoc nsz arcp contract <8 x float> %wide.load.2, %wide.load4.2
  store <8 x float> %14, <8 x float>* %11, align 4, !alias.scope !32, !noalias !35
  %15 = getelementptr float, float* %0, i64 24
  %16 = bitcast float* %15 to <8 x float>*
  %wide.load.3 = load <8 x float>, <8 x float>* %16, align 4, !alias.scope !32, !noalias !35
  %17 = getelementptr inbounds float, float* %1, i64 24
  %18 = bitcast float* %17 to <8 x float>*
  %wide.load4.3 = load <8 x float>, <8 x float>* %18, align 4, !alias.scope !35
  %19 = fadd reassoc nsz arcp contract <8 x float> %wide.load.3, %wide.load4.3
  store <8 x float> %19, <8 x float>* %16, align 4, !alias.scope !32, !noalias !35
  %20 = getelementptr float, float* %0, i64 32
  %21 = bitcast float* %20 to <8 x float>*
  %wide.load.4 = load <8 x float>, <8 x float>* %21, align 4, !alias.scope !32, !noalias !35
  %22 = getelementptr inbounds float, float* %1, i64 32
  %23 = bitcast float* %22 to <8 x float>*
  %wide.load4.4 = load <8 x float>, <8 x float>* %23, align 4, !alias.scope !35
  %24 = fadd reassoc nsz arcp contract <8 x float> %wide.load.4, %wide.load4.4
  store <8 x float> %24, <8 x float>* %21, align 4, !alias.scope !32, !noalias !35
  %25 = getelementptr float, float* %0, i64 40
  %26 = bitcast float* %25 to <8 x float>*
  %wide.load.5 = load <8 x float>, <8 x float>* %26, align 4, !alias.scope !32, !noalias !35
  %27 = getelementptr inbounds float, float* %1, i64 40
  %28 = bitcast float* %27 to <8 x float>*
  %wide.load4.5 = load <8 x float>, <8 x float>* %28, align 4, !alias.scope !35
  %29 = fadd reassoc nsz arcp contract <8 x float> %wide.load.5, %wide.load4.5
  store <8 x float> %29, <8 x float>* %26, align 4, !alias.scope !32, !noalias !35
  %30 = getelementptr float, float* %0, i64 48
  %31 = bitcast float* %30 to <8 x float>*
  %wide.load.6 = load <8 x float>, <8 x float>* %31, align 4, !alias.scope !32, !noalias !35
  %32 = getelementptr inbounds float, float* %1, i64 48
  %33 = bitcast float* %32 to <8 x float>*
  %wide.load4.6 = load <8 x float>, <8 x float>* %33, align 4, !alias.scope !35
  %34 = fadd reassoc nsz arcp contract <8 x float> %wide.load.6, %wide.load4.6
  store <8 x float> %34, <8 x float>* %31, align 4, !alias.scope !32, !noalias !35
  %35 = getelementptr float, float* %0, i64 56
  %36 = bitcast float* %35 to <8 x float>*
  %wide.load.7 = load <8 x float>, <8 x float>* %36, align 4, !alias.scope !32, !noalias !35
  %37 = getelementptr inbounds float, float* %1, i64 56
  %38 = bitcast float* %37 to <8 x float>*
  %wide.load4.7 = load <8 x float>, <8 x float>* %38, align 4, !alias.scope !35
  %39 = fadd reassoc nsz arcp contract <8 x float> %wide.load.7, %wide.load4.7
  store <8 x float> %39, <8 x float>* %36, align 4, !alias.scope !32, !noalias !35
  %40 = getelementptr float, float* %0, i64 64
  %41 = bitcast float* %40 to <8 x float>*
  %wide.load.8 = load <8 x float>, <8 x float>* %41, align 4, !alias.scope !32, !noalias !35
  %42 = getelementptr inbounds float, float* %1, i64 64
  %43 = bitcast float* %42 to <8 x float>*
  %wide.load4.8 = load <8 x float>, <8 x float>* %43, align 4, !alias.scope !35
  %44 = fadd reassoc nsz arcp contract <8 x float> %wide.load.8, %wide.load4.8
  store <8 x float> %44, <8 x float>* %41, align 4, !alias.scope !32, !noalias !35
  %45 = getelementptr float, float* %0, i64 72
  %46 = bitcast float* %45 to <8 x float>*
  %wide.load.9 = load <8 x float>, <8 x float>* %46, align 4, !alias.scope !32, !noalias !35
  %47 = getelementptr inbounds float, float* %1, i64 72
  %48 = bitcast float* %47 to <8 x float>*
  %wide.load4.9 = load <8 x float>, <8 x float>* %48, align 4, !alias.scope !35
  %49 = fadd reassoc nsz arcp contract <8 x float> %wide.load.9, %wide.load4.9
  store <8 x float> %49, <8 x float>* %46, align 4, !alias.scope !32, !noalias !35
  %50 = getelementptr float, float* %0, i64 80
  %51 = bitcast float* %50 to <8 x float>*
  %wide.load.10 = load <8 x float>, <8 x float>* %51, align 4, !alias.scope !32, !noalias !35
  %52 = getelementptr inbounds float, float* %1, i64 80
  %53 = bitcast float* %52 to <8 x float>*
  %wide.load4.10 = load <8 x float>, <8 x float>* %53, align 4, !alias.scope !35
  %54 = fadd reassoc nsz arcp contract <8 x float> %wide.load.10, %wide.load4.10
  store <8 x float> %54, <8 x float>* %51, align 4, !alias.scope !32, !noalias !35
  %55 = getelementptr float, float* %0, i64 88
  %56 = bitcast float* %55 to <8 x float>*
  %wide.load.11 = load <8 x float>, <8 x float>* %56, align 4, !alias.scope !32, !noalias !35
  %57 = getelementptr inbounds float, float* %1, i64 88
  %58 = bitcast float* %57 to <8 x float>*
  %wide.load4.11 = load <8 x float>, <8 x float>* %58, align 4, !alias.scope !35
  %59 = fadd reassoc nsz arcp contract <8 x float> %wide.load.11, %wide.load4.11
  store <8 x float> %59, <8 x float>* %56, align 4, !alias.scope !32, !noalias !35
  %60 = getelementptr float, float* %0, i64 96
  %61 = bitcast float* %60 to <8 x float>*
  %wide.load.12 = load <8 x float>, <8 x float>* %61, align 4, !alias.scope !32, !noalias !35
  %62 = getelementptr inbounds float, float* %1, i64 96
  %63 = bitcast float* %62 to <8 x float>*
  %wide.load4.12 = load <8 x float>, <8 x float>* %63, align 4, !alias.scope !35
  %64 = fadd reassoc nsz arcp contract <8 x float> %wide.load.12, %wide.load4.12
  store <8 x float> %64, <8 x float>* %61, align 4, !alias.scope !32, !noalias !35
  %65 = getelementptr float, float* %0, i64 104
  %66 = bitcast float* %65 to <8 x float>*
  %wide.load.13 = load <8 x float>, <8 x float>* %66, align 4, !alias.scope !32, !noalias !35
  %67 = getelementptr inbounds float, float* %1, i64 104
  %68 = bitcast float* %67 to <8 x float>*
  %wide.load4.13 = load <8 x float>, <8 x float>* %68, align 4, !alias.scope !35
  %69 = fadd reassoc nsz arcp contract <8 x float> %wide.load.13, %wide.load4.13
  store <8 x float> %69, <8 x float>* %66, align 4, !alias.scope !32, !noalias !35
  %70 = getelementptr float, float* %0, i64 112
  %71 = bitcast float* %70 to <8 x float>*
  %wide.load.14 = load <8 x float>, <8 x float>* %71, align 4, !alias.scope !32, !noalias !35
  %72 = getelementptr inbounds float, float* %1, i64 112
  %73 = bitcast float* %72 to <8 x float>*
  %wide.load4.14 = load <8 x float>, <8 x float>* %73, align 4, !alias.scope !35
  %74 = fadd reassoc nsz arcp contract <8 x float> %wide.load.14, %wide.load4.14
  store <8 x float> %74, <8 x float>* %71, align 4, !alias.scope !32, !noalias !35
  br label %afterloop

loop:                                             ; preds = %entry, %loop
  %75 = phi i64 [ %nextvar.7, %loop ], [ 0, %entry ]
  %76 = getelementptr float, float* %0, i64 %75
  %77 = load float, float* %76, align 4
  %78 = getelementptr inbounds float, float* %1, i64 %75
  %79 = load float, float* %78, align 4
  %80 = fadd reassoc nsz arcp contract float %77, %79
  store float %80, float* %76, align 4
  %nextvar = or i64 %75, 1
  %81 = getelementptr float, float* %0, i64 %nextvar
  %82 = load float, float* %81, align 4
  %83 = getelementptr inbounds float, float* %1, i64 %nextvar
  %84 = load float, float* %83, align 4
  %85 = fadd reassoc nsz arcp contract float %82, %84
  store float %85, float* %81, align 4
  %nextvar.1 = or i64 %75, 2
  %86 = getelementptr float, float* %0, i64 %nextvar.1
  %87 = load float, float* %86, align 4
  %88 = getelementptr inbounds float, float* %1, i64 %nextvar.1
  %89 = load float, float* %88, align 4
  %90 = fadd reassoc nsz arcp contract float %87, %89
  store float %90, float* %86, align 4
  %nextvar.2 = or i64 %75, 3
  %91 = getelementptr float, float* %0, i64 %nextvar.2
  %92 = load float, float* %91, align 4
  %93 = getelementptr inbounds float, float* %1, i64 %nextvar.2
  %94 = load float, float* %93, align 4
  %95 = fadd reassoc nsz arcp contract float %92, %94
  store float %95, float* %91, align 4
  %nextvar.3 = or i64 %75, 4
  %96 = getelementptr float, float* %0, i64 %nextvar.3
  %97 = load float, float* %96, align 4
  %98 = getelementptr inbounds float, float* %1, i64 %nextvar.3
  %99 = load float, float* %98, align 4
  %100 = fadd reassoc nsz arcp contract float %97, %99
  store float %100, float* %96, align 4
  %nextvar.4 = or i64 %75, 5
  %101 = getelementptr float, float* %0, i64 %nextvar.4
  %102 = load float, float* %101, align 4
  %103 = getelementptr inbounds float, float* %1, i64 %nextvar.4
  %104 = load float, float* %103, align 4
  %105 = fadd reassoc nsz arcp contract float %102, %104
  store float %105, float* %101, align 4
  %nextvar.5 = or i64 %75, 6
  %106 = getelementptr float, float* %0, i64 %nextvar.5
  %107 = load float, float* %106, align 4
  %108 = getelementptr inbounds float, float* %1, i64 %nextvar.5
  %109 = load float, float* %108, align 4
  %110 = fadd reassoc nsz arcp contract float %107, %109
  store float %110, float* %106, align 4
  %nextvar.6 = or i64 %75, 7
  %111 = getelementptr float, float* %0, i64 %nextvar.6
  %112 = load float, float* %111, align 4
  %113 = getelementptr inbounds float, float* %1, i64 %nextvar.6
  %114 = load float, float* %113, align 4
  %115 = fadd reassoc nsz arcp contract float %112, %114
  store float %115, float* %111, align 4
  %nextvar.7 = add nuw nsw i64 %75, 8
  %exitcond.7 = icmp eq i64 %nextvar.7, 120
  br i1 %exitcond.7, label %afterloop, label %loop, !llvm.loop !37

afterloop:                                        ; preds = %loop, %vector.body
  ret void
}

; Function Attrs: noinline norecurse nounwind
define internal fastcc void @libjit_stacked_kernel.3_8_specialized(float* nocapture) unnamed_addr #4 {
entry:
  %1 = bitcast float* %0 to <8 x float>*
  %wide.load = load <8 x float>, <8 x float>* %1, align 4
  %2 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load, zeroinitializer
  %3 = select <8 x i1> %2, <8 x float> %wide.load, <8 x float> zeroinitializer
  store <8 x float> %3, <8 x float>* %1, align 4
  %4 = getelementptr float, float* %0, i64 8
  %5 = bitcast float* %4 to <8 x float>*
  %wide.load.1 = load <8 x float>, <8 x float>* %5, align 4
  %6 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.1, zeroinitializer
  %7 = select <8 x i1> %6, <8 x float> %wide.load.1, <8 x float> zeroinitializer
  store <8 x float> %7, <8 x float>* %5, align 4
  %8 = getelementptr float, float* %0, i64 16
  %9 = bitcast float* %8 to <8 x float>*
  %wide.load.2 = load <8 x float>, <8 x float>* %9, align 4
  %10 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.2, zeroinitializer
  %11 = select <8 x i1> %10, <8 x float> %wide.load.2, <8 x float> zeroinitializer
  store <8 x float> %11, <8 x float>* %9, align 4
  %12 = getelementptr float, float* %0, i64 24
  %13 = bitcast float* %12 to <8 x float>*
  %wide.load.3 = load <8 x float>, <8 x float>* %13, align 4
  %14 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.3, zeroinitializer
  %15 = select <8 x i1> %14, <8 x float> %wide.load.3, <8 x float> zeroinitializer
  store <8 x float> %15, <8 x float>* %13, align 4
  %16 = getelementptr float, float* %0, i64 32
  %17 = bitcast float* %16 to <8 x float>*
  %wide.load.4 = load <8 x float>, <8 x float>* %17, align 4
  %18 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.4, zeroinitializer
  %19 = select <8 x i1> %18, <8 x float> %wide.load.4, <8 x float> zeroinitializer
  store <8 x float> %19, <8 x float>* %17, align 4
  %20 = getelementptr float, float* %0, i64 40
  %21 = bitcast float* %20 to <8 x float>*
  %wide.load.5 = load <8 x float>, <8 x float>* %21, align 4
  %22 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.5, zeroinitializer
  %23 = select <8 x i1> %22, <8 x float> %wide.load.5, <8 x float> zeroinitializer
  store <8 x float> %23, <8 x float>* %21, align 4
  %24 = getelementptr float, float* %0, i64 48
  %25 = bitcast float* %24 to <8 x float>*
  %wide.load.6 = load <8 x float>, <8 x float>* %25, align 4
  %26 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.6, zeroinitializer
  %27 = select <8 x i1> %26, <8 x float> %wide.load.6, <8 x float> zeroinitializer
  store <8 x float> %27, <8 x float>* %25, align 4
  %28 = getelementptr float, float* %0, i64 56
  %29 = bitcast float* %28 to <8 x float>*
  %wide.load.7 = load <8 x float>, <8 x float>* %29, align 4
  %30 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.7, zeroinitializer
  %31 = select <8 x i1> %30, <8 x float> %wide.load.7, <8 x float> zeroinitializer
  store <8 x float> %31, <8 x float>* %29, align 4
  %32 = getelementptr float, float* %0, i64 64
  %33 = bitcast float* %32 to <8 x float>*
  %wide.load.8 = load <8 x float>, <8 x float>* %33, align 4
  %34 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.8, zeroinitializer
  %35 = select <8 x i1> %34, <8 x float> %wide.load.8, <8 x float> zeroinitializer
  store <8 x float> %35, <8 x float>* %33, align 4
  %36 = getelementptr float, float* %0, i64 72
  %37 = bitcast float* %36 to <8 x float>*
  %wide.load.9 = load <8 x float>, <8 x float>* %37, align 4
  %38 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.9, zeroinitializer
  %39 = select <8 x i1> %38, <8 x float> %wide.load.9, <8 x float> zeroinitializer
  store <8 x float> %39, <8 x float>* %37, align 4
  %40 = getelementptr float, float* %0, i64 80
  %41 = bitcast float* %40 to <8 x float>*
  %wide.load.10 = load <8 x float>, <8 x float>* %41, align 4
  %42 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.10, zeroinitializer
  %43 = select <8 x i1> %42, <8 x float> %wide.load.10, <8 x float> zeroinitializer
  store <8 x float> %43, <8 x float>* %41, align 4
  %44 = getelementptr float, float* %0, i64 88
  %45 = bitcast float* %44 to <8 x float>*
  %wide.load.11 = load <8 x float>, <8 x float>* %45, align 4
  %46 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.11, zeroinitializer
  %47 = select <8 x i1> %46, <8 x float> %wide.load.11, <8 x float> zeroinitializer
  store <8 x float> %47, <8 x float>* %45, align 4
  %48 = getelementptr float, float* %0, i64 96
  %49 = bitcast float* %48 to <8 x float>*
  %wide.load.12 = load <8 x float>, <8 x float>* %49, align 4
  %50 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.12, zeroinitializer
  %51 = select <8 x i1> %50, <8 x float> %wide.load.12, <8 x float> zeroinitializer
  store <8 x float> %51, <8 x float>* %49, align 4
  %52 = getelementptr float, float* %0, i64 104
  %53 = bitcast float* %52 to <8 x float>*
  %wide.load.13 = load <8 x float>, <8 x float>* %53, align 4
  %54 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.13, zeroinitializer
  %55 = select <8 x i1> %54, <8 x float> %wide.load.13, <8 x float> zeroinitializer
  store <8 x float> %55, <8 x float>* %53, align 4
  %56 = getelementptr float, float* %0, i64 112
  %57 = bitcast float* %56 to <8 x float>*
  %wide.load.14 = load <8 x float>, <8 x float>* %57, align 4
  %58 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.14, zeroinitializer
  %59 = select <8 x i1> %58, <8 x float> %wide.load.14, <8 x float> zeroinitializer
  store <8 x float> %59, <8 x float>* %57, align 4
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @libjit_matmul_f_9_specialized(float* nocapture, float* nocapture readonly, float* nocapture readonly) unnamed_addr #3 {
.preheader3.lr.ph.i10.i.i:
  %3 = bitcast float* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 336, i1 false)
  %scevgep = getelementptr float, float* %0, i64 64
  %4 = bitcast float* %0 to <8 x float>*
  %5 = getelementptr inbounds float, float* %0, i64 8
  %6 = bitcast float* %5 to <8 x float>*
  %7 = getelementptr inbounds float, float* %0, i64 16
  %8 = bitcast float* %7 to <8 x float>*
  %9 = getelementptr inbounds float, float* %0, i64 24
  %10 = bitcast float* %9 to <8 x float>*
  %11 = getelementptr inbounds float, float* %0, i64 32
  %12 = bitcast float* %11 to <8 x float>*
  %13 = getelementptr inbounds float, float* %0, i64 40
  %14 = bitcast float* %13 to <8 x float>*
  %15 = getelementptr inbounds float, float* %0, i64 48
  %16 = bitcast float* %15 to <8 x float>*
  %17 = getelementptr inbounds float, float* %0, i64 56
  %18 = bitcast float* %17 to <8 x float>*
  br label %.lr.ph.i16.i.i

.lr.ph.i16.i.i:                                   ; preds = %.preheader3.lr.ph.i10.i.i, %._crit_edge.i22.i.i
  %indvars.iv15.i11.i.i = phi i64 [ 0, %.preheader3.lr.ph.i10.i.i ], [ %indvars.iv.next16.i23.i.i, %._crit_edge.i22.i.i ]
  %19 = mul nuw nsw i64 %indvars.iv15.i11.i.i, 84
  %20 = getelementptr float, float* %1, i64 %indvars.iv15.i11.i.i
  %scevgep78 = bitcast float* %20 to i8*
  %uglygep = getelementptr i8, i8* %scevgep78, i64 1
  %21 = add nuw nsw i64 %19, 64
  %scevgep5 = getelementptr float, float* %2, i64 %21
  %scevgep3 = getelementptr float, float* %2, i64 %19
  %bound0 = icmp ugt float* %scevgep5, %0
  %bound1 = icmp ult float* %scevgep3, %scevgep
  %found.conflict = and i1 %bound1, %bound0
  %bound09 = icmp ugt i8* %uglygep, %3
  %bound110 = icmp ult float* %20, %scevgep
  %found.conflict11 = and i1 %bound110, %bound09
  %conflict.rdx = or i1 %found.conflict, %found.conflict11
  br i1 %conflict.rdx, label %scalar.ph, label %vector.body

vector.body:                                      ; preds = %.lr.ph.i16.i.i
  %22 = bitcast float* %scevgep3 to <8 x float>*
  %wide.load = load <8 x float>, <8 x float>* %22, align 4, !alias.scope !38
  %23 = load float, float* %20, align 4, !alias.scope !41
  %24 = insertelement <8 x float> undef, float %23, i32 0
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <8 x i32> zeroinitializer
  %26 = fmul reassoc nsz arcp contract <8 x float> %wide.load, %25
  %wide.load12 = load <8 x float>, <8 x float>* %4, align 4, !alias.scope !43, !noalias !45
  %27 = fadd reassoc nsz arcp contract <8 x float> %wide.load12, %26
  store <8 x float> %27, <8 x float>* %4, align 4, !alias.scope !43, !noalias !45
  %28 = add nuw nsw i64 %19, 8
  %29 = getelementptr inbounds float, float* %2, i64 %28
  %30 = bitcast float* %29 to <8 x float>*
  %wide.load.1 = load <8 x float>, <8 x float>* %30, align 4, !alias.scope !38
  %31 = fmul reassoc nsz arcp contract <8 x float> %25, %wide.load.1
  %wide.load12.1 = load <8 x float>, <8 x float>* %6, align 4, !alias.scope !43, !noalias !45
  %32 = fadd reassoc nsz arcp contract <8 x float> %wide.load12.1, %31
  store <8 x float> %32, <8 x float>* %6, align 4, !alias.scope !43, !noalias !45
  %33 = add nuw nsw i64 %19, 16
  %34 = getelementptr inbounds float, float* %2, i64 %33
  %35 = bitcast float* %34 to <8 x float>*
  %wide.load.2 = load <8 x float>, <8 x float>* %35, align 4, !alias.scope !38
  %36 = fmul reassoc nsz arcp contract <8 x float> %25, %wide.load.2
  %wide.load12.2 = load <8 x float>, <8 x float>* %8, align 4, !alias.scope !43, !noalias !45
  %37 = fadd reassoc nsz arcp contract <8 x float> %wide.load12.2, %36
  store <8 x float> %37, <8 x float>* %8, align 4, !alias.scope !43, !noalias !45
  %38 = add nuw nsw i64 %19, 24
  %39 = getelementptr inbounds float, float* %2, i64 %38
  %40 = bitcast float* %39 to <8 x float>*
  %wide.load.3 = load <8 x float>, <8 x float>* %40, align 4, !alias.scope !38
  %41 = fmul reassoc nsz arcp contract <8 x float> %25, %wide.load.3
  %wide.load12.3 = load <8 x float>, <8 x float>* %10, align 4, !alias.scope !43, !noalias !45
  %42 = fadd reassoc nsz arcp contract <8 x float> %wide.load12.3, %41
  store <8 x float> %42, <8 x float>* %10, align 4, !alias.scope !43, !noalias !45
  %43 = add nuw nsw i64 %19, 32
  %44 = getelementptr inbounds float, float* %2, i64 %43
  %45 = bitcast float* %44 to <8 x float>*
  %wide.load.4 = load <8 x float>, <8 x float>* %45, align 4, !alias.scope !38
  %46 = fmul reassoc nsz arcp contract <8 x float> %25, %wide.load.4
  %wide.load12.4 = load <8 x float>, <8 x float>* %12, align 4, !alias.scope !43, !noalias !45
  %47 = fadd reassoc nsz arcp contract <8 x float> %wide.load12.4, %46
  store <8 x float> %47, <8 x float>* %12, align 4, !alias.scope !43, !noalias !45
  %48 = add nuw nsw i64 %19, 40
  %49 = getelementptr inbounds float, float* %2, i64 %48
  %50 = bitcast float* %49 to <8 x float>*
  %wide.load.5 = load <8 x float>, <8 x float>* %50, align 4, !alias.scope !38
  %51 = fmul reassoc nsz arcp contract <8 x float> %25, %wide.load.5
  %wide.load12.5 = load <8 x float>, <8 x float>* %14, align 4, !alias.scope !43, !noalias !45
  %52 = fadd reassoc nsz arcp contract <8 x float> %wide.load12.5, %51
  store <8 x float> %52, <8 x float>* %14, align 4, !alias.scope !43, !noalias !45
  %53 = add nuw nsw i64 %19, 48
  %54 = getelementptr inbounds float, float* %2, i64 %53
  %55 = bitcast float* %54 to <8 x float>*
  %wide.load.6 = load <8 x float>, <8 x float>* %55, align 4, !alias.scope !38
  %56 = fmul reassoc nsz arcp contract <8 x float> %25, %wide.load.6
  %wide.load12.6 = load <8 x float>, <8 x float>* %16, align 4, !alias.scope !43, !noalias !45
  %57 = fadd reassoc nsz arcp contract <8 x float> %wide.load12.6, %56
  store <8 x float> %57, <8 x float>* %16, align 4, !alias.scope !43, !noalias !45
  %58 = add nuw nsw i64 %19, 56
  %59 = getelementptr inbounds float, float* %2, i64 %58
  %60 = bitcast float* %59 to <8 x float>*
  %wide.load.7 = load <8 x float>, <8 x float>* %60, align 4, !alias.scope !38
  %61 = fmul reassoc nsz arcp contract <8 x float> %25, %wide.load.7
  %wide.load12.7 = load <8 x float>, <8 x float>* %18, align 4, !alias.scope !43, !noalias !45
  %62 = fadd reassoc nsz arcp contract <8 x float> %wide.load12.7, %61
  store <8 x float> %62, <8 x float>* %18, align 4, !alias.scope !43, !noalias !45
  br label %._crit_edge.i22.i.i

scalar.ph:                                        ; preds = %.lr.ph.i16.i.i, %scalar.ph
  %indvars.iv.i17.i.i = phi i64 [ %indvars.iv.next.i18.i.i.3, %scalar.ph ], [ 0, %.lr.ph.i16.i.i ]
  %63 = add nuw nsw i64 %indvars.iv.i17.i.i, %19
  %64 = getelementptr inbounds float, float* %2, i64 %63
  %65 = load float, float* %64, align 4
  %66 = load float, float* %20, align 4
  %67 = fmul reassoc nsz arcp contract float %65, %66
  %68 = getelementptr inbounds float, float* %0, i64 %indvars.iv.i17.i.i
  %69 = load float, float* %68, align 4
  %70 = fadd reassoc nsz arcp contract float %69, %67
  store float %70, float* %68, align 4
  %indvars.iv.next.i18.i.i = or i64 %indvars.iv.i17.i.i, 1
  %71 = add nuw nsw i64 %indvars.iv.next.i18.i.i, %19
  %72 = getelementptr inbounds float, float* %2, i64 %71
  %73 = load float, float* %72, align 4
  %74 = load float, float* %20, align 4
  %75 = fmul reassoc nsz arcp contract float %73, %74
  %76 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.i18.i.i
  %77 = load float, float* %76, align 4
  %78 = fadd reassoc nsz arcp contract float %77, %75
  store float %78, float* %76, align 4
  %indvars.iv.next.i18.i.i.1 = or i64 %indvars.iv.i17.i.i, 2
  %79 = add nuw nsw i64 %indvars.iv.next.i18.i.i.1, %19
  %80 = getelementptr inbounds float, float* %2, i64 %79
  %81 = load float, float* %80, align 4
  %82 = load float, float* %20, align 4
  %83 = fmul reassoc nsz arcp contract float %81, %82
  %84 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.i18.i.i.1
  %85 = load float, float* %84, align 4
  %86 = fadd reassoc nsz arcp contract float %85, %83
  store float %86, float* %84, align 4
  %indvars.iv.next.i18.i.i.2 = or i64 %indvars.iv.i17.i.i, 3
  %87 = add nuw nsw i64 %indvars.iv.next.i18.i.i.2, %19
  %88 = getelementptr inbounds float, float* %2, i64 %87
  %89 = load float, float* %88, align 4
  %90 = load float, float* %20, align 4
  %91 = fmul reassoc nsz arcp contract float %89, %90
  %92 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.i18.i.i.2
  %93 = load float, float* %92, align 4
  %94 = fadd reassoc nsz arcp contract float %93, %91
  store float %94, float* %92, align 4
  %indvars.iv.next.i18.i.i.3 = add nuw nsw i64 %indvars.iv.i17.i.i, 4
  %exitcond.i19.i.i.3 = icmp eq i64 %indvars.iv.next.i18.i.i.3, 64
  br i1 %exitcond.i19.i.i.3, label %._crit_edge.i22.i.i, label %scalar.ph, !llvm.loop !46

._crit_edge.i22.i.i:                              ; preds = %scalar.ph, %vector.body
  %indvars.iv.next16.i23.i.i = add nuw nsw i64 %indvars.iv15.i11.i.i, 1
  %exitcond18.i24.i.i = icmp eq i64 %indvars.iv.next16.i23.i.i, 120
  br i1 %exitcond18.i24.i.i, label %.preheader3.lr.ph.i.i.i, label %.lr.ph.i16.i.i

.preheader3.lr.ph.i.i.i:                          ; preds = %._crit_edge.i22.i.i
  %95 = getelementptr inbounds float, float* %2, i64 64
  %96 = bitcast float* %scevgep to i8*
  %scevgep17 = getelementptr float, float* %0, i64 84
  %97 = bitcast float* %scevgep to <8 x float>*
  %98 = getelementptr inbounds float, float* %0, i64 72
  %99 = bitcast float* %98 to <8 x float>*
  br label %.lr.ph.i3.i.i

.lr.ph.i3.i.i:                                    ; preds = %.preheader3.lr.ph.i.i.i, %._crit_edge.i6.i.i
  %indvars.iv15.i.i.i = phi i64 [ 0, %.preheader3.lr.ph.i.i.i ], [ %indvars.iv.next16.i.i.i, %._crit_edge.i6.i.i ]
  %100 = mul nuw nsw i64 %indvars.iv15.i.i.i, 84
  %101 = getelementptr float, float* %1, i64 %indvars.iv15.i.i.i
  %scevgep2324 = bitcast float* %101 to i8*
  %uglygep25 = getelementptr i8, i8* %scevgep2324, i64 1
  %102 = add nuw nsw i64 %100, 84
  %scevgep21 = getelementptr float, float* %2, i64 %102
  %103 = add nuw nsw i64 %100, 64
  %scevgep19 = getelementptr float, float* %2, i64 %103
  %bound026 = icmp ult float* %scevgep, %scevgep21
  %bound127 = icmp ult float* %scevgep19, %scevgep17
  %found.conflict28 = and i1 %bound026, %bound127
  %bound030 = icmp ugt i8* %uglygep25, %96
  %bound131 = icmp ult float* %101, %scevgep17
  %found.conflict32 = and i1 %bound131, %bound030
  %conflict.rdx33 = or i1 %found.conflict28, %found.conflict32
  br i1 %conflict.rdx33, label %scalar.ph15.preheader, label %vector.body13

vector.body13:                                    ; preds = %.lr.ph.i3.i.i
  %104 = getelementptr inbounds float, float* %95, i64 %100
  %105 = bitcast float* %104 to <8 x float>*
  %wide.load44 = load <8 x float>, <8 x float>* %105, align 4, !alias.scope !47
  %106 = load float, float* %101, align 4, !alias.scope !50
  %107 = insertelement <8 x float> undef, float %106, i32 0
  %108 = shufflevector <8 x float> %107, <8 x float> undef, <8 x i32> zeroinitializer
  %109 = fmul reassoc nsz arcp contract <8 x float> %wide.load44, %108
  %wide.load45 = load <8 x float>, <8 x float>* %97, align 4, !alias.scope !52, !noalias !54
  %110 = fadd reassoc nsz arcp contract <8 x float> %wide.load45, %109
  store <8 x float> %110, <8 x float>* %97, align 4, !alias.scope !52, !noalias !54
  %111 = add nuw nsw i64 %100, 8
  %112 = getelementptr inbounds float, float* %95, i64 %111
  %113 = bitcast float* %112 to <8 x float>*
  %wide.load44.1 = load <8 x float>, <8 x float>* %113, align 4, !alias.scope !47
  %114 = fmul reassoc nsz arcp contract <8 x float> %108, %wide.load44.1
  %wide.load45.1 = load <8 x float>, <8 x float>* %99, align 4, !alias.scope !52, !noalias !54
  %115 = fadd reassoc nsz arcp contract <8 x float> %wide.load45.1, %114
  store <8 x float> %115, <8 x float>* %99, align 4, !alias.scope !52, !noalias !54
  br label %scalar.ph15.preheader

scalar.ph15.preheader:                            ; preds = %vector.body13, %.lr.ph.i3.i.i
  %indvars.iv.i4.i.i.ph = phi i64 [ 16, %vector.body13 ], [ 0, %.lr.ph.i3.i.i ]
  br label %scalar.ph15

scalar.ph15:                                      ; preds = %scalar.ph15.preheader, %scalar.ph15
  %indvars.iv.i4.i.i = phi i64 [ %indvars.iv.next.i5.i.i.3, %scalar.ph15 ], [ %indvars.iv.i4.i.i.ph, %scalar.ph15.preheader ]
  %116 = add nuw nsw i64 %indvars.iv.i4.i.i, %100
  %117 = getelementptr inbounds float, float* %95, i64 %116
  %118 = load float, float* %117, align 4
  %119 = load float, float* %101, align 4
  %120 = fmul reassoc nsz arcp contract float %118, %119
  %121 = getelementptr inbounds float, float* %scevgep, i64 %indvars.iv.i4.i.i
  %122 = load float, float* %121, align 4
  %123 = fadd reassoc nsz arcp contract float %122, %120
  store float %123, float* %121, align 4
  %indvars.iv.next.i5.i.i = or i64 %indvars.iv.i4.i.i, 1
  %124 = add nuw nsw i64 %indvars.iv.next.i5.i.i, %100
  %125 = getelementptr inbounds float, float* %95, i64 %124
  %126 = load float, float* %125, align 4
  %127 = load float, float* %101, align 4
  %128 = fmul reassoc nsz arcp contract float %126, %127
  %129 = getelementptr inbounds float, float* %scevgep, i64 %indvars.iv.next.i5.i.i
  %130 = load float, float* %129, align 4
  %131 = fadd reassoc nsz arcp contract float %130, %128
  store float %131, float* %129, align 4
  %indvars.iv.next.i5.i.i.1 = or i64 %indvars.iv.i4.i.i, 2
  %132 = add nuw nsw i64 %indvars.iv.next.i5.i.i.1, %100
  %133 = getelementptr inbounds float, float* %95, i64 %132
  %134 = load float, float* %133, align 4
  %135 = load float, float* %101, align 4
  %136 = fmul reassoc nsz arcp contract float %134, %135
  %137 = getelementptr inbounds float, float* %scevgep, i64 %indvars.iv.next.i5.i.i.1
  %138 = load float, float* %137, align 4
  %139 = fadd reassoc nsz arcp contract float %138, %136
  store float %139, float* %137, align 4
  %indvars.iv.next.i5.i.i.2 = or i64 %indvars.iv.i4.i.i, 3
  %140 = add nuw nsw i64 %indvars.iv.next.i5.i.i.2, %100
  %141 = getelementptr inbounds float, float* %95, i64 %140
  %142 = load float, float* %141, align 4
  %143 = load float, float* %101, align 4
  %144 = fmul reassoc nsz arcp contract float %142, %143
  %145 = getelementptr inbounds float, float* %scevgep, i64 %indvars.iv.next.i5.i.i.2
  %146 = load float, float* %145, align 4
  %147 = fadd reassoc nsz arcp contract float %146, %144
  store float %147, float* %145, align 4
  %indvars.iv.next.i5.i.i.3 = add nuw nsw i64 %indvars.iv.i4.i.i, 4
  %exitcond.i.i.i.3 = icmp eq i64 %indvars.iv.next.i5.i.i.3, 20
  br i1 %exitcond.i.i.i.3, label %._crit_edge.i6.i.i, label %scalar.ph15, !llvm.loop !55

._crit_edge.i6.i.i:                               ; preds = %scalar.ph15
  %indvars.iv.next16.i.i.i = add nuw nsw i64 %indvars.iv15.i.i.i, 1
  %exitcond18.i.i.i = icmp eq i64 %indvars.iv.next16.i.i.i, 120
  br i1 %exitcond18.i.i.i, label %_ZN12_GLOBAL__N_119libjit_matmul_innerILb0EEEviiiPKfiS2_iPfiS3_.exit.i, label %.lr.ph.i3.i.i

_ZN12_GLOBAL__N_119libjit_matmul_innerILb0EEEviiiPKfiS2_iPfiS3_.exit.i: ; preds = %._crit_edge.i6.i.i
  ret void
}

; Function Attrs: noinline norecurse nounwind
define internal fastcc void @libjit_stacked_kernel.4_10_specialized(float* nocapture, float* nocapture readonly) unnamed_addr #4 {
entry:
  %scevgep = getelementptr float, float* %0, i64 84
  %scevgep2 = getelementptr float, float* %1, i64 84
  %bound0 = icmp ugt float* %scevgep2, %0
  %bound1 = icmp ugt float* %scevgep, %1
  %found.conflict = and i1 %bound1, %bound0
  br i1 %found.conflict, label %loop.preheader, label %vector.body

vector.body:                                      ; preds = %entry
  %2 = bitcast float* %0 to <8 x float>*
  %wide.load = load <8 x float>, <8 x float>* %2, align 4, !alias.scope !56, !noalias !59
  %3 = bitcast float* %1 to <8 x float>*
  %wide.load4 = load <8 x float>, <8 x float>* %3, align 4, !alias.scope !59
  %4 = fadd reassoc nsz arcp contract <8 x float> %wide.load, %wide.load4
  store <8 x float> %4, <8 x float>* %2, align 4, !alias.scope !56, !noalias !59
  %5 = getelementptr float, float* %0, i64 8
  %6 = bitcast float* %5 to <8 x float>*
  %wide.load.1 = load <8 x float>, <8 x float>* %6, align 4, !alias.scope !56, !noalias !59
  %7 = getelementptr inbounds float, float* %1, i64 8
  %8 = bitcast float* %7 to <8 x float>*
  %wide.load4.1 = load <8 x float>, <8 x float>* %8, align 4, !alias.scope !59
  %9 = fadd reassoc nsz arcp contract <8 x float> %wide.load.1, %wide.load4.1
  store <8 x float> %9, <8 x float>* %6, align 4, !alias.scope !56, !noalias !59
  %10 = getelementptr float, float* %0, i64 16
  %11 = bitcast float* %10 to <8 x float>*
  %wide.load.2 = load <8 x float>, <8 x float>* %11, align 4, !alias.scope !56, !noalias !59
  %12 = getelementptr inbounds float, float* %1, i64 16
  %13 = bitcast float* %12 to <8 x float>*
  %wide.load4.2 = load <8 x float>, <8 x float>* %13, align 4, !alias.scope !59
  %14 = fadd reassoc nsz arcp contract <8 x float> %wide.load.2, %wide.load4.2
  store <8 x float> %14, <8 x float>* %11, align 4, !alias.scope !56, !noalias !59
  %15 = getelementptr float, float* %0, i64 24
  %16 = bitcast float* %15 to <8 x float>*
  %wide.load.3 = load <8 x float>, <8 x float>* %16, align 4, !alias.scope !56, !noalias !59
  %17 = getelementptr inbounds float, float* %1, i64 24
  %18 = bitcast float* %17 to <8 x float>*
  %wide.load4.3 = load <8 x float>, <8 x float>* %18, align 4, !alias.scope !59
  %19 = fadd reassoc nsz arcp contract <8 x float> %wide.load.3, %wide.load4.3
  store <8 x float> %19, <8 x float>* %16, align 4, !alias.scope !56, !noalias !59
  %20 = getelementptr float, float* %0, i64 32
  %21 = bitcast float* %20 to <8 x float>*
  %wide.load.4 = load <8 x float>, <8 x float>* %21, align 4, !alias.scope !56, !noalias !59
  %22 = getelementptr inbounds float, float* %1, i64 32
  %23 = bitcast float* %22 to <8 x float>*
  %wide.load4.4 = load <8 x float>, <8 x float>* %23, align 4, !alias.scope !59
  %24 = fadd reassoc nsz arcp contract <8 x float> %wide.load.4, %wide.load4.4
  store <8 x float> %24, <8 x float>* %21, align 4, !alias.scope !56, !noalias !59
  %25 = getelementptr float, float* %0, i64 40
  %26 = bitcast float* %25 to <8 x float>*
  %wide.load.5 = load <8 x float>, <8 x float>* %26, align 4, !alias.scope !56, !noalias !59
  %27 = getelementptr inbounds float, float* %1, i64 40
  %28 = bitcast float* %27 to <8 x float>*
  %wide.load4.5 = load <8 x float>, <8 x float>* %28, align 4, !alias.scope !59
  %29 = fadd reassoc nsz arcp contract <8 x float> %wide.load.5, %wide.load4.5
  store <8 x float> %29, <8 x float>* %26, align 4, !alias.scope !56, !noalias !59
  %30 = getelementptr float, float* %0, i64 48
  %31 = bitcast float* %30 to <8 x float>*
  %wide.load.6 = load <8 x float>, <8 x float>* %31, align 4, !alias.scope !56, !noalias !59
  %32 = getelementptr inbounds float, float* %1, i64 48
  %33 = bitcast float* %32 to <8 x float>*
  %wide.load4.6 = load <8 x float>, <8 x float>* %33, align 4, !alias.scope !59
  %34 = fadd reassoc nsz arcp contract <8 x float> %wide.load.6, %wide.load4.6
  store <8 x float> %34, <8 x float>* %31, align 4, !alias.scope !56, !noalias !59
  %35 = getelementptr float, float* %0, i64 56
  %36 = bitcast float* %35 to <8 x float>*
  %wide.load.7 = load <8 x float>, <8 x float>* %36, align 4, !alias.scope !56, !noalias !59
  %37 = getelementptr inbounds float, float* %1, i64 56
  %38 = bitcast float* %37 to <8 x float>*
  %wide.load4.7 = load <8 x float>, <8 x float>* %38, align 4, !alias.scope !59
  %39 = fadd reassoc nsz arcp contract <8 x float> %wide.load.7, %wide.load4.7
  store <8 x float> %39, <8 x float>* %36, align 4, !alias.scope !56, !noalias !59
  %40 = getelementptr float, float* %0, i64 64
  %41 = bitcast float* %40 to <8 x float>*
  %wide.load.8 = load <8 x float>, <8 x float>* %41, align 4, !alias.scope !56, !noalias !59
  %42 = getelementptr inbounds float, float* %1, i64 64
  %43 = bitcast float* %42 to <8 x float>*
  %wide.load4.8 = load <8 x float>, <8 x float>* %43, align 4, !alias.scope !59
  %44 = fadd reassoc nsz arcp contract <8 x float> %wide.load.8, %wide.load4.8
  store <8 x float> %44, <8 x float>* %41, align 4, !alias.scope !56, !noalias !59
  %45 = getelementptr float, float* %0, i64 72
  %46 = bitcast float* %45 to <8 x float>*
  %wide.load.9 = load <8 x float>, <8 x float>* %46, align 4, !alias.scope !56, !noalias !59
  %47 = getelementptr inbounds float, float* %1, i64 72
  %48 = bitcast float* %47 to <8 x float>*
  %wide.load4.9 = load <8 x float>, <8 x float>* %48, align 4, !alias.scope !59
  %49 = fadd reassoc nsz arcp contract <8 x float> %wide.load.9, %wide.load4.9
  store <8 x float> %49, <8 x float>* %46, align 4, !alias.scope !56, !noalias !59
  br label %loop.preheader

loop.preheader:                                   ; preds = %vector.body, %entry
  %.ph = phi i64 [ 0, %entry ], [ 80, %vector.body ]
  br label %loop.prol

loop.prol:                                        ; preds = %loop.prol, %loop.preheader
  %50 = phi i64 [ %nextvar.prol, %loop.prol ], [ %.ph, %loop.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %loop.prol ], [ 4, %loop.preheader ]
  %51 = getelementptr float, float* %0, i64 %50
  %52 = load float, float* %51, align 4
  %53 = getelementptr inbounds float, float* %1, i64 %50
  %54 = load float, float* %53, align 4
  %55 = fadd reassoc nsz arcp contract float %52, %54
  store float %55, float* %51, align 4
  %nextvar.prol = add nuw nsw i64 %50, 1
  %prol.iter.sub = add nsw i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %loop.prol.loopexit, label %loop.prol, !llvm.loop !61

loop.prol.loopexit:                               ; preds = %loop.prol
  %56 = sub nsw i64 83, %.ph
  %57 = icmp ult i64 %56, 7
  br i1 %57, label %afterloop, label %loop

loop:                                             ; preds = %loop.prol.loopexit, %loop
  %58 = phi i64 [ %nextvar.7, %loop ], [ %nextvar.prol, %loop.prol.loopexit ]
  %59 = getelementptr float, float* %0, i64 %58
  %60 = load float, float* %59, align 4
  %61 = getelementptr inbounds float, float* %1, i64 %58
  %62 = load float, float* %61, align 4
  %63 = fadd reassoc nsz arcp contract float %60, %62
  store float %63, float* %59, align 4
  %nextvar = add nuw nsw i64 %58, 1
  %64 = getelementptr float, float* %0, i64 %nextvar
  %65 = load float, float* %64, align 4
  %66 = getelementptr inbounds float, float* %1, i64 %nextvar
  %67 = load float, float* %66, align 4
  %68 = fadd reassoc nsz arcp contract float %65, %67
  store float %68, float* %64, align 4
  %nextvar.1 = add nuw nsw i64 %58, 2
  %69 = getelementptr float, float* %0, i64 %nextvar.1
  %70 = load float, float* %69, align 4
  %71 = getelementptr inbounds float, float* %1, i64 %nextvar.1
  %72 = load float, float* %71, align 4
  %73 = fadd reassoc nsz arcp contract float %70, %72
  store float %73, float* %69, align 4
  %nextvar.2 = add nuw nsw i64 %58, 3
  %74 = getelementptr float, float* %0, i64 %nextvar.2
  %75 = load float, float* %74, align 4
  %76 = getelementptr inbounds float, float* %1, i64 %nextvar.2
  %77 = load float, float* %76, align 4
  %78 = fadd reassoc nsz arcp contract float %75, %77
  store float %78, float* %74, align 4
  %nextvar.3 = add nuw nsw i64 %58, 4
  %79 = getelementptr float, float* %0, i64 %nextvar.3
  %80 = load float, float* %79, align 4
  %81 = getelementptr inbounds float, float* %1, i64 %nextvar.3
  %82 = load float, float* %81, align 4
  %83 = fadd reassoc nsz arcp contract float %80, %82
  store float %83, float* %79, align 4
  %nextvar.4 = add nuw nsw i64 %58, 5
  %84 = getelementptr float, float* %0, i64 %nextvar.4
  %85 = load float, float* %84, align 4
  %86 = getelementptr inbounds float, float* %1, i64 %nextvar.4
  %87 = load float, float* %86, align 4
  %88 = fadd reassoc nsz arcp contract float %85, %87
  store float %88, float* %84, align 4
  %nextvar.5 = add nuw nsw i64 %58, 6
  %89 = getelementptr float, float* %0, i64 %nextvar.5
  %90 = load float, float* %89, align 4
  %91 = getelementptr inbounds float, float* %1, i64 %nextvar.5
  %92 = load float, float* %91, align 4
  %93 = fadd reassoc nsz arcp contract float %90, %92
  store float %93, float* %89, align 4
  %nextvar.6 = add nuw nsw i64 %58, 7
  %94 = getelementptr float, float* %0, i64 %nextvar.6
  %95 = load float, float* %94, align 4
  %96 = getelementptr inbounds float, float* %1, i64 %nextvar.6
  %97 = load float, float* %96, align 4
  %98 = fadd reassoc nsz arcp contract float %95, %97
  store float %98, float* %94, align 4
  %nextvar.7 = add nuw nsw i64 %58, 8
  %exitcond.7 = icmp eq i64 %nextvar.7, 84
  br i1 %exitcond.7, label %afterloop, label %loop, !llvm.loop !63

afterloop:                                        ; preds = %loop, %loop.prol.loopexit
  ret void
}

; Function Attrs: noinline norecurse nounwind
define internal fastcc void @libjit_stacked_kernel.5_11_specialized(float* nocapture) unnamed_addr #4 {
entry:
  %1 = bitcast float* %0 to <8 x float>*
  %wide.load = load <8 x float>, <8 x float>* %1, align 4
  %2 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load, zeroinitializer
  %3 = select <8 x i1> %2, <8 x float> %wide.load, <8 x float> zeroinitializer
  store <8 x float> %3, <8 x float>* %1, align 4
  %4 = getelementptr float, float* %0, i64 8
  %5 = bitcast float* %4 to <8 x float>*
  %wide.load.1 = load <8 x float>, <8 x float>* %5, align 4
  %6 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.1, zeroinitializer
  %7 = select <8 x i1> %6, <8 x float> %wide.load.1, <8 x float> zeroinitializer
  store <8 x float> %7, <8 x float>* %5, align 4
  %8 = getelementptr float, float* %0, i64 16
  %9 = bitcast float* %8 to <8 x float>*
  %wide.load.2 = load <8 x float>, <8 x float>* %9, align 4
  %10 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.2, zeroinitializer
  %11 = select <8 x i1> %10, <8 x float> %wide.load.2, <8 x float> zeroinitializer
  store <8 x float> %11, <8 x float>* %9, align 4
  %12 = getelementptr float, float* %0, i64 24
  %13 = bitcast float* %12 to <8 x float>*
  %wide.load.3 = load <8 x float>, <8 x float>* %13, align 4
  %14 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.3, zeroinitializer
  %15 = select <8 x i1> %14, <8 x float> %wide.load.3, <8 x float> zeroinitializer
  store <8 x float> %15, <8 x float>* %13, align 4
  %16 = getelementptr float, float* %0, i64 32
  %17 = bitcast float* %16 to <8 x float>*
  %wide.load.4 = load <8 x float>, <8 x float>* %17, align 4
  %18 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.4, zeroinitializer
  %19 = select <8 x i1> %18, <8 x float> %wide.load.4, <8 x float> zeroinitializer
  store <8 x float> %19, <8 x float>* %17, align 4
  %20 = getelementptr float, float* %0, i64 40
  %21 = bitcast float* %20 to <8 x float>*
  %wide.load.5 = load <8 x float>, <8 x float>* %21, align 4
  %22 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.5, zeroinitializer
  %23 = select <8 x i1> %22, <8 x float> %wide.load.5, <8 x float> zeroinitializer
  store <8 x float> %23, <8 x float>* %21, align 4
  %24 = getelementptr float, float* %0, i64 48
  %25 = bitcast float* %24 to <8 x float>*
  %wide.load.6 = load <8 x float>, <8 x float>* %25, align 4
  %26 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.6, zeroinitializer
  %27 = select <8 x i1> %26, <8 x float> %wide.load.6, <8 x float> zeroinitializer
  store <8 x float> %27, <8 x float>* %25, align 4
  %28 = getelementptr float, float* %0, i64 56
  %29 = bitcast float* %28 to <8 x float>*
  %wide.load.7 = load <8 x float>, <8 x float>* %29, align 4
  %30 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.7, zeroinitializer
  %31 = select <8 x i1> %30, <8 x float> %wide.load.7, <8 x float> zeroinitializer
  store <8 x float> %31, <8 x float>* %29, align 4
  %32 = getelementptr float, float* %0, i64 64
  %33 = bitcast float* %32 to <8 x float>*
  %wide.load.8 = load <8 x float>, <8 x float>* %33, align 4
  %34 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.8, zeroinitializer
  %35 = select <8 x i1> %34, <8 x float> %wide.load.8, <8 x float> zeroinitializer
  store <8 x float> %35, <8 x float>* %33, align 4
  %36 = getelementptr float, float* %0, i64 72
  %37 = bitcast float* %36 to <8 x float>*
  %wide.load.9 = load <8 x float>, <8 x float>* %37, align 4
  %38 = fcmp reassoc nsz arcp ogt <8 x float> %wide.load.9, zeroinitializer
  %39 = select <8 x i1> %38, <8 x float> %wide.load.9, <8 x float> zeroinitializer
  store <8 x float> %39, <8 x float>* %37, align 4
  %40 = getelementptr float, float* %0, i64 80
  %41 = load float, float* %40, align 4
  %42 = fcmp reassoc nsz arcp ogt float %41, 0.000000e+00
  %43 = select i1 %42, float %41, float 0.000000e+00
  store float %43, float* %40, align 4
  %44 = getelementptr float, float* %0, i64 81
  %45 = load float, float* %44, align 4
  %46 = fcmp reassoc nsz arcp ogt float %45, 0.000000e+00
  %47 = select i1 %46, float %45, float 0.000000e+00
  store float %47, float* %44, align 4
  %48 = getelementptr float, float* %0, i64 82
  %49 = load float, float* %48, align 4
  %50 = fcmp reassoc nsz arcp ogt float %49, 0.000000e+00
  %51 = select i1 %50, float %49, float 0.000000e+00
  store float %51, float* %48, align 4
  %52 = getelementptr float, float* %0, i64 83
  %53 = load float, float* %52, align 4
  %54 = fcmp reassoc nsz arcp ogt float %53, 0.000000e+00
  %55 = select i1 %54, float %53, float 0.000000e+00
  store float %55, float* %52, align 4
  ret void
}

; Function Attrs: noinline nounwind
define internal fastcc void @libjit_matmul_f_12_specialized(float* nocapture, float* nocapture readonly, float* nocapture readonly) unnamed_addr #3 {
.preheader3.lr.ph.i10.i.i:
  %3 = bitcast float* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 40, i1 false)
  %4 = getelementptr inbounds float, float* %0, i64 1
  %5 = getelementptr inbounds float, float* %0, i64 2
  %6 = getelementptr inbounds float, float* %0, i64 3
  %7 = getelementptr inbounds float, float* %0, i64 4
  %8 = getelementptr inbounds float, float* %0, i64 5
  %9 = getelementptr inbounds float, float* %0, i64 6
  %10 = getelementptr inbounds float, float* %0, i64 7
  %11 = getelementptr inbounds float, float* %0, i64 8
  %12 = getelementptr inbounds float, float* %0, i64 9
  br label %.lr.ph.i3.i.i

.lr.ph.i3.i.i:                                    ; preds = %.preheader3.lr.ph.i10.i.i, %.lr.ph.i3.i.i
  %13 = phi float [ %83, %.lr.ph.i3.i.i ], [ 0.000000e+00, %.preheader3.lr.ph.i10.i.i ]
  %14 = phi float [ %77, %.lr.ph.i3.i.i ], [ 0.000000e+00, %.preheader3.lr.ph.i10.i.i ]
  %15 = phi float [ %71, %.lr.ph.i3.i.i ], [ 0.000000e+00, %.preheader3.lr.ph.i10.i.i ]
  %16 = phi float [ %65, %.lr.ph.i3.i.i ], [ 0.000000e+00, %.preheader3.lr.ph.i10.i.i ]
  %17 = phi float [ %59, %.lr.ph.i3.i.i ], [ 0.000000e+00, %.preheader3.lr.ph.i10.i.i ]
  %18 = phi float [ %53, %.lr.ph.i3.i.i ], [ 0.000000e+00, %.preheader3.lr.ph.i10.i.i ]
  %19 = phi float [ %47, %.lr.ph.i3.i.i ], [ 0.000000e+00, %.preheader3.lr.ph.i10.i.i ]
  %20 = phi float [ %41, %.lr.ph.i3.i.i ], [ 0.000000e+00, %.preheader3.lr.ph.i10.i.i ]
  %21 = phi float [ %35, %.lr.ph.i3.i.i ], [ 0.000000e+00, %.preheader3.lr.ph.i10.i.i ]
  %22 = phi float [ %29, %.lr.ph.i3.i.i ], [ 0.000000e+00, %.preheader3.lr.ph.i10.i.i ]
  %indvars.iv15.i.i.i = phi i64 [ %indvars.iv.next16.i.i.i, %.lr.ph.i3.i.i ], [ 0, %.preheader3.lr.ph.i10.i.i ]
  %23 = mul nuw nsw i64 %indvars.iv15.i.i.i, 10
  %24 = getelementptr inbounds float, float* %1, i64 %indvars.iv15.i.i.i
  %25 = getelementptr inbounds float, float* %2, i64 %23
  %26 = load float, float* %25, align 4
  %27 = load float, float* %24, align 4
  %28 = fmul reassoc nsz arcp contract float %26, %27
  %29 = fadd reassoc nsz arcp contract float %22, %28
  store float %29, float* %0, align 4
  %30 = or i64 %23, 1
  %31 = getelementptr inbounds float, float* %2, i64 %30
  %32 = load float, float* %31, align 4
  %33 = load float, float* %24, align 4
  %34 = fmul reassoc nsz arcp contract float %32, %33
  %35 = fadd reassoc nsz arcp contract float %21, %34
  store float %35, float* %4, align 4
  %36 = add nuw nsw i64 %23, 2
  %37 = getelementptr inbounds float, float* %2, i64 %36
  %38 = load float, float* %37, align 4
  %39 = load float, float* %24, align 4
  %40 = fmul reassoc nsz arcp contract float %38, %39
  %41 = fadd reassoc nsz arcp contract float %20, %40
  store float %41, float* %5, align 4
  %42 = add nuw nsw i64 %23, 3
  %43 = getelementptr inbounds float, float* %2, i64 %42
  %44 = load float, float* %43, align 4
  %45 = load float, float* %24, align 4
  %46 = fmul reassoc nsz arcp contract float %44, %45
  %47 = fadd reassoc nsz arcp contract float %19, %46
  store float %47, float* %6, align 4
  %48 = add nuw nsw i64 %23, 4
  %49 = getelementptr inbounds float, float* %2, i64 %48
  %50 = load float, float* %49, align 4
  %51 = load float, float* %24, align 4
  %52 = fmul reassoc nsz arcp contract float %50, %51
  %53 = fadd reassoc nsz arcp contract float %18, %52
  store float %53, float* %7, align 4
  %54 = add nuw nsw i64 %23, 5
  %55 = getelementptr inbounds float, float* %2, i64 %54
  %56 = load float, float* %55, align 4
  %57 = load float, float* %24, align 4
  %58 = fmul reassoc nsz arcp contract float %56, %57
  %59 = fadd reassoc nsz arcp contract float %17, %58
  store float %59, float* %8, align 4
  %60 = add nuw nsw i64 %23, 6
  %61 = getelementptr inbounds float, float* %2, i64 %60
  %62 = load float, float* %61, align 4
  %63 = load float, float* %24, align 4
  %64 = fmul reassoc nsz arcp contract float %62, %63
  %65 = fadd reassoc nsz arcp contract float %16, %64
  store float %65, float* %9, align 4
  %66 = add nuw nsw i64 %23, 7
  %67 = getelementptr inbounds float, float* %2, i64 %66
  %68 = load float, float* %67, align 4
  %69 = load float, float* %24, align 4
  %70 = fmul reassoc nsz arcp contract float %68, %69
  %71 = fadd reassoc nsz arcp contract float %15, %70
  store float %71, float* %10, align 4
  %72 = add nuw nsw i64 %23, 8
  %73 = getelementptr inbounds float, float* %2, i64 %72
  %74 = load float, float* %73, align 4
  %75 = load float, float* %24, align 4
  %76 = fmul reassoc nsz arcp contract float %74, %75
  %77 = fadd reassoc nsz arcp contract float %14, %76
  store float %77, float* %11, align 4
  %78 = add nuw nsw i64 %23, 9
  %79 = getelementptr inbounds float, float* %2, i64 %78
  %80 = load float, float* %79, align 4
  %81 = load float, float* %24, align 4
  %82 = fmul reassoc nsz arcp contract float %80, %81
  %83 = fadd reassoc nsz arcp contract float %13, %82
  store float %83, float* %12, align 4
  %indvars.iv.next16.i.i.i = add nuw nsw i64 %indvars.iv15.i.i.i, 1
  %exitcond18.i.i.i = icmp eq i64 %indvars.iv.next16.i.i.i, 84
  br i1 %exitcond18.i.i.i, label %_ZN12_GLOBAL__N_119libjit_matmul_innerILb0EEEviiiPKfiS2_iPfiS3_.exit.i, label %.lr.ph.i3.i.i

_ZN12_GLOBAL__N_119libjit_matmul_innerILb0EEEviiiPKfiS2_iPfiS3_.exit.i: ; preds = %.lr.ph.i3.i.i
  ret void
}

; Function Attrs: noinline norecurse nounwind
define internal fastcc void @libjit_stacked_kernel.6_13_specialized(float* nocapture, float* nocapture readonly) unnamed_addr #4 {
entry:
  %2 = load float, float* %0, align 4
  %3 = load float, float* %1, align 4
  %4 = fadd reassoc nsz arcp contract float %2, %3
  store float %4, float* %0, align 4
  %5 = getelementptr float, float* %0, i64 1
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds float, float* %1, i64 1
  %8 = load float, float* %7, align 4
  %9 = fadd reassoc nsz arcp contract float %6, %8
  store float %9, float* %5, align 4
  %10 = getelementptr float, float* %0, i64 2
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds float, float* %1, i64 2
  %13 = load float, float* %12, align 4
  %14 = fadd reassoc nsz arcp contract float %11, %13
  store float %14, float* %10, align 4
  %15 = getelementptr float, float* %0, i64 3
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds float, float* %1, i64 3
  %18 = load float, float* %17, align 4
  %19 = fadd reassoc nsz arcp contract float %16, %18
  store float %19, float* %15, align 4
  %20 = getelementptr float, float* %0, i64 4
  %21 = load float, float* %20, align 4
  %22 = getelementptr inbounds float, float* %1, i64 4
  %23 = load float, float* %22, align 4
  %24 = fadd reassoc nsz arcp contract float %21, %23
  store float %24, float* %20, align 4
  %25 = getelementptr float, float* %0, i64 5
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds float, float* %1, i64 5
  %28 = load float, float* %27, align 4
  %29 = fadd reassoc nsz arcp contract float %26, %28
  store float %29, float* %25, align 4
  %30 = getelementptr float, float* %0, i64 6
  %31 = load float, float* %30, align 4
  %32 = getelementptr inbounds float, float* %1, i64 6
  %33 = load float, float* %32, align 4
  %34 = fadd reassoc nsz arcp contract float %31, %33
  store float %34, float* %30, align 4
  %35 = getelementptr float, float* %0, i64 7
  %36 = load float, float* %35, align 4
  %37 = getelementptr inbounds float, float* %1, i64 7
  %38 = load float, float* %37, align 4
  %39 = fadd reassoc nsz arcp contract float %36, %38
  store float %39, float* %35, align 4
  %40 = getelementptr float, float* %0, i64 8
  %41 = load float, float* %40, align 4
  %42 = getelementptr inbounds float, float* %1, i64 8
  %43 = load float, float* %42, align 4
  %44 = fadd reassoc nsz arcp contract float %41, %43
  store float %44, float* %40, align 4
  %45 = getelementptr float, float* %0, i64 9
  %46 = load float, float* %45, align 4
  %47 = getelementptr inbounds float, float* %1, i64 9
  %48 = load float, float* %47, align 4
  %49 = fadd reassoc nsz arcp contract float %46, %48
  store float %49, float* %45, align 4
  ret void
}

attributes #0 = { argmemonly nounwind }
attributes #1 = { nounwind }
attributes #2 = { alwaysinline nounwind "no-frame-pointer-elim"="true" }
attributes #3 = { noinline nounwind "no-frame-pointer-elim"="true" }
attributes #4 = { noinline norecurse nounwind "no-frame-pointer-elim"="true" }

!llvm.ident = !{!0, !0, !0}
!llvm.module.flags = !{!1, !2, !3}

!0 = !{!"clang version 8.0.0-3~ubuntu18.04.2 (tags/RELEASE_800/final)"}
!1 = !{i32 2, !"Dwarf Version", i32 4}
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = distinct !{!4, !5, !6}
!5 = !{!"llvm.loop.vectorize.enable", i1 true}
!6 = !{!"llvm.loop.isvectorized", i32 1}
!7 = distinct !{!7, !5, !6}
!8 = !{!9}
!9 = distinct !{!9, !10}
!10 = distinct !{!10, !"LVerDomain"}
!11 = !{!12}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !6}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = !{!20}
!20 = distinct !{!20, !16}
!21 = !{!15, !18}
!22 = distinct !{!22, !6}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = !{!27}
!27 = distinct !{!27, !25}
!28 = !{!29}
!29 = distinct !{!29, !25}
!30 = !{!24, !27}
!31 = distinct !{!31, !6}
!32 = !{!33}
!33 = distinct !{!33, !34}
!34 = distinct !{!34, !"LVerDomain"}
!35 = !{!36}
!36 = distinct !{!36, !34}
!37 = distinct !{!37, !5, !6}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = !{!44}
!44 = distinct !{!44, !40}
!45 = !{!39, !42}
!46 = distinct !{!46, !6}
!47 = !{!48}
!48 = distinct !{!48, !49}
!49 = distinct !{!49, !"LVerDomain"}
!50 = !{!51}
!51 = distinct !{!51, !49}
!52 = !{!53}
!53 = distinct !{!53, !49}
!54 = !{!48, !51}
!55 = distinct !{!55, !6}
!56 = !{!57}
!57 = distinct !{!57, !58}
!58 = distinct !{!58, !"LVerDomain"}
!59 = !{!60}
!60 = distinct !{!60, !58}
!61 = distinct !{!61, !62}
!62 = !{!"llvm.loop.unroll.disable"}
!63 = distinct !{!63, !5, !6}
